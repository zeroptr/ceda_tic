
DECLARE EXTERNAL FUNCTION LTRIM
    CSTRING(80)
    RETURNS CSTRING(80) FREE_IT
    ENTRY_POINT 'IB_UDF_ltrim' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION RTRIM
    CSTRING(80)
    RETURNS CSTRING(80) FREE_IT
    ENTRY_POINT 'IB_UDF_rtrim' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION STRLEN
    CSTRING(32767)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'IB_UDF_strlen' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION SUBSTR
    CSTRING(80),
    SMALLINT,
    SMALLINT
    RETURNS CSTRING(80) FREE_IT
    ENTRY_POINT 'IB_UDF_substr' MODULE_NAME 'ib_udf';




/******************************************************************************/
/****                               Domains                                ****/
/******************************************************************************/

CREATE DOMAIN D_ACK AS
VARCHAR(100)
COLLATE PXW_TURK;

CREATE DOMAIN D_ACK30 AS
VARCHAR(30)
COLLATE PXW_TURK;

CREATE DOMAIN D_ACK50 AS
VARCHAR(50)
COLLATE PXW_TURK;

CREATE DOMAIN D_BARCODE AS
VARCHAR(30);

CREATE DOMAIN D_BOOLEAN AS
SMALLINT
NOT NULL
CHECK ((VALUE = 0) or (VALUE =1));

CREATE DOMAIN D_BORCALACAK AS
CHAR(1)
NOT NULL
CHECK ((VALUE = 'A') or (VALUE ='B'));

CREATE DOMAIN D_CHR1 AS
CHAR(1);

CREATE DOMAIN D_DKOD AS
VARCHAR(5)
DEFAULT 'YTL'
NOT NULL;

CREATE DOMAIN D_FLOAT AS
FLOAT;

CREATE DOMAIN D_GTIP AS
VARCHAR(20);

CREATE DOMAIN D_IDFIELD AS
INTEGER
DEFAULT 0
NOT NULL;

CREATE DOMAIN D_ILCESEHIR AS
VARCHAR(30)
COLLATE PXW_TURK;

CREATE DOMAIN D_INTEGER AS
INTEGER;

CREATE DOMAIN D_IO AS
CHAR(1)
NOT NULL
CHECK ((VALUE = 'G') or (VALUE ='C'));

CREATE DOMAIN D_KOD AS
VARCHAR(15);

CREATE DOMAIN D_MEMO AS
BLOB SUB_TYPE 1 SEGMENT SIZE 100;

CREATE DOMAIN D_MONEY AS
NUMERIC(18,4)
DEFAULT 0
NOT NULL;

CREATE DOMAIN D_MUHKOD AS
VARCHAR(30);

CREATE DOMAIN D_PK AS
VARCHAR(10);

CREATE DOMAIN D_SAATTIP AS
TIME;

CREATE DOMAIN D_SID AS
SMALLINT
NOT NULL;

CREATE DOMAIN D_SMALLINT AS
SMALLINT;

CREATE DOMAIN D_TARTIP AS
DATE;

CREATE DOMAIN D_TELNO AS
VARCHAR(20);

CREATE DOMAIN D_URUN_KOD AS
VARCHAR(35)
COLLATE PXW_TURK;



/******************************************************************************/
/****                              Generators                              ****/
/******************************************************************************/

CREATE GENERATOR GEN_ARACHAR;
SET GENERATOR GEN_ARACHAR TO 0;

CREATE GENERATOR GEN_CARIHAR;
SET GENERATOR GEN_CARIHAR TO 0;

CREATE GENERATOR GEN_CARIHAR_DOV;
SET GENERATOR GEN_CARIHAR_DOV TO 0;

CREATE GENERATOR GEN_CARI_SEVKID;
SET GENERATOR GEN_CARI_SEVKID TO 0;

CREATE GENERATOR GEN_CEK;
SET GENERATOR GEN_CEK TO 0;

CREATE GENERATOR GEN_CEKSENHAR;
SET GENERATOR GEN_CEKSENHAR TO 0;

CREATE GENERATOR GEN_CS_BORDRO;
SET GENERATOR GEN_CS_BORDRO TO 0;

CREATE GENERATOR GEN_DEKONT;
SET GENERATOR GEN_DEKONT TO 0;

CREATE GENERATOR GEN_DEKONT_AUT;
SET GENERATOR GEN_DEKONT_AUT TO 0;

CREATE GENERATOR GEN_DEKONT_D;
SET GENERATOR GEN_DEKONT_D TO 0;

CREATE GENERATOR GEN_DEKONT_D_AUT;
SET GENERATOR GEN_DEKONT_D_AUT TO 0;

CREATE GENERATOR GEN_FAT_IRS;
SET GENERATOR GEN_FAT_IRS TO 0;

CREATE GENERATOR GEN_ISN;
SET GENERATOR GEN_ISN TO 0;

CREATE GENERATOR GEN_KASAHAR;
SET GENERATOR GEN_KASAHAR TO 0;

CREATE GENERATOR GEN_KONT;
SET GENERATOR GEN_KONT TO 0;

CREATE GENERATOR GEN_MASRAFHAR;
SET GENERATOR GEN_MASRAFHAR TO 0;

CREATE GENERATOR GEN_MAZOT;
SET GENERATOR GEN_MAZOT TO 0;

CREATE GENERATOR GEN_PAKET;
SET GENERATOR GEN_PAKET TO 0;

CREATE GENERATOR GEN_PAKET_D;
SET GENERATOR GEN_PAKET_D TO 0;

CREATE GENERATOR GEN_PERSONELHAR;
SET GENERATOR GEN_PERSONELHAR TO 0;

CREATE GENERATOR GEN_PLASIYERHAR;
SET GENERATOR GEN_PLASIYERHAR TO 0;

CREATE GENERATOR GEN_PROJEHAR;
SET GENERATOR GEN_PROJEHAR TO 0;

CREATE GENERATOR GEN_SEFER;
SET GENERATOR GEN_SEFER TO 01;

CREATE GENERATOR GEN_SENET;
SET GENERATOR GEN_SENET TO 0;

CREATE GENERATOR GEN_SIPARIS;
SET GENERATOR GEN_SIPARIS TO 0;

CREATE GENERATOR GEN_SIPARIS_D;
SET GENERATOR GEN_SIPARIS_D TO 0;

CREATE GENERATOR GEN_SIPARIS_D_FAT;
SET GENERATOR GEN_SIPARIS_D_FAT TO 0;

CREATE GENERATOR GEN_URUNHAR;
SET GENERATOR GEN_URUNHAR TO 0;




CREATE GENERATOR GEN_ANT_MAIN;

CREATE GENERATOR GEN_ANT_DETAIL;



/******************************************************************************/
/****                              Exceptions                              ****/
/******************************************************************************/

CREATE EXCEPTION BHESAPKURFARK 'BANKA HESABININ PARA BIRIMI ILE ISLEM YAPILMAK ISTENEN PARA BIRIMI FARKLI..!';

CREATE EXCEPTION CARI_ISLEM_HATA 'Cari iþleminde hata oluþtu';

CREATE EXCEPTION DOVIZ_TIPI_YOK 'ÝÞLEM YAPMAK ÝSTEDÝÐÝNÝZ DOVÝZ KURU TÝPÝ YOK';

CREATE EXCEPTION DOVKURYOK 'Ýþlem tarihinin döviz kuru bilgileri girilmemiþ';

CREATE EXCEPTION FIYAT_HATA 'FÝYATTA HATA OLUÞTU';

CREATE EXCEPTION OLCU_BIRIM_DONUSTURULEMEZ 'ÖLÇÜ BÝRÝMLERI ARASINDA DÖNÜÞÜM YAPILAMAZ';



SET TERM ^ ; 



/******************************************************************************/
/****                          Stored Procedures                           ****/
/******************************************************************************/

CREATE PROCEDURE CARI_AY_LISTE (
    PRM_YIL INTEGER,
    PRM_AY INTEGER,
    PRM_DOVKOD VARCHAR(5),
    PRM_DEVIR INTEGER,
    PRM_SEFER_MAZOT INTEGER,
    PRM_BAS_TAR DATE,
    PRM_BIT_TAR DATE)
RETURNS (
    CARI_KOD VARCHAR(15),
    CARI_AD VARCHAR(50),
    AY INTEGER,
    BORC NUMERIC(15,4),
    ALACAK NUMERIC(15,4),
    BAKIYE NUMERIC(15,4),
    TIP VARCHAR(10))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CARI_BAUPDATE (
    PRM_CARI_KOD VARCHAR(15),
    PRM_TARIH DATE,
    PRM_DOV_BAZ_TAR DATE,
    PRM_DOVKOD VARCHAR(5),
    PRM_DOVKUR NUMERIC(18,4),
    PRM_TUTAR NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_TIP CHAR(1),
    ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT,
    PRM_LIMITASIMI SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CARI_DOV_ADDUPDATE (
    PRM_CARI_KOD VARCHAR(15),
    PRM_DOV_BAZ_TAR DATE,
    PRM_TIP CHAR(1),
    PRM_TUTAR NUMERIC(18,4),
    PRM_DOVKOD CHAR(5),
    PRM_DOVKUR NUMERIC(18,4),
    ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CARI_LISTE (
    DEVIR_KULLAN INTEGER,
    ILK_KOD VARCHAR(15),
    SON_KOD VARCHAR(15),
    IN_KOD VARCHAR(10000),
    KULLAN_TIP VARCHAR(1),
    DOV_KOD VARCHAR(15),
    GRUP_KOD VARCHAR(15))
RETURNS (
    PRM_CARI_SID SMALLINT,
    PRM_CARI_KOD VARCHAR(15),
    PRM_CARI_AD VARCHAR(50),
    PRM_CARI_BORC NUMERIC(15,4),
    PRM_CARI_ALACAK NUMERIC(15,4),
    PRM_CARI_DEV_BORC NUMERIC(15,4),
    PRM_CARI_DEV_ALACAK NUMERIC(15,4),
    PRM_CARI_BORC_BAKIYE NUMERIC(15,4),
    PRM_CARI_ALACAK_BAKIYE NUMERIC(15,4))
AS
BEGIN
  EXIT;
END^




CREATE PROCEDURE CARIHAR_AUD (
    PRM_BELGETUR INTEGER,
    PRM_BELGE_ID INTEGER,
    PRM_BELGE_SID INTEGER,
    PRM_SIRA_NO SMALLINT,
    PRM_CARI_KOD VARCHAR(15),
    PRM_BA CHAR(1),
    PRM_TARIH DATE,
    PRM_FIILI_TAR DATE,
    PRM_DOV_BAZ_TAR DATE,
    PRM_TUTAR NUMERIC(18,4),
    PRM_DOVKOD VARCHAR(5),
    PRM_DOVKUR NUMERIC(18,5),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_VADETAR DATE,
    PRM_ACIKLAMA VARCHAR(100),
    ISN INTEGER,
    PRM_SIL SMALLINT,
    PRM_MASRAF_MERK VARCHAR(15),
    PRM_KOD1 VARCHAR(15),
    PRM_KOD2 VARCHAR(15),
    PRM_KOD3 VARCHAR(15),
    PRM_KOD4 VARCHAR(15),
    PRM_PLASIYER_KOD VARCHAR(15),
    PRM_PROJE_KOD VARCHAR(15))
RETURNS (
    PRM_CARIHAR_ID INTEGER,
    PRM_CARIHAR_SID INTEGER,
    PRM_LIMITASIMI SMALLINT,
    PRM_OLDU SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CARIHAR_DOV_ADDUPDATE (
    PRM_CARIHARID INTEGER,
    PRM_CARIHAR_SID INTEGER,
    PRM_TUTAR NUMERIC(18,4),
    PRM_DOVKOD VARCHAR(5),
    PRM_DOVKUR NUMERIC(18,4),
    PRM_DOV_BAZ_TAR DATE,
    ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE CEKSENHAR_DUZELT
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DEKONT_SIL (
    PRM_BELGE_TUR INTEGER,
    PRM_DEKONT_ID INTEGER,
    PRM_DEKONT_SID INTEGER,
    PRM_ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE DEPO_URUN_BA_UPDATE (
    PRM_DEPO_KOD VARCHAR(15),
    PRM_URUN_KOD VARCHAR(35),
    PRM_TIP CHAR(1),
    PRM_TUTAR NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_MIKTAR NUMERIC(18,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE FACTORIAL (
    NUM INTEGER)
RETURNS (
    N_FACTORIAL DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GET_KARSI_AD (
    PRM_MC CHAR(1),
    PRM_KARSI_KOD VARCHAR(30))
RETURNS (
    PRM_KARSI_AD VARCHAR(50))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GET_PARAM (
    PRM_MODUL_ID INTEGER,
    PRM_PARAM_NAME VARCHAR(15))
RETURNS (
    PRM_DEGER VARCHAR(15))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GET_SAYACNO (
    PRM_SAYAC_ADI VARCHAR(15),
    PRM_ARTTIR SMALLINT)
RETURNS (
    PRM_DEGER INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GET_SERVER_DATE_TIME
RETURNS (
    SDATE DATE,
    STIME TIME,
    SDATETIME TIMESTAMP)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GET_URUN_FAT_BILGI (
    PRM_URUN_KOD VARCHAR(35),
    PRM_CARI_KOD VARCHAR(15),
    PRM_TIP SMALLINT,
    ISN INTEGER)
RETURNS (
    PRM_FIYAT NUMERIC(18,4),
    PRM_DOVKOD VARCHAR(5),
    PRM_URUN_AD VARCHAR(50),
    PRM_OLCUBIRIM VARCHAR(15),
    PRM_DEPO_KOD VARCHAR(15),
    PRM_DEPO_AD VARCHAR(50),
    PRM_KDV SMALLINT,
    PRM_KDV_DAHIL SMALLINT,
    PRM_OLDU SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GET_URUN_FIYAT (
    PRM_URUN_KOD VARCHAR(35),
    PRM_CARI_KOD VARCHAR(15),
    PRM_TIP SMALLINT,
    ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT,
    PRM_FIYAT NUMERIC(18,4),
    PRM_DOVKOD VARCHAR(5))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE GETDOVIZKUR (
    PRM_DOVKOD VARCHAR(5),
    PRM_TARIH DATE,
    PRM_TIP SMALLINT,
    ISN INTEGER)
RETURNS (
    PRM_KUR NUMERIC(18,4),
    PRM_OLDU SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE KASA_AY_ADDUPDATE (
    PRM_KASA_KOD VARCHAR(15),
    PRM_TARIH DATE,
    PRM_TIP CHAR(1),
    PRM_TUTAR_KASA_DOVKOD NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE KASA_BAUPDATE (
    PRM_KASA_KOD VARCHAR(15),
    PRM_TUTAR_KASA_DOVKOD NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_TIP CHAR(1),
    ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE KASA_MUHTELIF_SIL (
    PRM_BELGE_TUR INTEGER,
    PRM_KASAHAR_ID INTEGER,
    PRM_KASAHAR_SID INTEGER,
    PRM_ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE KUR_DONUSTUR (
    PRM_TARIH DATE,
    PRM_FROMKUR VARCHAR(5),
    PRM_TOKUR VARCHAR(5),
    PRM_TUTAR NUMERIC(18,4),
    PRM_SATIS SMALLINT,
    ISN INTEGER)
RETURNS (
    PRM_KUR NUMERIC(18,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE KURLU_DONUSTUR (
    PRM_TARIH DATE,
    PRM_FROMKUR VARCHAR(5),
    PRM_FROM_DOVKUR NUMERIC(18,4),
    PRM_TOKUR VARCHAR(5),
    PRM_TUTAR NUMERIC(18,4),
    PRM_SATIS SMALLINT,
    PRM_DOVKURLA_ISLE SMALLINT,
    ISN INTEGER)
RETURNS (
    PRM_KUR NUMERIC(18,4),
    PRM_OLDU SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE OLCU_BIRIM_DONUSTUR (
    PRM_FROM_BIRIM VARCHAR(15),
    PRM_FROM_BIRIM_DEGER NUMERIC(18,4),
    PRM_TO_BIRIM VARCHAR(15),
    ISN INTEGER)
RETURNS (
    PRM_BIRIM_DEGER NUMERIC(18,4),
    PRM_OLDU SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE PLASIYER_BA_UPD (
    PRM_PLASIYER_KOD VARCHAR(15),
    PRM_DOV_BAZ_TAR DATE,
    PRM_DOVKOD VARCHAR(5),
    PRM_DOVKUR NUMERIC(18,4),
    PRM_TUTAR NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_TIP CHAR(1),
    ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE PROJEHAR_AUD (
    PRM_BELGE_TUR INTEGER,
    PRM_BELGE_ID INTEGER,
    PRM_BELGE_SID INTEGER,
    PRM_SIRA_NO SMALLINT,
    PRM_PROJE_KOD VARCHAR(15),
    PRM_TARIH DATE,
    PRM_FIILI_TAR DATE,
    PRM_DOV_BAZ_TAR DATE,
    PRM_VADETAR DATE,
    PRM_TIP CHAR(1),
    PRM_DOVKOD CHAR(5),
    PRM_DOVKUR NUMERIC(18,4),
    PRM_TUTAR NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_SIL SMALLINT,
    PRM_ACIKLAMA VARCHAR(100),
    ISN INTEGER,
    PRM_MASRAF_MERK VARCHAR(15),
    PRM_KOD1 VARCHAR(15),
    PRM_KOD2 VARCHAR(15),
    PRM_KOD3 VARCHAR(15),
    PRM_KOD4 VARCHAR(15))
RETURNS (
    PRM_PROJEHAR_ID INTEGER,
    PRM_PROJEHAR_SID INTEGER,
    PRM_OLDU SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE SP_DMY (
    ADATE DATE)
RETURNS (
    ADAY INTEGER,
    AMONTH INTEGER,
    AYEAR INTEGER)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE URUN_BA_UPDATE (
    PRM_URUN_KOD VARCHAR(35),
    PRM_TIP CHAR(1),
    PRM_TUTAR NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_MIKTAR NUMERIC(18,4))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE URUNHAR_AUD (
    PRM_BELGETUR INTEGER,
    PRM_BELGE_ID INTEGER,
    PRM_BELGE_SID INTEGER,
    PRM_BELGE_SIRA_NO INTEGER,
    PRM_URUN_KOD VARCHAR(35),
    PRM_TIP CHAR(1),
    PRM_TARIH DATE,
    PRM_FIILI_TAR DATE,
    PRM_DOV_BAZ_TAR DATE,
    PRM_OLCUBIRIM VARCHAR(15),
    PRM_MIKTAR NUMERIC(18,4),
    PRM_DOVKOD VARCHAR(5),
    PRM_DOVKUR NUMERIC(18,4),
    PRM_TUTAR NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_BIRIM_FIY NUMERIC(18,4),
    PRM_BIRIM_FIY_VPB NUMERIC(18,4),
    PRM_ISKONTO_TUTAR NUMERIC(18,4),
    PRM_ISKONTO_TUTAR_VPB NUMERIC(18,4),
    PRM_DEPO_KOD VARCHAR(15),
    PRM_SIL SMALLINT,
    ISN INTEGER,
    PRM_MASRAF_MERK VARCHAR(15),
    PRM_KOD1 VARCHAR(15),
    PRM_KOD2 VARCHAR(15),
    PRM_KOD3 VARCHAR(15),
    PRM_KOD4 VARCHAR(15))
RETURNS (
    PRM_URUNHAR_ID INTEGER,
    PRM_URUNHAR_SID INTEGER,
    PRM_OLDU SMALLINT)
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WEB_CARIHAR (
    PRM_TARIH1 VARCHAR(10),
    PRM_TARIH2 VARCHAR(10),
    PRM_CARI_KOD VARCHAR(15))
RETURNS (
    TIP CHAR(10),
    ALACAK NUMERIC(18,2),
    BORC NUMERIC(18,2),
    PROJE_KOD VARCHAR(15),
    BELGE_TUR VARCHAR(50),
    ACIKLAMA VARCHAR(100),
    TARIH DATE,
    SUBE VARCHAR(10),
    DVR_BAKIYE NUMERIC(18,2),
    DVR_ALACAK NUMERIC(18,2),
    DVR_BORC NUMERIC(18,2))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WEB_CARIHAR_TOPLAM (
    PRM_TARIH1 VARCHAR(10),
    PRM_TARIH2 VARCHAR(10),
    PRM_AVANS VARCHAR(15),
    PRM_HAKEDIS VARCHAR(15))
RETURNS (
    GENEL_BAKIYE NUMERIC(18,2),
    GENEL_ALACAK NUMERIC(18,2),
    GENEL_BORC NUMERIC(18,2),
    HAK_BAKIYE NUMERIC(18,2),
    HAK_BORC NUMERIC(18,2),
    HAK_ALACAK NUMERIC(18,2),
    AVANS_BAKIYE NUMERIC(18,2),
    AVANS_ALACAK NUMERIC(18,2),
    AVANS_BORC NUMERIC(18,2))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WEB_PROJEHAR (
    PRM_PROJE_KOD VARCHAR(15))
RETURNS (
    TIP CHAR(10),
    ALACAK NUMERIC(18,2),
    BORC NUMERIC(18,2),
    PROJE_KOD VARCHAR(15),
    BELGE_TUR VARCHAR(50),
    ACIKLAMA VARCHAR(100),
    TARIH DATE,
    SUBE VARCHAR(10))
AS
BEGIN
  EXIT;
END^


CREATE PROCEDURE WRITE_ISN_ERR (
    ISN INTEGER,
    PROCEDURE_NAME VARCHAR(100),
    ERR_MESSAGE VARCHAR(300))
AS
BEGIN
  EXIT;
END^



SET TERM ; ^


/******************************************************************************/
/****                                Tables                                ****/
/******************************************************************************/



CREATE TABLE ARAC (
    ARAC_KOD                  D_KOD NOT NULL,
    ARAC_SID                  D_SID NOT NULL,
    PLAKA                     D_KOD NOT NULL,
    ARAC_TIP                  D_SMALLINT NOT NULL,
    OZ_MAL                    D_BOOLEAN NOT NULL,
    CARI_KOD                  D_KOD,
    ACIKLAMA                  D_ACK COLLATE PXW_TURK,
    BORC                      D_MONEY NOT NULL,
    ALACAK                    D_MONEY NOT NULL,
    AKTIF_DEGIL               D_BOOLEAN NOT NULL,
    YAKIT_LITRE               D_INTEGER,
    TRF_SIG_GEC_TAR           D_TARTIP,
    KASKO_SIG_GEC_TAR         D_TARTIP,
    PERSONEL_KOD              D_KOD,
    DORSE_KOD                 D_KOD,
    AS_ADISOYADI              D_ACK30 COLLATE PXW_TURK,
    AS_DOGUM_YERI             D_ACK30 COLLATE PXW_TURK,
    AS_NUFUS_IL               D_ILCESEHIR COLLATE PXW_TURK,
    AS_NUFUS_ILCE             D_ILCESEHIR COLLATE PXW_TURK,
    AS_DOGUM_TARIHI           D_TARTIP,
    AS_IKA_ADRES              D_ACK COLLATE PXW_TURK,
    AS_IKA_ADRES1             D_ACK COLLATE PXW_TURK,
    AS_TEL1                   D_TELNO,
    AS_TEL2                   D_TELNO,
    AS_SERI_NO                D_ACK30 COLLATE PXW_TURK,
    AS_MUYANE_GECERLILIK_SUR  D_TARTIP,
    DEVREDEN_BORC             D_MONEY NOT NULL,
    DEVREDEN_ALACAK           D_MONEY NOT NULL,
    RESIM                     VARCHAR(255) COLLATE PXW_TURK,
    KARA_LISTE                D_SMALLINT
);


CREATE TABLE ARAC_RUHSAT (
    ARAC_KOD               D_KOD NOT NULL,
    ARAC_SID               D_SID NOT NULL,
    IL                     D_ILCESEHIR COLLATE PXW_TURK,
    ILCE                   D_ILCESEHIR COLLATE PXW_TURK,
    TESCIL_SIRA_NO         D_ACK30 COLLATE PXW_TURK,
    TESCIL_TARIHI          D_TARTIP,
    PLAKA_NO               D_ACK30 COLLATE PXW_TURK,
    MARKASI                D_ACK30 COLLATE PXW_TURK,
    MODELI                 D_ACK30 COLLATE PXW_TURK,
    CINSI                  D_ACK30 COLLATE PXW_TURK,
    ARAZI                  D_BOOLEAN NOT NULL,
    TIPI                   D_ACK30 COLLATE PXW_TURK,
    RENGI                  D_ACK30 COLLATE PXW_TURK,
    MOTOR_NO               D_ACK30 COLLATE PXW_TURK,
    SASI_NO                D_ACK30 COLLATE PXW_TURK,
    RUHSAT_BILGILERI       D_ACK COLLATE PXW_TURK,
    SILINDIR_HACMI         D_FLOAT,
    MOTOR_GUCU             D_FLOAT,
    ISTIAP_HADDI           D_FLOAT,
    KISI                   D_FLOAT,
    IMALATCI_YERLI         D_BOOLEAN NOT NULL,
    KULLANIM_TIPI          D_INTEGER,
    YAKIT_TIPI             D_INTEGER,
    YUK_TASIMA             D_BOOLEAN NOT NULL,
    ROMORK_TAKMA           D_BOOLEAN NOT NULL,
    TAKSIMETRE             D_BOOLEAN NOT NULL,
    TAKOMETRE              D_BOOLEAN NOT NULL,
    NET_AGIRLIK            D_FLOAT NOT NULL,
    KATAR_AGIRLIGI         D_FLOAT,
    ROMORK_ISTIAPHAD       D_FLOAT,
    MUYANE_GECERLILIK_SUR  D_TARTIP,
    ONAYLAYAN_SICIL        D_ACK30 COLLATE PXW_TURK,
    SERI_G_NO              D_ACK30 COLLATE PXW_TURK
);


CREATE TABLE ARACHAR (
    ARACHAR_ID   D_IDFIELD NOT NULL,
    ARACHAR_SID  D_SID NOT NULL,
    ARAC_KOD     D_KOD NOT NULL,
    BA           D_BORCALACAK NOT NULL,
    TARIH        D_TARTIP NOT NULL,
    DOVKOD       D_DKOD NOT NULL,
    DOVKUR       D_MONEY NOT NULL,
    TUTAR        D_MONEY,
    TUTAR_VPB    D_MONEY NOT NULL,
    ACIKLAMA     D_ACK COLLATE PXW_TURK,
    BELGE_TUR    D_INTEGER NOT NULL,
    BELGE_ID     D_IDFIELD NOT NULL,
    BELGE_SID    D_SID NOT NULL,
    SIRA_NO      D_SMALLINT,
    MASRAF_MERK  D_KOD,
    KOD1         D_KOD,
    KOD2         D_KOD,
    KOD3         D_KOD,
    KOD4         D_KOD,
    DOV_BAZ_TAR  D_TARTIP
);


CREATE TABLE BELGE_YAZ (
    BELGE_TUR   D_IDFIELD,
    SIRA_NO     D_SMALLINT NOT NULL,
    SUBE_ID     INTEGER NOT NULL,
    DOSYA_PATH  VARCHAR(255),
    ACIKLAMA    D_ACK30 COLLATE PXW_TURK
);


CREATE TABLE BELGETUR (
    BELGE_TUR       D_IDFIELD NOT NULL,
    ADI             D_ACK,
    BELGE_KOD       D_KOD,
    REFERANS_TABLO  D_ACK
);


CREATE TABLE CARI (
    CARI_KOD         D_KOD NOT NULL,
    CARI_SID         D_SID NOT NULL,
    CARI_AD          D_ACK50,
    YETKISI          D_ACK50,
    VERDAIRE         VARCHAR(20),
    VERNO            VARCHAR(20),
    ADRES_1          D_ACK50,
    ADRES_2          D_ACK50,
    ILCE             D_ILCESEHIR,
    SEHIR            D_ILCESEHIR,
    POSTA_KOD        D_PK,
    TIP              D_SMALLINT DEFAULT 0 NOT NULL,
    TEL_NO_1         D_TELNO,
    TEL_NO_2         D_TELNO,
    FAX              D_TELNO,
    E_MAIL           D_ACK,
    WEB_ADDR         D_ACK DEFAULT 'http://',
    NOTES            D_MEMO,
    KREDILMT         D_MONEY,
    RISK             D_MONEY,
    BORC             D_MONEY,
    ALACAK           D_MONEY,
    ULKE             D_ILCESEHIR,
    YURTDISI         D_BOOLEAN,
    ISLEMTIP         D_BOOLEAN NOT NULL,
    MUHTELIF         D_BOOLEAN NOT NULL,
    DEVREDEN_BORC    D_MONEY NOT NULL,
    DEVREDEN_ALACAK  D_MONEY NOT NULL,
    DOVIZLI          D_BOOLEAN DEFAULT 0 NOT NULL,
    DOVKOD           D_DKOD NOT NULL
);


CREATE TABLE CARI_AY (
    CARI_KOD  D_KOD NOT NULL,
    DOVKOD    D_DKOD NOT NULL,
    YIL       D_INTEGER NOT NULL,
    AY        D_SMALLINT NOT NULL,
    BORC      D_MONEY,
    ALACAK    D_MONEY
);


CREATE TABLE CARI_DOV (
    CARI_KOD         D_KOD NOT NULL,
    DOVKOD           D_DKOD,
    KREDILMT         D_MONEY,
    RISK             D_MONEY,
    BORC             D_MONEY,
    ALACAK           D_MONEY,
    DEVREDEN_BORC    D_MONEY NOT NULL,
    DEVREDEN_ALACAK  D_MONEY NOT NULL
);


CREATE TABLE CARI_GRUP (
    CARI_GRUP_KOD  D_KOD NOT NULL,
    CARI_GRUP_SID  D_SID NOT NULL,
    CGADI          D_ACK50,
    CGACK          D_ACK,
    TIP            D_BOOLEAN
);


CREATE TABLE CARI_GRUP_UYE (
    CARI_GRUP_KOD  D_KOD NOT NULL,
    CARI_KOD       D_KOD NOT NULL,
    VARSAY         D_BOOLEAN
);


CREATE TABLE CARI_SEVKAD (
    CARI_SEVK_KOD  D_KOD NOT NULL,
    CARI_KOD       D_KOD NOT NULL,
    CARI_SID       D_SID NOT NULL,
    ADRES_1        D_ACK50,
    ADRES_2        D_ACK50
);


CREATE TABLE CARIHAR (
    CARIHAR_ID    D_IDFIELD NOT NULL,
    CARIHAR_SID   D_SID NOT NULL,
    CARI_KOD      D_KOD NOT NULL,
    TIP           D_BORCALACAK NOT NULL,
    BELGE_TUR     D_IDFIELD NOT NULL,
    BELGE_ID      D_IDFIELD NOT NULL,
    BELGE_SID     D_SID NOT NULL,
    SIRA_NO       D_SMALLINT NOT NULL,
    TARIH         D_TARTIP,
    FIILI_TAR     D_TARTIP,
    DOV_BAZ_TAR   D_TARTIP,
    VADETAR       D_TARTIP,
    DOVKOD        D_DKOD NOT NULL,
    DOVKUR        D_MONEY NOT NULL,
    TUTAR         D_MONEY,
    TUTAR_VPB     D_MONEY NOT NULL,
    ACIKLAMA      D_ACK,
    MASRAF_MERK   D_KOD,
    KOD1          D_KOD,
    KOD2          D_KOD,
    KOD3          D_KOD,
    KOD4          D_KOD,
    PLASIYER_KOD  D_KOD,
    PROJE_KOD     D_KOD
);


CREATE TABLE CARIHAR_DOV (
    CARIHAR_DOV_ID   D_IDFIELD NOT NULL,
    CARIHAR_DOV_SID  D_SID NOT NULL,
    CARIHAR_ID       D_IDFIELD NOT NULL,
    CARIHAR_SID      D_SID NOT NULL,
    DOVKOD           D_DKOD NOT NULL,
    TUTAR            D_MONEY
);


CREATE TABLE CEK (
    CEK_ID         D_IDFIELD NOT NULL,
    CEK_SID        D_SID NOT NULL,
    CARI_KOD       D_KOD NOT NULL,
    ISLEMTAR       D_TARTIP,
    FIILI_TAR      D_TARTIP,
    DOV_BAZ_TAR    D_TARTIP,
    TANZIMTAR      D_TARTIP,
    VADETAR        D_TARTIP,
    BANKA_KOD      D_KOD,
    CEK_SAHIBI     D_ACK50,
    BANKA_AD       D_ACK50,
    HESAP_NO       D_ACK50,
    CEK_NUM        VARCHAR(30),
    TUTAR          D_MONEY,
    DOVKUR         D_MONEY NOT NULL,
    DOVKOD         D_DKOD DEFAULT 'YTL' NOT NULL,
    DURUM          D_SMALLINT NOT NULL,
    YER_KOD        D_SMALLINT,
    TIP            D_SMALLINT,
    ACIKLAMA       D_ACK,
    ASIL           D_SMALLINT NOT NULL,
    ODEME_TAR      D_TARTIP,
    TUTAR_VPB      D_MONEY NOT NULL,
    PROJE_KOD      D_KOD,
    PLASIYER_KOD   D_KOD,
    MASRAF_MERK    D_KOD,
    KOD1           D_KOD,
    KOD2           D_KOD,
    KOD3           D_KOD,
    KOD4           D_KOD,
    CS_BORDRO_ID   D_IDFIELD NOT NULL,
    CS_BORDRO_SID  D_SID NOT NULL
);


CREATE TABLE CEKSENHAR (
    CEKSENHAR_ID         D_IDFIELD,
    CEKSENHAR_SID        D_IDFIELD,
    ISLEM_TAR            D_TARTIP,
    DOV_BAZ_TAR          D_TARTIP,
    CEKSEN               D_SMALLINT,
    BELGE_ID             D_IDFIELD,
    BELGE_SID            D_SID,
    ISLEM                D_SMALLINT,
    DOVKUR               D_MONEY NOT NULL,
    TUTAR_VPB            D_MONEY NOT NULL,
    KUR_FARKI            D_MONEY NOT NULL,
    CARI_KOD             D_KOD,
    PLASIYER_KOD         D_KOD,
    PROJE_KOD            D_KOD,
    CARIHAR_ACK          D_ACK50,
    YEVMIYE_ACK          D_ACK50,
    PROTESTO_MASRAF      D_MONEY NOT NULL,
    GENEL_GIDER          D_MONEY NOT NULL,
    GENEL_GIDER_MUH_KOD  D_MUHKOD,
    BORCALHESAP          D_KOD,
    MASRAF_MERK          D_KOD,
    KOD1                 D_KOD,
    KOD2                 D_KOD,
    KOD3                 D_KOD,
    KOD4                 D_KOD,
    KASA_KOD             D_KOD
);


CREATE TABLE DEKONT (
    DEKONT_ID             D_IDFIELD,
    DEKONT_SID            D_SID,
    TIP                   D_SMALLINT,
    ISLEM_TAR             D_TARTIP,
    DOV_BAZ_TAR           D_TARTIP,
    ACIKLAMA              D_ACK,
    MASRAF_MERK           D_KOD,
    KOD1                  D_KOD,
    KOD2                  D_KOD,
    KOD3                  D_KOD,
    KOD4                  D_KOD,
    PROJE_KOD             D_KOD,
    URUN_KOD              D_URUN_KOD COLLATE PXW_TURK,
    OLCUBIRIM             VARCHAR(15),
    MIKTAR                NUMERIC(18,4),
    DOVKOD                VARCHAR(5),
    DOVKUR                NUMERIC(18,4),
    TUTAR                 NUMERIC(18,4),
    TUTAR_VPB             NUMERIC(18,4),
    URUN_DOVKOD           VARCHAR(5),
    TUTAR_URUN_DOVKOD     NUMERIC(18,4),
    BIRIM_FIY             NUMERIC(18,4),
    BIRIM_FIY_VPB         NUMERIC(18,4),
    BIRIM_FIY_URN_DOVKOD  NUMERIC(18,4),
    OLCUBIRIM_URN_OB      VARCHAR(15),
    MIKTAR_URN_OB         NUMERIC(18,4),
    DEPO_KOD              VARCHAR(15),
    URUNHAR_ID            INTEGER,
    URUNHAR_SID           INTEGER,
    KDV                   INTEGER,
    KDV_TUTAR             NUMERIC(18,4),
    FIRE                  D_MONEY NOT NULL,
    NET_MIKTAR            D_MONEY NOT NULL,
    TIPI                  D_BORCALACAK,
    CARI_KOD              D_KOD
);


CREATE TABLE DEKONT_AUT (
    DEKONT_ID        D_IDFIELD,
    DEKONT_SID       D_SID,
    DEKONT_AUT_NAME  D_ACK50,
    ISLEM_TAR        D_TARTIP,
    DOV_BAZ_TAR      D_TARTIP,
    ACIKLAMA         D_ACK,
    MASRAF_MERK      D_KOD,
    KOD1             D_KOD,
    KOD2             D_KOD,
    KOD3             D_KOD,
    KOD4             D_KOD,
    PROJE_KOD        D_KOD
);


CREATE TABLE DEKONT_D (
    DEKONT_D_ID   D_IDFIELD NOT NULL,
    DEKONT_D_SID  D_SID NOT NULL,
    DEKONT_ID     D_IDFIELD NOT NULL,
    DEKONT_SID    D_SID NOT NULL,
    BA            D_BORCALACAK NOT NULL,
    MC            CHAR(1) NOT NULL,
    KARSI_KOD     D_MUHKOD NOT NULL,
    TUTAR         D_MONEY,
    DOVKOD        D_DKOD NOT NULL,
    DOVKUR        D_MONEY,
    TUTAR_VPB     D_MONEY,
    ACIKLAMA1     D_ACK,
    ACIKLAMA2     D_ACK,
    OLCUBIRIM     D_KOD,
    MIKTAR        D_MONEY,
    PROJE_KOD     D_KOD,
    BIRIMFIY      D_MONEY NOT NULL
);


CREATE TABLE DEKONT_D_AUT (
    DEKONT_D_ID   D_IDFIELD NOT NULL,
    DEKONT_D_SID  D_SID NOT NULL,
    DEKONT_ID     D_IDFIELD NOT NULL,
    DEKONT_SID    D_SID NOT NULL,
    BA            D_BORCALACAK NOT NULL,
    MC            CHAR(1) NOT NULL,
    KARSI_KOD     D_MUHKOD NOT NULL,
    TUTAR         D_MONEY,
    DOVKOD        D_DKOD NOT NULL,
    DOVKUR        D_MONEY,
    TUTAR_VPB     D_MONEY,
    ACIKLAMA1     D_ACK,
    ACIKLAMA2     D_ACK,
    OLCUBIRIM     D_KOD,
    MIKTAR        D_MONEY,
    PROJE_KOD     D_KOD,
    BIRIMFIY      D_MONEY NOT NULL
);


CREATE TABLE DEPO (
    DEPO_KOD  D_KOD NOT NULL,
    DEPO_SID  D_SID NOT NULL,
    ADI       D_ACK50,
    ADRESI_1  D_ACK50,
    ADRESI_2  D_ACK50,
    SEHIR     D_ILCESEHIR,
    ILCE      D_ILCESEHIR,
    POSTAKOD  D_PK,
    TEL_1     D_TELNO,
    TEL_2     D_TELNO,
    FAX       D_TELNO
);


CREATE TABLE DEPOURUN (
    DEPO_KOD           D_KOD NOT NULL,
    URUN_KOD           D_URUN_KOD NOT NULL,
    BORC               D_MONEY,
    ALACAK             D_MONEY,
    BORC_VPB           D_MONEY NOT NULL,
    ALACAK_VPB         D_MONEY NOT NULL,
    MIKTAR_BORC        D_MONEY NOT NULL,
    MIKTAR_ALACAK      D_MONEY NOT NULL,
    DEV_BORC           D_MONEY NOT NULL,
    DEV_ALACAK         D_MONEY NOT NULL,
    DEV_BORC_VPB       D_MONEY NOT NULL,
    DEV_ALACAK_VPB     D_MONEY NOT NULL,
    DEV_MIKTAR_BORC    D_MONEY NOT NULL,
    DEV_MIKTAR_ALACAK  D_MONEY NOT NULL
);


CREATE TABLE DOVKART (
    DOVKOD        D_DKOD NOT NULL,
    ADI           VARCHAR(30) NOT NULL,
    TAKIP         D_BOOLEAN NOT NULL,
    VPB           D_BOOLEAN NOT NULL,
    PARITE        D_BOOLEAN NOT NULL,
    PARITE_DEGER  NUMERIC(10,10)
);


CREATE TABLE DOVKUR (
    DOVKOD       D_DKOD NOT NULL,
    TARIH        D_TARTIP NOT NULL,
    ALISKUR      D_MONEY NOT NULL,
    SATISKUR     D_MONEY NOT NULL,
    EF_ALISKUR   D_MONEY NOT NULL,
    EF_SATISKUR  D_MONEY NOT NULL
);


CREATE TABLE FAT_IRS (
    FAT_IRS_SEP               D_SID NOT NULL,
    FAT_IRS_ID                D_IDFIELD NOT NULL,
    FAT_IRS_SID               D_SID NOT NULL,
    CARI_KOD                  D_KOD NOT NULL,
    FAT_IRS_SERI              D_KOD NOT NULL,
    BELGE_NO                  D_ACK50 NOT NULL,
    DOV_BAZ_TAR               D_TARTIP,
    TARIH                     D_TARTIP,
    REF_BELGE_TUR             D_SMALLINT,
    REF_BELGE_ID              D_IDFIELD NOT NULL,
    REF_BELGE_SID             D_SID NOT NULL,
    ACIKLAMA                  D_ACK,
    BRUT_TOP                  D_MONEY,
    NET_TOP                   D_MONEY,
    GENEL_TOP                 D_MONEY,
    KDV_TOP                   D_MONEY,
    TIP                       D_SMALLINT,
    FAT_IRS_TIP               D_SMALLINT,
    YAZILDI                   D_BOOLEAN DEFAULT 0,
    IPTAL                     D_BOOLEAN,
    DEPO_KOD                  D_KOD,
    SAAT                      D_SAATTIP,
    KALEM_ISKONTO_TOPLAM_VPB  D_MONEY NOT NULL,
    ISKONTO_TIP               D_SMALLINT,
    ISKONTO_ORAN              D_SMALLINT,
    ISKONTO_TUTAR_VPB         D_MONEY NOT NULL,
    ISKONTO_TOPLAM_VPB        D_MONEY NOT NULL,
    KDV1                      D_MONEY NOT NULL,
    KDV2                      D_MONEY NOT NULL,
    KDV3                      D_MONEY NOT NULL,
    KDV4                      D_MONEY NOT NULL,
    KDV5                      D_MONEY NOT NULL,
    OTV                       D_MONEY NOT NULL,
    VADE_GUN                  D_INTEGER,
    VADE_TARIH                D_TARTIP,
    KDV1_ORAN                 D_SMALLINT,
    KDV2_ORAN                 D_SMALLINT,
    KDV3_ORAN                 D_SMALLINT,
    KDV4_ORAN                 D_SMALLINT,
    KDV5_ORAN                 D_SMALLINT,
    ODEMETAR                  D_TARTIP,
    MUHTELIF                  D_BOOLEAN NOT NULL,
    KASA_KOD                  D_KOD,
    PLASIYER_KOD              D_KOD,
    PROJE_KOD                 D_KOD,
    MASRAF_MERK               D_KOD,
    KOD1                      D_KOD,
    KOD2                      D_KOD,
    KOD3                      D_KOD,
    KOD4                      D_KOD,
    YEV_ACIKLAMA              D_ACK50 COLLATE PXW_TURK,
    SECIM                     D_CHR1,
    KAPANDI                   D_CHR1,
    SEVK_ADRES_KOD            D_KOD
);


CREATE TABLE FAT_IRS_ACK (
    FAT_IRS_SEP     D_SID NOT NULL,
    FAT_IRS_ID      D_IDFIELD NOT NULL,
    FAT_IRS_SID     D_SID NOT NULL,
    ACK_30K_1       D_ACK30,
    ACK_30K_2       D_ACK30,
    ACK_30K_3       D_ACK30,
    ACK_50K_1       D_ACK50,
    ACK_50K_2       D_ACK50,
    ACK_50K_3       D_ACK50,
    ACK_50K_4       D_ACK50,
    ACK_50K_5       D_ACK50,
    ACK_100K_1      D_ACK,
    ACK_100K_2      D_ACK,
    ACK_100K_3      D_ACK,
    ACK_100K_4      D_ACK,
    ACK_100K_5      D_ACK,
    ACK_30K_1_CAP   D_ACK30,
    ACK_30K_2_CAP   D_ACK30,
    ACK_30K_3_CAP   D_ACK30,
    ACK_50K_1_CAP   D_ACK30,
    ACK_50K_2_CAP   D_ACK30,
    ACK_50K_3_CAP   D_ACK30,
    ACK_50K_4_CAP   D_ACK30,
    ACK_50K_5_CAP   D_ACK30,
    ACK_100K_1_CAP  D_ACK30,
    ACK_100K_2_CAP  D_ACK30,
    ACK_100K_3_CAP  D_ACK30,
    ACK_100K_4_CAP  D_ACK30,
    ACK_100K_5_CAP  D_ACK30
);


CREATE TABLE FAT_IRS_AKTAR (
    FAT_IRS_SEP  D_SID NOT NULL,
    FAT_IRS_ID   D_IDFIELD NOT NULL,
    FAT_IRS_SID  D_SID NOT NULL,
    TIP          D_SMALLINT,
    TARIH        TIMESTAMP
);


CREATE TABLE FAT_IRS_MUH_CARI (
    FAT_IRS_SEP  D_SID NOT NULL,
    FAT_IRS_ID   D_IDFIELD NOT NULL,
    FAT_IRS_SID  D_SID NOT NULL,
    CARI_AD      D_ACK50,
    YETKISI      D_ACK50,
    VERDAIRE     VARCHAR(20),
    VERNO        VARCHAR(20),
    ADRES_1      D_ACK50,
    ADRES_2      D_ACK50,
    ILCE         D_ILCESEHIR,
    SEHIR        D_ILCESEHIR,
    POSTA_KOD    D_PK,
    TEL_NO_1     D_TELNO,
    TEL_NO_2     D_TELNO,
    FAX          D_TELNO,
    E_MAIL       D_ACK
);


CREATE TABLE FAT_PARAMS (
    FAT_PARAMS_ID   D_SMALLINT NOT NULL,
    EK_ACK_KUL      D_BOOLEAN,
    ACK_30K_1_CAP   D_ACK30,
    ACK_30K_2_CAP   D_ACK30,
    ACK_30K_3_CAP   D_ACK30,
    ACK_50K_1_CAP   D_ACK30,
    ACK_50K_2_CAP   D_ACK30,
    ACK_50K_3_CAP   D_ACK30,
    ACK_50K_4_CAP   D_ACK30,
    ACK_50K_5_CAP   D_ACK30,
    ACK_100K_1_CAP  D_ACK30,
    ACK_100K_2_CAP  D_ACK30,
    ACK_100K_3_CAP  D_ACK30,
    ACK_100K_4_CAP  D_ACK30,
    ACK_100K_5_CAP  D_ACK30,
    ACK_30K_1_KUL   D_BOOLEAN NOT NULL,
    ACK_30K_2_KUL   D_BOOLEAN NOT NULL,
    ACK_30K_3_KUL   D_BOOLEAN NOT NULL,
    ACK_50K_1_KUL   D_BOOLEAN NOT NULL,
    ACK_50K_2_KUL   D_BOOLEAN NOT NULL,
    ACK_50K_3_KUL   D_BOOLEAN NOT NULL,
    ACK_50K_4_KUL   D_BOOLEAN NOT NULL,
    ACK_50K_5_KUL   D_BOOLEAN NOT NULL,
    ACK_100K_1_KUL  D_BOOLEAN NOT NULL,
    ACK_100K_2_KUL  D_BOOLEAN NOT NULL,
    ACK_100K_3_KUL  D_BOOLEAN NOT NULL,
    ACK_100K_4_KUL  D_BOOLEAN NOT NULL,
    ACK_100K_5_KUL  D_BOOLEAN NOT NULL,
    KAL_BAZ_ISK     D_BOOLEAN NOT NULL
);


CREATE TABLE FATURA_D (
    URUNHAR_ID            D_IDFIELD NOT NULL,
    URUNHAR_SID           D_SID NOT NULL,
    URUN_KOD              VARCHAR(35),
    TIP                   D_BORCALACAK NOT NULL,
    BELGE_TUR             D_IDFIELD NOT NULL,
    BELGE_ID              D_IDFIELD NOT NULL,
    BELGE_SID             D_SID NOT NULL,
    BELGE_SIRA_NO         D_INTEGER,
    TARIH                 DATE,
    FIILI_TAR             D_TARTIP,
    DOV_BAZ_TAR           D_TARTIP,
    OLCUBIRIM             D_KOD NOT NULL,
    MIKTAR                NUMERIC(18,4),
    DOVKOD                D_DKOD NOT NULL,
    DOVKUR                NUMERIC(18,4),
    TUTAR                 NUMERIC(18,4),
    TUTAR_VPB             NUMERIC(18,4),
    URUN_DOVKOD           D_DKOD NOT NULL,
    TUTAR_URUN_DOVKOD     NUMERIC(18,4),
    BIRIM_FIY             NUMERIC(18,4),
    BIRIM_FIY_VPB         NUMERIC(18,4),
    BIRIM_FIY_URN_DOVKOD  NUMERIC(18,4),
    ISKONTO_TUTAR         NUMERIC(18,4),
    ISKONTO_TUTAR_VPB     NUMERIC(18,4),
    OLCUBIRIM_URN_OB      D_KOD NOT NULL,
    MIKTAR_URN_OB         NUMERIC(18,4),
    DEPO_KOD              D_KOD,
    MASRAF_MERK           D_KOD,
    KOD1                  D_KOD,
    KOD2                  D_KOD,
    KOD3                  D_KOD,
    KOD4                  D_KOD,
    ISKONTO_TIP           D_SMALLINT,
    ISKONTO_ORAN          D_SMALLINT,
    FATURA_ID             D_IDFIELD NOT NULL,
    FATURA_SID            D_SID NOT NULL,
    IRSALIYE_ID           D_IDFIELD NOT NULL,
    IRSALIYE_SID          D_SID NOT NULL,
    KDV                   D_SMALLINT,
    KDV_TUTAR             NUMERIC(18,4),
    SECIM                 D_CHR1,
    BIRIM_FIY_URN_OB      NUMERIC(18,4),
    CIKIS_MIKTAR          NUMERIC(18,4),
    ACIKLAMA              VARCHAR(50) NOT NULL,
    SEFER_ID              D_IDFIELD NOT NULL,
    MAZOT_FISI_ID         D_IDFIELD NOT NULL,
    SEFER_BEKLEME         D_BOOLEAN NOT NULL,
    CINSI                 D_ACK30 COLLATE PXW_TURK,
SSEFER_BEKLEME         D_IDFIELD NOT NULL
);


CREATE TABLE ISN_ERRORS (
    ISN             D_IDFIELD,
    PROCEDURE_NAME  D_ACK,
    ERR_MESSAGE     VARCHAR(300),
    TARSAAT         TIMESTAMP,
    KULLANICI       D_KOD,
    OKUNDU          D_BOOLEAN DEFAULT 0 NOT NULL
);


CREATE TABLE KASA (
    KASA_KOD             D_KOD NOT NULL,
    KASA_SID             D_SID NOT NULL,
    ACIKLAMA             D_ACK50,
    DOVKOD               D_DKOD NOT NULL,
    BORC                 D_MONEY,
    ALACAK               D_MONEY,
    BORC_VPB             D_MONEY NOT NULL,
    ALACAK_VPB           D_MONEY NOT NULL,
    VARSAYILAN           D_BOOLEAN NOT NULL,
    DEVREDEN_BORC        D_MONEY NOT NULL,
    DEVREDEN_ALACAK      D_MONEY NOT NULL,
    DEVREDEN_BORC_VPB    D_MONEY NOT NULL,
    DEVREDEN_ALACAK_VPB  D_MONEY NOT NULL
);


CREATE TABLE KASA_AY (
    KASA_KOD    D_KOD NOT NULL,
    YIL         SMALLINT NOT NULL,
    AY          SMALLINT NOT NULL,
    BORC        D_MONEY,
    ALACAK      D_MONEY,
    BORC_VPB    D_MONEY NOT NULL,
    ALACAK_VPB  D_MONEY NOT NULL
);


CREATE TABLE KASAHAK (
    KULLANICI_ID   D_IDFIELD,
    KULLANICI_SID  D_SID,
    KASA_KOD       D_KOD NOT NULL,
    KASA_SID       D_SID,
    VARSAYILAN     D_BOOLEAN NOT NULL
);


CREATE TABLE KASAHAR (
    KASAHAR_ID    D_IDFIELD NOT NULL,
    KASAHAR_SID   D_SID NOT NULL,
    KASA_KOD      D_KOD NOT NULL,
    TARIH         D_TARTIP,
    DOV_BAZ_TAR   D_TARTIP,
    BELGE_TUR     D_IDFIELD NOT NULL,
    BELGE_ID      D_IDFIELD NOT NULL,
    BELGE_SID     D_SID NOT NULL,
    TIP           D_IO NOT NULL,
    ACIKLAMA      D_ACK50,
    KASADEGER     D_MONEY NOT NULL,
    ISLEM_TIP     D_SMALLINT NOT NULL,
    PROJE_KOD     D_KOD,
    PLASIYER_KOD  D_KOD,
    MC            CHAR(1),
    KARSIKOD      D_MUHKOD NOT NULL,
    SIRA_NO       D_INTEGER,
    DOVKOD        D_DKOD NOT NULL,
    DOVKUR        D_MONEY NOT NULL,
    TUTAR         D_MONEY NOT NULL,
    TUTAR_VPB     D_MONEY NOT NULL,
    OLCUBIRIM     D_KOD,
    MIKTAR        D_MONEY NOT NULL,
    MASRAF_MERK   D_KOD,
    KOD1          D_KOD,
    KOD2          D_KOD,
    KOD3          D_KOD,
    KOD4          D_KOD,
    YEVMIYE_ACK   D_ACK50 COLLATE PXW_TURK
);


CREATE TABLE KOMISYON (
    ID                   D_IDFIELD NOT NULL,
    SID                  D_SID NOT NULL,
    CARI_KOD             D_KOD,
    SEVK_ADRES_KOD       D_KOD,
    GONDEREN_FIRMA       D_ACK50,
    GON_FIR_ADRES1       D_ACK50,
    GON_FIR_ADRES2       D_ACK50,
    GON_FIR_TEL          D_TELNO,
    GON_FIR_TEL1         D_TELNO,
    GIDECEGI_YER         D_ACK50,
    YUK_CINSI            D_ACK30,
    YUK_KILO             D_MONEY,
    YUK_OLCU_BIR         D_KOD,
    YUK_OLCU_TIP         D_KOD,
    TOPLAM_UCRET         D_MONEY,
    KDV_DAHIL            D_BOOLEAN NOT NULL,
    KOMISYON_UCRET       D_MONEY,
    SOFOR_ADI_SOY        D_ACK50,
    SOFOR_ADRESI         D_ACK50,
    SOFOR_ADRESI1        D_ACK50 COLLATE PXW_TURK,
    SOFOR_TEL            D_TELNO,
    SOFOR_TEL1           D_TELNO,
    SOFOR_EHLIYET_NO     D_ACK30,
    SOFOR_VERGI_DA       D_ACK30,
    SOFOR_VERGI_DA_NO    D_ACK30 COLLATE PXW_TURK,
    ARAC_PLAKA           D_ACK30,
    ARAC_MARKA           D_ACK30,
    ARAC_MODEL           D_ACK30 COLLATE PXW_TURK,
    ARAC_SAHIBI          D_ACK50,
    ARAC_SAHIBI_ADRESI   D_ACK50,
    ARAC_SAHIBI_ADRESI1  D_ACK50 COLLATE PXW_TURK,
    ARAC_SAHIBI_TEL      D_TELNO,
    ARAC_SAHIBI_TEL1     D_TELNO,
    ARAC_RUHSAT_NO       D_ACK30,
    ACIKLAMA             VARCHAR(1000),
    TARIH                D_TARTIP,
    KULLANICI            D_ACK30,
    FIS_NO               D_ACK30,
    MASRAF_MERK          D_KOD,
    KOD1                 D_KOD,
    KOD2                 D_KOD,
    KOD3                 D_KOD,
    KOD4                 D_KOD,
    KASA_KOD             D_KOD,
    ARAC_KOD             D_KOD,
    SOFOR_KOD            D_KOD,
    RESIM                VARCHAR(255) COLLATE PXW_TURK,
    DORSE_PLAKA          D_ACK30 COLLATE PXW_TURK,
    SOFOR_KL             D_BOOLEAN,
    ARAC_KL              D_BOOLEAN,
    MUSTERI_KOM          D_MONEY
);


CREATE TABLE MASRAF (
    MASRAF_KOD       D_KOD NOT NULL,
    MASRAF_SID       D_SID NOT NULL,
    ADI              D_ACK50 NOT NULL,
    ACIKLAMA         D_ACK,
    BORC             D_MONEY NOT NULL,
    ALACAK           D_MONEY NOT NULL,
    DEVREDEN_BORC    D_MONEY NOT NULL,
    DEVREDEN_ALACAK  D_MONEY NOT NULL,
    DEVIR            D_BOOLEAN NOT NULL
);


CREATE TABLE MASRAF_GRUP (
    MASRAF_GRUP_KOD  D_KOD NOT NULL,
    MASRAF_GRUP_SID  D_SID NOT NULL,
    MASRAF_GRUP_ADI  D_ACK50,
    MASRAF_GRUP_ACK  D_ACK
);


CREATE TABLE MASRAF_GRUP_UYE (
    MASRAF_GRUP_KOD  D_KOD NOT NULL,
    MASRAF_KOD       D_KOD NOT NULL,
    VARSAY           D_BOOLEAN
);


CREATE TABLE MASRAFHAR (
    MASRAFHAR_ID   D_IDFIELD,
    MASRAFHAR_SID  D_SID,
    MASRAF_KOD     D_KOD NOT NULL,
    BA             CHAR(1) NOT NULL,
    BELGE_TUR      D_IDFIELD,
    BELGE_ID       D_IDFIELD,
    BELGE_SID      D_IDFIELD,
    SIRA_NO        D_SMALLINT NOT NULL,
    TARIH          D_TARTIP NOT NULL,
    DOV_BAZ_TAR    D_TARTIP NOT NULL,
    DOVKOD         D_DKOD,
    DOVKUR         D_MONEY,
    TUTAR          D_MONEY,
    TUTAR_VPB      D_MONEY,
    ACIKLAMA       D_ACK50 NOT NULL,
    MASRAF_MERK    D_KOD,
    KOD1           D_KOD,
    KOD2           D_KOD,
    KOD3           D_KOD,
    KOD4           D_KOD
);


CREATE TABLE MAZOT_FISI (
    MAZOT_FIS_ID          D_IDFIELD NOT NULL,
    MAZOT_FIS_SID         D_SID NOT NULL,
    ARAC_KOD              D_KOD NOT NULL,
    FIS_NO                VARCHAR(10) NOT NULL,
    TARIH                 D_TARTIP NOT NULL,
    SAAT                  D_SAATTIP,
    VEREN_PERSONEL_KOD    D_KOD,
    ALAN_PERSONEL_KOD     D_KOD,
    ALAN_CARI_KOD         D_KOD,
    MAZOTCU_CARI_KOD      D_KOD,
    KM                    D_INTEGER,
    LITRE                 D_INTEGER,
    LITRE_FIYAT           D_MONEY,
    DOVKOD                D_DKOD NOT NULL,
    DOV_BAZ_TAR           D_TARTIP,
    DOVKUR                D_MONEY NOT NULL,
    TUTAR                 D_MONEY,
    TUTAR_VPB             D_MONEY NOT NULL,
    ACIKLAMA              D_ACK COLLATE PXW_TURK,
    MASRAF_MERK           D_KOD,
    KOD1                  D_KOD,
    KOD2                  D_KOD,
    KOD3                  D_KOD,
    KOD4                  D_KOD,
    SEFER_ID              D_IDFIELD,
    ALIS_URUN_HAR_ID      D_IDFIELD NOT NULL,
    SECIM                 D_CHR1,
    ALIS_FATURASI_ALINDI  D_BOOLEAN NOT NULL
);


CREATE TABLE NETSIS_AKTARMA (
    ID               INTEGER NOT NULL,
    URUN_KOD         D_URUN_KOD NOT NULL,
    MASRAF_MERKEZI   D_KOD NOT NULL,
    YENI_URUN_KOD    D_URUN_KOD NOT NULL,
    NETSIS_URUN_KOD  D_ACK30
);


CREATE TABLE OLCUBIR (
    OLCUBIRIM   D_KOD NOT NULL,
    OLCU_TIP    D_KOD NOT NULL,
    DEGERTODOM  D_MONEY NOT NULL,
    DOMINANT    D_BOOLEAN DEFAULT 0
);


CREATE TABLE OLCUTIP (
    OLCU_TIP  D_KOD NOT NULL,
    ACK       D_ACK50
);


CREATE TABLE PAKET (
    PAKET_KOD  D_URUN_KOD NOT NULL,
    PAKET_SID  D_IDFIELD,
    PAKET_ADI  D_ACK50,
    BARKOD     D_BARCODE,
    ACIKLAMA   D_ACK50
);


CREATE TABLE PAKET_D (
    PAKET_KOD    D_URUN_KOD NOT NULL,
    PAKET_D_ID   D_IDFIELD NOT NULL,
    PAKET_D_SID  D_IDFIELD,
    URUN_KOD     D_URUN_KOD,
    OLCU_BIRIM   D_KOD,
    MIKTAR       D_MONEY
);


CREATE TABLE PARAMETERS (
    SUBE_ID     D_SID NOT NULL,
    MODUL_ID    D_IDFIELD,
    PARAM_NAME  D_KOD NOT NULL,
    DEGER       D_KOD,
    PARAM_ACK   VARCHAR(250),
    KODLAMA     D_BOOLEAN NOT NULL
);


CREATE TABLE PERSONEL (
    PERSONEL_KOD       D_KOD NOT NULL,
    PERSONEL_SID       D_SID NOT NULL,
    ADI_SOYADI         D_ACK30,
    SICIL_NO           D_ACK30,
    SSK_NO             D_ACK30,
    GIRIS_TARIH        D_TARTIP,
    CIKIC_TARIH        D_TARTIP,
    DOGUM_TARIH        D_TARTIP,
    DOGUM_YER          D_ACK30,
    CINSIYET           D_CHR1,
    TAHSIL             D_CHR1,
    EVLI               D_CHR1,
    GOREVI             D_ACK30,
    VERGI_NO           VARCHAR(20),
    VERGI_DAIRE        VARCHAR(20),
    VERGI_KARNE_TARIH  D_TARTIP,
    TEL_NO             D_TELNO,
    LISTEDEN_CIKAR     D_BOOLEAN,
    BORC               D_MONEY,
    ALACAK             D_MONEY,
    DEVREDEN_BORC      D_MONEY NOT NULL,
    DEVREDEN_ALACAK    D_MONEY NOT NULL
);


CREATE TABLE PERSONEL_HAR (
    PERSONELHAR_ID   D_IDFIELD NOT NULL,
    PERSONELHAR_SID  D_SID NOT NULL,
    PERSONEL_KOD     D_KOD NOT NULL,
    BA               D_BORCALACAK NOT NULL,
    TARIH            D_TARTIP NOT NULL,
    DOVKOD           D_DKOD NOT NULL,
    DOVKUR           D_MONEY NOT NULL,
    TUTAR            D_MONEY,
    TUTAR_VPB        D_MONEY NOT NULL,
    ACIKLAMA         D_ACK COLLATE PXW_TURK,
    BELGE_TUR        D_INTEGER NOT NULL,
    BELGE_ID         D_IDFIELD NOT NULL,
    BELGE_SID        D_SID NOT NULL,
    SIRA_NO          D_SMALLINT,
    MASRAF_MERK      D_KOD,
    KOD1             D_KOD,
    KOD2             D_KOD,
    KOD3             D_KOD,
    KOD4             D_KOD,
    DOV_BAZ_TAR      D_TARTIP
);


CREATE TABLE PLASIYER (
    PLASIYER_KOD         D_KOD NOT NULL,
    PLASIYER_SID         D_SID NOT NULL,
    ADISOY               D_ACK NOT NULL,
    FIRMA_ID             D_IDFIELD NOT NULL,
    TELNO_1              D_TELNO,
    TELNO_2              D_TELNO,
    FAX                  D_TELNO,
    ADRES_1              D_ACK50,
    ADRES_2              D_ACK50,
    ILCE                 D_ILCESEHIR,
    SEHIR                D_ILCESEHIR,
    POSTAKOD             D_PK,
    EMAIL                D_ACK,
    WEBADDR              D_ACK,
    DOVKOD               D_DKOD NOT NULL,
    BORC                 D_MONEY NOT NULL,
    ALACAK               D_MONEY NOT NULL,
    BORC_VPB             D_MONEY NOT NULL,
    ALACAK_VPB           D_MONEY NOT NULL,
    PASIF                D_BOOLEAN NOT NULL,
    DEVREDEN_BORC        D_MONEY NOT NULL,
    DEVREDEN_ALACAK      D_MONEY NOT NULL,
    DEVREDEN_BORC_VPB    D_MONEY NOT NULL,
    DEVREDEN_ALACAK_VPB  D_MONEY NOT NULL
);


CREATE TABLE PROJE (
    PROJE_KOD            D_KOD NOT NULL,
    PROJE_SID            D_SID NOT NULL,
    PROJE_AD             D_ACK50 NOT NULL,
    ACIKLAMA             D_ACK,
    DOVKOD               D_DKOD NOT NULL,
    BORC                 D_MONEY,
    ALACAK               D_MONEY,
    BORC_VPB             D_MONEY NOT NULL,
    ALACAK_VPB           D_MONEY NOT NULL,
    KAPANDI              D_BOOLEAN NOT NULL,
    DEVREDEN_BORC        D_MONEY NOT NULL,
    DEVREDEN_ALACAK      D_MONEY NOT NULL,
    DEVREDEN_BORC_VPB    D_MONEY NOT NULL,
    DEVREDEN_ALACAK_VPB  D_MONEY NOT NULL
);


CREATE TABLE PROJEHAR (
    PROJEHAR_ID         D_IDFIELD NOT NULL,
    PROJEHAR_SID        D_SID NOT NULL,
    PROJE_KOD           D_KOD NOT NULL,
    BELGE_TUR           D_IDFIELD NOT NULL,
    BELGE_ID            D_IDFIELD NOT NULL,
    BELGE_SID           D_SID NOT NULL,
    SIRA_NO             D_SMALLINT NOT NULL,
    TARIH               D_TARTIP NOT NULL,
    FIILI_TAR           D_TARTIP,
    DOV_BAZ_TAR         D_TARTIP,
    VADETAR             D_TARTIP,
    TIP                 D_BORCALACAK NOT NULL,
    DOVKOD              D_DKOD NOT NULL,
    TUTAR               D_MONEY NOT NULL,
    ACIKLAMA            D_ACK NOT NULL,
    DOVKUR              D_MONEY NOT NULL,
    TUTAR_PROJE_DOVKOD  D_MONEY NOT NULL,
    TUTAR_VPB           D_MONEY NOT NULL,
    MASRAF_MERK         D_KOD,
    KOD1                D_KOD,
    KOD2                D_KOD,
    KOD3                D_KOD,
    KOD4                D_KOD
);


CREATE TABLE RAP_KOD (
    RAP_KOD_TIP  D_SMALLINT NOT NULL,
    KOD          D_KOD NOT NULL,
    ACIKLAMA     D_ACK
);


CREATE TABLE RAP_KOD_PARAMS (
    BELGE        D_ACK30 NOT NULL,
    MASRAF_MERK  D_BOOLEAN,
    KOD1         D_BOOLEAN,
    KOD2         D_BOOLEAN,
    KOD3         D_BOOLEAN NOT NULL,
    KOD4         D_BOOLEAN NOT NULL,
    ACIKLAMA     VARCHAR(255)
);


CREATE TABLE SAYACLAR (
    SAYAC_ADI  D_KOD NOT NULL,
    SUBE_ID    D_SID NOT NULL,
    DEGER      D_INTEGER NOT NULL
);


CREATE TABLE SAYACLAR_NU (
    SUBE_ID    D_SID NOT NULL,
    SAYAC_ADI  D_KOD NOT NULL,
    DEGER      D_INTEGER NOT NULL
);


CREATE TABLE SEFER (
    SEFER_ID                  D_IDFIELD NOT NULL,
    SEFER_SID                 D_SID NOT NULL,
    SEFER_SAY                 D_SMALLINT,
    ARAC_KOD                  D_KOD NOT NULL,
    ALICI_KOD                 D_KOD NOT NULL,
    SATICI_KOD                D_KOD,
    PERSONEL_KOD              D_KOD,
    OLCU_TIP                  D_KOD NOT NULL,
    OLCU_BIRIM                D_KOD,
    TASINAN_ESYA              D_ACK30 COLLATE PXW_TURK,
    BAS_TAR                   D_TARTIP NOT NULL,
    BIT_TAR                   D_TARTIP NOT NULL,
    CIK_YER                   D_ACK30 COLLATE PXW_TURK,
    BIT_YER                   D_ACK30 COLLATE PXW_TURK,
    ALICI_BORC_BIRIM_FIY      D_MONEY NOT NULL,
    ALICI_B_DOVKOD            D_DKOD NOT NULL,
    ALICI_BORC                D_MONEY NOT NULL,
    ALICI_BORC_VPB            D_MONEY NOT NULL,
    SATICI_ALACAK_BIRIM_FIY   D_MONEY NOT NULL,
    SATICI_A_DOVKOD           D_DKOD,
    SATICI_ALACAK             D_MONEY NOT NULL,
    SATICI_ALACAK_VPB         D_MONEY NOT NULL,
    BEKLEME_FAT_VAR           D_BOOLEAN NOT NULL,
    BEKLEME_FAT_TUTAR         D_MONEY NOT NULL,
    BEKLEME_FAT_DOV_KOD       D_DKOD NOT NULL,
    BEKLEME_FAT_VPB           D_MONEY NOT NULL,
    SEFER_NOTLARI             D_ACK COLLATE PXW_TURK,
    ALICI_B_DOV_BAZ_TAR       D_TARTIP,
    SATICI_A_DOV_BAZ_TAR      D_TARTIP,
    BEKLEME_FAT_DOV_BAZ_TAR   D_TARTIP,
    ALICI_B_DOVKUR            D_MONEY NOT NULL,
    SATICI_A_DOVKUR           D_MONEY NOT NULL,
    BEKLEME_FAT_DOVKUR        D_MONEY NOT NULL,
    MASRAF_MERK               D_KOD,
    KOD1                      D_KOD,
    KOD2                      D_KOD,
    KOD3                      D_KOD,
    KOD4                      D_KOD,
    SEFER_TAMAMLANDI          D_BOOLEAN NOT NULL,
    DORSE_KOD                 D_KOD,
    SECIM                     D_CHR1,
    MIKTAR                    D_MONEY NOT NULL,
    SEFER_ALIS_FAT_ALINDI     D_BOOLEAN NOT NULL,
    ALIS_URUN_HAR_ID          D_IDFIELD NOT NULL,
    SEFER_SATIS_FAT_KESILDI   D_BOOLEAN NOT NULL,
    BEKLEME_FATURASI_KESILDI  D_BOOLEAN NOT NULL,
    SATIS_URUN_HAR_ID         D_IDFIELD NOT NULL,
    BEK_FAT_URUN_HAR_ID       D_IDFIELD NOT NULL,
    FATURA_MIK_SEF            D_INTEGER NOT NULL,
    ESYA_ID                   D_IDFIELD,
    KONTEYNER_NO              D_ACK50 COLLATE PXW_TURK,
SBEKLEME_FAT_VAR           D_BOOLEAN NOT NULL,
SBEKLEME_FAT_TUTAR         D_MONEY NOT NULL,
SBEKLEME_FAT_DOV_KOD       D_DKOD NOT NULL,
SBEKLEME_FAT_VPB           D_MONEY NOT NULL,
SBEKLEME_FAT_DOV_BAZ_TAR   D_TARTIP,
SBEKLEME_FAT_DOVKUR        D_MONEY NOT NULL,
SBEKLEME_FATURASI_KESILDI  D_BOOLEAN NOT NULL,
SBEK_FAT_URUN_HAR_ID       D_IDFIELD NOT NULL,
SEFER_TAKIP_ID             D_INTEGER,
YUKLEYICI_FIRMA D_ACK30 COLLATE PXW_TURK
);





CREATE TABLE SEFER_TAKIP (
    SEFER_TAKIP_ID          D_IDFIELD NOT NULL,
    SEFER_TAKIP_SID         D_SID,
    GUN_SIRA                D_IDFIELD,
    YUKLEME_TARIHI          D_TARTIP,
    GIRIS_TARIHI            D_TARTIP,
    CEKICI                  D_KOD,
    DORSE                   D_KOD,
    INDIREN                 D_KOD,
    KIRALIK                 D_KOD,
    GIDECEGI_YER            D_ACK30 COLLATE PXW_TURK,
    YUKLEYICI_FIRMA         D_ACK30 COLLATE PXW_TURK,
    KONT_ALIS_YERI          D_ACK30 COLLATE PXW_TURK,
    KONT_TESLIM             D_ACK30 COLLATE PXW_TURK,
    NEVI                    D_INTEGER,
    KUMPANYA                D_ACK30 COLLATE PXW_TURK,
    BOOKING_NO              D_ACK30 COLLATE PXW_TURK,
    KONTROL_NO              D_ACK30 COLLATE PXW_TURK,
    MUHUR_NO                D_ACK30 COLLATE PXW_TURK,
    GONDEREN_FIRMA          D_KOD,
    GEMI_ADI                D_ACK30 COLLATE PXW_TURK,
    TAHLIYE_LIMANI          D_ACK30 COLLATE PXW_TURK,
    FATURA_NO               D_ACK30 COLLATE PXW_TURK,
    FATURA_TUTAR            D_MONEY,
    SATICI_FATURA_TUTAR     D_MONEY,
    SEFER_TAMAMLANDI        D_BOOLEAN,
    SATIS_FATURASI_KESILDI  D_BOOLEAN,
    ALIS_FATURASI_ALINDI    D_BOOLEAN,
    PERSONEL_KOD            D_KOD,
    SEFERLESTI              D_BOOLEAN,
    SEFER_ID                D_INTEGER,
    KONT_ALINDI             D_BOOLEAN,
    KIRALIK_BILDIRILDI      D_BOOLEAN,
    FIRMAYA_BILDIRILDI      D_BOOLEAN,
    FIRMA_EKKOD             D_ACK30 COLLATE PXW_TURK,
    ACIKLAMA                D_ACK COLLATE PXW_TURK,
    BEKLEME_FAT_VAR         D_BOOLEAN,
    BEKLEME_FAT_TUTAR       D_MONEY,
    BEKLEME_FAT_KESILDI     D_BOOLEAN,
    SBEKLEME_FAT_VAR        D_BOOLEAN,
    SBEKLEME_FAT_TUTAR      D_MONEY,
    SBEKLEME_FAT_KESILDI    D_BOOLEAN

);


CREATE TABLE SEFER_KONT (
    KONT_ID   D_IDFIELD NOT NULL,
    SEFER_ID  D_IDFIELD,
    KONT_NO   D_ACK30,
    TIP       D_INTEGER
);


CREATE TABLE SENET (
    SENET_ID       D_IDFIELD NOT NULL,
    SENET_SID      D_SID NOT NULL,
    CARI_KOD       D_KOD NOT NULL,
    ISLEMTAR       D_TARTIP,
    FIILI_TAR      D_TARTIP,
    DOV_BAZ_TAR    D_TARTIP,
    SENET_SAHIBI   D_ACK50,
    TANZIMTAR      D_TARTIP,
    VADETAR        D_TARTIP,
    ODEME_TAR      D_TARTIP,
    TANZIM_YER     D_ACK50,
    KEFIL_1        D_ACK50,
    KEFIL_2        D_ACK50,
    TUTAR          D_MONEY,
    DOVKUR         D_MONEY NOT NULL,
    DOVKOD         D_DKOD DEFAULT 'YTL' NOT NULL,
    DURUM          D_SMALLINT,
    YER_KOD        D_SMALLINT,
    TIP            D_SMALLINT,
    ACIKLAMA       D_ACK,
    ASIL           D_SMALLINT NOT NULL,
    TUTAR_VPB      D_MONEY NOT NULL,
    PROJE_KOD      D_KOD,
    PLASIYER_KOD   D_KOD,
    MASRAF_MERK    D_KOD,
    KOD1           D_KOD,
    KOD2           D_KOD,
    KOD3           D_KOD,
    KOD4           D_KOD,
    CS_BORDRO_ID   D_IDFIELD NOT NULL,
    CS_BORDRO_SID  D_SID NOT NULL
);


CREATE TABLE SIPARIS (
    FAT_IRS_SEP               D_SID NOT NULL,
    FAT_IRS_ID                D_IDFIELD NOT NULL,
    FAT_IRS_SID               D_SID NOT NULL,
    CARI_KOD                  D_KOD NOT NULL,
    FAT_IRS_SERI              D_KOD NOT NULL,
    BELGE_NO                  D_ACK50 NOT NULL,
    DOV_BAZ_TAR               D_TARTIP,
    TARIH                     D_TARTIP,
    REF_BELGE_TUR             D_SMALLINT,
    REF_BELGE_ID              D_IDFIELD NOT NULL,
    REF_BELGE_SID             D_SID NOT NULL,
    ACIKLAMA                  D_ACK,
    BRUT_TOP                  D_MONEY,
    NET_TOP                   D_MONEY,
    GENEL_TOP                 D_MONEY,
    KDV_TOP                   D_MONEY,
    TIP                       D_SMALLINT,
    FAT_IRS_TIP               D_SMALLINT,
    YAZILDI                   D_BOOLEAN DEFAULT 0,
    IPTAL                     D_BOOLEAN,
    DEPO_KOD                  D_KOD,
    SAAT                      D_SAATTIP,
    KALEM_ISKONTO_TOPLAM_VPB  D_MONEY NOT NULL,
    ISKONTO_TIP               D_SMALLINT,
    ISKONTO_ORAN              D_SMALLINT,
    ISKONTO_TUTAR_VPB         D_MONEY NOT NULL,
    ISKONTO_TOPLAM_VPB        D_MONEY NOT NULL,
    KDV1                      D_MONEY NOT NULL,
    KDV2                      D_MONEY NOT NULL,
    KDV3                      D_MONEY NOT NULL,
    KDV4                      D_MONEY NOT NULL,
    KDV5                      D_MONEY NOT NULL,
    OTV                       D_MONEY NOT NULL,
    VADE_GUN                  D_INTEGER,
    VADE_TARIH                D_TARTIP,
    KDV1_ORAN                 D_SMALLINT,
    KDV2_ORAN                 D_SMALLINT,
    KDV3_ORAN                 D_SMALLINT,
    KDV4_ORAN                 D_SMALLINT,
    KDV5_ORAN                 D_SMALLINT,
    ODEMETAR                  D_TARTIP,
    MUHTELIF                  D_BOOLEAN NOT NULL,
    KASA_KOD                  D_KOD,
    PLASIYER_KOD              D_KOD,
    PROJE_KOD                 D_KOD,
    MASRAF_MERK               D_KOD,
    KOD1                      D_KOD,
    KOD2                      D_KOD,
    KOD3                      D_KOD,
    KOD4                      D_KOD,
    YEV_ACIKLAMA              D_ACK50 COLLATE PXW_TURK,
    SECIM                     D_SMALLINT
);


CREATE TABLE SIPARIS_D (
    URUNHAR_ID            D_IDFIELD NOT NULL,
    URUNHAR_SID           D_SID NOT NULL,
    URUN_KOD              D_URUN_KOD NOT NULL,
    TIP                   D_BORCALACAK NOT NULL,
    BELGE_TUR             D_IDFIELD NOT NULL,
    BELGE_ID              D_IDFIELD NOT NULL,
    BELGE_SID             D_SID NOT NULL,
    BELGE_SIRA_NO         D_INTEGER,
    TARIH                 D_TARTIP NOT NULL,
    FIILI_TAR             D_TARTIP,
    DOV_BAZ_TAR           D_TARTIP,
    OLCUBIRIM             D_KOD NOT NULL,
    MIKTAR                D_MONEY NOT NULL,
    DOVKOD                D_DKOD NOT NULL,
    DOVKUR                D_MONEY NOT NULL,
    TUTAR                 D_MONEY NOT NULL,
    TUTAR_VPB             D_MONEY NOT NULL,
    URUN_DOVKOD           D_DKOD NOT NULL,
    TUTAR_URUN_DOVKOD     D_MONEY,
    BIRIM_FIY             D_MONEY NOT NULL,
    BIRIM_FIY_VPB         D_MONEY NOT NULL,
    BIRIM_FIY_URN_DOVKOD  D_MONEY NOT NULL,
    ISKONTO_TUTAR         D_MONEY NOT NULL,
    ISKONTO_TUTAR_VPB     D_MONEY NOT NULL,
    OLCUBIRIM_URN_OB      D_KOD NOT NULL,
    MIKTAR_URN_OB         D_MONEY NOT NULL,
    DEPO_KOD              D_KOD,
    MASRAF_MERK           D_KOD,
    KOD1                  D_KOD,
    KOD2                  D_KOD,
    KOD3                  D_KOD,
    KOD4                  D_KOD,
    ACIKLAMA              D_ACK50 NOT NULL COLLATE PXW_TURK,
    ISKONTO_TIP           D_SMALLINT,
    ISKONTO_ORAN          D_SMALLINT,
    FAT_IRS_SEP           D_SID NOT NULL,
    FATURA_ID             D_IDFIELD NOT NULL,
    FATURA_SID            D_SID NOT NULL,
    IRSALIYE_ID           D_IDFIELD NOT NULL,
    IRSALIYE_SID          D_SID NOT NULL,
    KDV                   D_SMALLINT,
    KDV_TUTAR             D_MONEY NOT NULL,
    SECIM                 D_SMALLINT,
    KAPANDI               D_SMALLINT,
    AKTARILAN_MIKTAR      D_FLOAT
);


CREATE TABLE SIPARIS_D_FAT (
    SIPARIS_D_FAT_ID  D_IDFIELD NOT NULL,
    SIPARIS_ID        D_IDFIELD NOT NULL,
    SIPARISD_ID       D_IDFIELD NOT NULL,
    MIKTAR            D_MONEY NOT NULL,
    FATURA_ID         D_IDFIELD NOT NULL,
    FATURAD_ID        D_IDFIELD NOT NULL,
    TAM_AKTARIM       D_CHR1,
    NEREDEN           D_CHR1
);


CREATE TABLE SOFOR (
    SOFOR_KOD        D_KOD NOT NULL,
    SOFOR_SID        D_SID NOT NULL,
    ADI_SOYADI       D_ACK30,
    ADRESI1          D_ACK50,
    ADRESI2          D_ACK50,
    TEL_NO1          D_TELNO,
    TEL_NO2          D_TELNO,
    EHLIYET_NO       D_ACK30,
    VERGI_NO         VARCHAR(20),
    VERGI_DAIRE      VARCHAR(20),
    LISTEDEN_CIKAR   D_BOOLEAN,
    ACIKLAMA         VARCHAR(1000),
    BORC             D_MONEY,
    ALACAK           D_MONEY,
    DEVREDEN_BORC    D_MONEY NOT NULL,
    DEVREDEN_ALACAK  D_MONEY NOT NULL,
    RESIM            VARCHAR(255) COLLATE PXW_TURK,
    KARA_LISTE       D_SMALLINT
);


CREATE TABLE URUN (
    URUN_KOD        D_URUN_KOD NOT NULL,
    URUN_SID        D_SID NOT NULL,
    URUN_AD         D_ACK50 NOT NULL,
    URUN_AD_YD      D_ACK50,
    TIP             D_SMALLINT NOT NULL,
    ASGARIMIK       D_MONEY,
    AZAMIMIK        D_MONEY,
    SIPMIKTAR       D_MONEY,
    DEPOSURE        INTEGER,
    OLCU_TIP        D_KOD NOT NULL,
    OLCUBIRIM       D_KOD NOT NULL,
    DEPO_KOD        D_KOD NOT NULL,
    KOMPLEX         D_BOOLEAN DEFAULT 0,
    BORC            D_MONEY,
    ALACAK          D_MONEY,
    BORC_VPB        D_MONEY NOT NULL,
    ALACAK_VPB      D_MONEY NOT NULL,
    MIKTAR_BORC     D_MONEY NOT NULL,
    MIKTAR_ALACAK   D_MONEY,
    D_BARCODE       D_BARCODE,
    UBARCODE        D_BARCODE,
    ACIKLAMALAR     D_MEMO,
    HIZMET          D_BOOLEAN,
    KDV             D_SMALLINT,
    DOVKOD          D_DKOD NOT NULL,
    BIRIMFIY        D_MONEY,
    SATISFIY        D_MONEY,
    GTIPNO          D_GTIP,
    KARMARJ         D_SMALLINT,
    KDV_DAHIL       D_BOOLEAN NOT NULL,
    DEV_BORC        D_MONEY NOT NULL,
    DEV_ALACAK      D_MONEY NOT NULL,
    DEV_BORC_VPB    D_MONEY NOT NULL,
    DEV_ALACAK_VPB  D_MONEY NOT NULL,
    DEV_MIK_BORC    D_MONEY NOT NULL,
    DEV_MIK_ALACAK  D_MONEY NOT NULL,
    URUN_TIP        D_CHR1 NOT NULL
);


CREATE TABLE URUN_CARI_FIY (
    URUN_KOD     D_URUN_KOD NOT NULL,
    CARI_KOD     D_KOD NOT NULL,
    SATISFIY     D_MONEY NOT NULL,
    SATISDOVKOD  D_DKOD NOT NULL,
    BIRIMORAN    SMALLINT NOT NULL,
    FIY_TIP      D_BOOLEAN
);


CREATE TABLE URUN_CGRUP_FIY (
    URUN_KOD       D_URUN_KOD NOT NULL,
    CARI_GRUP_KOD  D_KOD NOT NULL,
    SATISFIY       D_MONEY NOT NULL,
    SATISDOVKOD    D_DKOD NOT NULL,
    BIRIMORAN      SMALLINT NOT NULL,
    FIY_TIP        D_BOOLEAN NOT NULL
);


CREATE TABLE URUN_GRUP (
    URUN_GRUP_KOD  D_KOD NOT NULL,
    URUN_GRUP_SID  D_SID,
    UGADI          D_ACK50,
    UGACK          D_ACK,
    BIRIMORAN      SMALLINT,
    DOVKOD         D_DKOD NOT NULL
);


CREATE TABLE URUN_GRUP_UYE (
    URUN_GRUP_KOD  D_KOD NOT NULL,
    URUN_KOD       D_URUN_KOD NOT NULL,
    VARSAY         D_BOOLEAN
);


CREATE TABLE URUN_TEDARIK (
    URUN_KOD        D_URUN_KOD NOT NULL,
    CARI_KOD        D_KOD NOT NULL,
    TEDARIK_SURESI  D_SMALLINT,
    FIYAT           D_MONEY,
    ACIKLAMA        D_ACK50
);


CREATE TABLE URUNHAR (
    URUNHAR_ID            D_IDFIELD NOT NULL,
    URUNHAR_SID           D_SID NOT NULL,
    URUN_KOD              D_URUN_KOD NOT NULL,
    TIP                   D_BORCALACAK NOT NULL,
    BELGE_TUR             D_IDFIELD NOT NULL,
    BELGE_ID              D_IDFIELD NOT NULL,
    BELGE_SID             D_SID NOT NULL,
    BELGE_SIRA_NO         D_INTEGER,
    TARIH                 D_TARTIP NOT NULL,
    FIILI_TAR             D_TARTIP,
    DOV_BAZ_TAR           D_TARTIP,
    OLCUBIRIM             D_KOD NOT NULL,
    MIKTAR                D_MONEY NOT NULL,
    DOVKOD                D_DKOD NOT NULL,
    DOVKUR                D_MONEY NOT NULL,
    TUTAR                 D_MONEY NOT NULL,
    TUTAR_VPB             D_MONEY NOT NULL,
    URUN_DOVKOD           D_DKOD NOT NULL,
    TUTAR_URUN_DOVKOD     D_MONEY,
    BIRIM_FIY             D_MONEY NOT NULL,
    BIRIM_FIY_VPB         D_MONEY NOT NULL,
    BIRIM_FIY_URN_DOVKOD  D_MONEY NOT NULL,
    ISKONTO_TUTAR         D_MONEY NOT NULL,
    ISKONTO_TUTAR_VPB     D_MONEY NOT NULL,
    OLCUBIRIM_URN_OB      D_KOD NOT NULL,
    MIKTAR_URN_OB         D_MONEY NOT NULL,
    DEPO_KOD              D_KOD,
    MASRAF_MERK           D_KOD,
    KOD1                  D_KOD,
    KOD2                  D_KOD,
    KOD3                  D_KOD,
    KOD4                  D_KOD,
    ACIKLAMA              D_ACK50 NOT NULL COLLATE PXW_TURK,
    ISKONTO_TIP           D_SMALLINT,
    ISKONTO_ORAN          D_SMALLINT,
    FATURA_ID             D_IDFIELD NOT NULL,
    FATURA_SID            D_SID NOT NULL,
    IRSALIYE_ID           D_IDFIELD NOT NULL,
    IRSALIYE_SID          D_SID NOT NULL,
    KDV                   D_SMALLINT,
    KDV_TUTAR             D_MONEY NOT NULL,
    SECIM                 D_CHR1,
    BIRIM_FIY_URN_OB      D_MONEY NOT NULL,
    CIKIS_MIKTAR          D_MONEY NOT NULL,
    SEFER_ID              D_IDFIELD NOT NULL,
    MAZOT_FISI_ID         D_IDFIELD NOT NULL,
    SEFER_BEKLEME         D_IDFIELD NOT NULL,
SSEFER_BEKLEME         D_IDFIELD NOT NULL
);

/*i****************************************************************************/


CREATE TABLE ESYA (
    ESYA_ID  D_IDFIELD ,
    ESYA_AD  D_ACK30
);







CREATE TABLE ANT_MAIN (
    ANT_MAIN_ID          D_IDFIELD ,
    ANT_MAIN_SID         D_SID,
    DEVIR                D_BOOLEAN,
    DEF_SIRA_NO          D_IDFIELD,
    TARIH                D_TARTIP,
    GIRCIK               D_IO,
    TASIYAN              D_SMALLINT,
    TASIYAN_ID           D_ACK30,
    OZET_BEYAN_NO        D_ACK30,
    OZET_BEYAN_TAR       D_TARTIP,
    KONSIMENTO           D_ACK30 COLLATE PXW_TURK,
    GIRIS_ANT_DETAIL_ID  D_IDFIELD,
    CIK_KAP              D_INTEGER,
    CIK_KILO             D_MONEY,
    FATURA_ID            D_IDFIELD,
    GUM_VEZ_NO           D_ACK30 COLLATE PXW_TURK,
    GUM_VEZ_TAR          D_TARTIP,
    KAP_BOL              D_BOOLEAN,
    GUM_KOM_KOD          D_KOD
);



CREATE TABLE ANT_DETAIL (
    ANT_DETAIL_ID  D_IDFIELD,
    ANT_MAIN_ID    D_IDFIELD,
    ANT_BEYAN_NO   D_ACK30 COLLATE PXW_TURK,
    ANT_BEYAN_TAR  D_TARTIP,
    KONSIMENTO     D_ACK30,
    CARI_AD        D_ACK,
    CARI_KOD       D_KOD,
    KAP_ADET       D_INTEGER,
    KILO           D_MONEY,
    ESYA           D_ACK30 COLLATE PXW_TURK,
    YANICI         D_BOOLEAN,
    ARDIYE_FIY     D_MONEY,
    ARD_DOVKOD     D_DKOD,
    HAMMALIYE      D_MONEY,
    HAMM_DOVKOD    D_DKOD,
    KALAN_KAP      D_INTEGER,
    KALAN_KILO     D_MONEY
);
/******************************************************************************/




/******************************************************************************/
/****                                Views                                 ****/
/******************************************************************************/


/* View: URUNHAR_VIEW */
CREATE VIEW URUNHAR_VIEW(
    URUN_KOD,
    URUN_AD,
    TARIH,
    URUNHAR_ID,
    BELGE_TUR,
    BELGE_ID,
    TIP,
    MIKTAR,
    OLCUBIRIM,
    BIRIM_FIY,
    BIRIM_FIY_VPB,
    DOVKOD,
    TUTAR,
    TUTAR_VPB,
    DEPO_KOD,
    CARI_KOD,
    CARI_AD)
AS
SELECT
URUNHAR.urun_kod,
(SELECT URUN.URUN_AD FROM URUN WHERE URUN.URUN_KOD = URUNHAR.URUN_KOD) AS URUN_AD,
URUNHAR.tarih,
URUNHAR.URUNHAR_ID,
URUNHAR.belge_tur,
URUNHAR.belge_id,
URUNHAR.tip, 
URUNHAR.miktar,
URUNHAR.olcubirim,
URUNHAR.birim_fiy,
URUNHAR.birim_fiy_vpb,
URUNHAR.dovkod,
URUNHAR.tutar,
URUNHAR.tutar_vpb,
URUNHAR.depo_kod
,(case when (FATURA_ID>0)
then
(Select Cari_Kod from FAT_IRS WHERE FAT_IRS.FAT_IRS_SEP=1 AND FAT_IRS.FAT_IRS_ID=URUNHAR.FATURA_ID AND FAT_IRS.FAT_IRS_SID=URUNHAR.FATURA_SID)
end) as Cari_Kod
,(case when (FATURA_ID>0)
then
(Select Cari_Ad from CARI WHERE CARI.CARI_KOD=(Select Cari_Kod from FAT_IRS WHERE FAT_IRS.FAT_IRS_SEP=1 AND FAT_IRS.FAT_IRS_ID=URUNHAR.FATURA_ID AND FAT_IRS.FAT_IRS_SID=URUNHAR.FATURA_SID))
end) as Cari_Ad

FROM URUNHAR WHERE URUNHAR_ID<>0 and FATURA_ID>0

union

SELECT
URUNHAR.urun_kod,
(SELECT URUN.URUN_AD FROM URUN WHERE URUN.URUN_KOD = URUNHAR.URUN_KOD) AS URUN_AD,
URUNHAR.tarih,
URUNHAR.URUNHAR_ID,
URUNHAR.belge_tur,
URUNHAR.belge_id,
URUNHAR.tip, 
URUNHAR.miktar,
URUNHAR.olcubirim,
URUNHAR.birim_fiy,
URUNHAR.birim_fiy_vpb,
URUNHAR.dovkod,
URUNHAR.tutar,
URUNHAR.tutar_vpb,
URUNHAR.depo_kod
,(case when (IRSALIYE_ID>0)
then
(Select Cari_Kod from FAT_IRS WHERE FAT_IRS.FAT_IRS_SEP=2 AND FAT_IRS.FAT_IRS_ID=URUNHAR.IRSALIYE_ID AND FAT_IRS.FAT_IRS_SID=URUNHAR.IRSALIYE_SID)
end) as Cari_Kod

,(case when (IRSALIYE_ID>0)
then
(Select Cari_Ad from CARI WHERE CARI.CARI_KOD=(Select Cari_Kod from FAT_IRS WHERE FAT_IRS.FAT_IRS_SEP=2 AND FAT_IRS.FAT_IRS_ID=URUNHAR.IRSALIYE_ID AND FAT_IRS.FAT_IRS_SID=URUNHAR.IRSALIYE_SID))
end) as Cari_Ad


FROM URUNHAR WHERE URUNHAR_ID<>0
and IRSALIYE_ID>0
;





ALTER TABLE SEFER_TAKIP ADD CONSTRAINT PK_SEFER_TAKIP PRIMARY KEY (SEFER_TAKIP_ID);
CREATE INDEX SEFER_TAKIP_IDX1 ON SEFER_TAKIP (GIRIS_TARIHI);



/******************************************************************************/
/****                          Unique Constraints                          ****/
/******************************************************************************/

ALTER TABLE NETSIS_AKTARMA ADD CONSTRAINT UNQ_NETSIS_AKTARMA UNIQUE (URUN_KOD, MASRAF_MERKEZI);
ALTER TABLE NETSIS_AKTARMA ADD CONSTRAINT UNQ_NETSIS_AKTARMA1 UNIQUE (MASRAF_MERKEZI, YENI_URUN_KOD);


/******************************************************************************/
/****                             Primary Keys                             ****/
/******************************************************************************/

ALTER TABLE ARAC ADD CONSTRAINT PK_ARAC PRIMARY KEY (ARAC_KOD);
ALTER TABLE ARACHAR ADD CONSTRAINT PK_ARACHAR PRIMARY KEY (ARACHAR_ID);
ALTER TABLE ARAC_RUHSAT ADD CONSTRAINT PK_ARAC_RUHSAT PRIMARY KEY (ARAC_KOD, ARAC_SID);
ALTER TABLE BELGETUR ADD CONSTRAINT PK_BELGETUR PRIMARY KEY (BELGE_TUR);
ALTER TABLE BELGE_YAZ ADD CONSTRAINT PK_BELGE_YAZ PRIMARY KEY (BELGE_TUR, SIRA_NO, SUBE_ID);
ALTER TABLE CARI ADD CONSTRAINT PK_CARI PRIMARY KEY (CARI_KOD);
ALTER TABLE CARIHAR ADD CONSTRAINT PK_CARIHAR PRIMARY KEY (CARIHAR_ID, CARIHAR_SID);
ALTER TABLE CARIHAR_DOV ADD CONSTRAINT PK_CARIHAR_DOV PRIMARY KEY (CARIHAR_DOV_ID, CARIHAR_DOV_SID);
ALTER TABLE CARI_AY ADD CONSTRAINT PK_CARI_AY PRIMARY KEY (CARI_KOD, DOVKOD, YIL, AY);
ALTER TABLE CARI_DOV ADD CONSTRAINT PK_CARI_DOV PRIMARY KEY (CARI_KOD, DOVKOD);
ALTER TABLE CARI_GRUP ADD CONSTRAINT PK_CARI_GRUP PRIMARY KEY (CARI_GRUP_KOD);
ALTER TABLE CARI_GRUP_UYE ADD CONSTRAINT PK_CARI_GR0UP_UYE PRIMARY KEY (CARI_GRUP_KOD, CARI_KOD);
ALTER TABLE CARI_SEVKAD ADD CONSTRAINT PK_CARI_SEVKAD PRIMARY KEY (CARI_SEVK_KOD);
ALTER TABLE CEK ADD CONSTRAINT PK_CEK PRIMARY KEY (CEK_ID, CEK_SID);
ALTER TABLE CEKSENHAR ADD CONSTRAINT PK_CEKSENHAR PRIMARY KEY (CEKSENHAR_ID, CEKSENHAR_SID);
ALTER TABLE DEKONT ADD CONSTRAINT PK_DEKONT PRIMARY KEY (DEKONT_ID, DEKONT_SID);
ALTER TABLE DEKONT_AUT ADD CONSTRAINT PK_DEKONT_AUT PRIMARY KEY (DEKONT_ID, DEKONT_SID);
ALTER TABLE DEKONT_D ADD CONSTRAINT PK_DEKONT_D PRIMARY KEY (DEKONT_D_ID, DEKONT_D_SID);
ALTER TABLE DEKONT_D_AUT ADD CONSTRAINT PK_DEKONT_D_AUT PRIMARY KEY (DEKONT_D_ID, DEKONT_D_SID);
ALTER TABLE DEPO ADD CONSTRAINT PK_DEPO PRIMARY KEY (DEPO_KOD);
ALTER TABLE DEPOURUN ADD CONSTRAINT PK_DEPOURUN PRIMARY KEY (DEPO_KOD, URUN_KOD);
ALTER TABLE DOVKART ADD CONSTRAINT PK_DOVKART PRIMARY KEY (DOVKOD);
ALTER TABLE DOVKUR ADD CONSTRAINT PK_DOVKUR PRIMARY KEY (DOVKOD, TARIH);
ALTER TABLE FATURA_D ADD CONSTRAINT PK_FATURA_D PRIMARY KEY (URUNHAR_ID, URUNHAR_SID);
ALTER TABLE FAT_IRS ADD CONSTRAINT PK_FAT_IRS PRIMARY KEY (FAT_IRS_SEP, FAT_IRS_ID, FAT_IRS_SID);
ALTER TABLE FAT_IRS_ACK ADD CONSTRAINT PK_FAT_IRS_ACK PRIMARY KEY (FAT_IRS_SEP, FAT_IRS_ID, FAT_IRS_SID);
ALTER TABLE FAT_IRS_AKTAR ADD CONSTRAINT PK_FAT_IRS_AKTAR PRIMARY KEY (FAT_IRS_SEP, FAT_IRS_ID, FAT_IRS_SID);
ALTER TABLE FAT_IRS_MUH_CARI ADD CONSTRAINT PK_FAT_IRS_MUH_CARI PRIMARY KEY (FAT_IRS_SEP, FAT_IRS_ID, FAT_IRS_SID);
ALTER TABLE FAT_PARAMS ADD CONSTRAINT PK_FAT_PARAMS PRIMARY KEY (FAT_PARAMS_ID);
ALTER TABLE KASA ADD CONSTRAINT PK_KASA PRIMARY KEY (KASA_KOD);
ALTER TABLE KASAHAK ADD CONSTRAINT PK_KASAHAK PRIMARY KEY (KULLANICI_ID, KULLANICI_SID, KASA_KOD, KASA_SID);
ALTER TABLE KASAHAR ADD CONSTRAINT PK_KASAHAR PRIMARY KEY (KASAHAR_ID, KASAHAR_SID);
ALTER TABLE KASA_AY ADD CONSTRAINT PK_KASA_AY PRIMARY KEY (KASA_KOD, YIL, AY);
ALTER TABLE KOMISYON ADD CONSTRAINT PK_KOMISYON PRIMARY KEY (ID);
ALTER TABLE MASRAF ADD CONSTRAINT PK_MASRAF PRIMARY KEY (MASRAF_KOD);
ALTER TABLE MASRAFHAR ADD CONSTRAINT PK_MASRAFHAR PRIMARY KEY (MASRAFHAR_ID, MASRAFHAR_SID);
ALTER TABLE MASRAF_GRUP ADD CONSTRAINT PK_MASRAF_GRUP PRIMARY KEY (MASRAF_GRUP_KOD);
ALTER TABLE MASRAF_GRUP_UYE ADD CONSTRAINT PK_MASRAF_GROUP_UYE PRIMARY KEY (MASRAF_GRUP_KOD, MASRAF_KOD);
ALTER TABLE MAZOT_FISI ADD PRIMARY KEY (MAZOT_FIS_ID);
ALTER TABLE NETSIS_AKTARMA ADD CONSTRAINT PK_NETSIS_AKTARMA PRIMARY KEY (ID);
ALTER TABLE OLCUBIR ADD CONSTRAINT PK_OLCUBIR PRIMARY KEY (OLCUBIRIM);
ALTER TABLE OLCUTIP ADD CONSTRAINT PK_OLCUTIP PRIMARY KEY (OLCU_TIP);
ALTER TABLE PAKET ADD CONSTRAINT PK_PAKET PRIMARY KEY (PAKET_KOD);
ALTER TABLE PAKET_D ADD CONSTRAINT PK_PAKET_D PRIMARY KEY (PAKET_KOD, PAKET_D_ID);
ALTER TABLE PARAMETERS ADD CONSTRAINT PK_PARAMATERS PRIMARY KEY (SUBE_ID, MODUL_ID, PARAM_NAME);
ALTER TABLE PERSONEL ADD CONSTRAINT PK_PERSONEL PRIMARY KEY (PERSONEL_KOD);
ALTER TABLE PERSONEL_HAR ADD PRIMARY KEY (PERSONELHAR_ID);
ALTER TABLE PLASIYER ADD CONSTRAINT PK_PLASIYER PRIMARY KEY (PLASIYER_KOD);
ALTER TABLE PROJE ADD CONSTRAINT PK_PROJE PRIMARY KEY (PROJE_KOD);
ALTER TABLE PROJEHAR ADD CONSTRAINT PK_PROJEHAR PRIMARY KEY (PROJEHAR_ID, PROJEHAR_SID);
ALTER TABLE RAP_KOD ADD CONSTRAINT PK_RAP_KOD PRIMARY KEY (RAP_KOD_TIP, KOD);
ALTER TABLE RAP_KOD_PARAMS ADD CONSTRAINT PK_RAP_KOD_PARAMS PRIMARY KEY (BELGE);
ALTER TABLE SAYACLAR ADD CONSTRAINT PK_SAYACLAR PRIMARY KEY (SAYAC_ADI, SUBE_ID);
ALTER TABLE SEFER ADD CONSTRAINT PK_SEFER PRIMARY KEY (SEFER_ID);
ALTER TABLE SEFER_KONT ADD CONSTRAINT PK_SEFER_KONT PRIMARY KEY (KONT_ID);
ALTER TABLE SENET ADD CONSTRAINT PK_SENET PRIMARY KEY (SENET_ID, SENET_SID);
ALTER TABLE SIPARIS ADD CONSTRAINT PK_SIPARIS PRIMARY KEY (FAT_IRS_SEP, FAT_IRS_ID, FAT_IRS_SID);
ALTER TABLE SIPARIS_D ADD CONSTRAINT PK_SIPARIS_D PRIMARY KEY (URUNHAR_ID, URUNHAR_SID);
ALTER TABLE SIPARIS_D_FAT ADD CONSTRAINT PK_SIPARIS_D_FAT PRIMARY KEY (SIPARIS_D_FAT_ID);
ALTER TABLE SOFOR ADD CONSTRAINT PK_SOFOR PRIMARY KEY (SOFOR_KOD);
ALTER TABLE URUN ADD CONSTRAINT PK_URUN PRIMARY KEY (URUN_KOD);
ALTER TABLE URUNHAR ADD CONSTRAINT PK_URUNHAR PRIMARY KEY (URUNHAR_ID, URUNHAR_SID);
ALTER TABLE URUN_CARI_FIY ADD CONSTRAINT PK_URUN_CARI_FIY PRIMARY KEY (URUN_KOD, CARI_KOD);
ALTER TABLE URUN_CGRUP_FIY ADD CONSTRAINT PK_URUN_CGRUP_FIY PRIMARY KEY (URUN_KOD, CARI_GRUP_KOD);
ALTER TABLE URUN_GRUP ADD CONSTRAINT PK_URUN_GRUP PRIMARY KEY (URUN_GRUP_KOD);
ALTER TABLE URUN_GRUP_UYE ADD CONSTRAINT PK_URUN_GRUP_UYE PRIMARY KEY (URUN_GRUP_KOD, URUN_KOD);
ALTER TABLE URUN_TEDARIK ADD CONSTRAINT PK_URUN_TEDARIK PRIMARY KEY (URUN_KOD, CARI_KOD);


/*i****************************************************************************/
ALTER TABLE ESYA ADD CONSTRAINT PK_TBL_ESYA PRIMARY KEY (ESYA_ID);
ALTER TABLE ANT_MAIN ADD CONSTRAINT PK_ANT_MAIN PRIMARY KEY (ANT_MAIN_ID);
ALTER TABLE ANT_DETAIL ADD CONSTRAINT PK_ANT_DETAIL PRIMARY KEY (ANT_DETAIL_ID);
/******************************************************************************/



/******************************************************************************/
/****                             Foreign Keys                             ****/
/******************************************************************************/

ALTER TABLE ARAC_RUHSAT ADD CONSTRAINT FK_ARAC_RUHSAT FOREIGN KEY (ARAC_KOD) REFERENCES ARAC (ARAC_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE BELGE_YAZ ADD CONSTRAINT FK_BELGE_YAZ FOREIGN KEY (BELGE_TUR) REFERENCES BELGETUR (BELGE_TUR) ON UPDATE CASCADE;
ALTER TABLE CARIHAR ADD CONSTRAINT FK_CARIHAR FOREIGN KEY (CARI_KOD) REFERENCES CARI (CARI_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CARIHAR_DOV ADD CONSTRAINT FK_CARIHAR_DOV_ON_CARI FOREIGN KEY (CARIHAR_ID, CARIHAR_SID) REFERENCES CARIHAR (CARIHAR_ID, CARIHAR_SID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CARIHAR_DOV ADD CONSTRAINT FK_CARIHAR_DOV_ON_DOVKOD FOREIGN KEY (DOVKOD) REFERENCES DOVKART (DOVKOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CARI_AY ADD CONSTRAINT FK_CARI_AY_ON_CARI FOREIGN KEY (CARI_KOD) REFERENCES CARI (CARI_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CARI_AY ADD CONSTRAINT FK_CARI_AY_ON_DOVKART FOREIGN KEY (DOVKOD) REFERENCES DOVKART (DOVKOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CARI_DOV ADD CONSTRAINT FK_CARI_DOV_ON_CARI FOREIGN KEY (CARI_KOD) REFERENCES CARI (CARI_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CARI_DOV ADD CONSTRAINT FK_CARI_DOV_ON_DOVKART FOREIGN KEY (DOVKOD) REFERENCES DOVKART (DOVKOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CARI_GRUP_UYE ADD CONSTRAINT FK_CARI_GRUP_UYE_ON_CARI FOREIGN KEY (CARI_KOD) REFERENCES CARI (CARI_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CARI_GRUP_UYE ADD CONSTRAINT FK_CARI_GRUP_UYE_ON_CARI_GRUP FOREIGN KEY (CARI_GRUP_KOD) REFERENCES CARI_GRUP (CARI_GRUP_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CARI_SEVKAD ADD CONSTRAINT FK_CARI_SEVKAD FOREIGN KEY (CARI_KOD) REFERENCES CARI (CARI_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DEPOURUN ADD CONSTRAINT FK_DEPOURUN_ON_DEPO FOREIGN KEY (DEPO_KOD) REFERENCES DEPO (DEPO_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DEPOURUN ADD CONSTRAINT FK_DEPOURUN_ON_URUN FOREIGN KEY (URUN_KOD) REFERENCES URUN (URUN_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DOVKUR ADD CONSTRAINT FK_DOVKUR_ON_DOVKART FOREIGN KEY (DOVKOD) REFERENCES DOVKART (DOVKOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE KASAHAK ADD CONSTRAINT FK_KASAHAK FOREIGN KEY (KASA_KOD) REFERENCES KASA (KASA_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE KASAHAR ADD CONSTRAINT FK_KASAHAR_ON_KASA FOREIGN KEY (KASA_KOD) REFERENCES KASA (KASA_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE KASA_AY ADD CONSTRAINT FK_KASA_AY_ON_KASA FOREIGN KEY (KASA_KOD) REFERENCES KASA (KASA_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE MASRAF_GRUP_UYE ADD CONSTRAINT FK_M_GRP_UYE_ON_MASRAF FOREIGN KEY (MASRAF_KOD) REFERENCES MASRAF (MASRAF_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE MASRAF_GRUP_UYE ADD CONSTRAINT FK_M_GRP_UYE_ON_MASRAF_GRUP FOREIGN KEY (MASRAF_GRUP_KOD) REFERENCES MASRAF_GRUP (MASRAF_GRUP_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE OLCUBIR ADD CONSTRAINT FK_OLCUBIR FOREIGN KEY (OLCU_TIP) REFERENCES OLCUTIP (OLCU_TIP) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PROJEHAR ADD CONSTRAINT FK_PROJEHAR_ON_PROJE FOREIGN KEY (PROJE_KOD) REFERENCES PROJE (PROJE_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE SEFER_KONT ADD CONSTRAINT FK_SEFER_KONT FOREIGN KEY (SEFER_ID) REFERENCES SEFER (SEFER_ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE SIPARIS_D ADD CONSTRAINT FK_SIPARIS_D_SIPARIS FOREIGN KEY (FAT_IRS_SEP, FATURA_ID, FATURA_SID) REFERENCES SIPARIS (FAT_IRS_SEP, FAT_IRS_ID, FAT_IRS_SID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE URUNHAR ADD CONSTRAINT FK_URUNHAR_ON_URUN FOREIGN KEY (URUN_KOD) REFERENCES URUN (URUN_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE URUN_CARI_FIY ADD CONSTRAINT FK_URUN_CARI_FIY_ON_CARI FOREIGN KEY (CARI_KOD) REFERENCES CARI (CARI_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE URUN_CARI_FIY ADD CONSTRAINT FK_URUN_CARI_FIY_ON_URUN FOREIGN KEY (URUN_KOD) REFERENCES URUN (URUN_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE URUN_CGRUP_FIY ADD CONSTRAINT FK_URUN_CGRUP_FIY FOREIGN KEY (CARI_GRUP_KOD) REFERENCES CARI_GRUP (CARI_GRUP_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE URUN_CGRUP_FIY ADD CONSTRAINT FK_URUN_CGRUP_FIY_ON_URUN FOREIGN KEY (URUN_KOD) REFERENCES URUN (URUN_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE URUN_GRUP_UYE ADD CONSTRAINT FK_URUN_GRUP_UYE_ON_UGRUP FOREIGN KEY (URUN_GRUP_KOD) REFERENCES URUN_GRUP (URUN_GRUP_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE URUN_GRUP_UYE ADD CONSTRAINT FK_URUN_GRUP_UYE_ON_URUN FOREIGN KEY (URUN_KOD) REFERENCES URUN (URUN_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE URUN_TEDARIK ADD CONSTRAINT FK_URUN_TEDARIK FOREIGN KEY (URUN_KOD) REFERENCES URUN (URUN_KOD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE URUN_TEDARIK ADD CONSTRAINT FK_URUN_TEDARIK_CARI FOREIGN KEY (CARI_KOD) REFERENCES CARI (CARI_KOD) ON DELETE CASCADE ON UPDATE CASCADE;



ALTER TABLE ANT_DETAIL ADD CONSTRAINT FK_ANT_DETAIL_1 FOREIGN KEY (ANT_MAIN_ID) REFERENCES ANT_MAIN (ANT_MAIN_ID) ON DELETE CASCADE ON UPDATE CASCADE;

/******************************************************************************/
/****                               Indices                                ****/
/******************************************************************************/

CREATE INDEX CARIHAR_CARIKOD_TARIH ON CARIHAR (CARI_KOD, TARIH);
CREATE INDEX CARIHAR_IDX_ON_PLASIYER ON CARIHAR (PLASIYER_KOD);
CREATE INDEX CARIHAR_IDX_ON_PROJE ON CARIHAR (PROJE_KOD);
CREATE UNIQUE INDEX CARIHAR_ON_BELGE_IDX ON CARIHAR (BELGE_TUR, BELGE_ID, BELGE_SID, SIRA_NO);
CREATE INDEX CARIHAR_TARIH ON CARIHAR (TARIH);
CREATE INDEX CEK_IDX_ONBORDRO ON CEK (CS_BORDRO_ID, CS_BORDRO_SID);
CREATE INDEX CEK_IDX_ON_CARI ON CEK (CARI_KOD);
CREATE INDEX CEK_IDX_ON_TANZIM_TAR ON CEK (TANZIMTAR);
CREATE INDEX CEK_IDX_ON_VADE_TAR ON CEK (VADETAR);
CREATE UNIQUE INDEX CEKSENHAR_BELGE_IDX ON CEKSENHAR (CEKSEN, BELGE_ID, BELGE_SID, ISLEM);
CREATE INDEX DEKONT_ID_SID_TIP ON DEKONT (DEKONT_ID, DEKONT_SID, TIP);
CREATE INDEX DEKONT_ID_TIP ON DEKONT (DEKONT_ID, TIP);
CREATE INDEX DEKONT_TIP ON DEKONT (TIP);
CREATE INDEX DEKONT_D_IDX_ON_DEKONT ON DEKONT_D (DEKONT_ID, DEKONT_SID);
CREATE INDEX DEKONT_D_IDX_ON_DEKONT_BA ON DEKONT_D (DEKONT_ID, DEKONT_SID, BA);
CREATE INDEX DEKONT_D_IDX_ON_KKOD_MC ON DEKONT_D (KARSI_KOD, MC);
CREATE INDEX DEKONT_D_AUT_IDX_ON_DEKONT ON DEKONT_D_AUT (DEKONT_ID, DEKONT_SID);
CREATE INDEX DEKONT_D_AUT_IDX_ON_DEKONT_BA ON DEKONT_D_AUT (DEKONT_ID, DEKONT_SID, BA);
CREATE INDEX DEKONT_D_AUT_IDX_ON_KKOD_MC ON DEKONT_D_AUT (KARSI_KOD, MC);
CREATE INDEX FAT_IRS_IDX_ONSERI_BELGE_NO ON FAT_IRS (FAT_IRS_SERI, BELGE_NO);
CREATE INDEX FAT_IRS_IDX_ON_ID_SID ON FAT_IRS (FAT_IRS_ID, FAT_IRS_SID);
CREATE INDEX ISN_ERRORS_ON_ISN_IDX ON ISN_ERRORS (ISN);
CREATE INDEX KASAHAR_IDX_ON_BELGE ON KASAHAR (BELGE_TUR, BELGE_ID, BELGE_SID);
CREATE INDEX MASRAFHAR_BELGE ON MASRAFHAR (BELGE_TUR, BELGE_ID, BELGE_SID, SIRA_NO);
CREATE INDEX MASRAFHAR_MASRAF_KOD ON MASRAFHAR (MASRAF_KOD);
CREATE INDEX MASRAFHAR_TARIH ON MASRAFHAR (TARIH);
CREATE INDEX PROJEHAR_BELGE_IDX ON PROJEHAR (BELGE_TUR, BELGE_ID, BELGE_SID, SIRA_NO);
CREATE INDEX SAYACLAR_NU_IDX1 ON SAYACLAR_NU (SAYAC_ADI, DEGER);
CREATE INDEX SENET_IDX_ONBORDRO ON SENET (CS_BORDRO_ID, CS_BORDRO_SID);
CREATE INDEX SENET_IDX_ON_CARI ON SENET (CARI_KOD);
CREATE INDEX SENET_IDX_ON_TANZIM_TAR ON SENET (TANZIMTAR);
CREATE INDEX SENET_IDX_ON_VADE_TAR ON SENET (VADETAR);
CREATE INDEX DEPO_IDX_SIPARIS ON SIPARIS (DEPO_KOD);
CREATE INDEX SIPARIS_IDX_ONSERI_BELGE_NO ON SIPARIS (FAT_IRS_SERI, BELGE_NO);
CREATE INDEX SIPARIS_IDX_ON_ID_SID ON SIPARIS (FAT_IRS_ID, FAT_IRS_SID);
CREATE INDEX TARIH_IDX_ON_SIPARIS ON SIPARIS (TARIH);
CREATE INDEX DEPO_IDX_SIPARIS_D ON SIPARIS_D (DEPO_KOD);
CREATE INDEX FATURA_IDX_ON_SIPARIS_D ON SIPARIS_D (FATURA_ID, FATURA_SID);
CREATE INDEX ISRSALIYE_IDX_SIPARIS_D ON SIPARIS_D (IRSALIYE_ID, IRSALIYE_SID);
CREATE INDEX TARIH_IDX_ON_SIPARIS_D ON SIPARIS_D (TARIH);
CREATE INDEX URUN_KOD_IDX_ON_SIPARIS_D ON SIPARIS_D (URUN_KOD);
CREATE INDEX DEPO_IDX_URUNHAR ON URUNHAR (DEPO_KOD);
CREATE INDEX FATURA_IDX_ON_URUNHAR ON URUNHAR (FATURA_ID, FATURA_SID);
CREATE INDEX ISRSALIYE_IDX_URUNHAR ON URUNHAR (IRSALIYE_ID, IRSALIYE_SID);
CREATE INDEX TARIH_IDX_ON_URUNHAR ON URUNHAR (TARIH);
CREATE INDEX URUN_KOD_IDX_ON_URUNHAR ON URUNHAR (URUN_KOD);





CREATE INDEX ANT_MAIN_IDX1 ON ANT_MAIN (DEF_SIRA_NO);
CREATE INDEX ANT_MAIN_IDX2 ON ANT_MAIN (TARIH);
CREATE INDEX ANT_MAIN_IDX3 ON ANT_MAIN (GUM_VEZ_NO);
CREATE INDEX ANT_MAIN_IDX4 ON ANT_MAIN (OZET_BEYAN_NO);
CREATE INDEX ANT_MAIN_IDX5 ON ANT_MAIN (GIRCIK);
CREATE INDEX ANT_MAIN_IDX6 ON ANT_MAIN (TARIH);
CREATE INDEX ANT_MAIN_IDX7 ON ANT_MAIN (TASIYAN_ID);
CREATE INDEX ANT_MAIN_IDX8 ON ANT_MAIN (FATURA_ID);
CREATE INDEX ANT_MAIN_IDX9 ON ANT_MAIN (GIRIS_ANT_DETAIL_ID);


CREATE UNIQUE INDEX ANT_DETAIL_IDX1 ON ANT_DETAIL (ANT_MAIN_ID, ANT_DETAIL_ID);
CREATE INDEX ANT_DETAIL_IDX10 ON ANT_DETAIL (KALAN_KAP);
CREATE INDEX ANT_DETAIL_IDX11 ON ANT_DETAIL (KALAN_KILO);
CREATE INDEX ANT_DETAIL_IDX2 ON ANT_DETAIL (CARI_KOD);
CREATE INDEX ANT_DETAIL_IDX3 ON ANT_DETAIL (CARI_KOD);
CREATE INDEX ANT_DETAIL_IDX4 ON ANT_DETAIL (ANT_BEYAN_NO);
CREATE INDEX ANT_DETAIL_IDX5 ON ANT_DETAIL (KONSIMENTO);
CREATE INDEX ANT_DETAIL_IDX6 ON ANT_DETAIL (KAP_ADET);
CREATE INDEX ANT_DETAIL_IDX7 ON ANT_DETAIL (KILO);
CREATE INDEX ANT_DETAIL_IDX8 ON ANT_DETAIL (ESYA);







CREATE INDEX SEFER_IDX1 ON SEFER (ALIS_URUN_HAR_ID);
CREATE INDEX SEFER_IDX10 ON SEFER (BIT_YER);
CREATE INDEX SEFER_IDX2 ON SEFER (SATIS_URUN_HAR_ID);
CREATE INDEX SEFER_IDX3 ON SEFER (BEK_FAT_URUN_HAR_ID);
CREATE INDEX SEFER_IDX4 ON SEFER (SBEK_FAT_URUN_HAR_ID);
CREATE INDEX SEFER_IDX5 ON SEFER (ALICI_KOD, BAS_TAR, SEFER_ID);
CREATE INDEX SEFER_IDX6 ON SEFER (ARAC_KOD, ALICI_KOD, SATICI_KOD, PERSONEL_KOD, BAS_TAR);
CREATE INDEX SEFER_IDX7 ON SEFER (ARAC_KOD, ALICI_KOD, SATICI_KOD, PERSONEL_KOD, SEFER_TAMAMLANDI, SEFER_ALIS_FAT_ALINDI, ALIS_URUN_HAR_ID, SEFER_SATIS_FAT_KESILDI, BEKLEME_FATURASI_KESILDI, SATIS_URUN_HAR_ID, BEK_FAT_URUN_HAR_ID, SBEK_FAT_URUN_HAR_ID, SBEKLEME_FAT_VAR, SBEKLEME_FATURASI_KESILDI, BAS_TAR);
CREATE INDEX SEFER_IDX8 ON SEFER (TASINAN_ESYA);
CREATE INDEX SEFER_IDX9 ON SEFER (CIK_YER);

CREATE INDEX URUNHAR_IDX1 ON URUNHAR (SEFER_ID);
CREATE INDEX URUNHAR_IDX2 ON URUNHAR (MAZOT_FISI_ID);
CREATE INDEX URUNHAR_IDX3 ON URUNHAR (SEFER_BEKLEME);
CREATE INDEX URUNHAR_IDX4 ON URUNHAR (SSEFER_BEKLEME);



CREATE INDEX MAZOT_FISI_IDX1 ON MAZOT_FISI (SEFER_ID);
CREATE INDEX MAZOT_FISI_IDX2 ON MAZOT_FISI (ALIS_URUN_HAR_ID);
CREATE INDEX MAZOT_FISI_IDX3 ON MAZOT_FISI (ALIS_URUN_HAR_ID, ALIS_FATURASI_ALINDI, SEFER_ID, MAZOT_FIS_ID);
CREATE INDEX MAZOT_FISI_IDX4 ON MAZOT_FISI (ARAC_KOD, VEREN_PERSONEL_KOD, ALAN_PERSONEL_KOD, ALAN_CARI_KOD, MAZOTCU_CARI_KOD, TARIH);



CREATE INDEX FATURA_D_IDX1 ON FATURA_D (SEFER_ID);
CREATE INDEX FATURA_D_IDX2 ON FATURA_D (MAZOT_FISI_ID);
CREATE INDEX FATURA_D_IDX3 ON FATURA_D (SEFER_BEKLEME);
CREATE INDEX FATURA_D_IDX4 ON FATURA_D (SSEFER_BEKLEME);



CREATE INDEX ARACHAR_IDX1 ON ARACHAR (ARAC_KOD, TARIH, BELGE_TUR, BELGE_ID, SIRA_NO, BELGE_SID, BA);

/*CREATE INDEX ANT_DETAIL_IDX9 ON ANT_DETAIL (CARI_AD);*/

/******************************************************************************/
/****                               Triggers                               ****/
/******************************************************************************/


SET TERM ^ ;


/******************************************************************************/
/****                         Triggers for tables                          ****/
/******************************************************************************/

CREATE TRIGGER ANT_MAIN_AD0 FOR ANT_MAIN
ACTIVE AFTER DELETE POSITION 0
AS
begin
   IF (ANT_MAIN.KAP_BOL = 1) THEN
   BEGIN
     UPDATE ANT_DETAIL SET ANT_DETAIL.KALAN_KAP = ((ANT_DETAIL.KALAN_KAP + ANT_MAIN.CIK_KAP) + 1), ANT_DETAIL.KALAN_KILO = (ANT_DETAIL.KALAN_KILO + ANT_MAIN.CIK_KILO) WHERE ANT_DETAIL.ANT_DETAIL_ID = ANT_MAIN.GIRIS_ANT_DETAIL_ID;
   END ELSE
   BEGIN
     UPDATE ANT_DETAIL SET ANT_DETAIL.KALAN_KAP = (ANT_DETAIL.KALAN_KAP + ANT_MAIN.CIK_KAP) , ANT_DETAIL.KALAN_KILO = (ANT_DETAIL.KALAN_KILO + ANT_MAIN.CIK_KILO) WHERE ANT_DETAIL.ANT_DETAIL_ID = ANT_MAIN.GIRIS_ANT_DETAIL_ID;
   END
end
^


/* Trigger: ANT_MAIN_AI0 */
CREATE TRIGGER ANT_MAIN_AI0 FOR ANT_MAIN
ACTIVE AFTER INSERT POSITION 0
AS
DECLARE VARIABLE VAR_KALAN_KAP1 INTEGER;
begin
   if (ANT_MAIN.GIRCIK = 'C') then
   BEGIN
       SELECT KALAN_KAP FROM ANT_DETAIL WHERE ANT_DETAIL.ANT_DETAIL_ID = ANT_MAIN.GIRIS_ANT_DETAIL_ID INTO :VAR_KALAN_KAP1;
       IF (ANT_MAIN.KAP_BOL = 1) THEN
       BEGIN
         UPDATE ANT_DETAIL SET ANT_DETAIL.KALAN_KAP = ((ANT_DETAIL.KALAN_KAP - ANT_MAIN.CIK_KAP) + 1), ANT_DETAIL.KALAN_KILO = (ANT_DETAIL.KALAN_KILO - ANT_MAIN.CIK_KILO) WHERE ANT_DETAIL.ANT_DETAIL_ID = ANT_MAIN.GIRIS_ANT_DETAIL_ID;
       END ELSE
       BEGIN
         UPDATE ANT_DETAIL SET ANT_DETAIL.KALAN_KAP = (ANT_DETAIL.KALAN_KAP - ANT_MAIN.CIK_KAP) , ANT_DETAIL.KALAN_KILO = (ANT_DETAIL.KALAN_KILO - ANT_MAIN.CIK_KILO) WHERE ANT_DETAIL.ANT_DETAIL_ID = ANT_MAIN.GIRIS_ANT_DETAIL_ID;
       END
   END
end
^


/* Trigger: ANT_MAIN_AU0 */
CREATE TRIGGER ANT_MAIN_AU0 FOR ANT_MAIN
ACTIVE AFTER UPDATE POSITION 0
AS
DECLARE VARIABLE VAR_KALAN_KAP1 INTEGER;
begin
   if (ANT_MAIN.GIRCIK = 'C') then
   BEGIN
     if (((OLD.CIK_KAP - ANT_MAIN.CIK_KAP) <> 0)  OR ((OLD.CIK_KILO - ANT_MAIN.CIK_KILO) <> 0)) then
     BEGIN
       SELECT KALAN_KAP FROM ANT_DETAIL WHERE ANT_DETAIL.ANT_DETAIL_ID = ANT_MAIN.GIRIS_ANT_DETAIL_ID INTO :VAR_KALAN_KAP1;
       IF (OLD.KAP_BOL = 1) THEN
       BEGIN
         UPDATE ANT_DETAIL SET ANT_DETAIL.KALAN_KAP = ((ANT_DETAIL.KALAN_KAP + OLD.CIK_KAP) + 1), ANT_DETAIL.KALAN_KILO = (ANT_DETAIL.KALAN_KILO + OLD.CIK_KILO) WHERE ANT_DETAIL.ANT_DETAIL_ID = ANT_MAIN.GIRIS_ANT_DETAIL_ID;
       END ELSE
       BEGIN
         UPDATE ANT_DETAIL SET ANT_DETAIL.KALAN_KAP = (ANT_DETAIL.KALAN_KAP + OLD.CIK_KAP) , ANT_DETAIL.KALAN_KILO = (ANT_DETAIL.KALAN_KILO + OLD.CIK_KILO) WHERE ANT_DETAIL.ANT_DETAIL_ID = ANT_MAIN.GIRIS_ANT_DETAIL_ID;
       END

       SELECT KALAN_KAP FROM ANT_DETAIL WHERE ANT_DETAIL.ANT_DETAIL_ID = ANT_MAIN.GIRIS_ANT_DETAIL_ID INTO :VAR_KALAN_KAP1;
       IF (ANT_MAIN.KAP_BOL = 1) THEN
       BEGIN
         UPDATE ANT_DETAIL SET ANT_DETAIL.KALAN_KAP = ((ANT_DETAIL.KALAN_KAP - ANT_MAIN.CIK_KAP) + 1), ANT_DETAIL.KALAN_KILO = (ANT_DETAIL.KALAN_KILO - ANT_MAIN.CIK_KILO) WHERE ANT_DETAIL.ANT_DETAIL_ID = ANT_MAIN.GIRIS_ANT_DETAIL_ID;
       END ELSE
       BEGIN
         UPDATE ANT_DETAIL SET ANT_DETAIL.KALAN_KAP = (ANT_DETAIL.KALAN_KAP - ANT_MAIN.CIK_KAP) , ANT_DETAIL.KALAN_KILO = (ANT_DETAIL.KALAN_KILO - ANT_MAIN.CIK_KILO) WHERE ANT_DETAIL.ANT_DETAIL_ID = ANT_MAIN.GIRIS_ANT_DETAIL_ID;
       END
     END
   END
end
^





/* Trigger: KASAHAR_AD */
CREATE TRIGGER KASAHAR_AD FOR KASAHAR
ACTIVE AFTER DELETE POSITION 0
AS
DECLARE VARIABLE VAR_OLDU SMALLINT;
BEGIN
  /* ESKI KAYIT DUZELTILIYOR  */
  IF (KASAHAR.SIRA_NO  <> 0) THEN
  BEGIN
    SELECT PRM_OLDU FROM KASA_BAUPDATE(OLD.KASA_KOD, 0- OLD.KASADEGER,0-OLD.TUTAR_VPB,OLD.TIP,0) INTO :VAR_OLDU;
    SELECT PRM_OLDU FROM KASA_AY_ADDUPDATE(OLD.KASA_KOD,OLD.TARIH,OLD.TIP,0 - OLD.KASADEGER, 0 - OLD.TUTAR_VPB,0) INTO :VAR_OLDU;
  END
END
^


/* Trigger: KASAHAR_AI */
CREATE TRIGGER KASAHAR_AI FOR KASAHAR
ACTIVE AFTER INSERT POSITION 0
AS
DECLARE VARIABLE VAR_OLDU SMALLINT;
BEGIN
  IF (KASAHAR.SIRA_NO  <> 0) THEN
  BEGIN
    SELECT PRM_OLDU FROM KASA_BAUPDATE(KASAHAR.KASA_KOD,KASAHAR.KASADEGER,KASAHAR.TUTAR_VPB,KASAHAR.TIP,0) INTO :VAR_OLDU;
    SELECT PRM_OLDU FROM KASA_AY_ADDUPDATE(KASAHAR.KASA_KOD,KASAHAR.TARIH,KASAHAR.TIP,KASAHAR.KASADEGER,KASAHAR.TUTAR_VPB,0) INTO :VAR_OLDU;
  END
END
^


/* Trigger: KASAHAR_AU */
CREATE TRIGGER KASAHAR_AU FOR KASAHAR
ACTIVE AFTER UPDATE POSITION 0
AS
DECLARE VARIABLE VAR_OLDU SMALLINT;
BEGIN
  IF (KASAHAR.SIRA_NO  <> 0) THEN
  BEGIN
    if (OLD.KASA_KOD=NEW.KASA_KOD) then
    BEGIN
    /* ESKI KAYIT DUZELTILIYOR  */
    SELECT PRM_OLDU FROM KASA_BAUPDATE(OLD.KASA_KOD, 0- OLD.KASADEGER,0-OLD.TUTAR_VPB,OLD.TIP,0) INTO :VAR_OLDU;
    SELECT PRM_OLDU FROM KASA_AY_ADDUPDATE(OLD.KASA_KOD,OLD.TARIH,OLD.TIP,0 - OLD.KASADEGER, 0 - OLD.TUTAR_VPB,0) INTO :VAR_OLDU;
    /* YENISI ISLENIYOR  */
    SELECT PRM_OLDU FROM KASA_BAUPDATE(NEW.KASA_KOD, NEW.KASADEGER,NEW.TUTAR_VPB,NEW.TIP,0) INTO :VAR_OLDU;
    SELECT PRM_OLDU FROM KASA_AY_ADDUPDATE(NEW.KASA_KOD,NEW.TARIH,NEW.TIP,NEW.KASADEGER, NEW.TUTAR_VPB,0) INTO :VAR_OLDU;
    END
  END
END
^


SET TERM ; ^



/******************************************************************************/
/****                          Stored Procedures                           ****/
/******************************************************************************/


SET TERM ^ ;




CREATE PROCEDURE ANT_RAPOR (
    prm_rapor_tip smallint)
returns (
    out_g_ant_main_id integer,
    out_g_ant_detail_id integer,
    out_g_def_sira_no integer,
    out_g_tarih date,
    out_g_tasiyan_id varchar(30),
    out_g_ozet_beyan_no varchar(30),
    out_g_ozet_beyan_tar date,
    out_g_ant_beyan_no varchar(30),
    out_g_ant_beyan_tar date,
    out_g_konsimento varchar(30),
    out_g_cari_kod varchar(15),
    out_g_cari_ad varchar(100),
    out_g_kap_adet integer,
    out_g_kilo numeric(18,4),
    out_g_esya varchar(100),
    out_c_def_sira_no integer,
    out_c_tarih date,
    out_c_cik_beyan_no varchar(30),
    out_c_cik_beyan_tar date,
    out_c_gum_vez_no varchar(30),
    out_c_gum_vez_tar date,
    out_c_kap_bol smallint,
    out_c_cik_kap integer,
    out_c_cik_kilo numeric(18,4),
    out_c_kalan_kap integer,
    out_c_kalan_kilo numeric(18,4),
    out_c_gum_kom_kod varchar(15),
    out_c_gum_kom_ad varchar(100),
    out_g_beyan_no varchar(30),
    out_g_beyan_tar date)
as
declare variable sql_detail varchar(10000);
declare variable sql_detail_where varchar(10000);
declare variable sql_detail_govde varchar(10000);
declare variable sql_cikis varchar(10000);
declare variable sql_cikis_govde varchar(10000);
declare variable kalan_kap integer;
declare variable kalan_kilo numeric(18,4);
declare variable cikis_var smallint;
begin
  /* PRM_RAPOR_TIP
     1 Geçici Depolama Giriþ ve Çýkýþ Stok Listesi (ANTREPODA OLUP ,SADECE OZ BEY OLANLAR)
     2 Antrepo Giriþ ve Çýkýþ Stok Listesi (ANTREPODA OLUP ,SADECE ANTREPO BEY NO YEMIS OLANLAR)
     3 Stok Defteri (ANTREPODA OLAN MALLAR)
     4 Tüm Döküm (ANTREPODA OLAN OLMAYAN TUM HAREKETLERIN DOKUMU)
  */
SQL_CIKIS_GOVDE = 'SELECT DEF_SIRA_NO
                  , TARIH
                  , OZET_BEYAN_NO
                  , OZET_BEYAN_TAR
                  , GUM_VEZ_NO
                  , GUM_VEZ_TAR
                  , KAP_BOL
                  , CIK_KAP
                  , CIK_KILO
                  , GUM_KOM_KOD
                  ,(SELECT CARI_AD FROM CARI WHERE CARI_KOD = ANT_MAIN.GUM_KOM_KOD) AS GUM_KOM_AD
                  FROM ANT_MAIN';


SQL_DETAIL_GOVDE = 'SELECT ANT_MAIN.ANT_MAIN_ID
                   , ANT_DETAIL.ANT_DETAIL_ID
                   , ANT_MAIN.DEF_SIRA_NO
                   , ANT_MAIN.TARIH
                   , ANT_MAIN.TASIYAN_ID
                   , ANT_MAIN.OZET_BEYAN_NO
                   , ANT_MAIN.OZET_BEYAN_TAR
                   , ANT_DETAIL.ANT_BEYAN_NO
                   , ANT_DETAIL.ANT_BEYAN_TAR
                   , ANT_DETAIL.KONSIMENTO
                   , ANT_DETAIL.CARI_KOD
                   , ANT_DETAIL.CARI_AD
                   , ANT_DETAIL.KAP_ADET
                   , ANT_DETAIL.KILO
                   , ANT_DETAIL.ESYA
                   FROM ANT_DETAIL
                   INNER JOIN ANT_MAIN ON (ANT_DETAIL.ANT_MAIN_ID = ANT_MAIN.ANT_MAIN_ID)';

   if (PRM_RAPOR_TIP = 1) then SQL_DETAIL_WHERE = ' WHERE ANT_MAIN.GIRCIK = ''G'' AND LTRIM(RTRIM(ANT_DETAIL.ANT_BEYAN_NO))= ''''';
   if (PRM_RAPOR_TIP = 2) then SQL_DETAIL_WHERE = ' WHERE ANT_MAIN.GIRCIK = ''G'' AND LTRIM(RTRIM(ANT_DETAIL.ANT_BEYAN_NO))<> ''''';
   if (PRM_RAPOR_TIP = 3) then SQL_DETAIL_WHERE = ' WHERE ANT_MAIN.GIRCIK = ''G'' AND ANT_DETAIL.KALAN_KAP <> 0 ';
   if (PRM_RAPOR_TIP = 4) then SQL_DETAIL_WHERE = ' WHERE ANT_MAIN.GIRCIK = ''G''';

   SQL_DETAIL = SQL_DETAIL_GOVDE || SQL_DETAIL_WHERE || ' ORDER BY ANT_MAIN.DEVIR DESCENDING,ANT_MAIN.DEF_SIRA_NO ASCENDING,ANT_DETAIL.ANT_DETAIL_ID ASCENDING';

   FOR EXECUTE STATEMENT SQL_DETAIL
   INTO :OUT_G_ANT_MAIN_ID ,
        :OUT_G_ANT_DETAIL_ID ,
        :OUT_G_DEF_SIRA_NO ,
        :OUT_G_TARIH ,
        :OUT_G_TASIYAN_ID ,
        :OUT_G_OZET_BEYAN_NO ,
        :OUT_G_OZET_BEYAN_TAR ,
        :OUT_G_ANT_BEYAN_NO ,
        :OUT_G_ANT_BEYAN_TAR ,
        :OUT_G_KONSIMENTO ,
        :OUT_G_CARI_KOD ,
        :OUT_G_CARI_AD ,
        :OUT_G_KAP_ADET ,
        :OUT_G_KILO ,
        :OUT_G_ESYA
    DO
    BEGIN
      CIKIS_VAR = 0;
      KALAN_KAP = OUT_G_KAP_ADET;
      KALAN_KILO = OUT_G_KILO;

      IF (RTRIM(LTRIM(OUT_G_ANT_BEYAN_NO)) = '' ) THEN
      BEGIN
         OUT_G_BEYAN_NO = OUT_G_OZET_BEYAN_NO;
         OUT_G_BEYAN_TAR = OUT_G_OZET_BEYAN_TAR;
      END ELSE
      BEGIN
         OUT_G_BEYAN_NO = OUT_G_ANT_BEYAN_NO;
         OUT_G_BEYAN_TAR = OUT_G_ANT_BEYAN_TAR;
      END

      OUT_C_DEF_SIRA_NO = Null;
      OUT_C_TARIH = Null;
      OUT_C_CIK_BEYAN_NO = Null;
      OUT_C_CIK_BEYAN_TAR = Null;
      OUT_C_GUM_VEZ_NO = Null;
      OUT_C_GUM_VEZ_TAR = Null;
      OUT_C_KAP_BOL = Null;
      OUT_C_CIK_KAP = Null;
      OUT_C_CIK_KILO = Null;
      OUT_C_GUM_KOM_KOD = Null;
      OUT_C_GUM_KOM_AD = Null;
      OUT_C_KALAN_KAP =  Null;
      OUT_C_KALAN_KILO = Null;
      SQL_CIKIS = SQL_CIKIS_GOVDE || ' WHERE ANT_MAIN.GIRIS_ANT_DETAIL_ID = ' || cast(OUT_G_ANT_DETAIL_ID  as varchar(20)) || ' ORDER BY DEF_SIRA_NO ';
      FOR EXECUTE STATEMENT SQL_CIKIS
      INTO :OUT_C_DEF_SIRA_NO ,
           :OUT_C_TARIH ,
           :OUT_C_CIK_BEYAN_NO ,
           :OUT_C_CIK_BEYAN_TAR ,
           :OUT_C_GUM_VEZ_NO ,
           :OUT_C_GUM_VEZ_TAR ,
           :OUT_C_KAP_BOL ,
           :OUT_C_CIK_KAP ,
           :OUT_C_CIK_KILO ,
           :OUT_C_GUM_KOM_KOD ,
           :OUT_C_GUM_KOM_AD
      DO
      BEGIN
        CIKIS_VAR = 1;
        IF (OUT_C_KAP_BOL = 1) THEN
        BEGIN
          KALAN_KAP = (KALAN_KAP - OUT_C_CIK_KAP) + 1;
        END ELSE
        BEGIN
          KALAN_KAP = KALAN_KAP - OUT_C_CIK_KAP;
        END
        KALAN_KILO = KALAN_KILO - OUT_C_CIK_KILO;
        OUT_C_KALAN_KAP = KALAN_KAP;
        OUT_C_KALAN_KILO = KALAN_KILO;

        SUSPEND;
      END

      if (CIKIS_VAR = 0) then
      begin
        suspend;
      end
    END
end^





CREATE PROCEDURE ARDIYE 
returns (
    out_g_ant_main_id integer,
    out_g_ant_detail_id integer,
    out_g_def_sira_no integer,
    out_g_tarih date,
    out_g_tasiyan_id varchar(30),
    out_g_ozet_beyan_no varchar(30),
    out_g_ozet_beyan_tar date,
    out_g_ant_beyan_no varchar(30),
    out_g_ant_beyan_tar date,
    out_g_konsimento varchar(30),
    out_g_cari_kod varchar(15),
    out_g_cari_ad varchar(100),
    out_g_kap_adet integer,
    out_g_kilo numeric(18,4),
    out_g_esya varchar(100),
    out_g_kalan_kap integer,
    out_g_kalan_kilo numeric(18,4),
    out_g_gun numeric(18,4),
    out_g_ardiye_b_fiy numeric(18,4),
    out_g_ardiye_dovkod varchar(5),
    out_g_hammaliye_b_f numeric(18,4),
    out_g_hamm_dovkod varchar(5),
    out_g_hammaliye numeric(18,4),
    out_g_ardiye numeric(18,4),
    out_g_toplam numeric(18,4),
    out_g_beyan_no varchar(30),
    out_g_beyan_tar date)
as
declare variable sql_detail_govde varchar(10000);
declare variable hammaliye integer;
declare variable kalan_kilo numeric(18,4);
declare variable cikis_var smallint;
declare variable ton_cinsinden numeric(18,4);
begin
  /* PRM_RAPOR_TIP
     1 Geçici Depolama Giriþ ve Çýkýþ Stok Listesi (ANTREPODA OLUP ,SADECE OZ BEY OLANLAR)
     2 Antrepo Giriþ ve Çýkýþ Stok Listesi (ANTREPODA OLUP ,SADECE ANTREPO BEY NO YEMIS OLANLAR)
     3 Stok Defteri (ANTREPODA OLAN MALLAR)
     4 Tüm Döküm (ANTREPODA OLAN OLMAYAN TUM HAREKETLERIN DOKUMU)
  */


SQL_DETAIL_GOVDE = 'SELECT ANT_MAIN.ANT_MAIN_ID
                   , ANT_DETAIL.ANT_DETAIL_ID
                   , ANT_MAIN.DEF_SIRA_NO
                   , ANT_MAIN.TARIH
                   , ANT_MAIN.TASIYAN_ID
                   , ANT_MAIN.OZET_BEYAN_NO
                   , ANT_MAIN.OZET_BEYAN_TAR
                   , ANT_DETAIL.ANT_BEYAN_NO
                   , ANT_DETAIL.ANT_BEYAN_TAR
                   , ANT_DETAIL.KONSIMENTO
                   , ANT_DETAIL.CARI_KOD
                   , ANT_DETAIL.CARI_AD
                   , ANT_DETAIL.KAP_ADET
                   , ANT_DETAIL.KILO
                   , ANT_DETAIL.ESYA
                   , ANT_DETAIL.ARDIYE_FIY
                   , ANT_DETAIL.ARD_DOVKOD
                   , ANT_DETAIL.HAMMALIYE
                   , ANT_DETAIL.HAMM_DOVKOD
                   , ANT_DETAIL.KALAN_KAP
                   , ANT_DETAIL.KALAN_KILO
                   FROM ANT_DETAIL
                   INNER JOIN ANT_MAIN ON (ANT_DETAIL.ANT_MAIN_ID = ANT_MAIN.ANT_MAIN_ID)
                   WHERE ANT_DETAIL.KALAN_KAP > 0
                   ORDER BY ANT_MAIN.DEVIR DESCENDING,ANT_MAIN.DEF_SIRA_NO ASCENDING,ANT_DETAIL.ANT_DETAIL_ID ASCENDING';

   FOR EXECUTE STATEMENT SQL_DETAIL_GOVDE
   INTO :OUT_G_ANT_MAIN_ID ,
        :OUT_G_ANT_DETAIL_ID ,
        :OUT_G_DEF_SIRA_NO ,
        :OUT_G_TARIH ,
        :OUT_G_TASIYAN_ID ,
        :OUT_G_OZET_BEYAN_NO ,
        :OUT_G_OZET_BEYAN_TAR ,
        :OUT_G_ANT_BEYAN_NO ,
        :OUT_G_ANT_BEYAN_TAR ,
        :OUT_G_KONSIMENTO ,
        :OUT_G_CARI_KOD ,
        :OUT_G_CARI_AD ,
        :OUT_G_KAP_ADET ,
        :OUT_G_KILO ,
        :OUT_G_ESYA,
        :OUT_G_ARDIYE_B_FIY,
        :OUT_G_ARDIYE_DOVKOD,
        :OUT_G_HAMMALIYE_B_F,
        :OUT_G_HAMM_DOVKOD,
        :OUT_G_KALAN_KAP,
        :OUT_G_KALAN_KILO
    DO
    BEGIN
      IF (RTRIM(LTRIM(OUT_G_ANT_BEYAN_NO)) = '' ) THEN
      BEGIN
         OUT_G_BEYAN_NO = OUT_G_OZET_BEYAN_NO;
         OUT_G_BEYAN_TAR = OUT_G_OZET_BEYAN_TAR;
      END ELSE
      BEGIN
         OUT_G_BEYAN_NO = OUT_G_ANT_BEYAN_NO;
         OUT_G_BEYAN_TAR = OUT_G_ANT_BEYAN_TAR;
      END
      TON_CINSINDEN = OUT_G_KALAN_KILO / 1000;
      OUT_G_GUN = (CURRENT_DATE - OUT_G_TARIH) + 1;
      OUT_G_ARDIYE = OUT_G_ARDIYE_B_FIY * TON_CINSINDEN * OUT_G_GUN;
      OUT_G_HAMMALIYE = OUT_G_HAMMALIYE_B_F * TON_CINSINDEN;
      OUT_G_TOPLAM = OUT_G_ARDIYE + OUT_G_HAMMALIYE;
      SUSPEND;
    END
end^
















ALTER PROCEDURE CARI_AY_LISTE (
    PRM_YIL INTEGER,
    PRM_AY INTEGER,
    PRM_DOVKOD VARCHAR(5),
    PRM_DEVIR INTEGER,
    PRM_SEFER_MAZOT INTEGER,
    PRM_BAS_TAR DATE,
    PRM_BIT_TAR DATE)
RETURNS (
    CARI_KOD VARCHAR(15),
    CARI_AD VARCHAR(50),
    AY INTEGER,
    BORC NUMERIC(15,4),
    ALACAK NUMERIC(15,4),
    BAKIYE NUMERIC(15,4),
    TIP VARCHAR(10))
AS
declare variable brc numeric(15,4);
declare variable alc numeric(15,4);
declare variable adov varchar(5);
begin
    SELECT DOVKOD FROM DOVKART WHERE VPB=1 INTO :ADOV;

    for select CARI.CARI_KOD from cari into :CARI_KOD
    do begin
    BORC=0;
    ALACAK=0;
    for
    SELECT CARI_AY.CARI_KOD,CARI.CARI_AD,CARI_AY.AY,CARI_AY.BORC,CARI_AY.ALACAK FROM CARI_AY
    LEFT OUTER JOIN CARI ON(CARI.CARI_KOD=CARI_AY.CARI_KOD)
    WHERE CARI_AY.AY = :PRM_AY AND CARI_AY.DOVKOD = :PRM_DOVKOD AND CARI_AY.YIL=:PRM_YIL
    and CARI_AY.CARI_KOD=:CARI_KOD
    ORDER BY CARI_AY.CARI_KOD
    INTO :CARI_KOD,:CARI_AD, :AY, :BORC, :ALACAK
    DO
    BEGIN
    END

    BRC=0;
    ALC=0;
    BAKIYE=0;
    TIP='';

      if (PRM_DEVIR=1) then
      begin
           if (PRM_DOVKOD=ADOV) then
           begin
           SELECT CARI.DEVREDEN_BORC,CARI.DEVREDEN_ALACAK FROM CARI
           where CARI_KOD=:CARI_KOD
           INTO :BRC,:ALC;
           if (NOT BRC IS NULL) then
           BORC=BORC+BRC;
           if (NOT ALC IS NULL) then
           ALACAK=ALACAK+ALC;
           end
    
           if (PRM_DOVKOD<>ADOV) then
           begin
               SELECT CARI_dov.DEVREDEN_BORC,CARI_dov.DEVREDEN_ALACAK FROM CARI
               left outer join cari_dov on (cari_dov.cari_kod=cari.cari_kod)
               where cari_dov.dovkod=:PRM_DOVKOD and CARI.CARI_KOD=:CARI_KOD
               INTO :BRC,:ALC;
               if (NOT BRC IS NULL) then
               BORC=BORC+BRC;
               if (NOT ALC IS NULL) then
               ALACAK=ALACAK+ALC;
           end
      end

      if (PRM_SEFER_MAZOT=1) then
      begin
       if (PRM_DOVKOD=ADOV) then
       begin
               select SUM((CASE
               WHEN TIP='B' THEN  TUTAR_VPB
               ELSE 0
               END)) BORC
               ,SUM((CASE
               WHEN TIP='A' THEN  TUTAR_VPB
               ELSE 0
               END)) ALACAK
               from carihar
               WHERE (belge_tur=41 or belge_tur=42) and CARI_KOD=:CARI_KOD
               and (carihar.tarih between :prm_bas_tar and :prm_bit_tar)
               INTO :BRC,:ALC;
               if (NOT BRC IS NULL) then
               BORC=BORC+BRC;
               if (NOT ALC IS NULL) then
               ALACAK=ALACAK+ALC;

       end
       if (PRM_DOVKOD<>ADOV) then
       begin
               select
               SUM((CASE
               WHEN CARIHAR.TIP='B' THEN  CARIHAR_DOV.TUTAR
               ELSE 0
               END)) BORC
               ,SUM((CASE
               WHEN CARIHAR.TIP='A' THEN  CARIHAR_DOV.TUTAR
               ELSE 0
               END)) ALACAK
               from CARIHAR
               LEFT OUTER JOIN CARIHAR_DOV ON (CARIHAR.CARIHAR_ID=CARIHAR_DOV.CARIHAR_ID AND CARIHAR.CARIHAR_SID=CARIHAR_DOV.CARIHAR_SID)
               WHERE (CARIHAR.belge_tur=41 or CARIHAR.belge_tur=42) and CARIHAR_DOV.dovkod=:prm_dovkod
               and (carihar.tarih between :prm_bas_tar and :prm_bit_tar)
               and CARI_KOD=:CARI_KOD
               INTO :BRC,:ALC;

               if (NOT BRC IS NULL) then
               BORC=BORC+BRC;
               if (NOT ALC IS NULL) then
               ALACAK=ALACAK+ALC;

       end
      end

      if (BORC>ALACAK) then
      BEGIN
        BAKIYE=BORC-ALACAK;
        TIP='BORC';
      END

      if (ALACAK>BORC) then
      BEGIN
        BAKIYE=ALACAK-BORC;
        TIP='ALACAK';
      END
      if ((ALACAK>0) or (borc>0)  ) then
      suspend;

    end
end
^

ALTER PROCEDURE CARI_BAUPDATE (
    PRM_CARI_KOD VARCHAR(15),
    PRM_TARIH DATE,
    PRM_DOV_BAZ_TAR DATE,
    PRM_DOVKOD VARCHAR(5),
    PRM_DOVKUR NUMERIC(18,4),
    PRM_TUTAR NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_TIP CHAR(1),
    ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT,
    PRM_LIMITASIMI SMALLINT)
AS
DECLARE VARIABLE OLDBORC NUMERIC(18,4);
DECLARE VARIABLE OLDALACAK NUMERIC(18,4);
DECLARE VARIABLE OLDRISK NUMERIC(18,4);
DECLARE VARIABLE OLDKREDILMT NUMERIC(18,4);
BEGIN
  PRM_OLDU = 1;
  PRM_LIMITASIMI = 0;
  SELECT PRM_OLDU FROM CARI_DOV_ADDUPDATE(:PRM_CARI_KOD,:PRM_DOV_BAZ_TAR ,:PRM_TIP,:PRM_TUTAR,:PRM_DOVKOD, :PRM_DOVKUR ,:ISN) INTO :PRM_OLDU;
  if (PRM_OLDU= 0) then
  BEGIN
    EXECUTE PROCEDURE WRITE_ISN_ERR (:ISN, 'CARI_BAUPDATE','cari_dov_addupdate Prosedüründe hata oluþtuðu için iþlem yapýlmadan çýkýldý');
    SUSPEND;
    EXIT;
  END
  SELECT BORC,ALACAK,RISK,KREDILMT
  FROM CARI
  WHERE CARI_KOD = :PRM_CARI_KOD
  INTO :OLDBORC,:OLDALACAK,:OLDRISK,:OLDKREDILMT;
  IF ( OLDBORC IS NULL ) THEN OLDBORC = 0;
  IF ( OLDALACAK IS NULL ) THEN OLDALACAK = 0;
  IF ( OLDRISK IS NULL ) THEN OLDRISK = 0;
  IF ( OLDKREDILMT IS NULL ) THEN OLDKREDILMT = 0;
  IF (PRM_TIP = 'B' ) THEN /* BORC */
  BEGIN
    OLDBORC = OLDBORC + :PRM_TUTAR_VPB;
    IF (OLDKREDILMT <> 0) THEN OLDRISK = OLDRISK + :PRM_TUTAR_VPB;
    IF ((OLDKREDILMT <> 0) AND (OLDRISK > OLDKREDILMT)) THEN PRM_LIMITASIMI = 1;
    UPDATE CARI SET BORC = :OLDBORC, RISK=:OLDRISK WHERE CARI_KOD = :PRM_CARI_KOD;
    PRM_OLDU = 1;
  END
  IF (PRM_TIP = 'A' ) THEN /* ALACAK */
  BEGIN
    OLDALACAK = OLDALACAK + :PRM_TUTAR_VPB;
    IF (OLDKREDILMT <> 0) THEN OLDRISK = OLDRISK - :PRM_TUTAR_VPB;
    UPDATE CARI SET ALACAK = :OLDALACAK, RISK=:OLDRISK  WHERE CARI_KOD = :PRM_CARI_KOD;
    PRM_OLDU = 1;
  END
  SUSPEND;
END
^

ALTER PROCEDURE CARI_DOV_ADDUPDATE (
    PRM_CARI_KOD VARCHAR(15),
    PRM_DOV_BAZ_TAR DATE,
    PRM_TIP CHAR(1),
    PRM_TUTAR NUMERIC(18,4),
    PRM_DOVKOD CHAR(5),
    PRM_DOVKUR NUMERIC(18,4),
    ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT)
AS
DECLARE VARIABLE DEFCUR VARCHAR(15); /* DEFAULT PARABÝRÝMÝNÝN DÖVÝZ KODU */
DECLARE VARIABLE DOVKODU CHAR(5);
DECLARE VARIABLE KAYITSAY INTEGER;
DECLARE VARIABLE KURDEGER NUMERIC(18,4);
DECLARE VARIABLE KURTIPI VARCHAR(15);
DECLARE VARIABLE DOVTAKIP VARCHAR(15);
DECLARE VARIABLE VAR_INT_KURTIPI SMALLINT;
BEGIN
/* TODO: DOVÝZ BAZINDA RÝSK TAKÝBÝ YAPILMADI!!! */
  SELECT PRM_DEGER FROM GET_PARAM (1,'VPB') INTO :DEFCUR;
  SELECT PRM_DEGER FROM GET_PARAM (1,'SATISKUR') INTO :KURTIPI; /* KUR DEÐÝÞTÝRME ÝÞLEMLERÝ SIRASINDA KULLANILAN KUR TÝPÝ SATIÞ/ALIÞ */
  SELECT PRM_DEGER FROM GET_PARAM (1,'USEDOVIZ') INTO :DOVTAKIP;
  VAR_INT_KURTIPI = CAST (KURTIPI AS SMALLINT);
  if (:DOVTAKIP ='1') then /* EÐER BÝRDEN FAZLA PARA BÝRÝMÝ ÝLE TAKÝP YAPILIYORSA */
  BEGIN
      FOR SELECT DOVKOD
      FROM DOVKART
      WHERE DOVKOD <> :DEFCUR AND TAKIP = 1
      INTO :DOVKODU
      DO BEGIN
         IF (DOVKODU=PRM_DOVKOD) THEN /* EÐER AYNI DOVIZ KODUNDA ÝSE DÖNÜÞTÜRME YAPMAZ*/
         BEGIN
           KURDEGER = PRM_TUTAR;
         END ELSE
         BEGIN
           SELECT PRM_KUR, PRM_OLDU FROM KURLU_DONUSTUR ( :PRM_DOV_BAZ_TAR , :PRM_DOVKOD , :PRM_DOVKUR ,:DOVKODU ,:PRM_TUTAR , :VAR_INT_KURTIPI, 1,:ISN) INTO :KURDEGER,:PRM_OLDU; /* KUR DEÐERÝ ALINIYOR */
           IF (PRM_OLDU = 0 ) THEN
           BEGIN
             EXECUTE PROCEDURE WRITE_ISN_ERR (:ISN, 'CARI_DOV_ADDUPDATE','Kur dönüþtürme iþlemi yapýlamadý');
             SUSPEND;
             EXIT;
           END
         END

         SELECT COUNT(*) FROM CARI_DOV WHERE CARI_KOD = :PRM_CARI_KOD AND DOVKOD = :DOVKODU INTO :KAYITSAY;
         IF (KAYITSAY = 0) THEN /* INSERT */
         BEGIN
           IF (PRM_TIP = 'B') THEN INSERT INTO CARI_DOV (CARI_KOD,DOVKOD,KREDILMT,RISK,BORC,ALACAK) VALUES (:PRM_CARI_KOD,:DOVKODU,0,0,:KURDEGER,0);
           IF (PRM_TIP = 'A') THEN INSERT INTO CARI_DOV (CARI_KOD,DOVKOD,KREDILMT,RISK,BORC,ALACAK) VALUES (:PRM_CARI_KOD,:DOVKODU,0,0,0,:KURDEGER);
         END ELSE /* UPDATE */
         BEGIN
           IF (PRM_TIP = 'B') THEN  UPDATE CARI_DOV SET BORC = BORC + :KURDEGER WHERE CARI_KOD = :PRM_CARI_KOD AND DOVKOD = :DOVKODU;
           IF (PRM_TIP = 'A') THEN  UPDATE CARI_DOV SET ALACAK = ALACAK + :KURDEGER WHERE CARI_KOD = :PRM_CARI_KOD  AND DOVKOD = :DOVKODU;
         END
      end
    END
    PRM_OLDU = 1;
    SUSPEND;
END
^

ALTER PROCEDURE CARI_LISTE (
    DEVIR_KULLAN INTEGER,
    ILK_KOD VARCHAR(15),
    SON_KOD VARCHAR(15),
    IN_KOD VARCHAR(10000),
    KULLAN_TIP VARCHAR(1),
    DOV_KOD VARCHAR(15),
    GRUP_KOD VARCHAR(15))
RETURNS (
    PRM_CARI_SID SMALLINT,
    PRM_CARI_KOD VARCHAR(15),
    PRM_CARI_AD VARCHAR(50),
    PRM_CARI_BORC NUMERIC(15,4),
    PRM_CARI_ALACAK NUMERIC(15,4),
    PRM_CARI_DEV_BORC NUMERIC(15,4),
    PRM_CARI_DEV_ALACAK NUMERIC(15,4),
    PRM_CARI_BORC_BAKIYE NUMERIC(15,4),
    PRM_CARI_ALACAK_BAKIYE NUMERIC(15,4))
AS
declare variable borc_bakiye numeric(15,4);
declare variable alacak_bakiye numeric(15,4);
declare variable sql_str varchar(20000);
declare variable ilk_cari_kod varchar(15);
begin
    BORC_BAKIYE=0;
    ALACAK_BAKIYE=0;
    if (kullan_tip='1') then
    BEGIN
        FOR SELECT
        CARI.CARI_SID,
        CARI.CARI_KOD,
        CARI.CARI_AD,
        CARI.BORC,
        CARI.ALACAK,
        CARI.DEVREDEN_BORC,
        CARI.DEVREDEN_ALACAK
        FROM CARI
        ORDER BY CARI.CARI_KOD
        INTO :PRM_CARI_SID, :PRM_CARI_KOD,:PRM_CARI_AD,:PRM_CARI_BORC,:PRM_CARI_ALACAK,:prm_cari_dev_borc,:prm_cari_dev_alacak
        DO
        BEGIN
             BORC_BAKIYE=0;
             ALACAK_BAKIYE=0;

             IF (DEVIR_KULLAN=1) THEN
             BEGIN
                  BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC+prm_cari_dev_borc;
                  ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK+prm_cari_dev_alacak;
             END
             ELSE
             BEGIN
                  BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC;
                  ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK;
             END
            

             IF (not dov_kod is null) THEN
             BEGIN
                  SELECT DEVREDEN_BORC,DEVREDEN_ALACAK FROM CARI_DOV
                  WHERE CARI_KOD=:PRM_CARI_KOD AND DOVKOD=:dov_kod
                  INTO :prm_cari_dev_borc,:prm_cari_dev_alacak;

                 IF (DEVIR_KULLAN=1) THEN
                 BEGIN
                      BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC+prm_cari_dev_borc;
                      ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK+prm_cari_dev_alacak;
                 END
                 ELSE
                 BEGIN
                      BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC;
                      ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK;
                 END
             END


             if (BORC_BAKIYE>ALACAK_BAKIYE) then
             BEGIN
                  PRM_CARI_BORC_BAKIYE=BORC_BAKIYE-ALACAK_BAKIYE;
             END
             ELSE
             BEGIN
                  PRM_CARI_BORC_BAKIYE=0;
             END
            
             if (ALACAK_BAKIYE>BORC_BAKIYE) then
             BEGIN
                  PRM_CARI_ALACAK_BAKIYE=ALACAK_BAKIYE-BORC_BAKIYE;
             END
             ELSE
             BEGIN
                  PRM_CARI_ALACAK_BAKIYE=0;
             END
    
             SUSPEND;
        END
    END

    if (kullan_tip='2') then
    BEGIN
    FOR SELECT
        CARI.CARI_SID,
        CARI.CARI_KOD,
        CARI.CARI_AD,
        CARI.BORC,
        CARI.ALACAK,
        CARI.DEVREDEN_BORC,
        CARI.DEVREDEN_ALACAK
        FROM CARI
        WHERE CARI_KOD BETWEEN :ilk_kod and :son_kod
        ORDER BY CARI.CARI_KOD
        INTO :PRM_CARI_SID, :PRM_CARI_KOD,:PRM_CARI_AD,:PRM_CARI_BORC,PRM_CARI_ALACAK,prm_cari_dev_borc,prm_cari_dev_alacak
        DO
        BEGIN
             IF (DEVIR_KULLAN=1) THEN
             BEGIN
                  BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC+prm_cari_dev_borc;
                  ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK+prm_cari_dev_alacak;
             END
             ELSE
             BEGIN
                  BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC;
                  ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK;
             END

             IF (not dov_kod is null) THEN
             BEGIN
                  SELECT DEVREDEN_BORC,DEVREDEN_ALACAK FROM CARI_DOV
                  WHERE CARI_KOD=:PRM_CARI_KOD AND DOVKOD=:dov_kod
                  INTO :prm_cari_dev_borc,:prm_cari_dev_alacak;

                 IF (DEVIR_KULLAN=1) THEN
                 BEGIN
                      BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC+prm_cari_dev_borc;
                      ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK+prm_cari_dev_alacak;
                 END
                 ELSE
                 BEGIN
                      BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC;
                      ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK;
                 END
             END

            
             if (BORC_BAKIYE>ALACAK_BAKIYE) then
             BEGIN
                  PRM_CARI_BORC_BAKIYE=BORC_BAKIYE-ALACAK_BAKIYE;
             END
             ELSE
             BEGIN
                  PRM_CARI_BORC_BAKIYE=0;
             END
            
             if (ALACAK_BAKIYE>BORC_BAKIYE) then
             BEGIN
                  PRM_CARI_ALACAK_BAKIYE=ALACAK_BAKIYE-BORC_BAKIYE;
             END
             ELSE
             BEGIN
                  PRM_CARI_ALACAK_BAKIYE=0;
             END
    
             SUSPEND;
        END
    END



    if (:kullan_tip='3') then
    BEGIN
        SQL_STR='SELECT
        CARI.CARI_SID,
        CARI.CARI_KOD,
        CARI.CARI_AD,
        CARI.BORC,
        CARI.ALACAK,
        CARI.DEVREDEN_BORC,
        CARI.DEVREDEN_ALACAK
        FROM CARI
        WHERE CARI_KOD IN ('||:in_kod||')
        ORDER BY CARI.CARI_KOD';
        /*WHERE CARI_KOD IN ('CR01000001','CR01000003')*/
        FOR execute statement sql_str
        INTO :PRM_CARI_SID,:PRM_CARI_KOD,:PRM_CARI_AD,:PRM_CARI_BORC,PRM_CARI_ALACAK,prm_cari_dev_borc,prm_cari_dev_alacak
        DO
        BEGIN
             IF (DEVIR_KULLAN=1) THEN
             BEGIN
                  BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC+prm_cari_dev_borc;
                  ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK+prm_cari_dev_alacak;
             END
             ELSE
             BEGIN
                  BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC;
                  ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK;
             END


             IF (not dov_kod is null) THEN
             BEGIN
                  SELECT DEVREDEN_BORC,DEVREDEN_ALACAK FROM CARI_DOV
                  WHERE CARI_KOD=:PRM_CARI_KOD AND DOVKOD=:dov_kod
                  INTO :prm_cari_dev_borc,:prm_cari_dev_alacak;

                 IF (DEVIR_KULLAN=1) THEN
                 BEGIN
                      BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC+prm_cari_dev_borc;
                      ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK+prm_cari_dev_alacak;
                 END
                 ELSE
                 BEGIN
                      BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC;
                      ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK;
                 END
             END

            
             if (BORC_BAKIYE>ALACAK_BAKIYE) then
             BEGIN
                  PRM_CARI_BORC_BAKIYE=BORC_BAKIYE-ALACAK_BAKIYE;
             END
             ELSE
             BEGIN
                  PRM_CARI_BORC_BAKIYE=0;
             END
            
             if (ALACAK_BAKIYE>BORC_BAKIYE) then
             BEGIN
                  PRM_CARI_ALACAK_BAKIYE=ALACAK_BAKIYE-BORC_BAKIYE;
             END
             ELSE
             BEGIN
                  PRM_CARI_ALACAK_BAKIYE=0;
             END
    
             SUSPEND;
        END
    END


    if (:kullan_tip='4') then
    BEGIN
        SQL_STR='SELECT
        CARI.CARI_SID,
        CARI.CARI_KOD,
        CARI.CARI_AD,
        CARI.BORC,
        CARI.ALACAK,
        CARI.DEVREDEN_BORC,
        CARI.DEVREDEN_ALACAK
        FROM CARI
        right outer join cari_grup_uye ON (cari.cari_kod=cari_grup_uye.cari_kod)
        WHERE cari_grup_uye.cari_grup_kod='''||:grup_kod||
        ''' ORDER BY CARI.CARI_KOD';

        FOR execute statement sql_str
        INTO :PRM_CARI_SID,:PRM_CARI_KOD,:PRM_CARI_AD,:PRM_CARI_BORC,PRM_CARI_ALACAK,prm_cari_dev_borc,prm_cari_dev_alacak
        DO
        BEGIN
             IF (DEVIR_KULLAN=1) THEN
             BEGIN
                  BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC+prm_cari_dev_borc;
                  ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK+prm_cari_dev_alacak;
             END
             ELSE
             BEGIN
                  BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC;
                  ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK;
             END


             IF (not dov_kod is null) THEN
             BEGIN
                  SELECT DEVREDEN_BORC,DEVREDEN_ALACAK FROM CARI_DOV
                  WHERE CARI_KOD=:PRM_CARI_KOD AND DOVKOD=:dov_kod
                  INTO :prm_cari_dev_borc,:prm_cari_dev_alacak;

                 IF (DEVIR_KULLAN=1) THEN
                 BEGIN
                      BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC+prm_cari_dev_borc;
                      ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK+prm_cari_dev_alacak;
                 END
                 ELSE
                 BEGIN
                      BORC_BAKIYE=BORC_BAKIYE+PRM_CARI_BORC;
                      ALACAK_BAKIYE=ALACAK_BAKIYE+PRM_CARI_ALACAK;
                 END
             END

            
             if (BORC_BAKIYE>ALACAK_BAKIYE) then
             BEGIN
                  PRM_CARI_BORC_BAKIYE=BORC_BAKIYE-ALACAK_BAKIYE;
             END
             ELSE
             BEGIN
                  PRM_CARI_BORC_BAKIYE=0;
             END
            
             if (ALACAK_BAKIYE>BORC_BAKIYE) then
             BEGIN
                  PRM_CARI_ALACAK_BAKIYE=ALACAK_BAKIYE-BORC_BAKIYE;
             END
             ELSE
             BEGIN
                  PRM_CARI_ALACAK_BAKIYE=0;
             END
    
             SUSPEND;
        END
    END


end
^


CREATE PROCEDURE CARI_LISTE_HAR (
    devir_kullan integer,
    cari_kod varchar(15),
    dov_kod varchar(15),
    ilk_tar date,
    son_tar date,
    sefer_mazot_cikar integer,
    devir_ekle integer,
    sid smallint)
returns (
    prm_cari_sid smallint,
    prm_cari_kod varchar(15),
    prm_tarih date,
    prm_belge_tur integer,
    prm_fis_no integer,
    prm_aciklama varchar(100),
    prm_tip char(1),
    prm_borc numeric(15,4),
    prm_alacak numeric(15,4),
    prm_cari_borc_bakiye numeric(15,4),
    prm_cari_alacak_bakiye numeric(15,4),
    prm_cari_dev_borc_bakiye numeric(15,4),
    prm_cari_dev_alacak_bakiye numeric(15,4))
as
declare variable borc_bakiye numeric(15,4);
declare variable alacak_bakiye numeric(15,4);
declare variable tutar numeric(15,4);
declare variable yab_tutar numeric(15,4);
declare variable borc numeric(15,4);
declare variable alacak numeric(15,4);
declare variable cari_dev_borc numeric(15,4);
declare variable cari_dev_alacak numeric(15,4);
declare variable sql_str varchar(10000);
declare variable sql_stra varchar(10000);
declare variable giris_kontrol integer;
declare variable giris_kontrol1 integer;
declare variable es_aciklama varchar(100);
declare variable ilk_cari_kod varchar(15);
declare variable es_prm_fis_no integer;
declare variable es_prm_tarih date;
declare variable es_prm_belge_tur integer;
begin
    BORC_BAKIYE=0;
    ALACAK_BAKIYE=0;
    giris_kontrol=0;
    giris_kontrol1=0;

    cari_dev_borc=0;
    cari_dev_alacak=0;
    prm_cari_dev_borc_bakiye=0;
    prm_cari_dev_alacak_bakiye=0;
    prm_cari_borc_bakiye=0;
    prm_cari_alacak_bakiye=0;
    
    PRM_BORC=0;
    PRM_ALACAK=0;


    SQL_STRa=
    'SELECT
    CARI_SID,
    CARI_KOD
    FROM CARI
    ORDER BY CARI.CARI_KOD';

    FOR execute statement SQL_STRA
    INTO :PRM_CARI_SID, :PRM_CARI_KOD
    DO
    BEGIN


        if (:dov_kod is null) then
        BEGIN
    
            SQL_STR='';
    
            if (sefer_mazot_cikar=1) then
            SQL_STR=
            'SELECT
            TARIH,
            BELGE_TUR,
            BELGE_ID,
            ACIKLAMA,
            TIP,
            TUTAR_VPB
            FROM CARIHAR
            where (tarih between '''||:ilk_tar||''' and '''||:son_tar||''') AND CARI_KOD='''||:PRM_CARI_KOD||''' and BELGE_TUR<>41 and BELGE_TUR<>42
            ORDER BY CARIHAR.TARIH';
    

            if (sefer_mazot_cikar=0) then
            SQL_STR=
            'SELECT
            TARIH,
            BELGE_TUR,
            BELGE_ID,
            ACIKLAMA,
            TIP,
            TUTAR_VPB
            FROM CARIHAR
            where (tarih between '''||:ilk_tar||''' and '''||:son_tar|| ''' AND CARI_KOD='''||:PRM_CARI_KOD||
            ''') ORDER BY CARIHAR.TARIH ';
    
    
            if (sefer_mazot_cikar=3) then
            SQL_STR=
            'SELECT
            TARIH,
            BELGE_TUR,
            BELGE_ID,
            ACIKLAMA,
            TIP,
            TUTAR_VPB
            FROM CARIHAR
            where (tarih between '''||:ilk_tar||''' and '''||:son_tar||''') AND CARI_KOD='''||:PRM_CARI_KOD||''' and BELGE_TUR<>42
            ORDER BY CARIHAR.TARIH';
    

            if (sefer_mazot_cikar=2) then
            SQL_STR=
            'SELECT
            TARIH,
            BELGE_TUR,
            BELGE_ID,
            ACIKLAMA,
            TIP,
            TUTAR_VPB
            FROM CARIHAR
            where (tarih between '''||:ilk_tar||''' and '''||:son_tar||''') AND CARI_KOD='''||:PRM_CARI_KOD||''' and BELGE_TUR<>41
            ORDER BY CARIHAR.TARIH';
    



             if (ilk_cari_kod<>prm_cari_kod) then
             begin
             giris_kontrol=0;
             giris_kontrol1=0;
             BORC_BAKIYE=0;
             ALACAK_BAKIYE=0;
             end

             cari_dev_borc=0;
             cari_dev_alacak=0;
             prm_cari_dev_borc_bakiye=0;
             prm_cari_dev_alacak_bakiye=0;
             prm_cari_borc_bakiye=0;
             prm_cari_alacak_bakiye=0;
    
             PRM_BORC=0;
             PRM_ALACAK=0;
             BORC_BAKIYE=0;
             ALACAK_BAKIYE=0;


             if (giris_kontrol=0) then
             if (devir_ekle=1) then
             begin



             SELECT
             CARI.DEVREDEN_ALACAK,
             CARI.DEVREDEN_BORC
             FROM CARI
             where CARI_KOD=:prm_cari_kod
             INTO :cari_dev_alacak,:cari_dev_borc;


             prm_cari_dev_borc_bakiye=:cari_dev_borc;
             prm_cari_dev_alacak_bakiye=:cari_dev_alacak;


                 PRM_ACIKLAMA='DEVÝR';
                 PRM_BORC=prm_cari_dev_borc_bakiye;
                 PRM_ALACAK=prm_cari_dev_alacak_bakiye;
    
                 if (prm_cari_dev_borc_bakiye>prm_cari_dev_alacak_bakiye) then
                 begin
                     PRM_CARI_BORC_BAKIYE=prm_cari_dev_borc_bakiye-prm_cari_dev_alacak_bakiye;
                 end
                 else
                 PRM_CARI_BORC_BAKIYE=0;
        
                 if (prm_cari_dev_alacak_bakiye>prm_cari_dev_borc_bakiye) then
                 begin
                     PRM_CARI_ALACAK_BAKIYE=prm_cari_dev_alacak_bakiye-prm_cari_dev_borc_bakiye;
                 end
                 else
                 PRM_CARI_ALACAK_BAKIYE=0;
    
                 giris_kontrol=1;
                 ilk_cari_kod=prm_cari_kod;
                 es_PRM_FIS_NO=PRM_FIS_NO;
                 PRM_FIS_NO=0;
                 es_PRM_TARIH=PRM_TARIH;
                 PRM_TARIH=cast('01.01.2010' as date);
                 es_PRM_BELGE_TUR=PRM_BELGE_TUR;
                 PRM_BELGE_TUR=0;
                 if ((cari_dev_alacak<>0) or (cari_dev_borc<>0)) then
                 SUSPEND;
             end

    
            FOR execute statement SQL_STR
            INTO :PRM_TARIH, :PRM_BELGE_TUR, :PRM_FIS_NO, :PRM_ACIKLAMA, :PRM_TIP, :TUTAR
            DO
            BEGIN
                 if (PRM_TIP='B') then
                 BEGIN
                        BORC=TUTAR;
                        ALACAK=0;
                 END
                 ELSE
                 BEGIN
                        BORC=0;
                        ALACAK=TUTAR;
                 END
        
                 IF (DEVIR_KULLAN=1) THEN
                 BEGIN
                      if (giris_kontrol1=0) then
                      begin
                      BORC_BAKIYE=BORC_BAKIYE+BORC+cari_dev_borc;
                      ALACAK_BAKIYE=ALACAK_BAKIYE+ALACAK+cari_dev_alacak;
                      giris_kontrol1=1;
                      end
                      else
                      begin
                      BORC_BAKIYE=BORC_BAKIYE+BORC;
                      ALACAK_BAKIYE=ALACAK_BAKIYE+ALACAK;
                      end
                 END
                 ELSE
                 BEGIN
                      BORC_BAKIYE=BORC_BAKIYE+BORC;
                      ALACAK_BAKIYE=ALACAK_BAKIYE+ALACAK;
                 END
                
                 if (BORC_BAKIYE>ALACAK_BAKIYE) then
                 BEGIN
                      PRM_CARI_BORC_BAKIYE=BORC_BAKIYE-ALACAK_BAKIYE;
                 END
                 ELSE
                 BEGIN
                      PRM_CARI_BORC_BAKIYE=0;
                 END
                
                 if (ALACAK_BAKIYE>BORC_BAKIYE) then
                 BEGIN
                      PRM_CARI_ALACAK_BAKIYE=ALACAK_BAKIYE-BORC_BAKIYE;
                 END
                 ELSE
                 BEGIN
                      PRM_CARI_ALACAK_BAKIYE=0;
                 END
        
                 PRM_BORC=BORC;
                 PRM_ALACAK=ALACAK;
        
                 SUSPEND;
            END
        END
        ELSE
        BEGIN
    
            if (sefer_mazot_cikar=1) then
            SQL_STR=
            'SELECT
            CARIHAR.TARIH,
            CARIHAR.BELGE_TUR,
            CARIHAR.BELGE_ID,
            CARIHAR.ACIKLAMA,
            CARIHAR.TIP,
            CARIHAR.TUTAR_VPB,
            CARIHAR_DOV.TUTAR
            FROM CARIHAR
            left outer join carihar_dov on (carihar.CARIHAR_ID=carihar_dov.CARIHAR_ID and carihar.CARIHAR_SID=carihar_dov.CARIHAR_SID)
            where (CARIHAR.tarih between  '''||:ilk_tar||''' and '''||:son_tar||''') AND CARI_KOD='''||:PRM_CARI_KOD||''' AND carihar_dov.dovkod='''||:DOV_KOD||+'''
            and CARIHAR.BELGE_TUR<>41  and CARIHAR.BELGE_TUR<>42
            ORDER BY CARIHAR.TARIH';

            if (sefer_mazot_cikar=0) then
            SQL_STR=
            'SELECT
            CARIHAR.TARIH,
            CARIHAR.BELGE_TUR,
            CARIHAR.BELGE_ID,
            CARIHAR.ACIKLAMA,
            CARIHAR.TIP,
            CARIHAR.TUTAR_VPB,
            CARIHAR_DOV.TUTAR
            FROM CARIHAR
            left outer join carihar_dov on (carihar.CARIHAR_ID=carihar_dov.CARIHAR_ID and carihar.CARIHAR_SID=carihar_dov.CARIHAR_SID)
            where (CARIHAR.tarih between  '''||:ilk_tar||''' and '''||:son_tar||''') AND CARI_KOD='''||:PRM_CARI_KOD||''' AND carihar_dov.dovkod='''||:DOV_KOD||+'''
            ORDER BY CARIHAR.TARIH';


            if (sefer_mazot_cikar=3) then
            SQL_STR=
            'SELECT
            CARIHAR.TARIH,
            CARIHAR.BELGE_TUR,
            CARIHAR.BELGE_ID,
            CARIHAR.ACIKLAMA,
            CARIHAR.TIP,
            CARIHAR.TUTAR_VPB,
            CARIHAR_DOV.TUTAR
            FROM CARIHAR
            left outer join carihar_dov on (carihar.CARIHAR_ID=carihar_dov.CARIHAR_ID and carihar.CARIHAR_SID=carihar_dov.CARIHAR_SID)
            where (CARIHAR.tarih between  '''||:ilk_tar||''' and '''||:son_tar||''') AND CARI_KOD='''||:PRM_CARI_KOD||''' AND carihar_dov.dovkod='''||:DOV_KOD||+'''
            and CARIHAR.BELGE_TUR<>42
            ORDER BY CARIHAR.TARIH';


            if (sefer_mazot_cikar=2) then
            SQL_STR=
            'SELECT
            CARIHAR.TARIH,
            CARIHAR.BELGE_TUR,
            CARIHAR.BELGE_ID,
            CARIHAR.ACIKLAMA,
            CARIHAR.TIP,
            CARIHAR.TUTAR_VPB,
            CARIHAR_DOV.TUTAR
            FROM CARIHAR
            left outer join carihar_dov on (carihar.CARIHAR_ID=carihar_dov.CARIHAR_ID and carihar.CARIHAR_SID=carihar_dov.CARIHAR_SID)
            where (CARIHAR.tarih between  '''||:ilk_tar||''' and '''||:son_tar||''') AND CARI_KOD='''||:PRM_CARI_KOD||''' AND carihar_dov.dovkod='''||:DOV_KOD||+'''
            and CARIHAR.BELGE_TUR<>41
            ORDER BY CARIHAR.TARIH';


             SELECT
             DEVREDEN_ALACAK,
             DEVREDEN_BORC
             FROM CARI_DOV
             where CARI_KOD=:prm_cari_kod AND DOVKOD=:DOV_KOD
             INTO :cari_dev_alacak,:cari_dev_borc;


             prm_cari_dev_borc_bakiye=cari_dev_borc;
             prm_cari_dev_alacak_bakiye=cari_dev_alacak;


             if (ilk_cari_kod<>prm_cari_kod) then
             begin
             giris_kontrol=0;
             giris_kontrol1=0;
             BORC_BAKIYE=0;
             ALACAK_BAKIYE=0;
             end

             cari_dev_borc=0;
             cari_dev_alacak=0;
             prm_cari_dev_borc_bakiye=0;
             prm_cari_dev_alacak_bakiye=0;
             prm_cari_borc_bakiye=0;
             prm_cari_alacak_bakiye=0;
    
             PRM_BORC=0;
             PRM_ALACAK=0;
             BORC_BAKIYE=0;
             ALACAK_BAKIYE=0;


             if (giris_kontrol=0) then
             if (devir_ekle=1) then
             begin
                 es_aciklama=PRM_ACIKLAMA;
                 PRM_ACIKLAMA='DEVÝR';
                 PRM_BORC=prm_cari_dev_borc_bakiye;
                 PRM_ALACAK=prm_cari_dev_alacak_bakiye;
    
                 if (prm_cari_dev_borc_bakiye>prm_cari_dev_alacak_bakiye) then
                 begin
                     PRM_CARI_BORC_BAKIYE=prm_cari_dev_borc_bakiye-prm_cari_dev_alacak_bakiye;
                 end
                 else
                 PRM_CARI_BORC_BAKIYE=0;
        
                 if (prm_cari_dev_alacak_bakiye>prm_cari_dev_borc_bakiye) then
                 begin
                     PRM_CARI_ALACAK_BAKIYE=prm_cari_dev_alacak_bakiye-prm_cari_dev_borc_bakiye;
                 end
                 else
                 PRM_CARI_ALACAK_BAKIYE=0;
    
                 giris_kontrol=1;
                 ilk_cari_kod=prm_cari_kod;
                 es_PRM_FIS_NO=PRM_FIS_NO;
                 PRM_FIS_NO=0;
                 es_PRM_TARIH=PRM_TARIH;
                 PRM_TARIH=cast('01.01.2010' as date);
                 es_PRM_BELGE_TUR=PRM_BELGE_TUR;
                 PRM_BELGE_TUR=0;

                 if ((cari_dev_alacak<>0) and (cari_dev_borc<>0)) then
                 SUSPEND;
             end
    
    
            FOR execute statement SQL_STR
            INTO :PRM_TARIH,:PRM_BELGE_TUR,:PRM_FIS_NO,:PRM_ACIKLAMA,:PRM_TIP,TUTAR,:YAB_TUTAR
            DO
            BEGIN
                 if (PRM_TIP='B') then
                 BEGIN
                       BORC=YAB_TUTAR;
                       ALACAK=0;
                 END
                 ELSE
                 BEGIN
                       BORC=YAB_TUTAR;
                       ALACAK=0;
                 END
                 IF (DEVIR_KULLAN=1) THEN
                 BEGIN
                      if (giris_kontrol1=0) then
                      begin
                      BORC_BAKIYE=BORC_BAKIYE+BORC+cari_dev_borc;
                      ALACAK_BAKIYE=ALACAK_BAKIYE+ALACAK+cari_dev_alacak;
                      giris_kontrol1=1;
                      end
                      else
                      begin
                      BORC_BAKIYE=BORC_BAKIYE+BORC;
                      ALACAK_BAKIYE=ALACAK_BAKIYE+ALACAK;
                      end
                 END
                 ELSE
                 BEGIN
                      BORC_BAKIYE=BORC_BAKIYE+BORC;
                      ALACAK_BAKIYE=ALACAK_BAKIYE+ALACAK;
                 END
                
                 if (BORC_BAKIYE>ALACAK_BAKIYE) then
                 BEGIN
                      PRM_CARI_BORC_BAKIYE=BORC_BAKIYE-ALACAK_BAKIYE;
                 END
                 ELSE
                 BEGIN
                      PRM_CARI_BORC_BAKIYE=0;
                 END
                
                 if (ALACAK_BAKIYE>BORC_BAKIYE) then
                 BEGIN
                      PRM_CARI_ALACAK_BAKIYE=ALACAK_BAKIYE-BORC_BAKIYE;
                 END
                 ELSE
                 BEGIN
                      PRM_CARI_ALACAK_BAKIYE=0;
                 END
        
                 PRM_BORC=BORC;
                 PRM_ALACAK=ALACAK;
        
                 SUSPEND;
        
            END
    
        END
    END

end^


CREATE PROCEDURE CARI_YAS_HAR (
    devir integer,
    prm_cari_kod1 varchar(15),
    dovkod varchar(15),
    tar1 varchar(15),
    tar2 varchar(15),
    tarx1 varchar(15),
    tarx2 varchar(15),
    sefer_mazot integer,
    sid smallint)
returns (
    prm_cari_sid smallint,
    prm_cari_kod varchar(15),
    prm_tarih date,
    prm_belge_tur integer,
    prm_fis_no integer,
    prm_aciklama varchar(100),
    prm_tip char(1),
    prm_borc numeric(15,4),
    prm_alacak numeric(15,4),
    prm_cari_borc_bakiye numeric(15,4),
    prm_cari_alacak_bakiye numeric(15,4),
    prm_cari_dev_borc_bakiye numeric(15,4),
    prm_cari_dev_alacak_bakiye numeric(15,4))
as
declare variable ilk_cari_kod varchar(15);
declare variable xprm_cari_borc_bakiye numeric(15,4);
declare variable xprm_cari_alacak_bakiye numeric(15,4);
begin
    ilk_cari_kod='';
    for
    select
    prm_cari_kod,
    cast('01.01.2010' as date) prm_tarih,
    cast(0 as integer) prm_belge_tur,
    cast(0 as integer) prm_fis_no,
    cast('Önceki Tarihten Hesaplanan ' as varchar(100)) prm_aciklama,
    cast('X' as char(1)) prm_tip,
    Sum(prm_borc) prm_borc,
    Sum(prm_alacak) prm_alacak,
    Sum(prm_cari_borc_bakiye) prm_cari_borc_bakiye,
    Sum(prm_cari_alacak_bakiye) prm_cari_alacak_bakiye,
    Sum(prm_cari_dev_borc_bakiye) prm_cari_dev_borc_bakiye,
    Sum(prm_cari_dev_alacak_bakiye) prm_cari_dev_alacak_bakiye
    from cari_liste_har(0,:prm_cari_kod1,:dovkod,:tarx1,:tarx2,:sefer_mazot,0,null)
    group by prm_cari_kod
    union
    select
    prm_cari_kod,
    prm_tarih,
    prm_belge_tur,
    prm_fis_no,
    prm_aciklama,
    prm_tip,
    prm_borc,
    prm_alacak,
    prm_cari_borc_bakiye,
    prm_cari_alacak_bakiye,
    prm_cari_dev_borc_bakiye,
    prm_cari_dev_alacak_bakiye
    from cari_liste_har(:devir,:prm_cari_kod1,:dovkod,:tar1,:tar2,:sefer_mazot,:devir,null)
    into
    :prm_cari_kod,
    :prm_tarih,
    :prm_belge_tur,
    :prm_fis_no,
    :prm_aciklama,
    :prm_tip,
    :prm_borc,
    :prm_alacak,
    :prm_cari_borc_bakiye,
    :prm_cari_alacak_bakiye,
    :prm_cari_dev_borc_bakiye,
    :prm_cari_dev_alacak_bakiye
    do
   begin

    if (prm_cari_kod<>ilk_cari_kod) then
    begin
        xprm_cari_borc_bakiye=0;
        xprm_cari_alacak_bakiye=0;
    end


     /* if (prm_tip='X') then
      begin
     */
        if (prm_borc>prm_alacak) then
        begin
          xprm_cari_borc_bakiye=xprm_cari_borc_bakiye+(prm_borc-prm_alacak);
        end

        if (prm_alacak>prm_borc) then
        begin
          xprm_cari_alacak_bakiye=xprm_cari_alacak_bakiye+(prm_alacak-prm_borc);
        end

        if (xprm_cari_borc_bakiye>xprm_cari_alacak_bakiye) then
        begin
          xprm_cari_borc_bakiye=xprm_cari_borc_bakiye-xprm_cari_alacak_bakiye;
          xprm_cari_alacak_bakiye=0;
        end
        if (xprm_cari_alacak_bakiye>xprm_cari_borc_bakiye) then
        begin
          xprm_cari_alacak_bakiye=xprm_cari_alacak_bakiye-xprm_cari_borc_bakiye;
          xprm_cari_borc_bakiye=0;
        end

     /* end*/

        prm_cari_borc_bakiye=xprm_cari_borc_bakiye;
        prm_cari_alacak_bakiye=xprm_cari_alacak_bakiye;

      ilk_cari_kod=prm_cari_kod;

      suspend;
   end

end^




ALTER PROCEDURE CARIHAR_AUD (
    PRM_BELGETUR INTEGER,
    PRM_BELGE_ID INTEGER,
    PRM_BELGE_SID INTEGER,
    PRM_SIRA_NO SMALLINT,
    PRM_CARI_KOD VARCHAR(15),
    PRM_BA CHAR(1),
    PRM_TARIH DATE,
    PRM_FIILI_TAR DATE,
    PRM_DOV_BAZ_TAR DATE,
    PRM_TUTAR NUMERIC(18,4),
    PRM_DOVKOD VARCHAR(5),
    PRM_DOVKUR NUMERIC(18,5),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_VADETAR DATE,
    PRM_ACIKLAMA VARCHAR(100),
    ISN INTEGER,
    PRM_SIL SMALLINT,
    PRM_MASRAF_MERK VARCHAR(15),
    PRM_KOD1 VARCHAR(15),
    PRM_KOD2 VARCHAR(15),
    PRM_KOD3 VARCHAR(15),
    PRM_KOD4 VARCHAR(15),
    PRM_PLASIYER_KOD VARCHAR(15),
    PRM_PROJE_KOD VARCHAR(15))
RETURNS (
    PRM_CARIHAR_ID INTEGER,
    PRM_CARIHAR_SID INTEGER,
    PRM_LIMITASIMI SMALLINT,
    PRM_OLDU SMALLINT)
AS
DECLARE VARIABLE OLDTUTAR NUMERIC(18,4);
DECLARE VARIABLE OLDTUTAR_VPB NUMERIC(18,4);
DECLARE VARIABLE OLDDOVKOD CHAR(5);
DECLARE VARIABLE OLDDOVKUR NUMERIC(18,5);
DECLARE VARIABLE OLDCARIKOD VARCHAR(15);
DECLARE VARIABLE VAR_OLD_PLASIYER_KOD VARCHAR(15);
DECLARE VARIABLE OLDTIP CHAR(1);
DECLARE VARIABLE OLDTARIH DATE;
DECLARE VARIABLE OLDDOV_BAZ_TAR DATE;
DECLARE VARIABLE SIGNEDOLDTUTAR NUMERIC(18,4);
DECLARE VARIABLE SIGNEDOLDTUTAR_VPB NUMERIC(18,4);
DECLARE VARIABLE DEFCUR VARCHAR(5);
DECLARE VARIABLE KURTIPI SMALLINT;
DECLARE VARIABLE DOVTAKIP VARCHAR(15);
DECLARE VARIABLE VAR_SID INTEGER;

BEGIN
  PRM_OLDU = 1;
  SELECT PRM_DEGER FROM GET_PARAM (1,'USEDOVIZ') INTO :DOVTAKIP; /* DOVIZ TAKIBI YAPILIYOR MU ?*/
  SELECT PRM_DEGER FROM GET_PARAM (1,'VPB') INTO :DEFCUR; /* DEFAULT PARABÝRÝMÝNÝN DÖVÝZ KODU*/
  SELECT CAST (PRM_DEGER AS SMALLINT) FROM GET_PARAM (1,'SATISKUR') INTO :KURTIPI; /* KUR DEÐÝÞTÝRME ÝÞLEMLERÝ SIRASINDA KULLANILAN KUR TÝPÝ SATIÞ/ALIÞ */
  SELECT CAST (PRM_DEGER AS SMALLINT) FROM GET_PARAM (0,'SUBE_KOD') INTO :VAR_SID; /* IÞLEMIN YAPILDIÐI ÞUBENIN KODU */
  PRM_LIMITASIMI = 0;

  SELECT CARIHAR_ID, CARIHAR_SID /* DAHA ONCEDEN BIR HAREKET YARATILMIÞ ÝSE DEÐERI ALINIYOR  */
  FROM CARIHAR
  WHERE BELGE_TUR = :PRM_BELGETUR AND BELGE_ID = :PRM_BELGE_ID AND BELGE_SID = :PRM_BELGE_SID AND SIRA_NO = :PRM_SIRA_NO
  INTO :PRM_CARIHAR_ID,:PRM_CARIHAR_SID;
  IF (((:PRM_CARIHAR_ID IS NULL) OR (:PRM_CARIHAR_ID = 0)) AND (PRM_SIL <> 1)) THEN /* YENI KAYIT */
  BEGIN
    PRM_CARIHAR_ID = GEN_ID(GEN_CARIHAR, 1);
    PRM_CARIHAR_SID = VAR_SID;
    INSERT INTO CARIHAR (CARIHAR_ID , CARIHAR_SID , CARI_KOD , TIP , TARIH,DOVKOD,DOVKUR,TUTAR,TUTAR_VPB,VADETAR,ACIKLAMA,BELGE_TUR,BELGE_ID, BELGE_SID, SIRA_NO, FIILI_TAR, DOV_BAZ_TAR,MASRAF_MERK,KOD1,KOD2,KOD3,KOD4,PLASIYER_KOD,PROJE_KOD)
    VALUES (:PRM_CARIHAR_ID , :PRM_CARIHAR_SID , :PRM_CARI_KOD,:PRM_BA,:PRM_TARIH,:PRM_DOVKOD,:PRM_DOVKUR,:PRM_TUTAR,:PRM_TUTAR_VPB,:PRM_VADETAR,:PRM_ACIKLAMA,:PRM_BELGETUR,:PRM_BELGE_ID,:PRM_BELGE_SID, :PRM_SIRA_NO ,:PRM_FIILI_TAR, :PRM_DOV_BAZ_TAR,:PRM_MASRAF_MERK,:PRM_KOD1,:PRM_KOD2,:PRM_KOD3,:PRM_KOD4,:PRM_PLASIYER_KOD,:PRM_PROJE_KOD);

    SELECT PRM_OLDU,PRM_LIMITASIMI FROM CARI_BAUPDATE (:PRM_CARI_KOD,:PRM_TARIH,:PRM_DOV_BAZ_TAR,:PRM_DOVKOD,:PRM_DOVKUR,:PRM_TUTAR,:PRM_TUTAR_VPB,:PRM_BA, :ISN ) INTO :PRM_OLDU,:PRM_LIMITASIMI;
    IF (PRM_OLDU = 0 ) THEN BEGIN SUSPEND; EXIT; END

    SELECT PRM_OLDU FROM PLASIYER_BA_UPD (:PRM_PLASIYER_KOD,:PRM_DOV_BAZ_TAR,:PRM_DOVKOD,:PRM_DOVKUR,:PRM_TUTAR,:PRM_TUTAR_VPB,:PRM_BA, :ISN ) INTO :PRM_OLDU;
    IF (PRM_OLDU = 0 ) THEN BEGIN SUSPEND; EXIT; END


    SELECT PRM_OLDU FROM CARIHAR_DOV_ADDUPDATE (:PRM_CARIHAR_ID,:PRM_CARIHAR_SID,:PRM_TUTAR,:PRM_DOVKOD,:PRM_DOVKUR,:PRM_DOV_BAZ_TAR, :ISN ) INTO :PRM_OLDU;
    IF (PRM_OLDU = 0 ) THEN BEGIN SUSPEND; EXIT; END

  End
  ELSE
  BEGIN
    IF (PRM_CARIHAR_ID IS NOT NULL) THEN
    BEGIN
        SELECT TUTAR,CARI_KOD,TIP,TARIH,DOVKOD,TUTAR_VPB, DOV_BAZ_TAR, DOVKUR,PLASIYER_KOD
        FROM CARIHAR
        WHERE CARIHAR_ID = :PRM_CARIHAR_ID AND CARIHAR_SID = :PRM_CARIHAR_SID
        INTO :OLDTUTAR,:OLDCARIKOD,:OLDTIP,:OLDTARIH,:OLDDOVKOD,:OLDTUTAR_VPB, :OLDDOV_BAZ_TAR, :OLDDOVKUR,:VAR_OLD_PLASIYER_KOD;
        SIGNEDOLDTUTAR = 0 - OLDTUTAR; /* ESKI TUTARIN - HALÝ ELDE EDÝLÝYOR */
        SIGNEDOLDTUTAR_VPB = 0 - OLDTUTAR_VPB;
        /* CARI TABLOSUNDA KÝ VE CARI_AY TABLOSUNDA KÝ ESKÝ HAREKETTEN KAYNAKLANAN DEÐÝÞÝKLÝKLER ÝPTAL EDÝLÝYOR                        */
          SELECT PRM_OLDU,PRM_LIMITASIMI FROM CARI_BAUPDATE (:OLDCARIKOD,:OLDTARIH,:OLDDOV_BAZ_TAR,:OLDDOVKOD, :OLDDOVKUR ,:SIGNEDOLDTUTAR,:SIGNEDOLDTUTAR_VPB,:OLDTIP, :ISN ) INTO :PRM_OLDU,:PRM_LIMITASIMI;
          IF (PRM_OLDU = 0 ) THEN BEGIN SUSPEND; EXIT; END
          SELECT PRM_OLDU FROM PLASIYER_BA_UPD (:VAR_OLD_PLASIYER_KOD,:OLDDOV_BAZ_TAR,:OLDDOVKOD, :OLDDOVKUR ,:SIGNEDOLDTUTAR,:SIGNEDOLDTUTAR_VPB,:OLDTIP, :ISN) INTO :PRM_OLDU;
          IF (PRM_OLDU = 0 ) THEN BEGIN SUSPEND; EXIT; END
          SELECT PRM_OLDU FROM CARIHAR_DOV_ADDUPDATE (:PRM_CARIHAR_ID,:PRM_CARIHAR_SID,:SIGNEDOLDTUTAR,:OLDDOVKOD,:OLDDOVKUR,:OLDDOV_BAZ_TAR, :ISN ) INTO :PRM_OLDU;
          IF (PRM_OLDU = 0 ) THEN BEGIN SUSPEND; EXIT; END
          /*******************************************************************************************************************************/
        IF (PRM_SIL <> 1 ) THEN    /* UPDATE */
        BEGIN
          UPDATE CARIHAR SET
             CARI_KOD=:PRM_CARI_KOD,
             TIP=:PRM_BA,
             TARIH=:PRM_TARIH,
             DOVKOD=:PRM_DOVKOD,
             DOVKUR =:PRM_DOVKUR,
             TUTAR=:PRM_TUTAR,
             TUTAR_VPB=:PRM_TUTAR_VPB,
             VADETAR=:PRM_VADETAR,
             ACIKLAMA=:PRM_ACIKLAMA,
             BELGE_TUR=:PRM_BELGETUR,
             BELGE_ID=:PRM_BELGE_ID,
             BELGE_SID = :PRM_BELGE_SID,
             SIRA_NO = :PRM_SIRA_NO ,
             FIILI_TAR = :PRM_FIILI_TAR,
             DOV_BAZ_TAR = :PRM_DOV_BAZ_TAR,
             MASRAF_MERK =:PRM_MASRAF_MERK,
             KOD1 =:PRM_KOD1,
             KOD2 =:PRM_KOD2,
             KOD3 =:PRM_KOD3,
             KOD4 =:PRM_KOD4,
             PLASIYER_KOD = :PRM_PLASIYER_KOD,
             PROJE_KOD = :PRM_PROJE_KOD
          WHERE CARIHAR_ID =:PRM_CARIHAR_ID AND CARIHAR_SID =:PRM_CARIHAR_SID;
          SELECT PRM_OLDU,PRM_LIMITASIMI FROM CARI_BAUPDATE (:PRM_CARI_KOD,:PRM_TARIH,:PRM_DOV_BAZ_TAR,:PRM_DOVKOD,:PRM_DOVKUR ,:PRM_TUTAR,:PRM_TUTAR_VPB,:PRM_BA, :ISN ) INTO :PRM_OLDU,:PRM_LIMITASIMI;
          IF (PRM_OLDU = 0 ) THEN BEGIN SUSPEND; EXIT; END

          SELECT PRM_OLDU FROM PLASIYER_BA_UPD (:PRM_PLASIYER_KOD,:PRM_DOV_BAZ_TAR,:PRM_DOVKOD,:PRM_DOVKUR,:PRM_TUTAR,:PRM_TUTAR_VPB,:PRM_BA, :ISN ) INTO :PRM_OLDU;
          IF (PRM_OLDU = 0 ) THEN BEGIN SUSPEND; EXIT; END

          SELECT PRM_OLDU FROM CARIHAR_DOV_ADDUPDATE (:PRM_CARIHAR_ID,:PRM_CARIHAR_SID,:PRM_TUTAR,:PRM_DOVKOD,:PRM_DOVKUR,:PRM_DOV_BAZ_TAR, :ISN ) INTO :PRM_OLDU;
          IF (PRM_OLDU = 0 ) THEN BEGIN SUSPEND; EXIT; END
        END ELSE
        BEGIN                   /* DELETE  */
         /* DELETE FROM CARIHAR_DOV WHERE CARIHAR_ID =: PRM_CARIHAR_ID ;*/
          DELETE FROM CARIHAR WHERE CARIHAR_ID =:PRM_CARIHAR_ID ;
          DELETE FROM CARIHAR_DOV WHERE CARIHAR_ID =:PRM_CARIHAR_ID ;
        END
    END
  END
  SUSPEND;
  WHEN EXCEPTION CARI_ISLEM_HATA DO
  BEGIN
    EXECUTE PROCEDURE WRITE_ISN_ERR(:ISN,'CARIHAR_AUD','Cari iþlemlerinde hata oluþtu. Lütfen önce ki hata mesajlarýna bakýnýz.');
    SUSPEND;
  END
END
^

ALTER PROCEDURE CARIHAR_DOV_ADDUPDATE (
    PRM_CARIHARID INTEGER,
    PRM_CARIHAR_SID INTEGER,
    PRM_TUTAR NUMERIC(18,4),
    PRM_DOVKOD VARCHAR(5),
    PRM_DOVKUR NUMERIC(18,4),
    PRM_DOV_BAZ_TAR DATE,
    ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT)
AS
DECLARE VARIABLE DOVKODU VARCHAR(5);
DECLARE VARIABLE NEWCARIHAR_DOV_ID INTEGER;
DECLARE VARIABLE KURDEGER NUMERIC(18,4);
DECLARE VARIABLE DEFCUR VARCHAR(15);
DECLARE VARIABLE USEDOVIZ VARCHAR(15);
DECLARE VARIABLE VAR_KURTIPI VARCHAR(15);
DECLARE VARIABLE VAR_SID INTEGER;
DECLARE VARIABLE VAR_STR_SID VARCHAR(15);
DECLARE VARIABLE KURTIPI SMALLINT;
BEGIN
  SELECT PRM_DEGER FROM GET_PARAM (1,'USEDOVIZ') INTO :USEDOVIZ; /* DOVIZ TAKIBI YAPILIYOR MU ?*/
  SELECT PRM_DEGER FROM GET_PARAM (1,'VPB') INTO :DEFCUR; /* DEFAULT PARABÝRÝMÝNÝN DÖVÝZ KODU*/
  SELECT PRM_DEGER FROM GET_PARAM (1,'SATISKUR') INTO :VAR_KURTIPI; /* KUR DEÐÝÞTÝRME ÝÞLEMLERÝ SIRASINDA KULLANILAN KUR TÝPÝ SATIÞ/ALIÞ */
  SELECT PRM_DEGER FROM GET_PARAM (0,'SUBE_KOD') INTO :VAR_STR_SID; /* IÞLEMIN YAPILDIÐI ÞUBENIN KODU */
  VAR_SID = CAST (VAR_STR_SID AS INTEGER);
  KURTIPI = CAST (VAR_KURTIPI AS SMALLINT);
  /* EÐER BÝRDEN FAZLA PARA BÝRÝMÝ ÝLE TAKÝP YAPILIYORSA */
    IF (USEDOVIZ ='1') THEN
    BEGIN
      /* CARIHAR_DOV TABLOSUNDAKI KAYITLAR UPDATE ÝÞLEMÝ ÝÇÝN SÝLÝNÝYOR TEKRAR YARATILACAKLAR */
      DELETE FROM CARIHAR_DOV WHERE CARIHAR_ID = :PRM_CARIHARID AND CARIHAR_SID = :PRM_CARIHAR_SID;
      FOR SELECT DOVKOD
      FROM DOVKART
      WHERE DOVKOD <> :DEFCUR AND TAKIP = 1
      INTO :DOVKODU
      DO BEGIN
           NEWCARIHAR_DOV_ID = gen_id(gen_carihar_dov, 1);
           IF (PRM_DOVKOD=DOVKODU) THEN /* BU DEÐÝÞÝKLÝÐÝN AMACI AYNI DOVIZ KODUNUN TEKRAR DONUSTURULMEMESIDIR */
           BEGIN
             INSERT INTO CARIHAR_DOV (CARIHAR_DOV_ID,CARIHAR_DOV_SID, CARIHAR_ID, CARIHAR_SID, DOVKOD,TUTAR) VALUES (:NEWCARIHAR_DOV_ID,:VAR_SID,:PRM_CARIHARID,:PRM_CARIHAR_SID,:DOVKODU,:PRM_TUTAR);
           END ELSE
           BEGIN
             SELECT PRM_KUR, PRM_OLDU FROM KURLU_DONUSTUR ( :PRM_DOV_BAZ_TAR , :DOVKODU, :PRM_DOVKUR, :DOVKODU ,:PRM_TUTAR , :KURTIPI, 1, :ISN ) INTO :KURDEGER, :PRM_OLDU;
             if (PRM_OLDU = 0) then
             BEGIN
               EXECUTE PROCEDURE WRITE_ISN_ERR (:ISN, 'CARIHAR_DOV_ADDUPDATE','KUR_DONUSTUR Prosedüründe hata oluþtuðu için iþlem yapýlamadý');
               SUSPEND;
               EXIT;
             END
             INSERT INTO CARIHAR_DOV (CARIHAR_DOV_ID, CARIHAR_DOV_SID, CARIHAR_ID, CARIHAR_SID, DOVKOD,TUTAR) VALUES (:NEWCARIHAR_DOV_ID,:VAR_SID,:PRM_CARIHARID,:PRM_CARIHAR_SID,:DOVKODU,:KURDEGER);
           END
        END
     END
     PRM_OLDU = 1;
     SUSPEND;
end
^

ALTER PROCEDURE CEKSENHAR_DUZELT
AS
Declare Variable VAR_ISLEM SMALLINT;
Declare Variable VAR_CEKSEN SMALLINT;
Declare Variable VAR_BELGE_ID INTEGER;
Declare Variable VAR_BELGE_SID INTEGER;
Declare Variable VAR_TIP SMALLINT;
declare variable VAR_CEKSENHAR_ID INTEGER;
declare variable VAR_CEKSENHAR_SID INTEGER;
declare variable VAR_KAYITSAY INTEGER;

BEGIN

  FOR SELECT CEKSENHAR_ID, CEKSENHAR_SID,CEKSEN,BELGE_ID,BELGE_SID,ISLEM
      FROM CEKSENHAR
      INTO :VAR_CEKSENHAR_ID,:VAR_CEKSENHAR_SID,:VAR_CEKSEN,:VAR_BELGE_ID,:VAR_BELGE_SID,:VAR_ISLEM
  DO
  BEGIN
    if (VAR_CEKSEN = 1) then /* CEK  */
    BEGIN
      SELECT COUNT(*) FROM CEK WHERE CEK_ID = :VAR_BELGE_ID AND CEK_SID = :VAR_BELGE_SID INTO :VAR_KAYITSAY;
    END ELSE
    BEGIN
      SELECT COUNT(*) FROM SENET WHERE SENET_ID = :VAR_BELGE_ID AND SENET_SID = :VAR_BELGE_SID INTO :VAR_KAYITSAY;
    END
    IF (VAR_KAYITSAY = 0) then
    BEGIN
      DELETE FROM CEKSENHAR WHERE CEKSENHAR_ID = :VAR_CEKSENHAR_ID AND CEKSENHAR_SID = :VAR_CEKSENHAR_SID;
    END
  END

  FOR SELECT CEKSENHAR_ID, CEKSENHAR_SID,CEKSEN,BELGE_ID,BELGE_SID,ISLEM
      FROM CEKSENHAR
      INTO :VAR_CEKSENHAR_ID,:VAR_CEKSENHAR_SID,:VAR_CEKSEN,:VAR_BELGE_ID,:VAR_BELGE_SID,:VAR_ISLEM
  DO
  BEGIN
    if (VAR_CEKSEN = 1) then /* CEK  */
    BEGIN
      SELECT TIP FROM CEK WHERE CEK_ID = :VAR_BELGE_ID AND CEK_SID = :VAR_BELGE_SID INTO :VAR_TIP;
    END ELSE
    BEGIN
      SELECT TIP FROM SENET WHERE SENET_ID = :VAR_BELGE_ID AND SENET_SID = :VAR_BELGE_SID INTO :VAR_TIP;
    END

    if ((VAR_ISLEM = 0) AND (VAR_TIP = 1))  Then  /* MÜÞTERÝ ÇEK VEYA SENEDÝ */
    BEGIN
       UPDATE CEKSENHAR SET ISLEM = 1 WHERE CEKSENHAR_ID = :VAR_CEKSENHAR_ID AND CEKSENHAR_SID = :VAR_CEKSENHAR_SID;
    END

    if ((VAR_ISLEM = 0) AND (VAR_TIP = 2))  Then  /* BORÇ ÇEK VEYA SENEDÝ */
    BEGIN
       UPDATE CEKSENHAR SET ISLEM = 15 WHERE CEKSENHAR_ID = :VAR_CEKSENHAR_ID AND CEKSENHAR_SID = :VAR_CEKSENHAR_SID;
    END

    if ((VAR_ISLEM = 1) AND (VAR_TIP = 1))  Then  /* MÜÞTERÝ ÇEK VEYA SENEDÝ */
    BEGIN
       UPDATE CEKSENHAR SET ISLEM = 3 WHERE CEKSENHAR_ID = :VAR_CEKSENHAR_ID AND CEKSENHAR_SID = :VAR_CEKSENHAR_SID;
    END

    if ((VAR_ISLEM = 5) AND (VAR_TIP = 1))  Then  /* MÜÞTERÝ ÇEK VEYA SENEDÝ */
    BEGIN
       UPDATE CEKSENHAR SET ISLEM = 8 WHERE CEKSENHAR_ID = :VAR_CEKSENHAR_ID AND CEKSENHAR_SID = :VAR_CEKSENHAR_SID;
    END

    if ((VAR_ISLEM = 5) AND (VAR_TIP = 2))  Then  /* BORÇ ÇEK VEYA SENEDÝ */
    BEGIN
       UPDATE CEKSENHAR SET ISLEM = 16 WHERE CEKSENHAR_ID = :VAR_CEKSENHAR_ID AND CEKSENHAR_SID = :VAR_CEKSENHAR_SID;
    END

    if ((VAR_ISLEM = 6) AND (VAR_TIP = 1))  Then  /* MÜÞTERÝ ÇEK VEYA SENEDÝ */
    BEGIN
       UPDATE CEKSENHAR SET ISLEM = 9 WHERE CEKSENHAR_ID = :VAR_CEKSENHAR_ID AND CEKSENHAR_SID = :VAR_CEKSENHAR_SID;
    END

    if ((VAR_ISLEM = 6) AND (VAR_TIP = 2))  Then  /* BORÇ ÇEK VEYA SENEDÝ */
    BEGIN
       UPDATE CEKSENHAR SET ISLEM = 18 WHERE CEKSENHAR_ID = :VAR_CEKSENHAR_ID AND CEKSENHAR_SID = :VAR_CEKSENHAR_SID;
    END

    if (VAR_ISLEM = 7)   Then  /* BORÇ ÇEK VEYA SENEDÝ */
    BEGIN
       UPDATE CEKSENHAR SET ISLEM = 17 WHERE CEKSENHAR_ID = :VAR_CEKSENHAR_ID AND CEKSENHAR_SID = :VAR_CEKSENHAR_SID;
    END
  END
END
^

ALTER PROCEDURE DEKONT_SIL (
    PRM_BELGE_TUR INTEGER,
    PRM_DEKONT_ID INTEGER,
    PRM_DEKONT_SID INTEGER,
    PRM_ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT)
AS
DECLARE VARIABLE VAR_DEKONT_D_ID INTEGER;
DECLARE VARIABLE VAR_DEKONT_D_SID INTEGER;
DECLARE VARIABLE VAR_MC CHAR(1);
DECLARE VARIABLE VAR_KARSI_KOD VARCHAR(30);
DECLARE VARIABLE VAR_PROJE_KOD VARCHAR(15);
DECLARE VARIABLE VAR_BELGE_ID INTEGER;
DECLARE VARIABLE VAR_BELGE_SID INTEGER;
DECLARE VARIABLE VAR_LIMITASIMI SMALLINT;
BEGIN
  /*
  SELECT PRM_OLDU FROM MUH_GEC_BELGE_SIL(:PRM_BELGE_TUR,:PRM_DEKONT_ID, :PRM_DEKONT_SID,1, :PRM_ISN) INTO :PRM_OLDU;
  IF (PRM_OLDU=0) THEN
  BEGIN
    EXECUTE PROCEDURE WRITE_ISN_ERR (:PRM_ISN, 'DEKONT_SIL','MUH_GEC_BELGE_SIL ÝÞLETÝLÝRKEN HATA OLUÞTU');
    SUSPEND;
    EXIT;
  END
  */
  FOR SELECT DEKONT_D.DEKONT_D_ID,DEKONT_D.DEKONT_D_SID,DEKONT_D.KARSI_KOD,DEKONT_D.MC,DEKONT_D.PROJE_KOD
  FROM DEKONT_D
  WHERE DEKONT_D.DEKONT_ID = :PRM_DEKONT_ID AND DEKONT_D.DEKONT_SID =:PRM_DEKONT_SID
  INTO :VAR_DEKONT_D_ID,:VAR_DEKONT_D_SID,:VAR_KARSI_KOD,:VAR_MC,:VAR_PROJE_KOD
  DO BEGIN
    IF (VAR_MC = 'C') THEN
    BEGIN
      SELECT  PRM_CARIHAR_ID,
              PRM_CARIHAR_SID,
              PRM_LIMITASIMI,
              PRM_OLDU
      FROM CARIHAR_AUD(:PRM_BELGE_TUR,
                       :VAR_DEKONT_D_ID,
                       :VAR_DEKONT_D_SID,
                       1,
                       :VAR_KARSI_KOD,
                       'B',
                       '01.01.2010',
                       '01.01.2010',
                       '01.01.2010',
                       0,
                       'YTL',
                       1,
                       0,
                       '01.01.2010',
                       '',
                       :PRM_ISN,
                       1,
                       '',
                       '',
                       '',
                       '',
                       '',
                       '',
                       '')
      INTO :VAR_BELGE_ID,:VAR_BELGE_SID,:VAR_LIMITASIMI,:PRM_OLDU;
      IF (PRM_OLDU = 0) THEN
      BEGIN
        EXECUTE PROCEDURE WRITE_ISN_ERR (:PRM_ISN, 'DEKONT_SIL','CARIHAR_AUD ÝÞLETÝLÝRKEN HATA OLUÞTU');
        SUSPEND;
        EXIT;
      END
    END /* IF (VAR_MC = 'C') THEN  */
    IF ((NOT VAR_PROJE_KOD IS NULL) OR  (VAR_PROJE_KOD <> '')) THEN
    BEGIN
      SELECT PRM_PROJEHAR_ID, PRM_PROJEHAR_SID, PRM_OLDU
      FROM PROJEHAR_AUD(:PRM_BELGE_TUR,
                        :VAR_DEKONT_D_ID,
                        :VAR_DEKONT_D_SID,
                        1,
                        :VAR_PROJE_KOD,
                        '01.01.2010',
                        '01.01.2010',
                        '01.01.2010',
                        '01.01.2010',
                        'B',
                        'YTL',
                        0,
                        0,
                        0,
                        1,
                        '',
                        :PRM_ISN,
                       '',
                       '',
                       '',
                       '',
                       '')
      INTO :VAR_BELGE_ID,:VAR_BELGE_SID,:PRM_OLDU;
      IF (PRM_OLDU = 0) THEN
      BEGIN
        EXECUTE PROCEDURE WRITE_ISN_ERR (:PRM_ISN, 'DEKONT_SIL','PROJEHAR_AUD ÝÞLETÝLÝRKEN HATA OLUÞTU');
        SUSPEND;
        EXIT;
      END
    END /* IF ((NOT VAR_PROJE_KOD IS NULL) OR  (VAR_PROJE_KOD <> '')) THEN  */
  END /* FOR END  */
  SUSPEND;
END
^

ALTER PROCEDURE DEPO_URUN_BA_UPDATE (
    PRM_DEPO_KOD VARCHAR(15),
    PRM_URUN_KOD VARCHAR(35),
    PRM_TIP CHAR(1),
    PRM_TUTAR NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_MIKTAR NUMERIC(18,4))
AS
DECLARE VARIABLE VAR_KAYITSAY SMALLINT;
BEGIN
   SELECT COUNT(*)
   FROM DEPOURUN
   WHERE DEPO_KOD = :PRM_DEPO_KOD AND URUN_KOD = :PRM_URUN_KOD
   INTO VAR_KAYITSAY;
   IF (VAR_KAYITSAY = 0) THEN
   BEGIN /* YENI KAYIT  */
      IF (PRM_TIP = 'B') THEN /* BORC  */
      BEGIN
        INSERT INTO DEPOURUN (DEPO_KOD,URUN_KOD,BORC,ALACAK,BORC_VPB,ALACAK_VPB,MIKTAR_BORC,MIKTAR_ALACAK)
        VALUES (:PRM_DEPO_KOD,:PRM_URUN_KOD,:PRM_TUTAR,0,:PRM_TUTAR_VPB,0,:PRM_MIKTAR,0);
      END
      IF (PRM_TIP = 'A') THEN /* ALACAK  */
      BEGIN
        INSERT INTO DEPOURUN (DEPO_KOD,URUN_KOD,BORC,ALACAK,BORC_VPB,ALACAK_VPB,MIKTAR_BORC,MIKTAR_ALACAK)
        VALUES (:PRM_DEPO_KOD,:PRM_URUN_KOD,0,:PRM_TUTAR,0,:PRM_TUTAR_VPB,0,:PRM_MIKTAR);
      END
   END ELSE
   BEGIN   /* ESKI KAYIT  */
      IF (PRM_TIP = 'B') THEN /* BORC  */
      BEGIN
        UPDATE DEPOURUN SET BORC = BORC + :PRM_TUTAR, BORC_VPB = BORC_VPB + :PRM_TUTAR_VPB, MIKTAR_BORC = MIKTAR_BORC + :PRM_MIKTAR WHERE DEPO_KOD = :PRM_DEPO_KOD AND URUN_KOD = :PRM_URUN_KOD;
      END
      IF (PRM_TIP = 'A') THEN /* ALACAK  */
      BEGIN
        UPDATE DEPOURUN SET ALACAK = ALACAK + :PRM_TUTAR, ALACAK_VPB = ALACAK_VPB + :PRM_TUTAR_VPB, MIKTAR_ALACAK = MIKTAR_ALACAK + :PRM_MIKTAR WHERE DEPO_KOD = :PRM_DEPO_KOD AND URUN_KOD = :PRM_URUN_KOD;
      END
   END
END
^

ALTER PROCEDURE FACTORIAL (
    NUM INTEGER)
RETURNS (
    N_FACTORIAL DOUBLE PRECISION)
AS
DECLARE VARIABLE NUM_LESS_ONE INT;
BEGIN
IF (NUM = 1) THEN
BEGIN /**** BASE CASE: 1 FACTORIAL IS 1 ****/
   N_FACTORIAL = 1;
SUSPEND;
END
ELSE
BEGIN /**** RECURSION: NUM FACTORIAL = NUM * (NUM-1) FACTORIAL ****/
   NUM_LESS_ONE = NUM - 1;
   EXECUTE PROCEDURE FACTORIAL NUM_LESS_ONE
   RETURNING_VALUES N_FACTORIAL;
   N_FACTORIAL = N_FACTORIAL * NUM;
SUSPEND;
END
end
^

ALTER PROCEDURE GET_KARSI_AD (
    PRM_MC CHAR(1),
    PRM_KARSI_KOD VARCHAR(30))
RETURNS (
    PRM_KARSI_AD VARCHAR(50))
AS
BEGIN
  IF (PRM_MC = 'C') then
  BEGIN
    SELECT CARI_AD FROM CARI WHERE CARI_KOD = :PRM_KARSI_KOD INTO :PRM_KARSI_AD;
  END
  ELSE
  IF (PRM_MC = 'U') THEN
  BEGIN
    SELECT URUN_AD FROM URUN WHERE URUN_KOD = :PRM_KARSI_KOD INTO :PRM_KARSI_AD;
  END
  ELSE
  BEGIN
    SELECT MASRAF.ADI FROM MASRAF WHERE MASRAF.MASRAF_KOD = :PRM_KARSI_KOD INTO :PRM_KARSI_AD;
  END
  SUSPEND;
END
^

ALTER PROCEDURE GET_PARAM (
    PRM_MODUL_ID INTEGER,
    PRM_PARAM_NAME VARCHAR(15))
RETURNS (
    PRM_DEGER VARCHAR(15))
AS
BEGIN
  SELECT DEGER
  FROM PARAMETERS
  WHERE MODUL_ID =:PRM_MODUL_ID AND PARAM_NAME = :PRM_PARAM_NAME
  INTO :PRM_DEGER;
  SUSPEND;
END
^

ALTER PROCEDURE GET_SAYACNO (
    PRM_SAYAC_ADI VARCHAR(15),
    PRM_ARTTIR SMALLINT)
RETURNS (
    PRM_DEGER INTEGER)
AS
BEGIN
/*
  PRM_ARTTIR = 1 ise Sayac deðerini bir arttýrarak deðeri verir
  PRM_ARTTIR = 0 ise Sayac deðerini deðiþtirmeden verir
*/
    SELECT DEGER FROM SAYACLAR WHERE SAYAC_ADI =:PRM_SAYAC_ADI INTO :PRM_DEGER;
    IF (PRM_DEGER IS NULL ) THEN
    BEGIN
      INSERT INTO SAYACLAR (SAYAC_ADI,DEGER) VALUES (:PRM_SAYAC_ADI,1);
      PRM_DEGER = 1;
    END ELSE
    BEGIN
      IF (PRM_ARTTIR = 1) THEN
      BEGIN
        PRM_DEGER = PRM_DEGER +1;
        UPDATE SAYACLAR SET DEGER = DEGER+1 WHERE SAYAC_ADI =:PRM_SAYAC_ADI;
      END
    END
    SUSPEND;
END
^

ALTER PROCEDURE GET_SERVER_DATE_TIME
RETURNS (
    SDATE DATE,
    STIME TIME,
    SDATETIME TIMESTAMP)
AS
BEGIN
  SDATE = CURRENT_DATE;
  STIME = CURRENT_TIME;
  SDATETIME = CURRENT_TIMESTAMP;
  SUSPEND;
END
^

ALTER PROCEDURE GET_URUN_FAT_BILGI (
    PRM_URUN_KOD VARCHAR(35),
    PRM_CARI_KOD VARCHAR(15),
    PRM_TIP SMALLINT,
    ISN INTEGER)
RETURNS (
    PRM_FIYAT NUMERIC(18,4),
    PRM_DOVKOD VARCHAR(5),
    PRM_URUN_AD VARCHAR(50),
    PRM_OLCUBIRIM VARCHAR(15),
    PRM_DEPO_KOD VARCHAR(15),
    PRM_DEPO_AD VARCHAR(50),
    PRM_KDV SMALLINT,
    PRM_KDV_DAHIL SMALLINT,
    PRM_OLDU SMALLINT)
AS
DECLARE VARIABLE VAR_URUN_KARMARJ SMALLINT;
DECLARE VARIABLE VAR_URUN_SATIS_FIY NUMERIC(18,4);
DECLARE VARIABLE VAR_URUN_BIRIM_FIY NUMERIC(18,4);
DECLARE VARIABLE VAR_URUN_DOVKOD VARCHAR(5);
DECLARE VARIABLE VAR_UCG_FIY_TIP SMALLINT;
DECLARE VARIABLE VAR_UCG_FIY_SATISFIY NUMERIC(18,4);
DECLARE VARIABLE VAR_UCG_FIY_BIRIMORAN SMALLINT;
DECLARE VARIABLE VAR_UCG_FIY_DOVKOD VARCHAR(5);
DECLARE VARIABLE VAR_CARI_GRUP_KOD VARCHAR(15);
DECLARE VARIABLE VAR_CARI_GRUP_VARSAY SMALLINT;
begin
 /*PRM_TIP=2 Alýþ*/
 /*PRM_TIP=1 Satýþ*/
 PRM_OLDU=0;
 Select URUN.BIRIMFIY,
        URUN.SATISFIY,
        URUN.DOVKOD,
        URUN.KARMARJ,
        URUN.URUN_AD,
        URUN.OLCUBIRIM,
        URUN.DEPO_KOD,
        (Select DEPO.ADI from DEPO Where DEPO.DEPO_KOD=URUN.DEPO_KOD) as DEPO_AD,
        URUN.KDV,
        URUN.KDV_DAHIL
  From URUN
  WHERE URUN.URUN_KOD=:PRM_URUN_KOD
  Into :VAR_URUN_BIRIM_FIY,:VAR_URUN_SATIS_FIY,:VAR_URUN_DOVKOD,:VAR_URUN_KARMARJ,
       :PRM_URUN_AD,:PRM_OLCUBIRIM,:PRM_DEPO_KOD,:PRM_DEPO_AD,:PRM_KDV,:PRM_KDV_DAHIL;
  if (VAR_URUN_BIRIM_FIY IS NULL) THEN EXCEPTION  FIYAT_HATA; /*ürün bulunamadý ise*/
  if (PRM_TIP=2) then /*alýþ fiyatý*/
  begin
      PRM_OLDU=1;
      PRM_FIYAT=VAR_URUN_BIRIM_FIY;
      PRM_DOVKOD=VAR_URUN_DOVKOD;
      SUSPEND;
  end /*alýþ fiyatý endi*/
  else if (PRM_TIP=1) then /*satýþ fiyatý*/
  begin
     SELECT URUN_CARI_FIY.BIRIMORAN,URUN_CARI_FIY.SATISFIY,URUN_CARI_FIY.FIY_TIP,URUN_CARI_FIY.SATISDOVKOD
     FROM URUN_CARI_FIY
     WHERE URUN_CARI_FIY.URUN_KOD=:PRM_URUN_KOD and URUN_CARI_FIY.CARI_KOD =:PRM_CARI_KOD
     into :VAR_UCG_FIY_BIRIMORAN,:VAR_UCG_FIY_SATISFIY,:VAR_UCG_FIY_TIP,:VAR_UCG_FIY_DOVKOD;
     if ((not VAR_UCG_FIY_BIRIMORAN is null) and (not VAR_UCG_FIY_TIP is null)) then /* eðer urun_cari_fiy tablosunda býlundu ise*/
      begin
         if (VAR_UCG_FIY_TIP=1) then /* eðer urun_cari_fiy tablosundaki fiy tip 1 ise*/
         Begin
           PRM_OLDU=1;
           PRM_FIYAT=VAR_UCG_FIY_SATISFIY;
           PRM_DOVKOD=VAR_UCG_FIY_DOVKOD;
           SUSPEND;
         end /* eðer urun_cari_fiy tablosundaki fiy tip 1 ise endi*/
         else if (VAR_UCG_FIY_TIP=0) then /* eðer urun_cari_fiy tablosundaki fiy tip 0 ise*/
         begin
            PRM_OLDU=1;
            PRM_FIYAT = (VAR_URUN_BIRIM_FIY * VAR_UCG_FIY_BIRIMORAN/100) + VAR_URUN_BIRIM_FIY;
            PRM_DOVKOD = VAR_UCG_FIY_DOVKOD ;
            Suspend;
         End /* eðer urun_cari_fiy tablosundaki fiy tip 0 ise endi*/
      end /* (   eðer urun_cari_fiy tablosunda býlundu ise endi*/
      else
      begin  /* eðer ürün cari fiy tablosunda bulunamdý is cari grup fiyat bakýlýyor*/
          Select CARI_GRUP_UYE.CARI_GRUP_KOD,CARI_GRUP_UYE.VARSAY
           FROM CARI_GRUP_UYE
           where CARI_GRUP_UYE.CARI_KOD=:PRM_CARI_KOD AND CARI_GRUP_UYE.VARSAY=1
           into :VAR_CARI_GRUP_KOD,:VAR_CARI_GRUP_VARSAY;
           if (not VAR_CARI_GRUP_KOD is null) then /*cari bi Gruba üye ise*/
           begin
             SELECT URUN_CGRUP_FIY.BIRIMORAN,URUN_CGRUP_FIY.SATISFIY,URUN_CGRUP_FIY.FIY_TIP,URUN_CGRUP_FIY.SATISDOVKOD
             FROM URUN_CGRUP_FIY
             where URUN_CGRUP_FIY.URUN_KOD=:PRM_URUN_KOD and URUN_CGRUP_FIY.CARI_GRUP_KOD =:VAR_CARI_GRUP_KOD
             into :VAR_UCG_FIY_BIRIMORAN,:VAR_UCG_FIY_SATISFIY,:VAR_UCG_FIY_TIP,:VAR_UCG_FIY_DOVKOD;
             if ((not VAR_UCG_FIY_BIRIMORAN is null) and (not VAR_UCG_FIY_TIP is null)) then /* eðer urun_cari_grup fiy tablosunda býlundu ise*/
             begin
              if (VAR_UCG_FIY_TIP=1) then /* eðer urun_cari_grup fiy tablosundaki fiy tip 1 ise*/
               Begin
                PRM_OLDU=1;
                PRM_FIYAT=VAR_UCG_FIY_SATISFIY;
                PRM_DOVKOD=VAR_UCG_FIY_DOVKOD;
                SUSPEND;
               end /* eðer urun_cari grup_fiy tablosundaki fiy tip 1 ise endi*/
              else if (VAR_UCG_FIY_TIP=0) then /* eðer urun_cari_fiy tablosundaki fiy tip 0 ise*/
                begin
                 PRM_OLDU=1;
                 PRM_FIYAT = (VAR_URUN_BIRIM_FIY * VAR_UCG_FIY_BIRIMORAN/100) + VAR_URUN_BIRIM_FIY;
                 PRM_DOVKOD = VAR_UCG_FIY_DOVKOD ;
                 Suspend;
                End /* eðer urun_cari_fiy tablosundaki fiy tip 0 ise endi*/
             End /* eðer urun_cari_grup fiy tablosunda býlundu ise end*/
             else
             begin    /* eðer cari bir guba üye ama o gruba ait fiyatlandýrma yok ise*/
              if (VAR_URUN_SATIS_FIY<>0)  then
               begin
                PRM_OLDU=1;
                PRM_FIYAT = VAR_URUN_SATIS_FIY;
                PRM_DOVKOD = VAR_URUN_DOVKOD;
                Suspend;
               end
               else
               begin
                 PRM_OLDU=1;
                 PRM_FIYAT = (VAR_URUN_BIRIM_FIY * VAR_URUN_KARMARJ/100) + VAR_URUN_BIRIM_FIY  ;
                 PRM_DOVKOD = VAR_URUN_DOVKOD;
                 Suspend;
               end
             End
           end /*cari bi gruba üye ise End*/
           else /*cari hiç bi gruba üye deðilse*/
           Begin
               if (VAR_URUN_SATIS_FIY<>0)  then
               begin
                PRM_OLDU=1;
                PRM_FIYAT = VAR_URUN_SATIS_FIY;
                PRM_DOVKOD = VAR_URUN_DOVKOD;
                Suspend;
               end
               else
               begin
                PRM_OLDU=1;
                PRM_FIYAT = (VAR_URUN_BIRIM_FIY * VAR_URUN_KARMARJ/100) + VAR_URUN_BIRIM_FIY  ;
                PRM_DOVKOD = VAR_URUN_DOVKOD;
                Suspend;
               end
           End /*cari hiç bi gruba üye deðilse end*/
      end /* eðer ürün cari fiy tablosunda bulunamdý is cari grup fiyat bakýlýyor*/
  End /*satýþ fiyatý end*/
WHEN EXCEPTION  FIYAT_HATA DO
  BEGIN
    PRM_OLDU=0;
    EXECUTE PROCEDURE WRITE_ISN_ERR (:ISN,'GETURUNFIYAT','Ürün Bulunamadý.  Fiyatlandýrmada hata oluþtu');
    SUSPEND;
  END
end
^

ALTER PROCEDURE GET_URUN_FIYAT (
    PRM_URUN_KOD VARCHAR(35),
    PRM_CARI_KOD VARCHAR(15),
    PRM_TIP SMALLINT,
    ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT,
    PRM_FIYAT NUMERIC(18,4),
    PRM_DOVKOD VARCHAR(5))
AS
DECLARE VARIABLE VAR_URUN_KARMARJ SMALLINT;
DECLARE VARIABLE VAR_URUN_SATIS_FIY NUMERIC(18,4);
DECLARE VARIABLE VAR_URUN_BIRIM_FIY NUMERIC(18,4);
DECLARE VARIABLE VAR_URUN_DOVKOD VARCHAR(5);
DECLARE VARIABLE VAR_UCG_FIY_TIP SMALLINT;
DECLARE VARIABLE VAR_UCG_FIY_SATISFIY NUMERIC(18,4);
DECLARE VARIABLE VAR_UCG_FIY_BIRIMORAN SMALLINT;
DECLARE VARIABLE VAR_UCG_FIY_DOVKOD VARCHAR(5);
DECLARE VARIABLE VAR_CARI_GRUP_KOD VARCHAR(15);
DECLARE VARIABLE VAR_CARI_GRUP_VARSAY SMALLINT;
begin
 /*PRM_TIP=2 Alýþ*/
 /*PRM_TIP=1 Satýþ*/
 PRM_OLDU=0;
 Select URUN.BIRIMFIY,URUN.SATISFIY,URUN.DOVKOD,URUN.KARMARJ
  From URUN
  WHERE URUN.URUN_KOD=:PRM_URUN_KOD
  Into :VAR_URUN_BIRIM_FIY,:VAR_URUN_SATIS_FIY,:VAR_URUN_DOVKOD,:VAR_URUN_KARMARJ  ;
  if (VAR_URUN_BIRIM_FIY IS NULL) THEN EXCEPTION  FIYAT_HATA; /*ürün bulunamadý ise*/
  if (PRM_TIP=2) then /*alýþ fiyatý*/
  begin
      PRM_OLDU=1;
      PRM_FIYAT=VAR_URUN_BIRIM_FIY;
      PRM_DOVKOD=VAR_URUN_DOVKOD;
      SUSPEND;
  end /*alýþ fiyatý endi*/
  else if (PRM_TIP=1) then /*satýþ fiyatý*/
  begin
     SELECT URUN_CARI_FIY.BIRIMORAN,URUN_CARI_FIY.SATISFIY,URUN_CARI_FIY.FIY_TIP,URUN_CARI_FIY.SATISDOVKOD
     FROM URUN_CARI_FIY
     WHERE URUN_CARI_FIY.URUN_KOD=:PRM_URUN_KOD and URUN_CARI_FIY.CARI_KOD =:PRM_CARI_KOD
     into :VAR_UCG_FIY_BIRIMORAN,:VAR_UCG_FIY_SATISFIY,:VAR_UCG_FIY_TIP,:VAR_UCG_FIY_DOVKOD;
     if ((not VAR_UCG_FIY_BIRIMORAN is null) and (not VAR_UCG_FIY_TIP is null)) then /* eðer urun_cari_fiy tablosunda býlundu ise*/
      begin
         if (VAR_UCG_FIY_TIP=1) then /* eðer urun_cari_fiy tablosundaki fiy tip 1 ise*/
         Begin
           PRM_OLDU=1;
           PRM_FIYAT=VAR_UCG_FIY_SATISFIY;
           PRM_DOVKOD=VAR_UCG_FIY_DOVKOD;
           SUSPEND;
         end /* eðer urun_cari_fiy tablosundaki fiy tip 1 ise endi*/
         else if (VAR_UCG_FIY_TIP=0) then /* eðer urun_cari_fiy tablosundaki fiy tip 0 ise*/
         begin
            PRM_OLDU=1;
            PRM_FIYAT = (VAR_URUN_BIRIM_FIY * VAR_UCG_FIY_BIRIMORAN/100) + VAR_URUN_BIRIM_FIY;
            PRM_DOVKOD = VAR_UCG_FIY_DOVKOD ;
            Suspend;
         End /* eðer urun_cari_fiy tablosundaki fiy tip 0 ise endi*/
      end /* (   eðer urun_cari_fiy tablosunda býlundu ise endi*/
      else
      begin  /* eðer ürün cari fiy tablosunda bulunamdý is cari grup fiyat bakýlýyor*/
          Select CARI_GRUP_UYE.CARI_GRUP_KOD,CARI_GRUP_UYE.VARSAY
           FROM CARI_GRUP_UYE
           where CARI_GRUP_UYE.CARI_KOD=:PRM_CARI_KOD AND CARI_GRUP_UYE.VARSAY=1
           into :VAR_CARI_GRUP_KOD,:VAR_CARI_GRUP_VARSAY;
           if (not VAR_CARI_GRUP_KOD is null) then /*cari bi Gruba üye ise*/
           begin
             SELECT URUN_CGRUP_FIY.BIRIMORAN,URUN_CGRUP_FIY.SATISFIY,URUN_CGRUP_FIY.FIY_TIP,URUN_CGRUP_FIY.SATISDOVKOD
             FROM URUN_CGRUP_FIY
             where URUN_CGRUP_FIY.URUN_KOD=:PRM_URUN_KOD and URUN_CGRUP_FIY.CARI_GRUP_KOD =:VAR_CARI_GRUP_KOD
             into :VAR_UCG_FIY_BIRIMORAN,:VAR_UCG_FIY_SATISFIY,:VAR_UCG_FIY_TIP,:VAR_UCG_FIY_DOVKOD;

             if ((not VAR_UCG_FIY_BIRIMORAN is null) and (not VAR_UCG_FIY_TIP is null)) then /* eðer urun_cari_grup fiy tablosunda býlundu ise*/
             begin
              if (VAR_UCG_FIY_TIP=1) then /* eðer urun_cari_grup fiy tablosundaki fiy tip 1 ise*/
               Begin
                PRM_OLDU=1;
                PRM_FIYAT=VAR_UCG_FIY_SATISFIY;
                PRM_DOVKOD=VAR_UCG_FIY_DOVKOD;
                SUSPEND;
               end /* eðer urun_cari grup_fiy tablosundaki fiy tip 1 ise endi*/
              else if (VAR_UCG_FIY_TIP=0) then /* eðer urun_cari_fiy tablosundaki fiy tip 0 ise*/
                begin
                 PRM_OLDU=1;
                 PRM_FIYAT = (VAR_URUN_BIRIM_FIY * VAR_UCG_FIY_BIRIMORAN/100) + VAR_URUN_BIRIM_FIY;
                 PRM_DOVKOD = VAR_UCG_FIY_DOVKOD ;
                 Suspend;
                End /* eðer urun_cari_fiy tablosundaki fiy tip 0 ise endi*/
             End /* eðer urun_cari_grup fiy tablosunda býlundu ise end*/
             else
             begin    /* eðer cari bir guba üye ama o gruba ait fiyatlandýrma yok ise*/
              if (VAR_URUN_SATIS_FIY<>0)  then
               begin
                PRM_OLDU=1;
                PRM_FIYAT = VAR_URUN_SATIS_FIY;
                PRM_DOVKOD = VAR_URUN_DOVKOD;
                Suspend;
               end
               else
               begin
                 PRM_OLDU=1;
                 PRM_FIYAT = (VAR_URUN_BIRIM_FIY * VAR_URUN_KARMARJ/100) + VAR_URUN_BIRIM_FIY  ;
                 PRM_DOVKOD = VAR_URUN_DOVKOD;
                 Suspend;
               end
             End
           end /*cari bi gruba üye ise End*/
           else /*cari hiç bi gruba üye deðilse*/
           Begin
               if (VAR_URUN_SATIS_FIY<>0)  then
               begin
                PRM_OLDU=1;
                PRM_FIYAT = VAR_URUN_SATIS_FIY;
                PRM_DOVKOD = VAR_URUN_DOVKOD;
                Suspend;
               end
               else
               begin
                 PRM_OLDU=1;
                 PRM_FIYAT = (VAR_URUN_BIRIM_FIY * VAR_URUN_KARMARJ/100) + VAR_URUN_BIRIM_FIY  ;
                 PRM_DOVKOD = VAR_URUN_DOVKOD;
                 Suspend;
               end
           End /*cari hiç bi gruba üye deðilse end*/
      end /* eðer ürün cari fiy tablosunda bulunamdý is cari grup fiyat bakýlýyor*/
  End /*satýþ fiyatý end*/
WHEN EXCEPTION  FIYAT_HATA DO
  BEGIN
    PRM_OLDU=0;
    EXECUTE PROCEDURE WRITE_ISN_ERR (:ISN,'GETURUNFIYAT','Ürün Bulunamadý.  Fiyatlandýrmada hata oluþtu');
    SUSPEND;
  END
end
^

ALTER PROCEDURE GETDOVIZKUR (
    PRM_DOVKOD VARCHAR(5),
    PRM_TARIH DATE,
    PRM_TIP SMALLINT,
    ISN INTEGER)
RETURNS (
    PRM_KUR NUMERIC(18,4),
    PRM_OLDU SMALLINT)
AS
DECLARE VARIABLE TARIHSTR varchar(12);
DECLARE VARIABLE ALISKUR NUMERIC(18,4);
DECLARE VARIABLE SATISKUR NUMERIC(18,4);
DECLARE VARIABLE EF_ALISKUR NUMERIC(18,4);
DECLARE VARIABLE EF_SATISKUR NUMERIC(18,4);
DECLARE VARIABLE GUN INTEGER;
DECLARE VARIABLE AY INTEGER;
DECLARE VARIABLE YIL INTEGER;
DECLARE VARIABLE GUNSTR VARCHAR(2);
DECLARE VARIABLE AYSTR VARCHAR(2);
DECLARE VARIABLE YILSTR VARCHAR(4);
DECLARE VARIABLE STRERRMSG VARCHAR(300);
DECLARE VARIABLE VPB VARCHAR(5);
BEGIN
  IF (PRM_TARIH IS NULL) THEN
  BEGIN
    PRM_KUR = 0;
    PRM_OLDU=0;
    EXECUTE PROCEDURE WRITE_ISN_ERR (:ISN,'GETDOVIZKUR','PRM_TARIH NULL OLAMAZ');
    SUSPEND;
    EXIT;
  END


  SELECT PRM_DEGER FROM GET_PARAM (1,'VPB') INTO :VPB; /* DEFAULT PARABÝRÝMÝNÝN DÖVÝZ KODU*/
  IF (PRM_DOVKOD = VPB) THEN
  BEGIN
    PRM_KUR = 1;
    PRM_OLDU=1;
    SUSPEND;
    EXIT;
  END
  IF (PRM_TIP NOT IN (1,2,3,4)) THEN EXCEPTION DOVIZ_TIPI_YOK;
  SELECT ALISKUR, SATISKUR, EF_ALISKUR, EF_SATISKUR
  FROM DOVKUR
  WHERE DOVKOD = :PRM_DOVKOD AND TARIH = :PRM_TARIH
  INTO :ALISKUR,:SATISKUR,:EF_ALISKUR,:EF_SATISKUR;
  if (ALISKUR IS NULL) THEN EXCEPTION  DOVKURYOK;
  IF (PRM_TIP=1) THEN /* ALIÞ */
  BEGIN
    PRM_KUR = ALISKUR;
  END
  IF (PRM_TIP=2) THEN  /* SATIÞ */
  BEGIN
    PRM_KUR = SATISKUR;
  END

  IF (PRM_TIP=3) THEN  /* EFEKTÝF ALIÞ */
  BEGIN
    PRM_KUR = EF_ALISKUR;
  END

  IF (PRM_TIP=4) THEN  /* EFEKTÝF SATIS */
  BEGIN
    PRM_KUR = EF_SATISKUR;
  END
  PRM_OLDU = 1;
  SUSPEND;

  /* HATA KONTROLU YAPILIYOR  */
WHEN EXCEPTION  DOVKURYOK DO
  BEGIN
    PRM_KUR = 0;
    SELECT ADAY,AMONTH,AYEAR FROM SP_DMY (:PRM_TARIH) INTO :GUN,:AY,:YIL;
    GUNSTR = CAST(GUN AS CHARACTER(2));
    AYSTR = CAST(AY AS CHARACTER(2));
    YILSTR = CAST(YIL AS CHARACTER(4));
    TARIHSTR = GUNSTR || '/' || AYSTR || '/' || YILSTR;
    STRERRMSG = TARIHSTR  || ' Tarihine Ait ' || PRM_DOVKOD || ' kur bilgisi bulunamadi';
    EXECUTE PROCEDURE WRITE_ISN_ERR (:ISN,'GETDOVIZKUR',STRERRMSG);
    PRM_OLDU = 0;
    SUSPEND;
  END
WHEN EXCEPTION  DOVIZ_TIPI_YOK DO
  BEGIN
    PRM_KUR = 0;
    PRM_OLDU = 0;
    EXECUTE PROCEDURE WRITE_ISN_ERR (:ISN,'GETDOVIZKUR','Döviz tipi 1 ile 4 arasýnda bir deðer olmalýdýr. Parametrelerden Döviz Modulu seçilip SATISKUR parametresi düzeltilmelidir');
    SUSPEND;
  END
END
^

ALTER PROCEDURE KASA_AY_ADDUPDATE (
    PRM_KASA_KOD VARCHAR(15),
    PRM_TARIH DATE,
    PRM_TIP CHAR(1),
    PRM_TUTAR_KASA_DOVKOD NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT)
AS
DECLARE VARIABLE VAR_YIL INTEGER;
DECLARE VARIABLE VAR_AY INTEGER;
DECLARE VARIABLE VAR_KAYITSAY INTEGER;
BEGIN
   PRM_OLDU = 1;
   VAR_YIL = EXTRACT (YEAR FROM :PRM_TARIH);
   VAR_AY = EXTRACT (MONTH FROM :PRM_TARIH);
   SELECT COUNT(*) /* DAHA ONCE KAYIT VAR MI ? KONTROLU  */
   FROM KASA_AY
   WHERE KASA_KOD = :PRM_KASA_KOD AND YIL = :VAR_YIL AND AY = :VAR_AY
   INTO :VAR_KAYITSAY;
   IF (VAR_KAYITSAY = 0)THEN /* YENI KAYIT */
   BEGIN
     IF (PRM_TIP = 'G') THEN INSERT INTO KASA_AY (KASA_KOD,YIL,AY,BORC,ALACAK,BORC_VPB,ALACAK_VPB) VALUES (:PRM_KASA_KOD,:VAR_YIL,:VAR_AY,:PRM_TUTAR_KASA_DOVKOD,0,:PRM_TUTAR_VPB,0);
     IF (PRM_TIP = 'C') THEN INSERT INTO KASA_AY (KASA_KOD,YIL,AY,BORC,ALACAK,BORC_VPB,ALACAK_VPB) VALUES (:PRM_KASA_KOD,:VAR_YIL,:VAR_AY,0,:PRM_TUTAR_KASA_DOVKOD,0,:PRM_TUTAR_VPB);
   END ELSE /* ESKI KAYIT */
   BEGIN
     IF (PRM_TIP = 'G') THEN UPDATE KASA_AY SET BORC = BORC + :PRM_TUTAR_KASA_DOVKOD, BORC_VPB = BORC_VPB + :PRM_TUTAR_VPB WHERE KASA_KOD = :PRM_KASA_KOD  AND  YIL = :VAR_YIL AND AY = :VAR_AY;
     IF (PRM_TIP = 'C') THEN UPDATE KASA_AY SET ALACAK = ALACAK + :PRM_TUTAR_KASA_DOVKOD, ALACAK_VPB = ALACAK_VPB + :PRM_TUTAR_VPB WHERE KASA_KOD = :PRM_KASA_KOD  AND  YIL = :VAR_YIL AND AY = :VAR_AY;
   END
  SUSPEND;
END
^

ALTER PROCEDURE KASA_BAUPDATE (
    PRM_KASA_KOD VARCHAR(15),
    PRM_TUTAR_KASA_DOVKOD NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_TIP CHAR(1),
    ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT)
AS
DECLARE VARIABLE VAR_OLDBORC NUMERIC(18,4);
DECLARE VARIABLE VAR_OLDALACAK NUMERIC(18,4);
DECLARE VARIABLE VAR_OLDBORC_VPB NUMERIC(18,4);
DECLARE VARIABLE VAR_OLDALACAK_VPB NUMERIC(18,4);
BEGIN
  PRM_OLDU = 1;
  SELECT BORC,ALACAK,BORC_VPB,ALACAK_VPB
  FROM KASA
  WHERE KASA_KOD = :PRM_KASA_KOD
  INTO :VAR_OLDBORC,:VAR_OLDALACAK,:VAR_OLDBORC_VPB,:VAR_OLDALACAK_VPB;

  IF ( VAR_OLDBORC IS NULL ) THEN VAR_OLDBORC = 0;
  IF ( VAR_OLDALACAK IS NULL ) THEN VAR_OLDALACAK = 0;
  IF ( VAR_OLDBORC_VPB IS NULL ) THEN VAR_OLDBORC_VPB = 0;
  IF ( VAR_OLDALACAK_VPB IS NULL ) THEN VAR_OLDALACAK_VPB = 0;

  IF (PRM_TIP = 'G' ) THEN /* BORC */
  BEGIN
    VAR_OLDBORC = VAR_OLDBORC + :PRM_TUTAR_KASA_DOVKOD;
    VAR_OLDBORC_VPB = VAR_OLDBORC_VPB + :PRM_TUTAR_VPB;
    UPDATE KASA SET BORC = :VAR_OLDBORC, BORC_VPB = :VAR_OLDBORC_VPB WHERE KASA_KOD = :PRM_KASA_KOD;
  END
  IF (PRM_TIP = 'C' ) THEN /* ALACAK */
  BEGIN
    VAR_OLDALACAK = VAR_OLDALACAK + :PRM_TUTAR_KASA_DOVKOD;
    VAR_OLDALACAK_VPB = VAR_OLDALACAK_VPB + :PRM_TUTAR_VPB;
    UPDATE KASA SET ALACAK = :VAR_OLDALACAK, ALACAK_VPB = :VAR_OLDALACAK_VPB WHERE KASA_KOD = :PRM_KASA_KOD;
  END
  SUSPEND;
END
^

ALTER PROCEDURE KASA_MUHTELIF_SIL (
    PRM_BELGE_TUR INTEGER,
    PRM_KASAHAR_ID INTEGER,
    PRM_KASAHAR_SID INTEGER,
    PRM_ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT)
AS
DECLARE VARIABLE VAR_KASAHAR_ID INTEGER;
DECLARE VARIABLE VAR_KASAHAR_SID INTEGER;
DECLARE VARIABLE VAR_MC CHAR(1);
DECLARE VARIABLE VAR_KARSI_KOD VARCHAR(30);
DECLARE VARIABLE VAR_PROJE_KOD VARCHAR(15);
DECLARE VARIABLE VAR_PLASIYER_KOD VARCHAR(15);
DECLARE VARIABLE VAR_BELGE_ID INTEGER;
DECLARE VARIABLE VAR_BELGE_SID INTEGER;
DECLARE VARIABLE VAR_LIMITASIMI SMALLINT;
BEGIN
  /*
  SELECT PRM_OLDU FROM MUH_GEC_BELGE_SIL(:PRM_BELGE_TUR,:PRM_KASAHAR_ID, :PRM_KASAHAR_SID, 1, :PRM_ISN) INTO :PRM_OLDU;
  IF (PRM_OLDU=0) THEN
  BEGIN
    EXECUTE PROCEDURE WRITE_ISN_ERR (:PRM_ISN, 'KASA_MUHTELIF_SIL','MUH_GEC_BELGE_SIL ÝÞLETÝLÝRKEN HATA OLUÞTU');
    SUSPEND;
    EXIT;
  END
  */

  FOR SELECT KASAHAR.KASAHAR_ID,KASAHAR.KASAHAR_SID,KASAHAR.KARSIKOD,KASAHAR.MC,KASAHAR.PROJE_KOD,KASAHAR.PLASIYER_KOD
  FROM KASAHAR
  WHERE KASAHAR.ISLEM_TIP = 5 AND KASAHAR.BELGE_ID = :PRM_KASAHAR_ID AND KASAHAR.BELGE_SID = :PRM_KASAHAR_SID
  INTO :VAR_KASAHAR_ID ,:VAR_KASAHAR_SID,:VAR_KARSI_KOD,:VAR_MC,:VAR_PROJE_KOD,:VAR_PLASIYER_KOD
  DO BEGIN
    IF (VAR_MC = 'C') THEN
    BEGIN
      SELECT  PRM_CARIHAR_ID,
              PRM_CARIHAR_SID,
              PRM_LIMITASIMI,
              PRM_OLDU
      FROM CARIHAR_AUD(:PRM_BELGE_TUR,
                       :VAR_KASAHAR_ID,
                       :VAR_KASAHAR_SID,
                       1,
                       :VAR_KARSI_KOD,
                       'B',
                       '01.01.2010',
                       '01.01.2010',
                       '01.01.2010',
                       0,
                       'YTL',
                       1,
                       0,
                       '01.01.2010',
                       '',
                       :PRM_ISN,
                       1,
                       '',
                       '',
                       '',
                       '',
                       '',
                       '',
                       '')
      INTO :VAR_BELGE_ID,:VAR_BELGE_SID,:VAR_LIMITASIMI,:PRM_OLDU;
      IF (PRM_OLDU = 0) THEN
      BEGIN
        EXECUTE PROCEDURE WRITE_ISN_ERR (:PRM_ISN, 'KASA_MUHTELIF_SIL','CARIHAR_AUD ÝÞLETÝLÝRKEN HATA OLUÞTU');
        SUSPEND;
        EXIT;
      END
    END /* IF (VAR_MC = 'C') THEN  */
    IF ((NOT VAR_PROJE_KOD IS NULL) OR  (VAR_PROJE_KOD <> '')) THEN
    BEGIN
      SELECT PRM_PROJEHAR_ID, PRM_PROJEHAR_SID, PRM_OLDU
      FROM PROJEHAR_AUD(:PRM_BELGE_TUR,
                        :VAR_KASAHAR_ID,
                        :VAR_KASAHAR_SID,
                        1,
                        :VAR_PROJE_KOD,
                        '01.01.2010',
                        '01.01.2010',
                        '01.01.2010',
                        '01.01.2010',
                        'B',
                        'YTL',
                        0,
                        0,
                        0,
                        1,
                        '',
                        :PRM_ISN,
                        '',
                        '',
                        '',
                        '',
                        '')
      INTO :VAR_BELGE_ID,:VAR_BELGE_SID,:PRM_OLDU;
      IF (PRM_OLDU = 0) THEN
      BEGIN
        EXECUTE PROCEDURE WRITE_ISN_ERR (:PRM_ISN, 'KASA_MUHTELIF_SIL','PROJEHAR_AUD ÝÞLETÝLÝRKEN HATA OLUÞTU');
        SUSPEND;
        EXIT;
      END
    END /* IF ((NOT VAR_PROJE_KOD IS NULL) OR  (VAR_PROJE_KOD <> '')) THEN  */
  END /* FOR END  */

  SUSPEND;
END
^

ALTER PROCEDURE KUR_DONUSTUR (
    PRM_TARIH DATE,
    PRM_FROMKUR VARCHAR(5),
    PRM_TOKUR VARCHAR(5),
    PRM_TUTAR NUMERIC(18,4),
    PRM_SATIS SMALLINT,
    ISN INTEGER)
RETURNS (
    PRM_KUR NUMERIC(18,4))
AS
 DECLARE VARIABLE FROMKURASMONEY NUMERIC(18,4);
 DECLARE VARIABLE TOKURASMONEY NUMERIC(18,4);

BEGIN
/* SATIS = 1 ÝSE SATIÞ KURU 0 ÝSE ALIÞ KURU */
 SELECT PRM_KUR FROM GETDOVIZKUR ( :PRM_FROMKUR , :PRM_TARIH , :PRM_SATIS, :ISN ) into :FROMKURASMONEY;
 IF (FROMKURASMONEY <> 0) THEN
 BEGIN
  PRM_KUR = PRM_TUTAR * FROMKURASMONEY;
  SELECT PRM_KUR FROM GETDOVIZKUR ( :PRM_TOKUR , :PRM_TARIH , :PRM_SATIS , :ISN ) into :TOKURASMONEY;
  IF ((TOKURASMONEY <> 0) AND (TOKURASMONEY <> 0)) THEN
  BEGIN
   PRM_KUR = PRM_KUR / TOKURASMONEY;
  END ELSE
  BEGIN
    PRM_KUR = 0;
    EXECUTE PROCEDURE WRITE_ISN_ERR (:ISN, 'KURDONUSTUR', 'Dönüþtürülecek Kurlardan biri 0 deðerini aldýðý için iþlem yapýlamýyor');
  END /* IF ((TOKURASMONEY <> 0) AND (TOKURASMONEY <> 0)) THEN */
 END ELSE
 BEGIN
  PRM_KUR = 0;
  EXECUTE PROCEDURE WRITE_ISN_ERR (:ISN, 'KURDONUSTUR', 'Dönüþtürülecek Kurlardan biri 0 deðerini aldýðý için iþlem yapýlamýyor');
 END /* IF (FROMKURASMONEY <> 0) THEN */
 SUSPEND;
END
^

ALTER PROCEDURE KURLU_DONUSTUR (
    PRM_TARIH DATE,
    PRM_FROMKUR VARCHAR(5),
    PRM_FROM_DOVKUR NUMERIC(18,4),
    PRM_TOKUR VARCHAR(5),
    PRM_TUTAR NUMERIC(18,4),
    PRM_SATIS SMALLINT,
    PRM_DOVKURLA_ISLE SMALLINT,
    ISN INTEGER)
RETURNS (
    PRM_KUR NUMERIC(18,4),
    PRM_OLDU SMALLINT)
AS
DECLARE VARIABLE FROMKURASMONEY NUMERIC(18,4);
DECLARE VARIABLE TOKURASMONEY NUMERIC(18,4);
BEGIN
  PRM_FROMKUR = LTRIM(RTRIM(PRM_FROMKUR));
  PRM_TOKUR = LTRIM(RTRIM(PRM_TOKUR));
  IF (PRM_FROMKUR = PRM_TOKUR) THEN
  BEGIN
    PRM_KUR = PRM_TUTAR;
    PRM_OLDU = 1;
    SUSPEND;
    EXIT;
  END
  IF (PRM_DOVKURLA_ISLE = 1) THEN /* DOVKURLA ISLE GELEN DOVÝZ KURUYLA ÝSLEM YAP DEMEK */
  BEGIN
    FROMKURASMONEY = PRM_FROM_DOVKUR;
    PRM_OLDU = 1;
  END ELSE
  BEGIN
    SELECT PRM_KUR, PRM_OLDU FROM GETDOVIZKUR ( :PRM_FROMKUR , :PRM_TARIH , :PRM_SATIS, :ISN ) into :FROMKURASMONEY,:PRM_OLDU;
  END
 IF (PRM_OLDU <> 0) THEN
 BEGIN
  PRM_KUR = cast(PRM_TUTAR as float)  * cast(FROMKURASMONEY as float);
  SELECT PRM_KUR, PRM_OLDU FROM GETDOVIZKUR ( :PRM_TOKUR , :PRM_TARIH , :PRM_SATIS , :ISN ) into :TOKURASMONEY,:PRM_OLDU;
  IF ((PRM_OLDU <> 0) AND (TOKURASMONEY <> 0)) THEN
  BEGIN
   PRM_KUR = cast(PRM_KUR as float) / cast(TOKURASMONEY as float);
  END ELSE
  BEGIN
    PRM_KUR = 0;
    PRM_OLDU = 0;
    EXECUTE PROCEDURE WRITE_ISN_ERR (:ISN, 'KURLU_DONUSTUR', 'Kur alma iþleminde hata oluþtu yada Dönüþtürme paydasý 0 deðerini aldý');
  END /* IF ((TOKURASMONEY <> 0) AND (TOKURASMONEY <> 0)) THEN */
 END ELSE
 BEGIN
  PRM_KUR = 0;
  PRM_OLDU = 0;
  EXECUTE PROCEDURE WRITE_ISN_ERR (:ISN, 'KURLU_DONUSTUR', 'Kur alma iþleminde hata oluþtu yada Dönüþtürme paydasý 0 deðerini aldý');
 END /* IF (FROMKURASMONEY <> 0) THEN */
 SUSPEND;
END
^

ALTER PROCEDURE OLCU_BIRIM_DONUSTUR (
    PRM_FROM_BIRIM VARCHAR(15),
    PRM_FROM_BIRIM_DEGER NUMERIC(18,4),
    PRM_TO_BIRIM VARCHAR(15),
    ISN INTEGER)
RETURNS (
    PRM_BIRIM_DEGER NUMERIC(18,4),
    PRM_OLDU SMALLINT)
AS
DECLARE VARIABLE VAR_FROM_TIP VARCHAR(15);
DECLARE VARIABLE VAR_TO_TIP VARCHAR(15);
DECLARE VARIABLE VAR_ERR_MSG VARCHAR(200);
DECLARE VARIABLE VAR_DOM_BIRIM VARCHAR(15); /* OLCU TÝPÝNÝN DOMÝNANT BIRIMI  */
DECLARE VARIABLE VAR_DOM_DEGER NUMERIC(18,4);/* FROM BIRIMIN DOMÝNANT DEÐERÝ */
DECLARE VARIABLE VAR_FROM_BIRIM_DEGERTODOM NUMERIC(18,4); /* FROM BIRIMIN DOMÝNANTA GORE DEGERÝ  */
DECLARE VARIABLE VAR_TO_BIRIM_DEGERTODOM NUMERIC(18,4); /* TO BIRIMIN DOMÝNANTA GORE DEGERÝ  */
BEGIN
  PRM_OLDU = 1;
  PRM_BIRIM_DEGER = 0;
  IF (PRM_FROM_BIRIM = PRM_TO_BIRIM) THEN
  BEGIN  /* IKI BIRIM AYNI ÝSE DÖNÜÞTÜRME ÝÞLEMÝ YAPMAZ  */
    PRM_BIRIM_DEGER = PRM_FROM_BIRIM_DEGER;
    SUSPEND;
    EXIT;
  END

  SELECT OLCU_TIP FROM OLCUBIR WHERE OLCUBIRIM = :PRM_FROM_BIRIM INTO :VAR_FROM_TIP;
  SELECT OLCU_TIP FROM OLCUBIR WHERE OLCUBIRIM = :PRM_TO_BIRIM INTO :VAR_TO_TIP;
  IF (VAR_FROM_TIP <> VAR_TO_TIP) THEN
  BEGIN
     EXCEPTION OLCU_BIRIM_DONUSTURULEMEZ;
  END
  /* DOMINANT BIRIM ALINIYOR  */
  SELECT OLCUBIRIM FROM OLCUBIR WHERE OLCU_TIP = :VAR_FROM_TIP AND DOMINANT = 1 INTO :VAR_DOM_BIRIM;
  IF (PRM_FROM_BIRIM = VAR_DOM_BIRIM) THEN
  BEGIN
    VAR_DOM_DEGER = PRM_FROM_BIRIM_DEGER; /* FROM BIRIM DOMINANT ÝSE HESAPLAMA YAPMAZ  */
  END ELSE
  BEGIN
    /* FROM BIRIMIN DOMINANT KARÞILIÐI BULUNUYOR  */
    SELECT DEGERTODOM FROM OLCUBIR WHERE OLCUBIRIM = :PRM_FROM_BIRIM INTO :VAR_FROM_BIRIM_DEGERTODOM;
    VAR_DOM_DEGER = PRM_FROM_BIRIM_DEGER * VAR_FROM_BIRIM_DEGERTODOM;
  END

  IF (PRM_TO_BIRIM = VAR_DOM_BIRIM) THEN
  BEGIN
    PRM_BIRIM_DEGER = VAR_DOM_DEGER; /* TO BIRIM DOMINANT ÝSE HESAPLAMA YAPMAZ  */
  END ELSE
  BEGIN
    /* FROM BIRIMIN DOMINANT KARÞILIÐI BULUNUYOR  */
    SELECT DEGERTODOM FROM OLCUBIR WHERE OLCUBIRIM = :PRM_TO_BIRIM INTO :VAR_TO_BIRIM_DEGERTODOM;
    PRM_BIRIM_DEGER = VAR_DOM_DEGER / VAR_TO_BIRIM_DEGERTODOM;
  END
  SUSPEND;
  EXIT;

/* HATA KONTROLU  */
  WHEN EXCEPTION OLCU_BIRIM_DONUSTURULEMEZ DO
  BEGIN
    VAR_ERR_MSG = PRM_FROM_BIRIM || ' ile ' || PRM_TO_BIRIM || ' ölçü birimleri arasýnda dönüþtürme yapýlamaz !';
    EXECUTE PROCEDURE WRITE_ISN_ERR( :ISN,'OLCU_BIRIM_DONUSTUR',VAR_ERR_MSG);
    PRM_OLDU = 0;
    PRM_BIRIM_DEGER = 0;
    SUSPEND;
  END
END
^

ALTER PROCEDURE PLASIYER_BA_UPD (
    PRM_PLASIYER_KOD VARCHAR(15),
    PRM_DOV_BAZ_TAR DATE,
    PRM_DOVKOD VARCHAR(5),
    PRM_DOVKUR NUMERIC(18,4),
    PRM_TUTAR NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_TIP CHAR(1),
    ISN INTEGER)
RETURNS (
    PRM_OLDU SMALLINT)
AS
DECLARE VARIABLE VAR_PLA_TUTAR NUMERIC(18,4);
DECLARE VARIABLE VAR_PLA_DOVKOD VARCHAR(5);
DECLARE VARIABLE VAR_DOVIZLI SMALLINT;
DECLARE VARIABLE VAR_KURTIPI SMALLINT;
DECLARE VARIABLE VAR_DEFCUR VARCHAR(5);
BEGIN
  PRM_OLDU = 1;
  SELECT CAST(PRM_DEGER  AS SMALLINT) FROM GET_PARAM (10,'PLASIYER_UYG') INTO :VAR_DOVIZLI;
  /* PLASIYER UYGULAMASI YOKSA CIKIYOR  */
  IF (VAR_DOVIZLI = 0) THEN
  BEGIN
    SUSPEND;
    EXIT;
  END

  IF ((PRM_PLASIYER_KOD='') OR (PRM_PLASIYER_KOD IS NULL)) then
  BEGIN
    SUSPEND;
    EXIT;
  END

  SELECT COUNT(*) FROM PLASIYER WHERE PLASIYER_KOD = :PRM_PLASIYER_KOD INTO :VAR_DOVIZLI;
  IF (VAR_DOVIZLI=0) then
  BEGIN
    PRM_OLDU = 0;
    EXECUTE PROCEDURE WRITE_ISN_ERR (:ISN, 'PLASIYER_BA_UPD','Plasiyer Kodu Hatalý');
    SUSPEND;
    EXIT;
  END

  SELECT PRM_DEGER FROM GET_PARAM (1,'VPB') INTO :VAR_DEFCUR;
  SELECT CAST(PRM_DEGER  AS SMALLINT) FROM GET_PARAM (1,'SATISKUR') INTO :VAR_KURTIPI; /* KUR DEÐÝÞTÝRME ÝÞLEMLERÝ SIRASINDA KULLANILAN KUR TÝPÝ SATIÞ/ALIÞ */
  SELECT CAST(PRM_DEGER  AS SMALLINT) FROM GET_PARAM (1,'USEDOVIZ') INTO :VAR_DOVIZLI;

  SELECT DOVKOD
  FROM PLASIYER
  WHERE PLASIYER_KOD = :PRM_PLASIYER_KOD
  INTO :VAR_PLA_DOVKOD;

  IF (VAR_PLA_DOVKOD = VAR_DEFCUR) THEN
  BEGIN
    VAR_PLA_TUTAR = PRM_TUTAR_VPB;
  END ELSE
  BEGIN
     SELECT PRM_KUR, PRM_OLDU FROM KURLU_DONUSTUR ( :PRM_DOV_BAZ_TAR , :PRM_DOVKOD , :PRM_DOVKUR ,:VAR_PLA_DOVKOD ,:PRM_TUTAR , :VAR_KURTIPI, 1,:ISN) INTO :VAR_PLA_TUTAR,:PRM_OLDU; /* KUR DEÐERÝ ALINIYOR */
     IF (PRM_OLDU = 0 ) THEN
     BEGIN
        EXECUTE PROCEDURE WRITE_ISN_ERR (:ISN, 'PLASIYER_BA_UPD','Kur dönüþtürme iþlemi yapýlamadý');
        SUSPEND;
        EXIT;
     END
  END

  IF (PRM_TIP = 'B' ) THEN /* BORC */
  BEGIN
    UPDATE PLASIYER SET BORC = BORC + :VAR_PLA_TUTAR, BORC_VPB = BORC_VPB + :PRM_TUTAR_VPB WHERE PLASIYER_KOD = :PRM_PLASIYER_KOD;
  END
  IF (PRM_TIP = 'A' ) THEN /* ALACAK */
  BEGIN
    UPDATE PLASIYER SET ALACAK = ALACAK + :VAR_PLA_TUTAR, ALACAK_VPB = ALACAK_VPB + :PRM_TUTAR_VPB WHERE PLASIYER_KOD = :PRM_PLASIYER_KOD;
  END
  SUSPEND;
END
^

ALTER PROCEDURE PROJEHAR_AUD (
    PRM_BELGE_TUR INTEGER,
    PRM_BELGE_ID INTEGER,
    PRM_BELGE_SID INTEGER,
    PRM_SIRA_NO SMALLINT,
    PRM_PROJE_KOD VARCHAR(15),
    PRM_TARIH DATE,
    PRM_FIILI_TAR DATE,
    PRM_DOV_BAZ_TAR DATE,
    PRM_VADETAR DATE,
    PRM_TIP CHAR(1),
    PRM_DOVKOD CHAR(5),
    PRM_DOVKUR NUMERIC(18,4),
    PRM_TUTAR NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_SIL SMALLINT,
    PRM_ACIKLAMA VARCHAR(100),
    ISN INTEGER,
    PRM_MASRAF_MERK VARCHAR(15),
    PRM_KOD1 VARCHAR(15),
    PRM_KOD2 VARCHAR(15),
    PRM_KOD3 VARCHAR(15),
    PRM_KOD4 VARCHAR(15))
RETURNS (
    PRM_PROJEHAR_ID INTEGER,
    PRM_PROJEHAR_SID INTEGER,
    PRM_OLDU SMALLINT)
AS
DECLARE VARIABLE OLDPROJE_KOD VARCHAR(15);
DECLARE VARIABLE OLDTIP CHAR(1);
DECLARE VARIABLE OLDTUTAR_VPB NUMERIC(18,4);
DECLARE VARIABLE OLDTUTAR_PROJE_DOVKOD NUMERIC(18,4);
DECLARE VARIABLE VAR_STR_SID VARCHAR(15);
DECLARE VARIABLE VAR_SID INTEGER;
DECLARE VARIABLE STR_KURTIPI VARCHAR(15);
DECLARE VARIABLE VAR_KURTIPI SMALLINT;
DECLARE VARIABLE VAR_PROJE_DOVKOD VARCHAR(5);
DECLARE VARIABLE VAR_VPB VARCHAR(15);
DECLARE VARIABLE VAR_TUTAR_PROJE_DOVKOD NUMERIC(18,4);
BEGIN
  SELECT PRM_DEGER FROM GET_PARAM (0,'SUBE_KOD') INTO :VAR_STR_SID; /* IÞLEMIN YAPILDIÐI ÞUBENIN KODU */
  SELECT PRM_DEGER FROM GET_PARAM (1,'SATISKUR') INTO :STR_KURTIPI; /* KUR DEÐÝÞTÝRME ÝÞLEMLERÝ SIRASINDA KULLANILAN KUR TÝPÝ SATIÞ/ALIÞ */
  SELECT PRM_DEGER FROM GET_PARAM (1,'VPB') INTO :VAR_VPB; /* DEFAULT PARABÝRÝMÝNÝN DÖVÝZ KODU*/
  VAR_SID = CAST (VAR_STR_SID AS INTEGER);
  VAR_KURTIPI = CAST (STR_KURTIPI AS SMALLINT);
  IF (PRM_SIL <> 1 ) THEN
  BEGIN
      /* PROJENIN DOVIZ KODU ALINIYOR  */
      SELECT DOVKOD  FROM PROJE  WHERE PROJE_KOD = :PRM_PROJE_KOD INTO :VAR_PROJE_DOVKOD;
      IF (VAR_PROJE_DOVKOD IS NULL) THEN
      BEGIN
        EXECUTE PROCEDURE WRITE_ISN_ERR ( :ISN,'PROJEHAR_AUD','Ýþlem yapýlabilecek proje bulunamadý');
        PRM_OLDU = 0;
        SUSPEND;
        EXIT;
      END
      IF (VAR_PROJE_DOVKOD = PRM_DOVKOD) THEN
      BEGIN
        VAR_TUTAR_PROJE_DOVKOD = PRM_TUTAR;
      END ELSE
      BEGIN
        IF (VAR_PROJE_DOVKOD = VAR_VPB) THEN
        BEGIN
           VAR_TUTAR_PROJE_DOVKOD = PRM_TUTAR_VPB;
        END ELSE
        BEGIN
           SELECT PRM_KUR,PRM_OLDU FROM KURLU_DONUSTUR(:PRM_DOV_BAZ_TAR,:VAR_PROJE_DOVKOD,:PRM_DOVKUR,:VAR_PROJE_DOVKOD,:PRM_TUTAR,:VAR_KURTIPI,1,:ISN) INTO :VAR_TUTAR_PROJE_DOVKOD,:PRM_OLDU;
           IF (PRM_OLDU = 0) THEN
           BEGIN
             EXECUTE PROCEDURE WRITE_ISN_ERR ( :ISN,'PROJEHAR_AUD','KUR dönüþtürme iþlemi yapýlamadý , lütfen önce ki hata mesajlarýna bakýnýz');
             SUSPEND;
             EXIT;
           END
        END
      END
   END /* PRM_SIL <> 1  */

  SELECT PROJEHAR_ID,PROJEHAR_SID
  FROM PROJEHAR
  WHERE BELGE_TUR = :PRM_BELGE_TUR AND BELGE_ID =:PRM_BELGE_ID AND BELGE_SID =:PRM_BELGE_SID AND SIRA_NO = :PRM_SIRA_NO
  INTO :PRM_PROJEHAR_ID, :PRM_PROJEHAR_SID;

  IF (((PRM_PROJEHAR_ID IS NULL) OR (PRM_PROJEHAR_ID = 0)) AND (PRM_SIL <> 1))   THEN
  BEGIN /* INSERT */
    PRM_PROJEHAR_ID = GEN_ID(GEN_PROJEHAR, 1);
    PRM_PROJEHAR_SID = VAR_SID;
    INSERT INTO PROJEHAR
                (PROJEHAR_ID,
                 PROJEHAR_SID,
                 BELGE_TUR,
                 BELGE_ID,
                 BELGE_SID,
                 PROJE_KOD,
                 TARIH,
                 TIP,
                 DOVKOD,
                 DOVKUR,
                 TUTAR,
                 TUTAR_VPB,
                 ACIKLAMA,
                 FIILI_TAR,
                 DOV_BAZ_TAR,
                 TUTAR_PROJE_DOVKOD,
                 VADETAR,
                 SIRA_NO,
                 MASRAF_MERK,
                 KOD1,
                 KOD2,
                 KOD3,
                 KOD4)
         VALUES (:PRM_PROJEHAR_ID,
                 :PRM_PROJEHAR_SID,
                 :PRM_BELGE_TUR,
                 :PRM_BELGE_ID,
                 :PRM_BELGE_SID,
                 :PRM_PROJE_KOD,
                 :PRM_TARIH,
                 :PRM_TIP,
                 :PRM_DOVKOD,
                 :PRM_DOVKUR,
                 :PRM_TUTAR,
                 :PRM_TUTAR_VPB,
                 :PRM_ACIKLAMA,
                 :PRM_FIILI_TAR,
                 :PRM_DOV_BAZ_TAR,
                 :VAR_TUTAR_PROJE_DOVKOD,
                 :PRM_VADETAR,
                 :PRM_SIRA_NO,
                 :PRM_MASRAF_MERK,
                 :PRM_KOD1,
                 :PRM_KOD2,
                 :PRM_KOD3,
                 :PRM_KOD4);
    IF (PRM_TIP = 'B') THEN
    BEGIN
      UPDATE PROJE SET BORC = BORC + :VAR_TUTAR_PROJE_DOVKOD, BORC_VPB = BORC_VPB + :PRM_TUTAR_VPB WHERE PROJE_KOD = :PRM_PROJE_KOD;
    END
    IF (PRM_TIP = 'A') THEN
    BEGIN
      UPDATE PROJE SET ALACAK = ALACAK + :VAR_TUTAR_PROJE_DOVKOD, ALACAK_VPB = ALACAK_VPB + :PRM_TUTAR_VPB WHERE PROJE_KOD = :PRM_PROJE_KOD;
    END
  END ELSE
  BEGIN
  /**************YAPILAN DEÐÝÞÝKLÝKLER GERÝ ALINIYOR***************************************************************/
    SELECT PROJE_KOD, TIP , TUTAR_VPB, TUTAR_PROJE_DOVKOD
    FROM PROJEHAR
    WHERE PROJEHAR_ID = :PRM_PROJEHAR_ID AND PROJEHAR_SID = :PRM_PROJEHAR_SID
    INTO :OLDPROJE_KOD, :OLDTIP, :OLDTUTAR_VPB, :OLDTUTAR_PROJE_DOVKOD;

    IF ((OLDPROJE_KOD IS NULL) AND (PRM_SIL = 1)) THEN
    /* SILME GONDERILIYOR AMA DAHA ONCE KAYIT YOK  */
    BEGIN
      PRM_PROJEHAR_ID = 0;
      PRM_PROJEHAR_SID = 0;
      PRM_OLDU = 1;
      SUSPEND;
      EXIT;
    END
    /* TUTALARIN NEGATIFI ALINIYOR*/
    OLDTUTAR_VPB = 0 - OLDTUTAR_VPB;
    OLDTUTAR_PROJE_DOVKOD = 0 - OLDTUTAR_PROJE_DOVKOD;
    IF (OLDTIP = 'B') THEN
    BEGIN
      UPDATE PROJE SET BORC = BORC + :OLDTUTAR_PROJE_DOVKOD, BORC_VPB = BORC_VPB + :OLDTUTAR_VPB WHERE PROJE_KOD = :OLDPROJE_KOD;
    END
    IF (OLDTIP = 'A') THEN
    BEGIN
      UPDATE PROJE SET ALACAK = ALACAK + :OLDTUTAR_PROJE_DOVKOD, ALACAK_VPB = ALACAK_VPB + :OLDTUTAR_VPB WHERE PROJE_KOD = :OLDPROJE_KOD;
    END
  /**************YAPILAN DEÐÝÞÝKLÝKLER GERÝ ALINDI***YENI HAREKET IÞLENIYOR*******************************************************/
    IF (PRM_SIL <> 1) THEN
    BEGIN                 /* UPDATE */
      IF (PRM_TIP = 'B') THEN
      BEGIN
        UPDATE PROJE SET BORC = BORC + :VAR_TUTAR_PROJE_DOVKOD, BORC_VPB = BORC_VPB + :PRM_TUTAR_VPB WHERE PROJE_KOD = :PRM_PROJE_KOD;
      END
      IF (PRM_TIP = 'A') THEN
      BEGIN
        UPDATE PROJE SET ALACAK = ALACAK + :VAR_TUTAR_PROJE_DOVKOD, ALACAK_VPB = ALACAK_VPB + :PRM_TUTAR_VPB WHERE PROJE_KOD = :PRM_PROJE_KOD;
      END
      UPDATE PROJEHAR SET BELGE_TUR =:PRM_BELGE_TUR ,
                          BELGE_ID=:PRM_BELGE_ID,
                          BELGE_SID=:PRM_BELGE_SID,
                          SIRA_NO=:PRM_SIRA_NO,
                          PROJE_KOD =:PRM_PROJE_KOD,
                          TARIH =:PRM_TARIH ,
                          TIP = :PRM_TIP ,
                          DOVKOD =:PRM_DOVKOD ,
                          DOVKUR = :PRM_DOVKUR,
                          TUTAR =:PRM_TUTAR,
                          TUTAR_VPB = :PRM_TUTAR_VPB,
                          ACIKLAMA = :PRM_ACIKLAMA,
                          FIILI_TAR = :PRM_FIILI_TAR,
                          DOV_BAZ_TAR = :PRM_DOV_BAZ_TAR,
                          TUTAR_PROJE_DOVKOD = :VAR_TUTAR_PROJE_DOVKOD,
                          VADETAR = :PRM_VADETAR,
                          MASRAF_MERK = :PRM_MASRAF_MERK,
                          KOD1 = :PRM_KOD1,
                          KOD2 = :PRM_KOD2,
                          KOD3 = :PRM_KOD3,
                          KOD4 = :PRM_KOD4
      WHERE PROJEHAR_ID = :PRM_PROJEHAR_ID AND PROJEHAR_SID = :PRM_PROJEHAR_SID;
    END ELSE
    BEGIN                 /* DELETE */
      DELETE FROM PROJEHAR WHERE PROJEHAR_ID = :PRM_PROJEHAR_ID AND PROJEHAR_SID = :PRM_PROJEHAR_SID;
    END
  END
  PRM_OLDU = 1;
  SUSPEND;
END
^

ALTER PROCEDURE SP_DMY (
    ADATE DATE)
RETURNS (
    ADAY INTEGER,
    AMONTH INTEGER,
    AYEAR INTEGER)
AS
begin
  ADAY   = EXTRACT ( DAY   FROM :ADATE );
  AMONTH = EXTRACT ( MONTH FROM :ADATE );
  AYEAR  = EXTRACT ( YEAR  FROM :ADATE );

  SUSPEND;
end
^

ALTER PROCEDURE URUN_BA_UPDATE (
    PRM_URUN_KOD VARCHAR(35),
    PRM_TIP CHAR(1),
    PRM_TUTAR NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_MIKTAR NUMERIC(18,4))
AS
BEGIN
  IF (PRM_TIP = 'B' ) THEN /* BORC */
  BEGIN
    UPDATE URUN SET BORC =  BORC + :PRM_TUTAR, BORC_VPB = BORC_VPB + :PRM_TUTAR_VPB, MIKTAR_BORC = MIKTAR_BORC + :PRM_MIKTAR WHERE URUN_KOD = :PRM_URUN_KOD;
  END
  IF (PRM_TIP = 'A' ) THEN /* ALACAK */
  BEGIN
    UPDATE URUN SET ALACAK =  ALACAK + :PRM_TUTAR, ALACAK_VPB = ALACAK_VPB + :PRM_TUTAR_VPB, MIKTAR_ALACAK = MIKTAR_ALACAK + :PRM_MIKTAR WHERE URUN_KOD = :PRM_URUN_KOD ;
  END
END
^

ALTER PROCEDURE URUNHAR_AUD (
    PRM_BELGETUR INTEGER,
    PRM_BELGE_ID INTEGER,
    PRM_BELGE_SID INTEGER,
    PRM_BELGE_SIRA_NO INTEGER,
    PRM_URUN_KOD VARCHAR(35),
    PRM_TIP CHAR(1),
    PRM_TARIH DATE,
    PRM_FIILI_TAR DATE,
    PRM_DOV_BAZ_TAR DATE,
    PRM_OLCUBIRIM VARCHAR(15),
    PRM_MIKTAR NUMERIC(18,4),
    PRM_DOVKOD VARCHAR(5),
    PRM_DOVKUR NUMERIC(18,4),
    PRM_TUTAR NUMERIC(18,4),
    PRM_TUTAR_VPB NUMERIC(18,4),
    PRM_BIRIM_FIY NUMERIC(18,4),
    PRM_BIRIM_FIY_VPB NUMERIC(18,4),
    PRM_ISKONTO_TUTAR NUMERIC(18,4),
    PRM_ISKONTO_TUTAR_VPB NUMERIC(18,4),
    PRM_DEPO_KOD VARCHAR(15),
    PRM_SIL SMALLINT,
    ISN INTEGER,
    PRM_MASRAF_MERK VARCHAR(15),
    PRM_KOD1 VARCHAR(15),
    PRM_KOD2 VARCHAR(15),
    PRM_KOD3 VARCHAR(15),
    PRM_KOD4 VARCHAR(15))
RETURNS (
    PRM_URUNHAR_ID INTEGER,
    PRM_URUNHAR_SID INTEGER,
    PRM_OLDU SMALLINT)
AS
DECLARE VARIABLE VAR_VPB VARCHAR(5);
DECLARE VARIABLE VAR_DEPO_UYG VARCHAR(15);
DECLARE VARIABLE VAR_DOVTAKIP VARCHAR(5);
DECLARE VARIABLE VAR_URN_DOV_TAK VARCHAR(5);
DECLARE VARIABLE VAR_STR_SID VARCHAR(15);
DECLARE VARIABLE VAR_SID INTEGER;
DECLARE VARIABLE VAR_URN_OLCUBIRIM VARCHAR(15); /* URUNUN URUN KARTI ÜZERÝNDE KÝ ÖLÇÜ BÝRÝMÝ  */
DECLARE VARIABLE VAR_BIRIMFIY_URN_DOVKOD NUMERIC(18,4);
DECLARE VARIABLE VAR_URN_DOVKOD VARCHAR(5); /* ÜRÜNKARTI ÜZERÝNDE KÝ DÖVÝZ KODU  */
DECLARE VARIABLE VAR_STR_DOVTIP VARCHAR(15);
DECLARE VARIABLE VAR_DOVTIP SMALLINT;
DECLARE VARIABLE VAR_OLCUBIRIM_URN_OB VARCHAR(15);
DECLARE VARIABLE VAR_MIKTAR_URN_OB NUMERIC(18,4);
DECLARE VARIABLE VAR_TUTAR_URN_DOVKOD NUMERIC(18,4);
/* ESKI KAYIT DEÐISKENLERI  */
DECLARE VARIABLE VAR_OLD_TIP CHAR(1);
DECLARE VARIABLE VAR_OLD_URUN_KOD VARCHAR(35);
DECLARE VARIABLE VAR_OLD_TARIH DATE;
DECLARE VARIABLE VAR_OLD_FIILI_TAR DATE;
DECLARE VARIABLE VAR_OLD_DOV_BAZ_TAR DATE;
DECLARE VARIABLE VAR_OLD_OLCUBIRIM VARCHAR(15);
DECLARE VARIABLE VAR_OLD_MIKTAR NUMERIC (18,4);
DECLARE VARIABLE VAR_OLD_DOVKOD VARCHAR(5);
DECLARE VARIABLE VAR_OLD_DOVKUR NUMERIC (18,5);
DECLARE VARIABLE VAR_OLD_TUTAR NUMERIC (18,4);
DECLARE VARIABLE VAR_OLD_TUTAR_VPB NUMERIC (18,4);
DECLARE VARIABLE VAR_OLD_URUN_DOVKOD VARCHAR(5);
DECLARE VARIABLE VAR_OLD_TUTAR_URUN_DOVKOD NUMERIC(18,4);
DECLARE VARIABLE VAR_OLD_BIRIM_FIY NUMERIC (18,4);
DECLARE VARIABLE VAR_OLD_BIRIM_FIY_VPB NUMERIC (18,4);
DECLARE VARIABLE VAR_OLD_BIRIM_FIY_URN_DOVKOD NUMERIC (18,4);
DECLARE VARIABLE VAR_OLD_ISKONTO_TUTAR NUMERIC (18,4);
DECLARE VARIABLE VAR_OLD_ISKONTO_TUTAR_VPB NUMERIC (18,4);
DECLARE VARIABLE VAR_OLD_OLCUBIRIM_URN_OB VARCHAR(15);
DECLARE VARIABLE VAR_OLD_MIKTAR_URN_OB NUMERIC (18,5);
DECLARE VARIABLE VAR_OLD_DEPO_KOD VARCHAR(15);
BEGIN
  SELECT PRM_DEGER FROM GET_PARAM (1,'USEDOVIZ') INTO :VAR_DOVTAKIP; /* DOVIZ TAKIBI YAPILIYOR MU ?*/
  SELECT PRM_DEGER FROM GET_PARAM (7,'URN_DOV_TAK') INTO :VAR_URN_DOV_TAK; /* URUNDE DOVIZLI FIYAT TAKIBI YAPILÞIYOR MU ? */
  SELECT PRM_DEGER FROM GET_PARAM (0,'SUBE_KOD') INTO :VAR_STR_SID; /* IÞLEMIN YAPILDIÐI ÞUBENIN KODU */
  SELECT PRM_DEGER FROM GET_PARAM (1,'VPB') INTO :VAR_VPB; /* DEFAULT PARABÝRÝMÝNÝN DÖVÝZ KODU*/
  SELECT PRM_DEGER FROM GET_PARAM (1,'SATISKUR') INTO :VAR_STR_DOVTIP;
  SELECT PRM_DEGER FROM GET_PARAM (8,'DEPO_UYG') INTO :VAR_DEPO_UYG;
  SELECT OLCUBIRIM, DOVKOD,OLCUBIRIM FROM URUN WHERE URUN_KOD = :PRM_URUN_KOD INTO :VAR_URN_OLCUBIRIM, :VAR_URN_DOVKOD,:VAR_OLCUBIRIM_URN_OB;
  VAR_DEPO_UYG = LTRIM(RTRIM(VAR_DEPO_UYG));
  VAR_SID = CAST(VAR_STR_SID AS INTEGER);
  VAR_DOVTIP = CAST(VAR_STR_DOVTIP AS SMALLINT);
  IF (VAR_URN_OLCUBIRIM IS NULL) THEN
  BEGIN
    EXECUTE PROCEDURE WRITE_ISN_ERR( :ISN,'URUN_HAR_AUD','Ürün seçilmemiþ');
    PRM_OLDU = 3; /* ürün seçilmemiþ  */
    SUSPEND;
    EXIT;
  END
  IF (PRM_SIL <> 1) THEN
  BEGIN
      IF (PRM_DOVKOD <> VAR_URN_DOVKOD) THEN /* URUNUN URUN KARTI UZERÝNDE BELÝRTÝLEN DOVÝZ KODU CÝNSÝNDEN BIRIM FIYAR BEDELI HESAPLANIYOR  */
      BEGIN
        IF (VAR_URN_DOVKOD <> VAR_VPB) THEN /* URUNUN DOVKOD'U VPB ÝSE DONUSTURME YAPILMAZ  */
        BEGIN
          SELECT PRM_KUR, PRM_OLDU FROM KURLU_DONUSTUR(:PRM_TARIH,:PRM_DOVKOD,:PRM_DOVKUR,:VAR_URN_DOVKOD,:PRM_BIRIM_FIY,:VAR_DOVTIP,1,:ISN) INTO :VAR_BIRIMFIY_URN_DOVKOD,:PRM_OLDU;
          IF (PRM_OLDU = 0) THEN
          BEGIN
            EXECUTE PROCEDURE WRITE_ISN_ERR( :ISN,'URUN_HAR_AUD', 'Kur Dönüþtürme iþlemi yapýlamadý');
            SUSPEND;
            EXIT;
          END
          SELECT PRM_KUR, PRM_OLDU FROM KURLU_DONUSTUR(:PRM_TARIH,:PRM_DOVKOD,:PRM_DOVKUR,:VAR_URN_DOVKOD,:PRM_TUTAR,:VAR_DOVTIP,1,:ISN) INTO :VAR_TUTAR_URN_DOVKOD,:PRM_OLDU;
          IF (PRM_OLDU = 0) THEN
          BEGIN
            EXECUTE PROCEDURE WRITE_ISN_ERR( :ISN,'URUN_HAR_AUD', 'Kur Dönüþtürme iþlemi yapýlamadý');
            SUSPEND;
            EXIT;
          END
        END ELSE
        BEGIN
          VAR_BIRIMFIY_URN_DOVKOD = PRM_BIRIM_FIY_VPB;
          VAR_TUTAR_URN_DOVKOD = PRM_TUTAR_VPB;
        END
      END ELSE
      BEGIN
        VAR_BIRIMFIY_URN_DOVKOD = PRM_BIRIM_FIY;
        VAR_TUTAR_URN_DOVKOD = PRM_TUTAR;
      END

      IF (PRM_OLCUBIRIM <> VAR_OLCUBIRIM_URN_OB) THEN
      BEGIN
         SELECT PRM_BIRIM_DEGER, PRM_OLDU FROM OLCU_BIRIM_DONUSTUR (:PRM_OLCUBIRIM,:PRM_MIKTAR,:VAR_OLCUBIRIM_URN_OB,:ISN) INTO :VAR_MIKTAR_URN_OB, :PRM_OLDU;
         IF (PRM_OLDU = 0 ) THEN
         BEGIN
            EXECUTE PROCEDURE WRITE_ISN_ERR( :ISN,'URUN_HAR_AUD','Iþlem yapýlmak istenen OLCU BIRIMLERI arasýnda dönüþtürme yapýlamadý');
            PRM_OLDU = 0;
            SUSPEND;
            EXIT;
         END
      END ELSE
      BEGIN
        VAR_MIKTAR_URN_OB = PRM_MIKTAR;
      END
  END /* PRM_SIL <> 1  */
  SELECT URUNHAR_ID, URUNHAR_SID
  FROM URUNHAR
  WHERE BELGE_TUR = :PRM_BELGETUR AND BELGE_ID = :PRM_BELGE_ID AND BELGE_SID = :PRM_BELGE_SID AND BELGE_SIRA_NO = :PRM_BELGE_SIRA_NO
  INTO :PRM_URUNHAR_ID, :PRM_URUNHAR_SID;

  IF ((PRM_URUNHAR_ID IS NULL) AND (PRM_SIL <> 1))   THEN
  BEGIN
  /* YENI KAYIT  */
    PRM_URUNHAR_ID = GEN_ID(GEN_URUNHAR,1);
    PRM_URUNHAR_SID = VAR_SID;
    INSERT INTO URUNHAR(URUNHAR_ID,
                        URUNHAR_SID,
                        TIP,
                        BELGE_TUR,
                        BELGE_ID,
                        BELGE_SID,
                        BELGE_SIRA_NO,
                        URUN_KOD,
                        TARIH,
                        FIILI_TAR,
                        DOV_BAZ_TAR,
                        OLCUBIRIM,
                        MIKTAR,
                        DOVKOD,
                        DOVKUR,
                        TUTAR,
                        TUTAR_VPB,
                        URUN_DOVKOD,
                        TUTAR_URUN_DOVKOD,
                        BIRIM_FIY,
                        BIRIM_FIY_VPB,
                        BIRIM_FIY_URN_DOVKOD,
                        ISKONTO_TUTAR,
                        ISKONTO_TUTAR_VPB,
                        OLCUBIRIM_URN_OB,
                        MIKTAR_URN_OB,
                        DEPO_KOD,
                        MASRAF_MERK,
                        KOD1,
                        KOD2,
                        KOD3,
                        KOD4)
                VALUES( :PRM_URUNHAR_ID,
                        :PRM_URUNHAR_SID,
                        :PRM_TIP,
                        :PRM_BELGETUR,
                        :PRM_BELGE_ID,
                        :PRM_BELGE_SID ,
                        :PRM_BELGE_SIRA_NO,
                        :PRM_URUN_KOD,
                        :PRM_TARIH,
                        :PRM_FIILI_TAR,
                        :PRM_DOV_BAZ_TAR,
                        :PRM_OLCUBIRIM,
                        :PRM_MIKTAR,
                        :PRM_DOVKOD,
                        :PRM_DOVKUR,
                        :PRM_TUTAR,
                        :PRM_TUTAR_VPB,
                        :VAR_URN_DOVKOD,
                        :VAR_TUTAR_URN_DOVKOD,
                        :PRM_BIRIM_FIY,
                        :PRM_BIRIM_FIY_VPB,
                        :VAR_BIRIMFIY_URN_DOVKOD,
                        :PRM_ISKONTO_TUTAR,
                        :PRM_ISKONTO_TUTAR_VPB,
                        :VAR_URN_OLCUBIRIM,
                        :VAR_MIKTAR_URN_OB,
                        :PRM_DEPO_KOD,
                        :PRM_MASRAF_MERK,
                        :PRM_KOD1,
                        :PRM_KOD2,
                        :PRM_KOD3,
                        :PRM_KOD4);

     EXECUTE PROCEDURE URUN_BA_UPDATE(:PRM_URUN_KOD,:PRM_TIP,:VAR_TUTAR_URN_DOVKOD,:PRM_TUTAR_VPB,:VAR_MIKTAR_URN_OB);
     IF ((VAR_DEPO_UYG ='1') AND (PRM_DEPO_KOD <> '')) THEN EXECUTE PROCEDURE DEPO_URUN_BA_UPDATE (:PRM_DEPO_KOD,:PRM_URUN_KOD,:PRM_TIP,:VAR_TUTAR_URN_DOVKOD,:PRM_TUTAR_VPB,:VAR_MIKTAR_URN_OB);
  END ELSE
  BEGIN
  /* ESKI KAYIT */
     /* HAREKETLER GERI ALINIYOR  */
     SELECT TIP,URUN_KOD,TARIH,FIILI_TAR,DOV_BAZ_TAR,OLCUBIRIM,MIKTAR,DOVKOD,DOVKUR,TUTAR,TUTAR_VPB,BIRIM_FIY,BIRIM_FIY_VPB,BIRIM_FIY_URN_DOVKOD,ISKONTO_TUTAR,ISKONTO_TUTAR_VPB,OLCUBIRIM_URN_OB,MIKTAR_URN_OB,DEPO_KOD,URUN_DOVKOD,TUTAR_URUN_DOVKOD
     FROM URUNHAR
     WHERE URUNHAR_ID = :PRM_URUNHAR_ID AND URUNHAR_SID = :PRM_URUNHAR_SID
     INTO :VAR_OLD_TIP,:VAR_OLD_URUN_KOD,:VAR_OLD_TARIH,:VAR_OLD_FIILI_TAR,:VAR_OLD_DOV_BAZ_TAR,:VAR_OLD_OLCUBIRIM,:VAR_OLD_MIKTAR,:VAR_OLD_DOVKOD,:VAR_OLD_DOVKUR,:VAR_OLD_TUTAR,:VAR_OLD_TUTAR_VPB,:VAR_OLD_BIRIM_FIY,:VAR_OLD_BIRIM_FIY_VPB,:VAR_OLD_BIRIM_FIY_URN_DOVKOD,:VAR_OLD_ISKONTO_TUTAR,:VAR_OLD_ISKONTO_TUTAR_VPB,:VAR_OLD_OLCUBIRIM_URN_OB,:VAR_OLD_MIKTAR_URN_OB,:VAR_OLD_DEPO_KOD,:VAR_OLD_URUN_DOVKOD,:VAR_OLD_TUTAR_URUN_DOVKOD;
     VAR_OLD_TUTAR_URUN_DOVKOD = 0 - VAR_OLD_TUTAR_URUN_DOVKOD;
     VAR_OLD_TUTAR_VPB = 0 - VAR_OLD_TUTAR_VPB;
     VAR_OLD_MIKTAR_URN_OB = 0 - VAR_OLD_MIKTAR_URN_OB;
     EXECUTE PROCEDURE URUN_BA_UPDATE(:VAR_OLD_URUN_KOD,:VAR_OLD_TIP,:VAR_OLD_TUTAR_URUN_DOVKOD,:VAR_OLD_TUTAR_VPB,:VAR_OLD_MIKTAR_URN_OB);
     IF ((VAR_DEPO_UYG ='1') AND (VAR_OLD_DEPO_KOD <> '')) THEN EXECUTE PROCEDURE DEPO_URUN_BA_UPDATE (:VAR_OLD_DEPO_KOD,:VAR_OLD_URUN_KOD,:VAR_OLD_TIP,:VAR_OLD_TUTAR_URUN_DOVKOD,:VAR_OLD_TUTAR_VPB,:VAR_OLD_MIKTAR_URN_OB);
    /* HAREKETLER GERI ALINIYOR --- BITTI ---- */
    IF (PRM_SIL <> 1) THEN
    BEGIN    /* UPDATE  */
      UPDATE URUNHAR SET
                        TIP = :PRM_TIP,
                        URUN_KOD = :PRM_URUN_KOD,
                        TARIH = :PRM_TARIH,
                        FIILI_TAR = :PRM_FIILI_TAR,
                        DOV_BAZ_TAR = :PRM_DOV_BAZ_TAR,
                        OLCUBIRIM = :PRM_OLCUBIRIM,
                        MIKTAR = :PRM_MIKTAR,
                        DOVKOD = :PRM_DOVKOD,
                        DOVKUR = :PRM_DOVKUR,
                        TUTAR = :PRM_TUTAR,
                        TUTAR_VPB = :PRM_TUTAR_VPB,
                        URUN_DOVKOD = :VAR_URN_DOVKOD,
                        TUTAR_URUN_DOVKOD = :VAR_TUTAR_URN_DOVKOD,
                        BIRIM_FIY = :PRM_BIRIM_FIY,
                        BIRIM_FIY_VPB = :PRM_BIRIM_FIY_VPB,
                        BIRIM_FIY_URN_DOVKOD = :VAR_BIRIMFIY_URN_DOVKOD,
                        ISKONTO_TUTAR = :PRM_ISKONTO_TUTAR,
                        ISKONTO_TUTAR_VPB = :PRM_ISKONTO_TUTAR_VPB,
                        OLCUBIRIM_URN_OB = :VAR_OLCUBIRIM_URN_OB,
                        MIKTAR_URN_OB = :VAR_MIKTAR_URN_OB,
                        DEPO_KOD = :PRM_DEPO_KOD,
                        MASRAF_MERK = :PRM_MASRAF_MERK,
                        KOD1 = :PRM_KOD1,
                        KOD2 = :PRM_KOD2,
                        KOD3 = :PRM_KOD3,
                        KOD4 = :PRM_KOD4
      WHERE URUNHAR_ID = :PRM_URUNHAR_ID AND URUNHAR_SID = :PRM_URUNHAR_SID;
      EXECUTE PROCEDURE URUN_BA_UPDATE(:PRM_URUN_KOD,:PRM_TIP,:VAR_TUTAR_URN_DOVKOD,:PRM_TUTAR_VPB,:VAR_MIKTAR_URN_OB);
      IF ((VAR_DEPO_UYG ='1') AND (PRM_DEPO_KOD <> '')) THEN EXECUTE PROCEDURE DEPO_URUN_BA_UPDATE (:PRM_DEPO_KOD,:PRM_URUN_KOD,:PRM_TIP,:VAR_TUTAR_URN_DOVKOD,:PRM_TUTAR_VPB,:VAR_MIKTAR_URN_OB);
    END ELSE /* SILME  */
    BEGIN
       DELETE FROM URUNHAR WHERE URUNHAR_ID = :PRM_URUNHAR_ID AND URUNHAR_SID = :PRM_URUNHAR_SID;
    END
  END
  PRM_OLDU = 1;
  SUSPEND;
END
^

ALTER PROCEDURE WEB_CARIHAR (
    PRM_TARIH1 VARCHAR(10),
    PRM_TARIH2 VARCHAR(10),
    PRM_CARI_KOD VARCHAR(15))
RETURNS (
    TIP CHAR(10),
    ALACAK NUMERIC(18,2),
    BORC NUMERIC(18,2),
    PROJE_KOD VARCHAR(15),
    BELGE_TUR VARCHAR(50),
    ACIKLAMA VARCHAR(100),
    TARIH DATE,
    SUBE VARCHAR(10),
    DVR_BAKIYE NUMERIC(18,2),
    DVR_ALACAK NUMERIC(18,2),
    DVR_BORC NUMERIC(18,2))
AS
DECLARE VARIABLE V_SUBE_ID SMALLINT;
DECLARE VARIABLE V_TUTAR_VPB NUMERIC(18,2);
DECLARE VARIABLE V_BELGE_TUR INTEGER;
DECLARE VARIABLE V_ALACAK NUMERIC(18,2);
DECLARE VARIABLE V_BORC NUMERIC(18,2);
DECLARE VARIABLE V_TIP CHAR(1) CHARACTER SET WIN1254;
DECLARE VARIABLE V_TOPLAM NUMERIC(18,2);
DECLARE VARIABLE V_DVR_ALACAK NUMERIC(18,2);
DECLARE VARIABLE V_DVR_BORC NUMERIC(18,2);
BEGIN
  V_SUBE_ID = 0;
  V_TUTAR_VPB = 0;
  V_BELGE_TUR = 0;
  V_ALACAK = 0;
  V_BORC = 0;
  V_TIP = '';
  V_TOPLAM = 0;
  V_DVR_BORC = 0;
  V_DVR_ALACAK = 0;
  TIP = '';
  ALACAK = 0;
  BORC = 0;
  PROJE_KOD = '';
  BELGE_TUR = '';
  ACIKLAMA = '';
  SUBE = '';
  DVR_BAKIYE = 0;
  DVR_ALACAK = 0;
  DVR_BORC = 0;

  IF ( (PRM_TARIH1 = '') AND ((PRM_TARIH2 = '')) ) THEN
  BEGIN
    SELECT DEVREDEN_BORC,DEVREDEN_ALACAK FROM CARI WHERE CARI_KOD = :PRM_CARI_KOD
    INTO :V_DVR_BORC,:V_DVR_ALACAK;
    IF ( V_DVR_BORC IS NULL ) THEN V_DVR_BORC = 0;
    IF ( V_DVR_ALACAK IS NULL ) THEN V_DVR_ALACAK = 0;

    DVR_BORC = V_DVR_BORC;
    DVR_ALACAK = V_DVR_ALACAK;
    IF (DVR_BORC > DVR_ALACAK) THEN
    BEGIN
      DVR_BAKIYE = DVR_BORC - DVR_ALACAK;
    END
    ELSE
    IF (DVR_BORC < DVR_ALACAK) THEN
    BEGIN
      DVR_BAKIYE = DVR_ALACAK - DVR_BORC;
    END
    ELSE
    BEGIN
      DVR_BAKIYE = 0;
    END

    FOR SELECT CARIHAR.BELGE_SID
              ,CARIHAR.TIP
              ,CARIHAR.TUTAR_VPB AS TOPLAM
              ,CARIHAR.TARIH
              ,CARIHAR.ACIKLAMA
              ,CARIHAR.BELGE_TUR
              ,CARIHAR.PROJE_KOD FROM CARIHAR
        LEFT OUTER JOIN CARI ON (CARIHAR.CARI_KOD = CARI.CARI_KOD)
        WHERE CARIHAR.CARI_KOD = :PRM_CARI_KOD
        ORDER BY CARIHAR.TARIH,CARIHAR.CARIHAR_ID ASC
        INTO :V_SUBE_ID,:TIP,:V_TUTAR_VPB,:TARIH,:ACIKLAMA,:V_BELGE_TUR,:PROJE_KOD
    DO
    BEGIN
      IF (TIP = 'A') THEN
      BEGIN
        ALACAK = V_TUTAR_VPB;
      END
      ELSE
      IF (TIP = 'B') THEN
      BEGIN
        BORC = V_TUTAR_VPB;
      END
      IF (V_BELGE_TUR = 1) THEN BELGE_TUR = 'Alýþ Faturasý';
      ELSE
      IF (V_BELGE_TUR = 4) THEN BELGE_TUR = 'Borç Çeki';
      ELSE
      IF (V_BELGE_TUR = 5) THEN BELGE_TUR = 'Devir kaydý';
      ELSE
      IF (V_BELGE_TUR = 6) THEN BELGE_TUR = 'Müþteri çeki alýndý kaydý';
      ELSE
      IF (V_BELGE_TUR = 7) THEN BELGE_TUR = 'Müþteri senedi alýndý kaydý';
      ELSE
      IF (V_BELGE_TUR = 8) THEN BELGE_TUR = 'Müþteri çek cirolamasý';
      ELSE
      IF (V_BELGE_TUR = 9) THEN BELGE_TUR = 'Çek Bordrosu';
      ELSE
      IF (V_BELGE_TUR = 10) THEN BELGE_TUR = 'Senet Bordrosu';
      ELSE
      IF (V_BELGE_TUR = 11) THEN BELGE_TUR = 'Çek iade dekontu';
      ELSE
      IF (V_BELGE_TUR = 12) THEN BELGE_TUR = 'Senet iade dekontu';
      ELSE
      IF (V_BELGE_TUR = 13) THEN BELGE_TUR = 'Müþteri senet cirolamasý';
      ELSE
      IF (V_BELGE_TUR = 14) THEN BELGE_TUR = 'Kasa';
      ELSE
      IF (V_BELGE_TUR = 15) THEN BELGE_TUR = 'Portfödeki karþýlýksýz çek dekontu';
      ELSE
      IF (V_BELGE_TUR = 16) THEN BELGE_TUR = 'Portföydeki protestolu senet dekontu';
      ELSE
      IF (V_BELGE_TUR = 17) THEN BELGE_TUR = 'Serbest Dekont';
      ELSE
      IF (V_BELGE_TUR = 18) THEN BELGE_TUR = 'Borç Seneti';
      ELSE
      IF (V_BELGE_TUR = 19) THEN BELGE_TUR = 'Cari';
      ELSE
      IF (V_BELGE_TUR = 20) THEN BELGE_TUR = 'Satýþ Faturasý';
      ELSE
      IF (V_BELGE_TUR = 21) THEN BELGE_TUR = 'Müþteri çeki tahsile verme';
      ELSE
      IF (V_BELGE_TUR = 22) THEN BELGE_TUR = 'Müþteri senedi tahsile verme';
      ELSE
      IF (V_BELGE_TUR = 23) THEN BELGE_TUR = 'Muhasebe Fiþi';
      ELSE
      IF (V_BELGE_TUR = 24) THEN BELGE_TUR = 'Satýcýdan gelen karþýlýksýz çek';
      ELSE
      IF (V_BELGE_TUR = 25) THEN BELGE_TUR = 'Bankadan gelen karþýlýksýz çek';
      ELSE
      IF (V_BELGE_TUR = 26) THEN BELGE_TUR = 'Satýcýdan gelen protestolu senet';
      ELSE
      IF (V_BELGE_TUR = 27) THEN BELGE_TUR = 'Bankadan gelen protestolu senet';
      ELSE
      IF (V_BELGE_TUR = 28) THEN BELGE_TUR = 'Bankadan gelen çek senet tahsil dekontu';
      ELSE
      IF (V_BELGE_TUR = 29) THEN BELGE_TUR = 'Borç çeki ödeme dekontu';
      ELSE
      IF (V_BELGE_TUR = 30) THEN BELGE_TUR = 'Borç çeki iade dekontu';
      ELSE
      IF (V_BELGE_TUR = 31) THEN BELGE_TUR = 'Borç seneti iade dekontu';
      ELSE
      IF (V_BELGE_TUR = 32) THEN BELGE_TUR = 'Bankadan gelen senet tahsil dekontu';
      ELSE
      IF (V_BELGE_TUR = 33) THEN BELGE_TUR = 'Kasaya çek senet tahsili';
      ELSE
      IF (V_BELGE_TUR = 34) THEN BELGE_TUR = 'Kasadan çek senet tediyesi';
      IF (V_SUBE_ID = 1) THEN
      BEGIN
        SUBE = 'ÝZMÝR';
      END
      ELSE
      IF (V_SUBE_ID = 2) THEN
      BEGIN
        SUBE = 'ÝSTANBUL';
      END
      ELSE
      IF (V_SUBE_ID = 3) THEN
      BEGIN
        SUBE = 'BURSA';
      END
      SUSPEND;
      V_SUBE_ID = 0;
      V_TUTAR_VPB = 0;
      V_BELGE_TUR = 0;
      V_ALACAK = 0;
      V_BORC = 0;
      V_TIP = 0;
      V_TOPLAM = 0;
      V_DVR_BORC = 0;
      V_DVR_ALACAK = 0;
      TIP = '';
      ALACAK = 0;
      BORC = 0;
      PROJE_KOD = '';
      BELGE_TUR = '';
      ACIKLAMA = '';
      SUBE = '';
      /*DVR_BAKIYE = 0;
      DVR_ALACAK = 0;
      DVR_BORC = 0;*/
    END
  END
  ELSE
  IF ( (PRM_TARIH1 IS NOT NULL) AND ((PRM_TARIH2 IS NOT NULL)) ) THEN
  BEGIN
    SELECT DEVREDEN_BORC,DEVREDEN_ALACAK FROM CARI WHERE CARI_KOD = :PRM_CARI_KOD
    INTO :V_DVR_BORC,:V_DVR_ALACAK;
    IF ( V_DVR_BORC IS NULL ) THEN V_DVR_BORC = 0;
    IF ( V_DVR_ALACAK IS NULL ) THEN V_DVR_ALACAK = 0;

    IF ((PRM_TARIH1 > '01.01.2010') AND (PRM_TARIH2 > '01.01.2010')) THEN
    BEGIN
      FOR SELECT CARIHAR.TIP,SUM(CARIHAR.TUTAR_VPB) AS TOPLAM
      FROM CARIHAR
      WHERE CARIHAR.TARIH >= '01.01.2010' AND CARIHAR.TARIH < :PRM_TARIH1
      AND
      CARIHAR.CARI_KOD = :PRM_CARI_KOD
      GROUP BY CARIHAR.TIP INTO :V_TIP,:V_TOPLAM
      DO
      BEGIN
        IF (V_TIP = 'A') THEN
        BEGIN
          V_ALACAK = V_TOPLAM;
        END
        ELSE
        IF (V_TIP = 'B') THEN
        BEGIN
          V_BORC = V_TOPLAM;
        END
      END
      DVR_BORC = V_DVR_BORC + V_BORC;
      DVR_ALACAK = V_DVR_ALACAK + V_ALACAK;
      IF (DVR_BORC > DVR_ALACAK) THEN
      BEGIN
        DVR_BAKIYE = DVR_BORC - DVR_ALACAK;
      END
      ELSE
      IF (DVR_BORC < DVR_ALACAK) THEN
      BEGIN
        DVR_BAKIYE = DVR_ALACAK - DVR_BORC;
      END
      ELSE
      BEGIN
        DVR_BAKIYE = 0;
      END
    END
    ELSE
    BEGIN
      DVR_BORC = V_DVR_BORC;
      DVR_ALACAK = V_DVR_ALACAK;
      IF (DVR_BORC > DVR_ALACAK) THEN
      BEGIN
        DVR_BAKIYE = DVR_BORC - DVR_ALACAK;
      END
      ELSE
      IF (DVR_BORC < DVR_ALACAK) THEN
      BEGIN
        DVR_BAKIYE = DVR_ALACAK - DVR_BORC;
      END
      ELSE
      BEGIN
        DVR_BAKIYE = 0;
      END
    END
    FOR SELECT CARIHAR.BELGE_SID
              ,CARIHAR.TIP
              ,CARIHAR.TUTAR_VPB AS TOPLAM
              ,CARIHAR.TARIH
              ,CARIHAR.ACIKLAMA
              ,CARIHAR.BELGE_TUR
              ,CARIHAR.PROJE_KOD FROM CARIHAR
        LEFT OUTER JOIN CARI ON (CARIHAR.CARI_KOD = CARI.CARI_KOD)
        WHERE (CARIHAR.TARIH BETWEEN :PRM_TARIH1 AND :PRM_TARIH2)
        AND CARIHAR.CARI_KOD = :PRM_CARI_KOD
        ORDER BY CARIHAR.TARIH,CARIHAR.CARIHAR_ID ASC
        INTO :V_SUBE_ID,:TIP,:V_TUTAR_VPB,:TARIH,:ACIKLAMA,:V_BELGE_TUR,:PROJE_KOD
    DO
    BEGIN
      IF (TIP = 'A') THEN
      BEGIN
        ALACAK = V_TUTAR_VPB;
      END
      ELSE
      IF (TIP = 'B') THEN
      BEGIN
        BORC = V_TUTAR_VPB;
      END
      IF (V_BELGE_TUR = 1) THEN BELGE_TUR = 'Alýþ Faturasý';
      ELSE
      IF (V_BELGE_TUR = 4) THEN BELGE_TUR = 'Borç Çeki';
      ELSE
      IF (V_BELGE_TUR = 5) THEN BELGE_TUR = 'Devir kaydý';
      ELSE
      IF (V_BELGE_TUR = 6) THEN BELGE_TUR = 'Müþteri çeki alýndý kaydý';
      ELSE
      IF (V_BELGE_TUR = 7) THEN BELGE_TUR = 'Müþteri senedi alýndý kaydý';
      ELSE
      IF (V_BELGE_TUR = 8) THEN BELGE_TUR = 'Müþteri çek cirolamasý';
      ELSE
      IF (V_BELGE_TUR = 9) THEN BELGE_TUR = 'Çek Bordrosu';
      ELSE
      IF (V_BELGE_TUR = 10) THEN BELGE_TUR = 'Senet Bordrosu';
      ELSE
      IF (V_BELGE_TUR = 11) THEN BELGE_TUR = 'Çek iade dekontu';
      ELSE
      IF (V_BELGE_TUR = 12) THEN BELGE_TUR = 'Senet iade dekontu';
      ELSE
      IF (V_BELGE_TUR = 13) THEN BELGE_TUR = 'Müþteri senet cirolamasý';
      ELSE
      IF (V_BELGE_TUR = 14) THEN BELGE_TUR = 'Kasa';
      ELSE
      IF (V_BELGE_TUR = 15) THEN BELGE_TUR = 'Portfödeki karþýlýksýz çek dekontu';
      ELSE
      IF (V_BELGE_TUR = 16) THEN BELGE_TUR = 'Portföydeki protestolu senet dekontu';
      ELSE
      IF (V_BELGE_TUR = 17) THEN BELGE_TUR = 'Serbest Dekont';
      ELSE
      IF (V_BELGE_TUR = 18) THEN BELGE_TUR = 'Borç Seneti';
      ELSE
      IF (V_BELGE_TUR = 19) THEN BELGE_TUR = 'Cari';
      ELSE
      IF (V_BELGE_TUR = 20) THEN BELGE_TUR = 'Satýþ Faturasý';
      ELSE
      IF (V_BELGE_TUR = 21) THEN BELGE_TUR = 'Müþteri çeki tahsile verme';
      ELSE
      IF (V_BELGE_TUR = 22) THEN BELGE_TUR = 'Müþteri senedi tahsile verme';
      ELSE
      IF (V_BELGE_TUR = 23) THEN BELGE_TUR = 'Muhasebe Fiþi';
      ELSE
      IF (V_BELGE_TUR = 24) THEN BELGE_TUR = 'Satýcýdan gelen karþýlýksýz çek';
      ELSE
      IF (V_BELGE_TUR = 25) THEN BELGE_TUR = 'Bankadan gelen karþýlýksýz çek';
      ELSE
      IF (V_BELGE_TUR = 26) THEN BELGE_TUR = 'Satýcýdan gelen protestolu senet';
      ELSE
      IF (V_BELGE_TUR = 27) THEN BELGE_TUR = 'Bankadan gelen protestolu senet';
      ELSE
      IF (V_BELGE_TUR = 28) THEN BELGE_TUR = 'Bankadan gelen çek senet tahsil dekontu';
      ELSE
      IF (V_BELGE_TUR = 29) THEN BELGE_TUR = 'Borç çeki ödeme dekontu';
      ELSE
      IF (V_BELGE_TUR = 30) THEN BELGE_TUR = 'Borç çeki iade dekontu';
      ELSE
      IF (V_BELGE_TUR = 31) THEN BELGE_TUR = 'Borç seneti iade dekontu';
      ELSE
      IF (V_BELGE_TUR = 32) THEN BELGE_TUR = 'Bankadan gelen senet tahsil dekontu';
      ELSE
      IF (V_BELGE_TUR = 33) THEN BELGE_TUR = 'Kasaya çek senet tahsili';
      ELSE
      IF (V_BELGE_TUR = 34) THEN BELGE_TUR = 'Kasadan çek senet tediyesi';
      IF (V_SUBE_ID = 1) THEN
      BEGIN
        SUBE = 'ÝZMÝR';
      END
      ELSE
      IF (V_SUBE_ID = 2) THEN
      BEGIN
        SUBE = 'ÝSTANBUL';
      END
      ELSE
      IF (V_SUBE_ID = 3) THEN
      BEGIN
        SUBE = 'BURSA';
      END
      SUSPEND;
      V_SUBE_ID = 0;
      V_TUTAR_VPB = 0;
      V_BELGE_TUR = 0;
      V_ALACAK = 0;
      V_BORC = 0;
      V_TIP = 0;
      V_TOPLAM = 0;
      V_DVR_BORC = 0;
      V_DVR_ALACAK = 0;
      TIP = '';
      ALACAK = 0;
      BORC = 0;
      PROJE_KOD = '';
      BELGE_TUR = '';
      ACIKLAMA = '';
      SUBE = '';
      /*DVR_BAKIYE = 0;
      DVR_ALACAK = 0;
      DVR_BORC = 0;*/
    END
  END
END
^

ALTER PROCEDURE WEB_CARIHAR_TOPLAM (
    PRM_TARIH1 VARCHAR(10),
    PRM_TARIH2 VARCHAR(10),
    PRM_AVANS VARCHAR(15),
    PRM_HAKEDIS VARCHAR(15))
RETURNS (
    GENEL_BAKIYE NUMERIC(18,2),
    GENEL_ALACAK NUMERIC(18,2),
    GENEL_BORC NUMERIC(18,2),
    HAK_BAKIYE NUMERIC(18,2),
    HAK_BORC NUMERIC(18,2),
    HAK_ALACAK NUMERIC(18,2),
    AVANS_BAKIYE NUMERIC(18,2),
    AVANS_ALACAK NUMERIC(18,2),
    AVANS_BORC NUMERIC(18,2))
AS
DECLARE VARIABLE V_ALACAK NUMERIC(18,2);
DECLARE VARIABLE V_BORC NUMERIC(18,2);
DECLARE VARIABLE V_TIP CHAR(1) CHARACTER SET WIN1254;
DECLARE VARIABLE V_TOPLAM NUMERIC(18,2);
DECLARE VARIABLE V_DVR_ALACAK NUMERIC(18,2);
DECLARE VARIABLE V_DVR_BORC NUMERIC(18,2);
BEGIN
  IF ( (PRM_TARIH1 = '' ) AND (PRM_TARIH2 = '') ) THEN
  BEGIN
    GENEL_BORC = 0;
    GENEL_ALACAK = 0;
    GENEL_BAKIYE = 0;
    HAK_BAKIYE = 0;
    HAK_BORC = 0;
    HAK_ALACAK = 0;
    AVANS_BAKIYE =0;
    AVANS_BORC = 0;
    AVANS_ALACAK = 0;
    V_ALACAK = 0;
    V_BORC = 0;
    V_TOPLAM = 0;
    V_DVR_BORC = 0;
    V_DVR_ALACAK = 0;
    SELECT DEVREDEN_BORC,DEVREDEN_ALACAK FROM CARI WHERE CARI_KOD = :PRM_AVANS
    INTO :V_DVR_BORC,:V_DVR_ALACAK;
    IF ( V_DVR_BORC IS NULL ) THEN V_DVR_BORC = 0;
    IF ( V_DVR_ALACAK IS NULL ) THEN V_DVR_ALACAK = 0;
    FOR SELECT CARIHAR.TIP,
               SUM(CARIHAR.TUTAR_VPB) AS TOPLAM
    FROM CARIHAR
    WHERE
    CARIHAR.CARI_KOD = :PRM_AVANS
    GROUP BY CARIHAR.TIP INTO :V_TIP,:V_TOPLAM
    DO
    BEGIN
      IF (V_TIP = 'A') THEN
      BEGIN
        V_ALACAK = V_TOPLAM;
      END
      ELSE
      IF (V_TIP = 'B') THEN
      BEGIN
        V_BORC = V_TOPLAM;
      END
    END
    IF (V_ALACAK IS NULL) THEN V_ALACAK = 0;
    IF (V_BORC IS NULL) THEN V_BORC = 0;
    AVANS_BORC = V_DVR_BORC + V_BORC;
    AVANS_ALACAK = V_DVR_ALACAK + V_ALACAK;
    GENEL_BORC = AVANS_BORC;
    GENEL_ALACAK = AVANS_ALACAK;
    IF (AVANS_BORC > AVANS_ALACAK) THEN
    BEGIN
      AVANS_BAKIYE = AVANS_BORC - AVANS_ALACAK;
    END
    ELSE
    IF (AVANS_BORC < AVANS_ALACAK) THEN
    BEGIN
      AVANS_BAKIYE = AVANS_ALACAK - AVANS_BORC;
    END
    ELSE
    BEGIN
      AVANS_BAKIYE = 0;
    END
    GENEL_BAKIYE = AVANS_BAKIYE;
    HAK_BAKIYE = 0;
    HAK_BORC = 0;
    HAK_ALACAK = 0;
    V_ALACAK = 0;
    V_BORC = 0;
    V_TOPLAM = 0;
    V_DVR_BORC = 0;
    V_DVR_ALACAK = 0;
    V_TIP = '';
    SELECT DEVREDEN_BORC,DEVREDEN_ALACAK FROM CARI WHERE CARI_KOD = :PRM_HAKEDIS
    INTO :V_DVR_BORC,:V_DVR_ALACAK;
    IF ( V_DVR_BORC IS NULL ) THEN V_DVR_BORC = 0;
    IF ( V_DVR_ALACAK IS NULL ) THEN V_DVR_ALACAK = 0;
    FOR SELECT CARIHAR.TIP,
           SUM(CARIHAR.TUTAR_VPB) AS TOPLAM
    FROM CARIHAR
    WHERE
    CARIHAR.CARI_KOD = :PRM_HAKEDIS
    GROUP BY CARIHAR.TIP INTO :V_TIP,:V_TOPLAM
    DO
    BEGIN
      IF (V_TIP = 'A') THEN
      BEGIN
        V_ALACAK = V_TOPLAM;
      END
      ELSE
      IF (V_TIP = 'B') THEN
      BEGIN
        V_BORC = V_TOPLAM;
      END
    END
    IF (V_ALACAK IS NULL) THEN V_ALACAK = 0;
    IF (V_BORC IS NULL) THEN V_BORC = 0;
    HAK_BORC = V_DVR_BORC + V_BORC;
    HAK_ALACAK = V_DVR_ALACAK + V_ALACAK;
    IF (HAK_BORC > HAK_ALACAK) THEN
    BEGIN
      HAK_BAKIYE = HAK_BORC - HAK_ALACAK;
    END
    ELSE
    IF (HAK_BORC < HAK_ALACAK) THEN
    BEGIN
      HAK_BAKIYE = HAK_ALACAK - HAK_BORC;
    END
    ELSE
    BEGIN
      HAK_BAKIYE = 0;
    END
    GENEL_BORC = GENEL_BORC + HAK_BORC;
    GENEL_ALACAK = GENEL_ALACAK + HAK_ALACAK;
    GENEL_BAKIYE = GENEL_BAKIYE + HAK_BAKIYE;
    SUSPEND;
  END
  ELSE
  IF ( (PRM_TARIH1 IS NOT NULL) AND (PRM_TARIH2 IS NOT NULL) ) THEN
  BEGIN
    GENEL_BORC = 0;
    GENEL_ALACAK = 0;
    GENEL_BAKIYE = 0;
    HAK_BAKIYE = 0;
    HAK_BORC = 0;
    HAK_ALACAK = 0;
    AVANS_BAKIYE =0;
    AVANS_BORC = 0;
    AVANS_ALACAK = 0;
    V_ALACAK = 0;
    V_BORC = 0;
    V_TOPLAM = 0;
    V_DVR_BORC = 0;
    V_DVR_ALACAK = 0;
    SELECT DEVREDEN_BORC,DEVREDEN_ALACAK FROM CARI WHERE CARI_KOD = :PRM_AVANS
    INTO :V_DVR_BORC,:V_DVR_ALACAK;
    IF ( V_DVR_BORC IS NULL ) THEN V_DVR_BORC = 0;
    IF ( V_DVR_ALACAK IS NULL ) THEN V_DVR_ALACAK = 0;
    FOR SELECT CARIHAR.TIP,
               SUM(CARIHAR.TUTAR_VPB) AS TOPLAM
    FROM CARIHAR
    WHERE CARIHAR.TARIH BETWEEN :PRM_TARIH1 AND :PRM_TARIH2
    AND
    CARIHAR.CARI_KOD = :PRM_AVANS
    GROUP BY CARIHAR.TIP INTO :V_TIP,:V_TOPLAM
    DO
    BEGIN
      IF (V_TIP = 'A') THEN
      BEGIN
        V_ALACAK = V_TOPLAM;
      END
      ELSE
      IF (V_TIP = 'B') THEN
      BEGIN
        V_BORC = V_TOPLAM;
      END
    END
    IF (V_ALACAK IS NULL) THEN V_ALACAK = 0;
    IF (V_BORC IS NULL) THEN V_BORC = 0;
    AVANS_BORC = V_DVR_BORC + V_BORC;
    AVANS_ALACAK = V_DVR_ALACAK + V_ALACAK;
    GENEL_BORC = AVANS_BORC;
    GENEL_ALACAK = AVANS_ALACAK;
    IF (AVANS_BORC > AVANS_ALACAK) THEN
    BEGIN
      AVANS_BAKIYE = AVANS_BORC - AVANS_ALACAK;
    END
    ELSE
    IF (AVANS_BORC < AVANS_ALACAK) THEN
    BEGIN
      AVANS_BAKIYE = AVANS_ALACAK - AVANS_BORC;
    END
    ELSE
    BEGIN
      AVANS_BAKIYE = 0;
    END
    GENEL_BAKIYE = AVANS_BAKIYE;
    HAK_BAKIYE = 0;
    HAK_BORC = 0;
    HAK_ALACAK = 0;
    V_ALACAK = 0;
    V_BORC = 0;
    V_TOPLAM = 0;
    V_DVR_BORC = 0;
    V_DVR_ALACAK = 0;
    V_TIP = '';
    SELECT DEVREDEN_BORC,DEVREDEN_ALACAK FROM CARI WHERE CARI_KOD = :PRM_HAKEDIS
    INTO :V_DVR_BORC,:V_DVR_ALACAK;
    IF ( V_DVR_BORC IS NULL ) THEN V_DVR_BORC = 0;
    IF ( V_DVR_ALACAK IS NULL ) THEN V_DVR_ALACAK = 0;
    FOR SELECT CARIHAR.TIP,
           SUM(CARIHAR.TUTAR_VPB) AS TOPLAM
    FROM CARIHAR
    WHERE CARIHAR.TARIH BETWEEN :PRM_TARIH1 AND :PRM_TARIH2
    AND
    CARIHAR.CARI_KOD = :PRM_HAKEDIS
    GROUP BY CARIHAR.TIP INTO :V_TIP,:V_TOPLAM
    DO
    BEGIN
      IF (V_TIP = 'A') THEN
      BEGIN
        V_ALACAK = V_TOPLAM;
      END
      ELSE
      IF (V_TIP = 'B') THEN
      BEGIN
        V_BORC = V_TOPLAM;
      END
    END
    IF (V_ALACAK IS NULL) THEN V_ALACAK = 0;
    IF (V_BORC IS NULL) THEN V_BORC = 0;
    HAK_BORC = V_DVR_BORC + V_BORC;
    HAK_ALACAK = V_DVR_ALACAK + V_ALACAK;
    IF (HAK_BORC > HAK_ALACAK) THEN
    BEGIN
      HAK_BAKIYE = HAK_BORC - HAK_ALACAK;
    END
    ELSE
    IF (HAK_BORC < HAK_ALACAK) THEN
    BEGIN
      HAK_BAKIYE = HAK_ALACAK - HAK_BORC;
    END
    ELSE
    BEGIN
      HAK_BAKIYE = 0;
    END
    GENEL_BORC = GENEL_BORC + HAK_BORC;
    GENEL_ALACAK = GENEL_ALACAK + HAK_ALACAK;
    GENEL_BAKIYE = GENEL_BAKIYE + HAK_BAKIYE;
    SUSPEND;
  END
END
^

ALTER PROCEDURE WEB_PROJEHAR (
    PRM_PROJE_KOD VARCHAR(15))
RETURNS (
    TIP CHAR(10),
    ALACAK NUMERIC(18,2),
    BORC NUMERIC(18,2),
    PROJE_KOD VARCHAR(15),
    BELGE_TUR VARCHAR(50),
    ACIKLAMA VARCHAR(100),
    TARIH DATE,
    SUBE VARCHAR(10))
AS
DECLARE VARIABLE V_SUBE_ID SMALLINT;
DECLARE VARIABLE V_TUTAR_VPB NUMERIC(18,2);
DECLARE VARIABLE V_BELGE_TUR INTEGER;
BEGIN
  V_SUBE_ID = 0;
  V_TUTAR_VPB = 0;
  V_BELGE_TUR = 0;
  TIP = '';
  ALACAK = 0;
  BORC = 0;
  PROJE_KOD = '';
  BELGE_TUR = '';
  ACIKLAMA = '';
  SUBE = '';

  FOR SELECT CARIHAR.TARIH,
             CARIHAR.PROJE_KOD,
             CARIHAR.BELGE_TUR,
             CARIHAR.BELGE_SID,
             CARIHAR.ACIKLAMA,
             CARIHAR.TIP,
             CARIHAR.TUTAR_VPB
      FROM PROJE
      INNER JOIN CARIHAR ON (CARIHAR.PROJE_KOD = PROJE.PROJE_KOD)
      AND (CARIHAR.CARIHAR_SID=PROJE.PROJE_SID)
      WHERE PROJE.PROJE_KOD = :PRM_PROJE_KOD
      ORDER BY CARIHAR.TARIH,CARIHAR.CARIHAR_ID
      INTO :TARIH,:PROJE_KOD,:V_BELGE_TUR,:V_SUBE_ID,:ACIKLAMA,:TIP,:V_TUTAR_VPB
    DO
    BEGIN
      IF (TIP = 'A') THEN
      BEGIN
        ALACAK = V_TUTAR_VPB;
      END
      ELSE
      IF (TIP = 'B') THEN
      BEGIN
        BORC = V_TUTAR_VPB;
      END
      IF (V_BELGE_TUR = 1) THEN BELGE_TUR = 'Alýþ Faturasý';
      ELSE
      IF (V_BELGE_TUR = 4) THEN BELGE_TUR = 'Borç Çeki';
      ELSE
      IF (V_BELGE_TUR = 5) THEN BELGE_TUR = 'Devir kaydý';
      ELSE
      IF (V_BELGE_TUR = 6) THEN BELGE_TUR = 'Müþteri çeki alýndý kaydý';
      ELSE
      IF (V_BELGE_TUR = 7) THEN BELGE_TUR = 'Müþteri senedi alýndý kaydý';
      ELSE
      IF (V_BELGE_TUR = 8) THEN BELGE_TUR = 'Müþteri çek cirolamasý';
      ELSE
      IF (V_BELGE_TUR = 9) THEN BELGE_TUR = 'Çek Bordrosu';
      ELSE
      IF (V_BELGE_TUR = 10) THEN BELGE_TUR = 'Senet Bordrosu';
      ELSE
      IF (V_BELGE_TUR = 11) THEN BELGE_TUR = 'Çek iade dekontu';
      ELSE
      IF (V_BELGE_TUR = 12) THEN BELGE_TUR = 'Senet iade dekontu';
      ELSE
      IF (V_BELGE_TUR = 13) THEN BELGE_TUR = 'Müþteri senet cirolamasý';
      ELSE
      IF (V_BELGE_TUR = 14) THEN BELGE_TUR = 'Kasa';
      ELSE
      IF (V_BELGE_TUR = 15) THEN BELGE_TUR = 'Portfödeki karþýlýksýz çek dekontu';
      ELSE
      IF (V_BELGE_TUR = 16) THEN BELGE_TUR = 'Portföydeki protestolu senet dekontu';
      ELSE
      IF (V_BELGE_TUR = 17) THEN BELGE_TUR = 'Serbest Dekont';
      ELSE
      IF (V_BELGE_TUR = 18) THEN BELGE_TUR = 'Borç Seneti';
      ELSE
      IF (V_BELGE_TUR = 19) THEN BELGE_TUR = 'Cari';
      ELSE
      IF (V_BELGE_TUR = 20) THEN BELGE_TUR = 'Satýþ Faturasý';
      ELSE
      IF (V_BELGE_TUR = 21) THEN BELGE_TUR = 'Müþteri çeki tahsile verme';
      ELSE
      IF (V_BELGE_TUR = 22) THEN BELGE_TUR = 'Müþteri senedi tahsile verme';
      ELSE
      IF (V_BELGE_TUR = 23) THEN BELGE_TUR = 'Muhasebe Fiþi';
      ELSE
      IF (V_BELGE_TUR = 24) THEN BELGE_TUR = 'Satýcýdan gelen karþýlýksýz çek';
      ELSE
      IF (V_BELGE_TUR = 25) THEN BELGE_TUR = 'Bankadan gelen karþýlýksýz çek';
      ELSE
      IF (V_BELGE_TUR = 26) THEN BELGE_TUR = 'Satýcýdan gelen protestolu senet';
      ELSE
      IF (V_BELGE_TUR = 27) THEN BELGE_TUR = 'Bankadan gelen protestolu senet';
      ELSE
      IF (V_BELGE_TUR = 28) THEN BELGE_TUR = 'Bankadan gelen çek senet tahsil dekontu';
      ELSE
      IF (V_BELGE_TUR = 29) THEN BELGE_TUR = 'Borç çeki ödeme dekontu';
      ELSE
      IF (V_BELGE_TUR = 30) THEN BELGE_TUR = 'Borç çeki iade dekontu';
      ELSE
      IF (V_BELGE_TUR = 31) THEN BELGE_TUR = 'Borç seneti iade dekontu';
      ELSE
      IF (V_BELGE_TUR = 32) THEN BELGE_TUR = 'Bankadan gelen senet tahsil dekontu';
      ELSE
      IF (V_BELGE_TUR = 33) THEN BELGE_TUR = 'Kasaya çek senet tahsili';
      ELSE
      IF (V_BELGE_TUR = 34) THEN BELGE_TUR = 'Kasadan çek senet tediyesi';
      IF (V_SUBE_ID = 1) THEN
      BEGIN
        SUBE = 'ÝZMÝR';
      END
      ELSE
      IF (V_SUBE_ID = 2) THEN
      BEGIN
        SUBE = 'ÝSTANBUL';
      END
      ELSE
      IF (V_SUBE_ID = 3) THEN
      BEGIN
        SUBE = 'BURSA';
      END
      SUSPEND;
      V_SUBE_ID = 0;
      V_TUTAR_VPB = 0;
      V_BELGE_TUR = 0;
      TIP = '';
      ALACAK = 0;
      BORC = 0;
      PROJE_KOD = '';
      BELGE_TUR = '';
      ACIKLAMA = '';
      SUBE = '';
    END
END
^

ALTER PROCEDURE WRITE_ISN_ERR (
    ISN INTEGER,
    PROCEDURE_NAME VARCHAR(100),
    ERR_MESSAGE VARCHAR(300))
AS
BEGIN
/* HATA LOG'UNU VERITABANINA YAZAN PROCEDURE */
  INSERT INTO  ISN_ERRORS
  ( ISN,
    PROCEDURE_NAME ,
    ERR_MESSAGE,
    TARSAAT,
    KULLANICI,
    OKUNDU)
  VALUES
  ( :ISN ,
    :PROCEDURE_NAME ,
    :ERR_MESSAGE,
    current_timestamp,
    current_user,
    0);
END
^


SET TERM ; ^


/******************************************************************************/
