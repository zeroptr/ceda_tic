unit NetOpenX_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// PASTLWTR : 1.2
// File generated on 27.03.2007 10:31:43 from Type Library described below.

// ************************************************************************  //
// Type Lib: c:\CedaLite\Netsis_Aktarma\NetOpenX.dll (1)
// LIBID: {82ADEE5E-37CF-4AEE-8B61-417843BC3F28}
// LCID: 0
// Helpfile: 
// HelpString: NetOpenX Kütüphanesi
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
//   (2) v1.0 CommonQuery, (c:\CedaLite\Netsis_Aktarma\CommonQuery.tlb)
// ************************************************************************ //
// *************************************************************************//
// NOTE:                                                                      
// Items guarded by $IFDEF_LIVE_SERVER_AT_DESIGN_TIME are used by properties  
// which return objects that may need to be explicitly created via a function 
// call prior to any access via the property. These items have been disabled  
// in order to prevent accidental use from within the object inspector. You   
// may enable them by defining LIVE_SERVER_AT_DESIGN_TIME or by selectively   
// removing them from the $IFDEF blocks. However, such items must still be    
// programmatically created via a method of the appropriate CoClass before    
// they can be used.                                                          
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
interface

uses Windows, ActiveX, Classes, CommonQuery_TLB, Graphics, OleServer, StdVCL, Variants;
  


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  NetOpenXMajorVersion = 3;
  NetOpenXMinorVersion = 0;

  LIBID_NetOpenX: TGUID = '{82ADEE5E-37CF-4AEE-8B61-417843BC3F28}';

  IID_IKernel: TGUID = '{8A587408-5359-412D-8365-644CF0DA5D72}';
  CLASS_Kernel: TGUID = '{DF2805FE-D522-4BB0-8F6F-00F26172F4BC}';
  IID_IMerkez: TGUID = '{40E30AF8-9A25-48B6-A260-2CF887826B5C}';
  CLASS_Merkez: TGUID = '{95E3ABFA-736A-41E6-835E-4BA4F7C0B4D2}';
  IID_INetsisHata: TGUID = '{208A68BC-89F7-4847-9B07-78661647F42F}';
  CLASS_NetsisHata: TGUID = '{536786EF-A59C-42C7-9EBB-228A454A79D4}';
  IID_ISirket: TGUID = '{8C4708EA-A7EA-488B-AC4C-4D720136825F}';
  CLASS_Sirket: TGUID = '{E3001DF1-CAD8-486C-AD5E-BD2D18F81A1E}';
  IID_IData: TGUID = '{7A161810-5AF9-4910-87FC-B472CBA8B4C2}';
  CLASS_Data: TGUID = '{B9E75549-1AFD-41E1-BE15-CB2FC98A46E1}';
  IID_IKasa: TGUID = '{9FFEB746-DFEC-4005-B7AA-5625EC8EA7B9}';
  CLASS_Kasa: TGUID = '{7357488C-4157-452E-982E-53F7865869C0}';
  IID_IFatura: TGUID = '{0160C6D3-D73E-4504-94F7-87550E3A2474}';
  CLASS_Fatura: TGUID = '{2010A64E-B42C-4DDA-A276-DF5615F5E684}';
  IID_IFatUst: TGUID = '{E84B245B-7707-4DBE-A173-F1CF107CE176}';
  CLASS_FatUst: TGUID = '{5E500203-9B04-4290-A7E5-8B7AB383E753}';
  IID_IFatKalem: TGUID = '{01DDD87B-B7EE-48A8-9ACB-591D129D21F0}';
  CLASS_FatKalem: TGUID = '{646C9DBF-BE9D-4132-82B1-40924E52F308}';
  IID_ICari: TGUID = '{1EE7579F-7165-41F4-A61D-AF145320E444}';
  CLASS_Cari: TGUID = '{8BC1D6CC-8715-4928-B03D-F268AA783C71}';
  IID_ICariTemelBilgi: TGUID = '{EB7420DC-9C87-4810-B460-767A13067212}';
  CLASS_CariTemelBilgi: TGUID = '{6E14BA68-5C7B-4609-B419-9638FA9421C2}';
  IID_ICariEkBilgi: TGUID = '{05C1EF45-72D8-4102-A61B-B9A17A8B3999}';
  CLASS_CariEkBilgi: TGUID = '{5956D8AB-E86C-419F-9A4E-7ECC8B139A86}';
  IID_IStok: TGUID = '{AEC53AC8-6647-4C14-8FDD-AA7461F0C63B}';
  CLASS_Stok: TGUID = '{F7AFE9FE-D6B1-42CC-B246-30877213BB29}';
  IID_IStokTemelBilgi: TGUID = '{25F6F0BC-BA98-4F9C-842D-A88AE86C405A}';
  CLASS_StokTemelBilgi: TGUID = '{656E54AC-32D7-4BB2-BB9F-5558F97B15BE}';
  IID_IStokEkBilgi: TGUID = '{D8053976-640A-4084-9F1A-E4456BFC7A65}';
  CLASS_StokEkBilgi: TGUID = '{18F22A07-D502-4768-BB72-DDE0C831319C}';
  IID_IKur: TGUID = '{0BC0158B-4647-423D-99FF-86926EBDFE17}';
  CLASS_Kur: TGUID = '{DA30C828-0F3D-4B61-8F22-870A28593195}';
  IID_IDoviz: TGUID = '{E629DD7D-9DC9-4621-88B2-CB2F90E0F5AD}';
  CLASS_Doviz: TGUID = '{2F82D9E5-4C45-45E3-BB04-D026A9C8E40D}';
  IID_ICekSenet: TGUID = '{A2986128-0A31-4A78-BF4A-C20C4F3100EE}';
  CLASS_CekSenet: TGUID = '{C51CA6B5-E975-47DD-9C41-6D37174EC430}';
  IID_ICekSenetAna: TGUID = '{A1428D07-5E6A-4344-8698-083ACAED7C58}';
  CLASS_CekSenetAna: TGUID = '{6A8051AC-0EA1-4C53-A8DE-FF4D5D26FD96}';
  IID_IIReceteAna: TGUID = '{6F628EC9-2AAA-4A4C-9AA4-7B6F15CBC99C}';
  CLASS_IReceteAna: TGUID = '{4B96A2E8-5810-4121-AC77-DA0921BA4BF9}';
  IID_IRecete: TGUID = '{975400BA-3949-4E3E-9E5B-EFA1A400A073}';
  CLASS_Recete: TGUID = '{4F7441C6-859B-4517-B607-60B8BE6EB7F3}';
  IID_INetField: TGUID = '{3C1ADC96-4757-4320-92B7-1DEA8F691AC3}';
  CLASS_NetField: TGUID = '{229B7D4C-63E3-4BC7-AAC6-CF1654CF743E}';
  IID_IVTGuvenlik: TGUID = '{0680A9BF-C3A9-4F52-BBE8-7F3D01C562F4}';
  CLASS_VTGuvenlik: TGUID = '{1EF91D5E-F843-41CB-B14F-F9B2392E81DE}';
  IID_IMaliyetMuhasebesi: TGUID = '{E07836D2-83E7-4511-BBAA-0E7D15956CB7}';
  DIID_IMaliyetMuhasebesiEvents: TGUID = '{2643E901-88EE-43C9-ACD0-D05B94ECE71E}';
  CLASS_MaliyetMuhasebesi: TGUID = '{A15A0997-06DE-4A8E-94CD-9173D576ADD3}';
  IID_IStokMaliyet: TGUID = '{061426B1-FEC6-4D9E-BA19-A5A2E272A1E7}';
  DIID_IStokMaliyetEvents: TGUID = '{BB6A4ECD-291A-45AF-9668-80C951713E98}';
  CLASS_StokMaliyet: TGUID = '{BDD435FA-D122-43A1-8CEE-10C57EBD1CF1}';
  IID_IAmbarFisMuh: TGUID = '{BB055262-5C94-4304-B8B1-36050F8E5323}';
  DIID_IAmbarFisMuhEvents: TGUID = '{BE114B02-F94C-4549-8199-B011697F62E7}';
  CLASS_AmbarFisMuh: TGUID = '{0F239668-B831-4E37-839E-71A69CB1D006}';
  IID_IDepTransMuh: TGUID = '{4CA06758-FF70-439A-BE39-D393332A6590}';
  DIID_IDepTransMuhEvents: TGUID = '{F2428408-A806-4372-99FB-025C6A312F07}';
  CLASS_DepTransMuh: TGUID = '{32C36AD9-802E-464E-A3BF-9815B0E2D1B6}';
  IID_IKasaBakiye: TGUID = '{7C7354F4-831B-481E-A0C2-782C7C429DC5}';
  CLASS_KasaBakiye: TGUID = '{8FEBAF65-E327-49A4-B951-A55645AAF831}';
  IID_IDekont: TGUID = '{9D4C7424-700E-40A5-B5D3-47E4739157D8}';
  CLASS_Dekont: TGUID = '{91F586E8-156D-4B5F-B65D-EF7026AE4330}';
  IID_IDekCekSen: TGUID = '{459B7D40-D4B4-48DF-99D6-4DFFDD10EFDC}';
  CLASS_DekCekSen: TGUID = '{1CB78822-B17A-43D8-B9CD-966FCE6EB33D}';
  IID_IProje: TGUID = '{D1BF7F83-64EE-430D-9C67-A055F7E4FB1E}';
  CLASS_Proje: TGUID = '{1BA88008-099E-4DE7-A70C-3710F2C0A33B}';
  IID_IMuplanTemelBilgi: TGUID = '{C23852E1-CCE0-47F9-AC8D-8D1F94D8293F}';
  CLASS_MuplanTemelBilgi: TGUID = '{C308DD70-9AB0-4CA0-976B-6048345BF5D9}';
  IID_IMuplanEkBilgi: TGUID = '{41D6CDB4-65E7-4644-929B-A169F9F2C513}';
  CLASS_MuplanEkBilgi: TGUID = '{12AB25F0-DC8E-447F-98E5-124572776BDC}';
  IID_IMuPlan: TGUID = '{D8265652-9AEF-48DC-8B3F-43E26BBC5A99}';
  CLASS_MuPlan: TGUID = '{47316AAD-875E-4D2D-9D55-8BDD8DE13838}';
  IID_INetRS: TGUID = '{2812BD2D-6915-4EDE-925A-B7896F81AB10}';
  CLASS_NetRS: TGUID = '{BE23776B-7789-4A82-A130-AC98B86594F0}';
  IID_IDagFisOlus: TGUID = '{F36817D5-AD76-4FDD-9658-5EFBE59A5DAC}';
  DIID_IDagFisOlusEvents: TGUID = '{E07BFE2D-B9AC-45F3-BB78-DDE3C67A971B}';
  CLASS_DagFisOlus: TGUID = '{A0D31D30-7A81-470A-9BD8-D7D73B6ADBF6}';
  IID_IStokPH: TGUID = '{DEDD42FC-614D-4C07-9AF1-FF88C5006910}';
  CLASS_StokPH: TGUID = '{941D8FC3-A9FE-48FF-AA18-7F9D79396EB9}';
  IID_IStDovEnfCevir: TGUID = '{8727B54B-44C1-4EE5-9AAA-9A32BE250A06}';
  DIID_IStDovEnfCevirEvents: TGUID = '{AD142343-0038-4E87-89BD-0179E4F7BDE1}';
  CLASS_StDovEnfCevir: TGUID = '{9C0800E0-1118-4AFF-B256-DE71CF0F1D00}';
  IID_INetGuvenlik: TGUID = '{76236DD7-89FC-490F-8E56-2944A6B42DF8}';
  CLASS_NetGuvenlik: TGUID = '{A53EBB11-AD89-4AA4-9DD8-EDC1B7E5A675}';
  IID_IData2: TGUID = '{BDEC9A7C-A6A5-43A7-A478-8853BE71E9CA}';
  IID_ICariHareket: TGUID = '{9D4E9A01-E84E-42D2-AFFB-8200AB112EF9}';
  IID_IStokHareket: TGUID = '{80EE77BE-9B9F-4354-83E7-F46FC2860200}';
  CLASS_StokHareket: TGUID = '{095E6AA5-6638-4740-AA12-D952E0543A92}';
  IID_IBasim: TGUID = '{FC60620E-E49F-4028-A3A6-6D4D7E7D01FC}';
  CLASS_Basim: TGUID = '{2ED6DDFB-5910-4B1F-8AA8-948FB12E8171}';
  CLASS_CariHareket: TGUID = '{7AA59580-7A91-4BBE-A73C-B32388A8DA6A}';
  IID_IMaliGrup: TGUID = '{B00D1D21-626B-42D7-B516-632DD6A9A92A}';
  CLASS_MaliGrup: TGUID = '{17EC8595-E709-4996-B146-D4BBD9785E23}';
  CLASS_Data2: TGUID = '{9F0D0358-31DD-42F8-9EFE-808E0A2BA494}';
  IID_IUretim: TGUID = '{B0249E0F-4626-4F0F-A371-94C01AD047C0}';
  CLASS_Uretim: TGUID = '{C9A8C6B3-10A6-46C0-8ED8-69443116856D}';
  IID_IFatKosulDetay: TGUID = '{2FFE08F6-6EED-4218-8506-D9CFC5A4A087}';
  CLASS_FatKosulDetay: TGUID = '{DCB3EBDC-D7ED-4D13-A2A3-2CD754485EE1}';
  IID_IFatKosMalFazlasi: TGUID = '{4D13A9A5-92B2-4518-9BC8-E9BB5680333B}';
  IID_IFatKosulRangeIsk: TGUID = '{86E48A36-061A-407F-AFEB-382A1C16D126}';
  CLASS_FatKosMalFazlasi: TGUID = '{38500459-297B-434E-8DCD-A07CA9F94FA5}';
  CLASS_FatKosulRangeIsk: TGUID = '{7A6E6201-C8DF-4631-BA23-1036FF3635B4}';
  IID_IMustahsil: TGUID = '{F24DFA16-3055-4FBC-97F1-F60B5D5E2994}';
  CLASS_Mustahsil: TGUID = '{7EA561F7-EE8F-4C12-8D57-3FEC527579CA}';
  IID_IMustahsilUst: TGUID = '{4737CFA4-5F6E-4121-993A-035AD959E52C}';
  CLASS_MustahsilUst: TGUID = '{295417FC-2EBE-4578-96DA-EF1756B552B8}';
  IID_IMustahsilKalem: TGUID = '{EE849457-2796-4923-A149-07CA14850DD7}';
  CLASS_MustahsilKalem: TGUID = '{33684DE3-492B-4332-85E7-68E24696DDF5}';
  IID_IKalemSeri: TGUID = '{D415AC72-3876-4DCB-A99C-F6C37D9E7A24}';
  CLASS_KalemSeri: TGUID = '{E3A993A5-D588-435D-B521-E8E09D804B5A}';
  IID_IUretSonEnteg: TGUID = '{A4BF38DD-1C9B-4714-B1C1-F9AC5FB291E6}';
  CLASS_UretSonEnteg: TGUID = '{9B7AFA8B-DB16-4242-A849-8CE5A00F5FC3}';
  IID_ISirketList: TGUID = '{DB8CBAEA-B350-44BE-8A42-9ED0052F569C}';
  CLASS_SirketList: TGUID = '{D90DF89D-587B-4C93-BA17-2A7BE23EAAFB}';
  IID_ISirketInfo: TGUID = '{A12C06F5-E575-49C9-851F-82AE16490850}';
  CLASS_SirketInfo: TGUID = '{CE34FBCD-0DDF-49B3-B396-B178E9FEE3C5}';
  IID_IFatParametre: TGUID = '{BD3CD6DB-8D96-4908-83E5-B5D04B280D1F}';
  CLASS_FatParametre: TGUID = '{A70C130C-7BCB-4E6D-BF9E-D22A2366695B}';
  IID_ISirketParametreler: TGUID = '{7A40DB11-76FA-400A-B1BD-0447F3E430BB}';
  CLASS_SirketParametreler: TGUID = '{03F44F95-9F74-4F59-A8C1-BFC4A06499EA}';
  IID_ITRHarita: TGUID = '{5337A6A3-7DFE-4A99-BF81-C78FF138458D}';
  CLASS_TRHarita: TGUID = '{E9E4088F-5586-4084-8118-6106BDF4DE1F}';
  IID_IMrp: TGUID = '{D535B070-33DE-4655-9619-0167B5A6AAE6}';
  CLASS_Mrp: TGUID = '{8283BC57-DC0E-47CE-93DA-C213C31223E3}';
  IID_INetStrList: TGUID = '{B4055B60-0349-4A78-AC27-87D8F8A3F0BE}';
  CLASS_NetStrList: TGUID = '{91A599AF-EEF2-4D96-BA39-79A06619D3B2}';
  IID_IBarkodBilgi: TGUID = '{880AB9E4-0D50-4697-AF2C-9000FC6C5E68}';
  CLASS_BarkodBilgi: TGUID = '{C751FE85-2E6D-4E35-A761-F8246DC2B681}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum TVTTipi
type
  TVTTipi = TOleEnum;
const
  vtMSSQL = $00000000;
  vtReserved = $00000001;
  vtOracle = $00000002;
  vtAS400 = $00000003;

// Constants for enum TOkumaTipi
type
  TOkumaTipi = TOleEnum;
const
  otIlk = $00000000;
  otSonraki = $00000001;
  otOnceki = $00000002;
  otSon = $00000003;
  otAc = $00000004;

// Constants for enum TTransactionTipi
type
  TTransactionTipi = TOleEnum;
const
  ttBaslat = $00000000;
  ttBitir = $00000001;
  ttGeriAl = $00000002;

// Constants for enum TFaturaTip
type
  TFaturaTip = TOleEnum;
const
  ftSFat = $00000000;
  ftAFat = $00000001;
  ftSIrs = $00000002;
  ftAIrs = $00000003;
  ftDepo = $00000004;
  ftLokalDepo = $00000005;
  ftASip = $00000006;
  ftSSip = $00000007;
  ftAmbarG = $00000008;
  ftAmbarC = $00000009;
  ftSSIrs = $0000000A;
  ftSAIrs = $0000000B;
  ftAlTalep = $0000000C;
  ftAlTeklif = $0000000D;
  ftSatTalep = $0000000E;
  ftSatTeklif = $0000000F;
  ftSPSIrs = $00000010;
  ftSPAIrs = $00000011;

// Constants for enum TFaturaTipi
type
  TFaturaTipi = TOleEnum;
const
  ft_Bos = $00000000;
  ft_Kapali = $00000001;
  ft_Acik = $00000002;
  ft_Muhtelif = $00000003;
  ft_Iade = $00000004;
  ft_ZIade = $00000005;
  ft_Ihracat = $00000006;
  ft_YurtIci = $00000007;
  ft_YurtDisi = $00000008;

// Constants for enum TSifrelemeTipi
type
  TSifrelemeTipi = TOleEnum;
const
  tsSifrele = $00000000;
  tsSifreCoz = $00000001;

// Constants for enum TCekSenType
type
  TCekSenType = TOleEnum;
const
  csMCEK = $00000000;
  csMSEN = $00000001;
  csBCEK = $00000002;
  csBSEN = $00000003;

// Constants for enum TCekSenetEvrakKaydetmeTipi
type
  TCekSenetEvrakKaydetmeTipi = TOleEnum;
const
  ektCekSenAlma = $00000000;
  ektCekSenVerme = $00000001;
  ektCekSenTahsil = $00000002;
  ektCekSenTeminat = $00000003;
  ektParcaliTahsilat = $00000004;

// Constants for enum TNDSTip
type
  TNDSTip = TOleEnum;
const
  ndsNone = $00000000;
  ndsMiktar = $00000001;
  ndsOran = $00000002;
  ndsTutar = $00000003;
  ndsDovtutar = $00000004;
  ndsFirmaDovTut = $00000005;
  ndsFiyat = $00000006;
  ndsKur = $00000007;
  ndsDovFiyat = $00000008;

// Constants for enum TKisitKapsami
type
  TKisitKapsami = TOleEnum;
const
  kkTumKullanicilar = $00000000;
  kkGrup = $00000001;
  kkKullanici = $00000002;

// Constants for enum TMaliyetTipi
type
  TMaliyetTipi = TOleEnum;
const
  mtStokMaliyet = $00000000;
  mtMaliyetMuhasebesi = $00000001;
  mtAmbFisMuhasebelestir = $00000002;
  mtDepTransMuhasebelestir = $00000003;
  mtDagitimFisiOlusturma = $00000004;
  mtStokDovEnfCevir = $00000005;

// Constants for enum TTurKisit
type
  TTurKisit = TOleEnum;
const
  tkHamAmbTicMal = $00000000;
  tkMamYarMamYarUr = $00000001;
  tkHepsi = $00000002;

// Constants for enum THesTipi
type
  THesTipi = TOleEnum;
const
  hsAlHes = $00000000;
  hsSatHes = $00000001;
  hsSatDiger1 = $00000002;
  hsSatDiger2 = $00000003;
  hsSatDiger3 = $00000004;

// Constants for enum TMuhasebelesTipi
type
  TMuhasebelesTipi = TOleEnum;
const
  mhDetayli = $00000000;
  mhKumule = $00000001;

// Constants for enum TKasaIslem
type
  TKasaIslem = TOleEnum;
const
  tkCariOdeme = $00000000;
  tkFaturaKayit = $00000001;
  tkMuhtelif = $00000002;
  tkKasaTransfer = $00000003;
  tkKasaIptal = $00000004;

// Constants for enum TDekOpr
type
  TDekOpr = TOleEnum;
const
  doEkle = $00000000;
  doDuzelt = $00000001;
  doSil = $00000002;

// Constants for enum TDekCSTip
type
  TDekCSTip = TOleEnum;
const
  csCek = $00000000;
  csSenet = $00000001;

// Constants for enum TDagFisTip
type
  TDagFisTip = TOleEnum;
const
  dftOransal = $00000000;
  dftMiktarsal = $00000001;

// Constants for enum TNetProductVersion
type
  TNetProductVersion = TOleEnum;
const
  npEntegre = $00000000;
  npFusionSt = $00000001;
  npFusion = $00000002;
  npNetLite = $00000003;

// Constants for enum TNetKurulumTip
type
  TNetKurulumTip = TOleEnum;
const
  nktTekKurulum = $00000000;
  nktCokKurulum = $00000001;

// Constants for enum TAmbarHarTur
type
  TAmbarHarTur = TOleEnum;
const
  htDevir = $00000000;
  htDepolar = $00000001;
  htUretim = $00000002;
  htMuhtelif = $00000003;
  htKonsinye = $00000004;

// Constants for enum TCikisYeri
type
  TCikisYeri = TOleEnum;
const
  cyMasrafMer = $00000000;
  cyStokKod = $00000001;
  cyAnaMalGrp = $00000002;
  cyMalGrp = $00000003;
  cySerbest = $00000004;

// Constants for enum TUretSonDepo
type
  TUretSonDepo = TOleEnum;
const
  usdAktif = $00000000;
  usdTum = $00000001;

// Constants for enum TFatKalemIskTipi
type
  TFatKalemIskTipi = TOleEnum;
const
  fkitOran = $00000000;
  fkitTutar = $00000001;

// Constants for enum TFatKosIlaveSekli
type
  TFatKosIlaveSekli = TOleEnum;
const
  fkisSifirDahil = $00000000;
  fkisSifirHaric = $00000001;
  fkisEksiSifirla = $00000002;
  fkisNormalTopla = $00000003;

// Constants for enum TFatIskToplamSekli
type
  TFatIskToplamSekli = TOleEnum;
const
  fitsKademeli = $00000000;
  fitsNormal = $00000001;

// Constants for enum TNXNDSOndalikTipi
type
  TNXNDSOndalikTipi = TOleEnum;
const
  notTamGoster = $00000000;
  notSifirlariGosterme = $00000001;

// Constants for enum TNXLoginResult
type
  TNXLoginResult = TOleEnum;
const
  lrOK = $00000000;
  lrDBFailed = $00000001;
  lrInvalidUser = $00000002;
  lrInvalidPassword = $00000003;
  lrLoginExpire = $00000004;
  lrBlocked = $00000005;
  lrBlocking = $00000006;
  lrChangePassword = $00000007;
  lrNullPassword = $00000008;
  lrBlockedOfChange = $00000009;

// Constants for enum TNXHakTipi
type
  TNXHakTipi = TOleEnum;
const
  htKayit = $00000000;
  htDuzelt = $00000001;
  htIptal = $00000002;
  htIzle = $00000003;
  htHakVarMi = $00000004;
  htHepsi = $00000005;

// Constants for enum TSifreDegisimSonuc
type
  TSifreDegisimSonuc = TOleEnum;
const
  sdOK = $00000000;
  sdEskiSifre = $00000001;
  sdBirOncekiSifre = $00000002;
  sdMinUzunluk = $00000003;
  sdYanlisOnaySifre = $00000004;
  sdYanlisEskiSifre = $00000005;

// Constants for enum TNetsisAnaSurum
type
  TNetsisAnaSurum = TOleEnum;
const
  nasFusion = $00000000;
  nasFusionSt = $00000001;
  nasEntegre = $00000002;
  nasNetLite = $00000003;

// Constants for enum TNetsisAltSurum
type
  TNetsisAltSurum = TOleEnum;
const
  naltNone = $00000000;
  naltNetsisII = $00000001;
  naltNetsisIII = $00000002;
  naltMuhPak = $00000003;
  naltGenMuh = $00000004;

// Constants for enum TFiyatListesi
type
  TFiyatListesi = TOleEnum;
const
  flAlis = $00000000;
  flSatis = $00000001;
  flYok = $00000002;

// Constants for enum TUpdateKodu
type
  TUpdateKodu = TOleEnum;
const
  ukHepsi = $00000000;
  ukDegisenler = $00000001;

// Constants for enum TAlternaTifPolitikalar
type
  TAlternaTifPolitikalar = TOleEnum;
const
  apHicbiri = $00000000;
  apOranlar = $00000001;
  apOncelikler = $00000002;
  apOncelikSirasiStokBakiyesi = $00000003;
  apOncelikSirasiYuzdeYuz = $00000004;

// Constants for enum TAltPolitikaMrp
type
  TAltPolitikaMrp = TOleEnum;
const
  apmHicbiri = $00000000;
  apmOranlar = $00000001;

// Constants for enum TNNRKisitOpr
type
  TNNRKisitOpr = TOleEnum;
const
  nkoEsit = $00000000;
  nkoKucuk = $00000001;
  nkoKucukEsit = $00000002;
  nkoBuyuk = $00000003;
  nkoBuyukEsit = $00000004;
  nkoBenzer = $00000005;
  nkoArasinda = $00000006;
  nkoIcinde = $00000007;
  nkoEsitDegil = $00000008;
  nkoHicbiri = $00000009;

type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  IKernel = interface;
  IKernelDisp = dispinterface;
  IMerkez = interface;
  IMerkezDisp = dispinterface;
  INetsisHata = interface;
  INetsisHataDisp = dispinterface;
  ISirket = interface;
  ISirketDisp = dispinterface;
  IData = interface;
  IDataDisp = dispinterface;
  IKasa = interface;
  IKasaDisp = dispinterface;
  IFatura = interface;
  IFaturaDisp = dispinterface;
  IFatUst = interface;
  IFatUstDisp = dispinterface;
  IFatKalem = interface;
  IFatKalemDisp = dispinterface;
  ICari = interface;
  ICariDisp = dispinterface;
  ICariTemelBilgi = interface;
  ICariTemelBilgiDisp = dispinterface;
  ICariEkBilgi = interface;
  ICariEkBilgiDisp = dispinterface;
  IStok = interface;
  IStokDisp = dispinterface;
  IStokTemelBilgi = interface;
  IStokTemelBilgiDisp = dispinterface;
  IStokEkBilgi = interface;
  IStokEkBilgiDisp = dispinterface;
  IKur = interface;
  IKurDisp = dispinterface;
  IDoviz = interface;
  IDovizDisp = dispinterface;
  ICekSenet = interface;
  ICekSenetDisp = dispinterface;
  ICekSenetAna = interface;
  ICekSenetAnaDisp = dispinterface;
  IIReceteAna = interface;
  IIReceteAnaDisp = dispinterface;
  IRecete = interface;
  IReceteDisp = dispinterface;
  INetField = interface;
  INetFieldDisp = dispinterface;
  IVTGuvenlik = interface;
  IVTGuvenlikDisp = dispinterface;
  IMaliyetMuhasebesi = interface;
  IMaliyetMuhasebesiDisp = dispinterface;
  IMaliyetMuhasebesiEvents = dispinterface;
  IStokMaliyet = interface;
  IStokMaliyetDisp = dispinterface;
  IStokMaliyetEvents = dispinterface;
  IAmbarFisMuh = interface;
  IAmbarFisMuhDisp = dispinterface;
  IAmbarFisMuhEvents = dispinterface;
  IDepTransMuh = interface;
  IDepTransMuhDisp = dispinterface;
  IDepTransMuhEvents = dispinterface;
  IKasaBakiye = interface;
  IKasaBakiyeDisp = dispinterface;
  IDekont = interface;
  IDekontDisp = dispinterface;
  IDekCekSen = interface;
  IDekCekSenDisp = dispinterface;
  IProje = interface;
  IProjeDisp = dispinterface;
  IMuplanTemelBilgi = interface;
  IMuplanTemelBilgiDisp = dispinterface;
  IMuplanEkBilgi = interface;
  IMuplanEkBilgiDisp = dispinterface;
  IMuPlan = interface;
  IMuPlanDisp = dispinterface;
  INetRS = interface;
  INetRSDisp = dispinterface;
  IDagFisOlus = interface;
  IDagFisOlusDisp = dispinterface;
  IDagFisOlusEvents = dispinterface;
  IStokPH = interface;
  IStokPHDisp = dispinterface;
  IStDovEnfCevir = interface;
  IStDovEnfCevirDisp = dispinterface;
  IStDovEnfCevirEvents = dispinterface;
  INetGuvenlik = interface;
  INetGuvenlikDisp = dispinterface;
  IData2 = interface;
  IData2Disp = dispinterface;
  ICariHareket = interface;
  ICariHareketDisp = dispinterface;
  IStokHareket = interface;
  IStokHareketDisp = dispinterface;
  IBasim = interface;
  IBasimDisp = dispinterface;
  IMaliGrup = interface;
  IMaliGrupDisp = dispinterface;
  IUretim = interface;
  IUretimDisp = dispinterface;
  IFatKosulDetay = interface;
  IFatKosulDetayDisp = dispinterface;
  IFatKosMalFazlasi = interface;
  IFatKosMalFazlasiDisp = dispinterface;
  IFatKosulRangeIsk = interface;
  IFatKosulRangeIskDisp = dispinterface;
  IMustahsil = interface;
  IMustahsilDisp = dispinterface;
  IMustahsilUst = interface;
  IMustahsilUstDisp = dispinterface;
  IMustahsilKalem = interface;
  IMustahsilKalemDisp = dispinterface;
  IKalemSeri = interface;
  IKalemSeriDisp = dispinterface;
  IUretSonEnteg = interface;
  IUretSonEntegDisp = dispinterface;
  ISirketList = interface;
  ISirketListDisp = dispinterface;
  ISirketInfo = interface;
  ISirketInfoDisp = dispinterface;
  IFatParametre = interface;
  IFatParametreDisp = dispinterface;
  ISirketParametreler = interface;
  ISirketParametrelerDisp = dispinterface;
  ITRHarita = interface;
  ITRHaritaDisp = dispinterface;
  IMrp = interface;
  IMrpDisp = dispinterface;
  INetStrList = interface;
  INetStrListDisp = dispinterface;
  IBarkodBilgi = interface;
  IBarkodBilgiDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  Kernel = IKernel;
  Merkez = IMerkez;
  NetsisHata = INetsisHata;
  Sirket = ISirket;
  Data = IData;
  Kasa = IKasa;
  Fatura = IFatura;
  FatUst = IFatUst;
  FatKalem = IFatKalem;
  Cari = ICari;
  CariTemelBilgi = ICariTemelBilgi;
  CariEkBilgi = ICariEkBilgi;
  Stok = IStok;
  StokTemelBilgi = IStokTemelBilgi;
  StokEkBilgi = IStokEkBilgi;
  Kur = IKur;
  Doviz = IDoviz;
  CekSenet = ICekSenet;
  CekSenetAna = ICekSenetAna;
  IReceteAna = IIReceteAna;
  Recete = IRecete;
  NetField = INetField;
  VTGuvenlik = IVTGuvenlik;
  MaliyetMuhasebesi = IMaliyetMuhasebesi;
  StokMaliyet = IStokMaliyet;
  AmbarFisMuh = IAmbarFisMuh;
  DepTransMuh = IDepTransMuh;
  KasaBakiye = IKasaBakiye;
  Dekont = IDekont;
  DekCekSen = IDekCekSen;
  Proje = IProje;
  MuplanTemelBilgi = IMuplanTemelBilgi;
  MuplanEkBilgi = IMuplanEkBilgi;
  MuPlan = IMuPlan;
  NetRS = INetRS;
  DagFisOlus = IDagFisOlus;
  StokPH = IStokPH;
  StDovEnfCevir = IStDovEnfCevir;
  NetGuvenlik = INetGuvenlik;
  StokHareket = IStokHareket;
  Basim = IBasim;
  CariHareket = ICariHareket;
  MaliGrup = IMaliGrup;
  Data2 = IData2;
  Uretim = IUretim;
  FatKosulDetay = IFatKosulDetay;
  FatKosMalFazlasi = IFatKosMalFazlasi;
  FatKosulRangeIsk = IFatKosulRangeIsk;
  Mustahsil = IMustahsil;
  MustahsilUst = IMustahsilUst;
  MustahsilKalem = IMustahsilKalem;
  KalemSeri = IKalemSeri;
  UretSonEnteg = IUretSonEnteg;
  SirketList = ISirketList;
  SirketInfo = ISirketInfo;
  FatParametre = IFatParametre;
  SirketParametreler = ISirketParametreler;
  TRHarita = ITRHarita;
  Mrp = IMrp;
  NetStrList = INetStrList;
  BarkodBilgi = IBarkodBilgi;


// *********************************************************************//
// Interface: IKernel
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8A587408-5359-412D-8365-644CF0DA5D72}
// *********************************************************************//
  IKernel = interface(IDispatch)
    ['{8A587408-5359-412D-8365-644CF0DA5D72}']
    procedure FreeNetsisLibrary; safecall;
    function Get_SonNetsisHata: INetsisHata; safecall;
    function yeniSirket(vtTipi: TVTTipi; const vtAdi: WideString; const vtKulAdi: WideString; 
                        const vtKulSifre: WideString; const NetKul: WideString; 
                        const NetSifre: WideString; Sube_Kodu: Integer): ISirket; safecall;
    function yeniKasa(const Sirket: ISirket): IKasa; safecall;
    function yeniFatura(const Sirket: ISirket; FaturaTipi: TFaturaTip): IFatura; safecall;
    function Sifrele(const Deger: WideString; SifrelemeTipi: TSifrelemeTipi): WideString; safecall;
    function yeniCari(const Sirket: ISirket): ICari; safecall;
    function yeniStok(const Sirket: ISirket): IStok; safecall;
    function yeniKur(const Sirket: ISirket): IKur; safecall;
    function yeniDoviz(const Sirket: ISirket): IDoviz; safecall;
    function yeniCekSenAna(const Sirket: ISirket; Tip: TCekSenType): ICekSenetAna; safecall;
    function sayiYuvarla(Sayi: Double; Ondalik: Integer): Double; safecall;
    function yeniReceteAna(const Sirket: ISirket): IReceteAna; safecall;
    function yeniMaliyet(const Sirket: ISirket; MaliyetTipi: TMaliyetTipi): IDispatch; safecall;
    function yeniDekont(const Sirket: ISirket): IDekont; safecall;
    function yeniCSDekont(const Sirket: ISirket; Tip: TDekCSTip): IDekCekSen; safecall;
    function yeniProje(const Sirket: ISirket): IProje; safecall;
    function yeniNetRS(const Sirket: ISirket): INetRS; safecall;
    function yeniNetGuvenlik: INetGuvenlik; safecall;
    function yeniCariHareket(const Sirket: ISirket): ICariHareket; safecall;
    function yeniStokHareket(const Sirket: ISirket): IStokHareket; safecall;
    function yeniBasim(const Sirket: ISirket): IBasim; safecall;
    function yeniMaliGrup(const Sirket: ISirket): IMaliGrup; safecall;
    function yeniUretim(const Sirket: ISirket): IUretim; safecall;
    function Get_Version: WideString; safecall;
    function yeniStokBakiye(const Sirket: ISirket; const StokKodu: WideString; DepoKodu: Integer; 
                            const YapKod: WideString): IStokPH; safecall;
    function yeniMustahsil(const Sirket: ISirket; const CariKod: WideString): IMustahsil; safecall;
    function Get_SirketListesi: ISirketList; safecall;
    function yeniParametre(const Sirket: ISirket): ISirketParametreler; safecall;
    function NOXIKS(const Deger: WideString; Code: WordBool): WideString; safecall;
    function yeniTRHarita(const Sirket: ISirket): ITRHarita; safecall;
    function SifreYap(Anahtar: Integer; const Deger: WideString): WideString; safecall;
    function SifreAc(Anahtar: Integer; const Deger: WideString): WideString; safecall;
    procedure KilitYap(KilitNo: Integer); safecall;
    procedure KilitAc(KilitNo: Integer); safecall;
    function yeniMrp(const Sirket: ISirket): IMrp; safecall;
    function DBSessionId: Integer; safecall;
    function OnayliVersion: WideString; safecall;
    function Get_EkModulVar(Index: Integer): WordBool; safecall;
    function Get_ENetsisKulSay: Integer; safecall;
    function Get_NetsisAnaSurum: TNetsisAnaSurum; safecall;
    function Get_NetsisAltSurum: TNetsisAltSurum; safecall;
    function yeniMuPlan(const Sirket: ISirket): IMuPlan; safecall;
    property SonNetsisHata: INetsisHata read Get_SonNetsisHata;
    property Version: WideString read Get_Version;
    property SirketListesi: ISirketList read Get_SirketListesi;
    property EkModulVar[Index: Integer]: WordBool read Get_EkModulVar;
    property ENetsisKulSay: Integer read Get_ENetsisKulSay;
    property NetsisAnaSurum: TNetsisAnaSurum read Get_NetsisAnaSurum;
    property NetsisAltSurum: TNetsisAltSurum read Get_NetsisAltSurum;
  end;

// *********************************************************************//
// DispIntf:  IKernelDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8A587408-5359-412D-8365-644CF0DA5D72}
// *********************************************************************//
  IKernelDisp = dispinterface
    ['{8A587408-5359-412D-8365-644CF0DA5D72}']
    procedure FreeNetsisLibrary; dispid 201;
    property SonNetsisHata: INetsisHata readonly dispid 202;
    function yeniSirket(vtTipi: TVTTipi; const vtAdi: WideString; const vtKulAdi: WideString; 
                        const vtKulSifre: WideString; const NetKul: WideString; 
                        const NetSifre: WideString; Sube_Kodu: Integer): ISirket; dispid 203;
    function yeniKasa(const Sirket: ISirket): IKasa; dispid 204;
    function yeniFatura(const Sirket: ISirket; FaturaTipi: TFaturaTip): IFatura; dispid 205;
    function Sifrele(const Deger: WideString; SifrelemeTipi: TSifrelemeTipi): WideString; dispid 206;
    function yeniCari(const Sirket: ISirket): ICari; dispid 207;
    function yeniStok(const Sirket: ISirket): IStok; dispid 208;
    function yeniKur(const Sirket: ISirket): IKur; dispid 209;
    function yeniDoviz(const Sirket: ISirket): IDoviz; dispid 210;
    function yeniCekSenAna(const Sirket: ISirket; Tip: TCekSenType): ICekSenetAna; dispid 211;
    function sayiYuvarla(Sayi: Double; Ondalik: Integer): Double; dispid 212;
    function yeniReceteAna(const Sirket: ISirket): IReceteAna; dispid 213;
    function yeniMaliyet(const Sirket: ISirket; MaliyetTipi: TMaliyetTipi): IDispatch; dispid 214;
    function yeniDekont(const Sirket: ISirket): IDekont; dispid 215;
    function yeniCSDekont(const Sirket: ISirket; Tip: TDekCSTip): IDekCekSen; dispid 216;
    function yeniProje(const Sirket: ISirket): IProje; dispid 217;
    function yeniNetRS(const Sirket: ISirket): INetRS; dispid 218;
    function yeniNetGuvenlik: INetGuvenlik; dispid 219;
    function yeniCariHareket(const Sirket: ISirket): ICariHareket; dispid 220;
    function yeniStokHareket(const Sirket: ISirket): IStokHareket; dispid 221;
    function yeniBasim(const Sirket: ISirket): IBasim; dispid 222;
    function yeniMaliGrup(const Sirket: ISirket): IMaliGrup; dispid 223;
    function yeniUretim(const Sirket: ISirket): IUretim; dispid 224;
    property Version: WideString readonly dispid 225;
    function yeniStokBakiye(const Sirket: ISirket; const StokKodu: WideString; DepoKodu: Integer; 
                            const YapKod: WideString): IStokPH; dispid 226;
    function yeniMustahsil(const Sirket: ISirket; const CariKod: WideString): IMustahsil; dispid 227;
    property SirketListesi: ISirketList readonly dispid 228;
    function yeniParametre(const Sirket: ISirket): ISirketParametreler; dispid 229;
    function NOXIKS(const Deger: WideString; Code: WordBool): WideString; dispid 230;
    function yeniTRHarita(const Sirket: ISirket): ITRHarita; dispid 231;
    function SifreYap(Anahtar: Integer; const Deger: WideString): WideString; dispid 232;
    function SifreAc(Anahtar: Integer; const Deger: WideString): WideString; dispid 233;
    procedure KilitYap(KilitNo: Integer); dispid 234;
    procedure KilitAc(KilitNo: Integer); dispid 235;
    function yeniMrp(const Sirket: ISirket): IMrp; dispid 236;
    function DBSessionId: Integer; dispid 237;
    function OnayliVersion: WideString; dispid 238;
    property EkModulVar[Index: Integer]: WordBool readonly dispid 239;
    property ENetsisKulSay: Integer readonly dispid 240;
    property NetsisAnaSurum: TNetsisAnaSurum readonly dispid 241;
    property NetsisAltSurum: TNetsisAltSurum readonly dispid 242;
    function yeniMuPlan(const Sirket: ISirket): IMuPlan; dispid 243;
  end;

// *********************************************************************//
// Interface: IMerkez
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {40E30AF8-9A25-48B6-A260-2CF887826B5C}
// *********************************************************************//
  IMerkez = interface(IDispatch)
    ['{40E30AF8-9A25-48B6-A260-2CF887826B5C}']
    function Get_Handle: Integer; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Value: WideString); safecall;
    function Get_Kernel: IKernel; safecall;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); safecall;
    property Handle: Integer read Get_Handle;
    property Name: WideString read Get_Name write Set_Name;
    property Kernel: IKernel read Get_Kernel;
  end;

// *********************************************************************//
// DispIntf:  IMerkezDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {40E30AF8-9A25-48B6-A260-2CF887826B5C}
// *********************************************************************//
  IMerkezDisp = dispinterface
    ['{40E30AF8-9A25-48B6-A260-2CF887826B5C}']
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: INetsisHata
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {208A68BC-89F7-4847-9B07-78661647F42F}
// *********************************************************************//
  INetsisHata = interface(IDispatch)
    ['{208A68BC-89F7-4847-9B07-78661647F42F}']
    function Get_Kod: Integer; safecall;
    function Get_Hata: WideString; safecall;
    function Get_Detay: WideString; safecall;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString; 
                      SetKernel: WordBool); safecall;
    property Kod: Integer read Get_Kod;
    property Hata: WideString read Get_Hata;
    property Detay: WideString read Get_Detay;
  end;

// *********************************************************************//
// DispIntf:  INetsisHataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {208A68BC-89F7-4847-9B07-78661647F42F}
// *********************************************************************//
  INetsisHataDisp = dispinterface
    ['{208A68BC-89F7-4847-9B07-78661647F42F}']
    property Kod: Integer readonly dispid 301;
    property Hata: WideString readonly dispid 302;
    property Detay: WideString readonly dispid 303;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString; 
                      SetKernel: WordBool); dispid 201;
  end;

// *********************************************************************//
// Interface: ISirket
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8C4708EA-A7EA-488B-AC4C-4D720136825F}
// *********************************************************************//
  ISirket = interface(IMerkez)
    ['{8C4708EA-A7EA-488B-AC4C-4D720136825F}']
    procedure AktifYap(ModulNo: Integer; ProgNo: Integer); safecall;
    function Get_Log: WordBool; safecall;
    function getirNDS(KulNo: Integer; ModNo: Integer; ProgNo: Integer; NDSTip: TNDSTip): Integer; safecall;
    function Bakiye_Getir(const Yapi: IStokPH): Integer; safecall;
    function Get_IntSubeKodu: Integer; safecall;
    procedure Set_IntSubeKodu(Value: Integer); safecall;
    function Get_IntIsletmeKodu: Integer; safecall;
    procedure Set_IntIsletmeKodu(Value: Integer); safecall;
    function SonFaturaNo(FatTip: TFaturaTip): WideString; safecall;
    function KantardanSayiOku(GUIDestek: WordBool; const KantarKodu: WideString; 
                              TestAmacli: WordBool; BeklemeSuresi: Integer): WideString; safecall;
    function Get_SirketYili: Integer; safecall;
    function F2Rehber: WideString; safecall;
    function Get_YTLSirket: WordBool; safecall;
    function Get_DBConnectionParams: WideString; safecall;
    function OzelRehber(TusNumarasi: Integer): WideString; safecall;
    function MesajGetir(ModulNumarasi: Integer; DilNum: Integer): WideString; safecall;
    function GenelRehber(const TabloAdi: WideString; const SahaAdi1: WideString; 
                         const SahaAcik1: WideString; SahaTipi1: Integer; 
                         const SahaAdi2: WideString; const SahaAcik2: WideString; 
                         SahaTipi2: Integer; const SahaAdi3: WideString; 
                         const SahaAcik3: WideString; SahaTipi3: Integer; 
                         const SahaAdi4: WideString; const SahaAcik4: WideString; 
                         SahaTipi4: Integer; const SahaAdi5: WideString; 
                         const SahaAcik5: WideString; SahaTipi5: Integer; 
                         const RehberBaslik: WideString; const WhereSQL: WideString; 
                         GeriDonus: Integer; const KeySaha: WideString): WideString; safecall;
    procedure EntegrasyonEskiKayitlar(InTransaction: WordBool; const EntRefKey: WideString; 
                                      const MuhEntegreMi: WideString; 
                                      ExactSearchForEntRef: WordBool; LogSupport: WordBool); safecall;
    function DateToDBStr(prmDate: TDateTime): WideString; safecall;
    function FloatToDBStr(prmFloat: Double): WideString; safecall;
    function NetsisTamSayi(Sayi: Double; Ondalik: Integer): Double; safecall;
    function NetsisFloatToStr(Sayi: Double; Ondalik: Integer; NXNDSOndalikTipi: TNXNDSOndalikTipi): WideString; safecall;
    procedure NNRSihirbaziniAc; safecall;
    procedure NNRRaporCalistir(const DosyaAdi: WideString); safecall;
    function KullaniciKontrol(const KullaniciAdi: WideString; const KullaniciSifresi: WideString): TNXLoginResult; safecall;
    function EPostaGonder(const EMailTO: WideString; const EMailCC: WideString; 
                          const EMailKonu: WideString; const DosyaListesi: WideString; 
                          const EMailBody: WideString): WordBool; safecall;
    function HakKontrol(ModulNo: Integer; ProgramNo: Integer; HakTipi: TNXHakTipi): WordBool; safecall;
    function NRPRaporGetir(const NRPFileName: WideString; const CariKod: WideString): OleVariant; safecall;
    function ResimGetir(TabloTipi: SYSINT; const Kod: WideString): OleVariant; safecall;
    function SifreDegistir(const Eskisifre: WideString; const YeniSifre: WideString; 
                           const Onaysifre: WideString; var MinSifreUzunlugu: Integer): TSifreDegisimSonuc; safecall;
    function OnayliSurumKontrol(Major1: Integer; Minor1: Integer; Rel1: Integer; Major2: Integer; 
                                Minor2: Integer; Rel2: Integer): WordBool; safecall;
    function Get_TemelsetCommonQuery: INetCommonQueryDispatcher; safecall;
    procedure NNROnSorgu(const FormBaslik: WideString; const SabitFiltreler: WideString; 
                         const SahaDilleri: WideString; const RaporDosyasi: WideString; 
                         const FiltreDegerleri: WideString); safecall;
    property Log: WordBool read Get_Log;
    property IntSubeKodu: Integer read Get_IntSubeKodu write Set_IntSubeKodu;
    property IntIsletmeKodu: Integer read Get_IntIsletmeKodu write Set_IntIsletmeKodu;
    property SirketYili: Integer read Get_SirketYili;
    property YTLSirket: WordBool read Get_YTLSirket;
    property DBConnectionParams: WideString read Get_DBConnectionParams;
    property TemelsetCommonQuery: INetCommonQueryDispatcher read Get_TemelsetCommonQuery;
  end;

// *********************************************************************//
// DispIntf:  ISirketDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8C4708EA-A7EA-488B-AC4C-4D720136825F}
// *********************************************************************//
  ISirketDisp = dispinterface
    ['{8C4708EA-A7EA-488B-AC4C-4D720136825F}']
    procedure AktifYap(ModulNo: Integer; ProgNo: Integer); dispid 301;
    property Log: WordBool readonly dispid 302;
    function getirNDS(KulNo: Integer; ModNo: Integer; ProgNo: Integer; NDSTip: TNDSTip): Integer; dispid 303;
    function Bakiye_Getir(const Yapi: IStokPH): Integer; dispid 304;
    property IntSubeKodu: Integer dispid 305;
    property IntIsletmeKodu: Integer dispid 306;
    function SonFaturaNo(FatTip: TFaturaTip): WideString; dispid 307;
    function KantardanSayiOku(GUIDestek: WordBool; const KantarKodu: WideString; 
                              TestAmacli: WordBool; BeklemeSuresi: Integer): WideString; dispid 308;
    property SirketYili: Integer readonly dispid 309;
    function F2Rehber: WideString; dispid 310;
    property YTLSirket: WordBool readonly dispid 311;
    property DBConnectionParams: WideString readonly dispid 312;
    function OzelRehber(TusNumarasi: Integer): WideString; dispid 313;
    function MesajGetir(ModulNumarasi: Integer; DilNum: Integer): WideString; dispid 314;
    function GenelRehber(const TabloAdi: WideString; const SahaAdi1: WideString; 
                         const SahaAcik1: WideString; SahaTipi1: Integer; 
                         const SahaAdi2: WideString; const SahaAcik2: WideString; 
                         SahaTipi2: Integer; const SahaAdi3: WideString; 
                         const SahaAcik3: WideString; SahaTipi3: Integer; 
                         const SahaAdi4: WideString; const SahaAcik4: WideString; 
                         SahaTipi4: Integer; const SahaAdi5: WideString; 
                         const SahaAcik5: WideString; SahaTipi5: Integer; 
                         const RehberBaslik: WideString; const WhereSQL: WideString; 
                         GeriDonus: Integer; const KeySaha: WideString): WideString; dispid 315;
    procedure EntegrasyonEskiKayitlar(InTransaction: WordBool; const EntRefKey: WideString; 
                                      const MuhEntegreMi: WideString; 
                                      ExactSearchForEntRef: WordBool; LogSupport: WordBool); dispid 316;
    function DateToDBStr(prmDate: TDateTime): WideString; dispid 317;
    function FloatToDBStr(prmFloat: Double): WideString; dispid 318;
    function NetsisTamSayi(Sayi: Double; Ondalik: Integer): Double; dispid 319;
    function NetsisFloatToStr(Sayi: Double; Ondalik: Integer; NXNDSOndalikTipi: TNXNDSOndalikTipi): WideString; dispid 320;
    procedure NNRSihirbaziniAc; dispid 321;
    procedure NNRRaporCalistir(const DosyaAdi: WideString); dispid 322;
    function KullaniciKontrol(const KullaniciAdi: WideString; const KullaniciSifresi: WideString): TNXLoginResult; dispid 323;
    function EPostaGonder(const EMailTO: WideString; const EMailCC: WideString; 
                          const EMailKonu: WideString; const DosyaListesi: WideString; 
                          const EMailBody: WideString): WordBool; dispid 324;
    function HakKontrol(ModulNo: Integer; ProgramNo: Integer; HakTipi: TNXHakTipi): WordBool; dispid 325;
    function NRPRaporGetir(const NRPFileName: WideString; const CariKod: WideString): OleVariant; dispid 326;
    function ResimGetir(TabloTipi: SYSINT; const Kod: WideString): OleVariant; dispid 327;
    function SifreDegistir(const Eskisifre: WideString; const YeniSifre: WideString; 
                           const Onaysifre: WideString; var MinSifreUzunlugu: Integer): TSifreDegisimSonuc; dispid 328;
    function OnayliSurumKontrol(Major1: Integer; Minor1: Integer; Rel1: Integer; Major2: Integer; 
                                Minor2: Integer; Rel2: Integer): WordBool; dispid 329;
    property TemelsetCommonQuery: INetCommonQueryDispatcher readonly dispid 330;
    procedure NNROnSorgu(const FormBaslik: WideString; const SabitFiltreler: WideString; 
                         const SahaDilleri: WideString; const RaporDosyasi: WideString; 
                         const FiltreDegerleri: WideString); dispid 331;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7A161810-5AF9-4910-87FC-B472CBA8B4C2}
// *********************************************************************//
  IData = interface(IMerkez)
    ['{7A161810-5AF9-4910-87FC-B472CBA8B4C2}']
    procedure kayitYeni; safecall;
    procedure kayitDuzelt; safecall;
    procedure kayitSil; safecall;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; safecall;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); safecall;
    procedure NetsisLog(const Aciklama: WideString); safecall;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; safecall;
    function Get_TransactSupport: WordBool; safecall;
    procedure Set_TransactSupport(Value: WordBool); safecall;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
  end;

// *********************************************************************//
// DispIntf:  IDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7A161810-5AF9-4910-87FC-B472CBA8B4C2}
// *********************************************************************//
  IDataDisp = dispinterface
    ['{7A161810-5AF9-4910-87FC-B472CBA8B4C2}']
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IKasa
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9FFEB746-DFEC-4005-B7AA-5625EC8EA7B9}
// *********************************************************************//
  IKasa = interface(IData)
    ['{9FFEB746-DFEC-4005-B7AA-5625EC8EA7B9}']
    function Get_KsMas_Kod: WideString; safecall;
    procedure Set_KsMas_Kod(const Value: WideString); safecall;
    function Get_Tarih: TDateTime; safecall;
    procedure Set_Tarih(Value: TDateTime); safecall;
    function Get_Fisno: WideString; safecall;
    procedure Set_Fisno(const Value: WideString); safecall;
    function Get_IO: WideString; safecall;
    procedure Set_IO(const Value: WideString); safecall;
    function Get_Aciklama: WideString; safecall;
    procedure Set_Aciklama(const Value: WideString); safecall;
    function Get_Tip: WideString; safecall;
    procedure Set_Tip(const Value: WideString); safecall;
    function Get_Tutar: Double; safecall;
    procedure Set_Tutar(Value: Double); safecall;
    function Get_Cari_Muh: WideString; safecall;
    procedure Set_Cari_Muh(const Value: WideString); safecall;
    function Get_Kod: WideString; safecall;
    procedure Set_Kod(const Value: WideString); safecall;
    function Get_DovizTut: Double; safecall;
    procedure Set_DovizTut(Value: Double); safecall;
    function Get_Kur: Double; safecall;
    procedure Set_Kur(Value: Double); safecall;
    function Get_Plasiyer_Kodu: WideString; safecall;
    procedure Set_Plasiyer_Kodu(const Value: WideString); safecall;
    function Get_OdemeTuru: Integer; safecall;
    procedure Set_OdemeTuru(Value: Integer); safecall;
    function Get_Update_Kodu: WideString; safecall;
    procedure Set_Update_Kodu(const Value: WideString); safecall;
    function Get_Zaman: WideString; safecall;
    procedure Set_Zaman(const Value: WideString); safecall;
    function Get_Kull_ID: Integer; safecall;
    procedure Set_Kull_ID(Value: Integer); safecall;
    function Get_Sube_Kodu: Integer; safecall;
    procedure Set_Sube_Kodu(Value: Integer); safecall;
    function Get_Kredi_Kart_No: WideString; safecall;
    procedure Set_Kredi_Kart_No(const Value: WideString); safecall;
    function Get_Kdv_Oran: Double; safecall;
    procedure Set_Kdv_Oran(Value: Double); safecall;
    function Get_Kdv_Dahil: WideString; safecall;
    procedure Set_Kdv_Dahil(const Value: WideString); safecall;
    function Get_Yedek1: WideString; safecall;
    procedure Set_Yedek1(const Value: WideString); safecall;
    function Get_Yedek2: WideString; safecall;
    procedure Set_Yedek2(const Value: WideString); safecall;
    function Get_Yedek3: Double; safecall;
    procedure Set_Yedek3(Value: Double); safecall;
    function Get_Yedek4: Double; safecall;
    procedure Set_Yedek4(Value: Double); safecall;
    function Get_Yedek5: Double; safecall;
    procedure Set_Yedek5(Value: Double); safecall;
    function Get_Yedek6: WideString; safecall;
    procedure Set_Yedek6(const Value: WideString); safecall;
    function Get_Yedek7: Integer; safecall;
    procedure Set_Yedek7(Value: Integer); safecall;
    function Get_Yedek8: Integer; safecall;
    procedure Set_Yedek8(Value: Integer); safecall;
    function Get_Yedek9: Integer; safecall;
    procedure Set_Yedek9(Value: Integer); safecall;
    function Get_Yedek10: TDateTime; safecall;
    procedure Set_Yedek10(Value: TDateTime); safecall;
    function Get_Proje_Kodu: WideString; safecall;
    procedure Set_Proje_Kodu(const Value: WideString); safecall;
    function Get_KayitYapanKul: WideString; safecall;
    procedure Set_KayitYapanKul(const Value: WideString); safecall;
    function Get_KayitTarihi: TDateTime; safecall;
    procedure Set_KayitTarihi(Value: TDateTime); safecall;
    function Get_DuzeltmeYapanKul: WideString; safecall;
    procedure Set_DuzeltmeYapanKul(const Value: WideString); safecall;
    function Get_DuzeltmeTarihi: TDateTime; safecall;
    procedure Set_DuzeltmeTarihi(Value: TDateTime); safecall;
    function Get_OnayTipi: WideString; safecall;
    procedure Set_OnayTipi(const Value: WideString); safecall;
    function Get_OnayNum: Integer; safecall;
    procedure Set_OnayNum(Value: Integer); safecall;
    function KasaIslem(IslemTipi: TKasaIslem): WordBool; safecall;
    function Islem(IslemTipi: TKasaIslem): WordBool; safecall;
    function KasaSonBakiye: IKasaBakiye; safecall;
    function CSKOdeme(Tip: TCekSenType): WordBool; safecall;
    function Get_Sira: Integer; safecall;
    procedure Set_Sira(Value: Integer); safecall;
    property KsMas_Kod: WideString read Get_KsMas_Kod write Set_KsMas_Kod;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property IO: WideString read Get_IO write Set_IO;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property Tip: WideString read Get_Tip write Set_Tip;
    property Tutar: Double read Get_Tutar write Set_Tutar;
    property Cari_Muh: WideString read Get_Cari_Muh write Set_Cari_Muh;
    property Kod: WideString read Get_Kod write Set_Kod;
    property DovizTut: Double read Get_DovizTut write Set_DovizTut;
    property Kur: Double read Get_Kur write Set_Kur;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property OdemeTuru: Integer read Get_OdemeTuru write Set_OdemeTuru;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Zaman: WideString read Get_Zaman write Set_Zaman;
    property Kull_ID: Integer read Get_Kull_ID write Set_Kull_ID;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property Kredi_Kart_No: WideString read Get_Kredi_Kart_No write Set_Kredi_Kart_No;
    property Kdv_Oran: Double read Get_Kdv_Oran write Set_Kdv_Oran;
    property Kdv_Dahil: WideString read Get_Kdv_Dahil write Set_Kdv_Dahil;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: Double read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property Yedek10: TDateTime read Get_Yedek10 write Set_Yedek10;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property Sira: Integer read Get_Sira write Set_Sira;
  end;

// *********************************************************************//
// DispIntf:  IKasaDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9FFEB746-DFEC-4005-B7AA-5625EC8EA7B9}
// *********************************************************************//
  IKasaDisp = dispinterface
    ['{9FFEB746-DFEC-4005-B7AA-5625EC8EA7B9}']
    property KsMas_Kod: WideString dispid 401;
    property Tarih: TDateTime dispid 402;
    property Fisno: WideString dispid 403;
    property IO: WideString dispid 404;
    property Aciklama: WideString dispid 405;
    property Tip: WideString dispid 406;
    property Tutar: Double dispid 407;
    property Cari_Muh: WideString dispid 408;
    property Kod: WideString dispid 409;
    property DovizTut: Double dispid 410;
    property Kur: Double dispid 411;
    property Plasiyer_Kodu: WideString dispid 412;
    property OdemeTuru: Integer dispid 413;
    property Update_Kodu: WideString dispid 414;
    property Zaman: WideString dispid 415;
    property Kull_ID: Integer dispid 416;
    property Sube_Kodu: Integer dispid 417;
    property Kredi_Kart_No: WideString dispid 419;
    property Kdv_Oran: Double dispid 420;
    property Kdv_Dahil: WideString dispid 421;
    property Yedek1: WideString dispid 422;
    property Yedek2: WideString dispid 423;
    property Yedek3: Double dispid 424;
    property Yedek4: Double dispid 425;
    property Yedek5: Double dispid 426;
    property Yedek6: WideString dispid 427;
    property Yedek7: Integer dispid 428;
    property Yedek8: Integer dispid 429;
    property Yedek9: Integer dispid 430;
    property Yedek10: TDateTime dispid 431;
    property Proje_Kodu: WideString dispid 432;
    property KayitYapanKul: WideString dispid 433;
    property KayitTarihi: TDateTime dispid 434;
    property DuzeltmeYapanKul: WideString dispid 435;
    property DuzeltmeTarihi: TDateTime dispid 436;
    property OnayTipi: WideString dispid 437;
    property OnayNum: Integer dispid 438;
    function KasaIslem(IslemTipi: TKasaIslem): WordBool; dispid 439;
    function Islem(IslemTipi: TKasaIslem): WordBool; dispid 418;
    function KasaSonBakiye: IKasaBakiye; dispid 440;
    function CSKOdeme(Tip: TCekSenType): WordBool; dispid 441;
    property Sira: Integer dispid 442;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IFatura
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0160C6D3-D73E-4504-94F7-87550E3A2474}
// *********************************************************************//
  IFatura = interface(IData)
    ['{0160C6D3-D73E-4504-94F7-87550E3A2474}']
    function Ust: IFatUst; safecall;
    function Get_KalemAdedi: Integer; safecall;
    function Get_Kalem(Index: Integer): IFatKalem; safecall;
    function kalemYeni(const StokKodu: WideString): IFatKalem; safecall;
    procedure OkuUst(const FatIrsNo: WideString; const CariKod: WideString); safecall;
    procedure OkuKalem; safecall;
    function Get_FaturaTip: TFaturaTip; safecall;
    procedure Set_FaturaTip(Value: TFaturaTip); safecall;
    function YeniNumara(const Seri: WideString): WideString; safecall;
    procedure VadeEkle(Gunler: Integer; Boloran: Double); safecall;
    procedure VadeleriTemizle; safecall;
    procedure SatirBaziAcikTemizle; safecall;
    procedure SiparisRevizyon(const RevizyonSipNo: WideString; BaslangicTarihi: TDateTime); safecall;
    function Get_KasayaIslenmesin: WordBool; safecall;
    procedure Set_KasayaIslenmesin(Value: WordBool); safecall;
    function Get_SonNumaraYazilsin: WordBool; safecall;
    procedure Set_SonNumaraYazilsin(Value: WordBool); safecall;
    procedure Irsaliye2Fatura(const objFatura: IFatura); safecall;
    procedure Siparis2IrsFat(const objYeniBelge: IFatura); safecall;
    function Get_OtoIskontoGetir: WordBool; safecall;
    procedure Set_OtoIskontoGetir(Value: WordBool); safecall;
    procedure KosullariHazirla; safecall;
    function getirKosulDetay(KalemSiraNo: Integer): IFatKosulDetay; safecall;
    function Get_KosulluHesapla: WordBool; safecall;
    procedure Set_KosulluHesapla(Value: WordBool); safecall;
    procedure KosulUstHesapla; safecall;
    procedure KosulKalemHesapla(KalemSiraNo: Integer); safecall;
    function KosulUstGetir: IFatUst; safecall;
    function KosulKalemGetir(KalemSiraNo: Integer): IFatKalem; safecall;
    procedure HesaplamalariYap; safecall;
    function Get_InternalObjectAddress: Integer; safecall;
    function Parametreler: IFatParametre; safecall;
    procedure kalemSil(KalemSiraNo: Integer); safecall;
    function Get_SeriliHesapla: WordBool; safecall;
    procedure Set_SeriliHesapla(Value: WordBool); safecall;
    procedure SonNumaraKaydet; safecall;
    function NoArtiBir(const FatNo: WideString): WideString; safecall;
    function Get_YedekKalem(Index: Integer): IFatKalem; safecall;
    function Get_FiyatSistemineGoreHesapla: WordBool; safecall;
    procedure Set_FiyatSistemineGoreHesapla(Value: WordBool); safecall;
    procedure FiyatKalemHesapla(KalemSiraNo: Integer); safecall;
    function FiyatKalemGetir(KalemSiraNo: Integer): IFatKalem; safecall;
    property KalemAdedi: Integer read Get_KalemAdedi;
    property Kalem[Index: Integer]: IFatKalem read Get_Kalem;
    property FaturaTip: TFaturaTip read Get_FaturaTip write Set_FaturaTip;
    property KasayaIslenmesin: WordBool read Get_KasayaIslenmesin write Set_KasayaIslenmesin;
    property SonNumaraYazilsin: WordBool read Get_SonNumaraYazilsin write Set_SonNumaraYazilsin;
    property OtoIskontoGetir: WordBool read Get_OtoIskontoGetir write Set_OtoIskontoGetir;
    property KosulluHesapla: WordBool read Get_KosulluHesapla write Set_KosulluHesapla;
    property InternalObjectAddress: Integer read Get_InternalObjectAddress;
    property SeriliHesapla: WordBool read Get_SeriliHesapla write Set_SeriliHesapla;
    property YedekKalem[Index: Integer]: IFatKalem read Get_YedekKalem;
    property FiyatSistemineGoreHesapla: WordBool read Get_FiyatSistemineGoreHesapla write Set_FiyatSistemineGoreHesapla;
  end;

// *********************************************************************//
// DispIntf:  IFaturaDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0160C6D3-D73E-4504-94F7-87550E3A2474}
// *********************************************************************//
  IFaturaDisp = dispinterface
    ['{0160C6D3-D73E-4504-94F7-87550E3A2474}']
    function Ust: IFatUst; dispid 401;
    property KalemAdedi: Integer readonly dispid 402;
    property Kalem[Index: Integer]: IFatKalem readonly dispid 403;
    function kalemYeni(const StokKodu: WideString): IFatKalem; dispid 404;
    procedure OkuUst(const FatIrsNo: WideString; const CariKod: WideString); dispid 405;
    procedure OkuKalem; dispid 406;
    property FaturaTip: TFaturaTip dispid 407;
    function YeniNumara(const Seri: WideString): WideString; dispid 408;
    procedure VadeEkle(Gunler: Integer; Boloran: Double); dispid 409;
    procedure VadeleriTemizle; dispid 410;
    procedure SatirBaziAcikTemizle; dispid 411;
    procedure SiparisRevizyon(const RevizyonSipNo: WideString; BaslangicTarihi: TDateTime); dispid 412;
    property KasayaIslenmesin: WordBool dispid 413;
    property SonNumaraYazilsin: WordBool dispid 414;
    procedure Irsaliye2Fatura(const objFatura: IFatura); dispid 415;
    procedure Siparis2IrsFat(const objYeniBelge: IFatura); dispid 416;
    property OtoIskontoGetir: WordBool dispid 417;
    procedure KosullariHazirla; dispid 418;
    function getirKosulDetay(KalemSiraNo: Integer): IFatKosulDetay; dispid 419;
    property KosulluHesapla: WordBool dispid 420;
    procedure KosulUstHesapla; dispid 421;
    procedure KosulKalemHesapla(KalemSiraNo: Integer); dispid 422;
    function KosulUstGetir: IFatUst; dispid 423;
    function KosulKalemGetir(KalemSiraNo: Integer): IFatKalem; dispid 424;
    procedure HesaplamalariYap; dispid 425;
    property InternalObjectAddress: Integer readonly dispid 426;
    function Parametreler: IFatParametre; dispid 427;
    procedure kalemSil(KalemSiraNo: Integer); dispid 428;
    property SeriliHesapla: WordBool dispid 429;
    procedure SonNumaraKaydet; dispid 430;
    function NoArtiBir(const FatNo: WideString): WideString; dispid 431;
    property YedekKalem[Index: Integer]: IFatKalem readonly dispid 432;
    property FiyatSistemineGoreHesapla: WordBool dispid 433;
    procedure FiyatKalemHesapla(KalemSiraNo: Integer); dispid 434;
    function FiyatKalemGetir(KalemSiraNo: Integer): IFatKalem; dispid 435;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IFatUst
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E84B245B-7707-4DBE-A173-F1CF107CE176}
// *********************************************************************//
  IFatUst = interface(IDispatch)
    ['{E84B245B-7707-4DBE-A173-F1CF107CE176}']
    function Get_Sube_Kodu: Integer; safecall;
    procedure Set_Sube_Kodu(Value: Integer); safecall;
    function Get_CariKod: WideString; safecall;
    procedure Set_CariKod(const Value: WideString); safecall;
    function Get_FATIRS_NO: WideString; safecall;
    procedure Set_FATIRS_NO(const Value: WideString); safecall;
    function Get_Tarih: TDateTime; safecall;
    procedure Set_Tarih(Value: TDateTime); safecall;
    function Get_Tip: TFaturaTip; safecall;
    procedure Set_Tip(Value: TFaturaTip); safecall;
    function Get_KOD1: WideString; safecall;
    procedure Set_KOD1(const Value: WideString); safecall;
    function Get_YEDEK: WideString; safecall;
    procedure Set_YEDEK(const Value: WideString); safecall;
    function Get_KOD2: WideString; safecall;
    procedure Set_KOD2(const Value: WideString); safecall;
    function Get_TIPI: TFaturaTipi; safecall;
    procedure Set_TIPI(Value: TFaturaTipi); safecall;
    function Get_Aciklama: WideString; safecall;
    procedure Set_Aciklama(const Value: WideString); safecall;
    function Get_BRUTTUTAR: Double; safecall;
    procedure Set_BRUTTUTAR(Value: Double); safecall;
    function Get_KDV: Double; safecall;
    procedure Set_KDV(Value: Double); safecall;
    function Get_DovizTut: Double; safecall;
    procedure Set_DovizTut(Value: Double); safecall;
    function Get_SAT_ISKT: Double; safecall;
    procedure Set_SAT_ISKT(Value: Double); safecall;
    function Get_GENELTOPLAM: Double; safecall;
    procedure Set_GENELTOPLAM(Value: Double); safecall;
    function Get_YUVARLAMA: Double; safecall;
    procedure Set_YUVARLAMA(Value: Double); safecall;
    function Get_MFAZ_ISKT: Double; safecall;
    procedure Set_MFAZ_ISKT(Value: Double); safecall;
    function Get_GEN_ISK1O: Double; safecall;
    procedure Set_GEN_ISK1O(Value: Double); safecall;
    function Get_GEN_ISK2O: Double; safecall;
    procedure Set_GEN_ISK2O(Value: Double); safecall;
    function Get_GEN_ISK3O: Double; safecall;
    procedure Set_GEN_ISK3O(Value: Double); safecall;
    function Get_FAT_ALTM1: Double; safecall;
    procedure Set_FAT_ALTM1(Value: Double); safecall;
    function Get_FAT_ALTM2: Double; safecall;
    procedure Set_FAT_ALTM2(Value: Double); safecall;
    function Get_KS_KODU: WideString; safecall;
    procedure Set_KS_KODU(const Value: WideString); safecall;
    function Get_SIPARIS_NUMARASI: WideString; safecall;
    procedure Set_SIPARIS_NUMARASI(const Value: WideString); safecall;
    function Get_ODEMEGUNU: Integer; safecall;
    procedure Set_ODEMEGUNU(Value: Integer); safecall;
    function Get_ODEMETARIHI: TDateTime; safecall;
    procedure Set_ODEMETARIHI(Value: TDateTime); safecall;
    function Get_ENTEGRE_TRH: TDateTime; safecall;
    procedure Set_ENTEGRE_TRH(Value: TDateTime); safecall;
    function Get_KDV_DAHILMI: WordBool; safecall;
    procedure Set_KDV_DAHILMI(Value: WordBool); safecall;
    function Get_SIPARIS_TEST: TDateTime; safecall;
    procedure Set_SIPARIS_TEST(Value: TDateTime); safecall;
    function Get_CARI_KOD2: WideString; safecall;
    procedure Set_CARI_KOD2(const Value: WideString); safecall;
    function Get_PLA_KODU: WideString; safecall;
    procedure Set_PLA_KODU(const Value: WideString); safecall;
    function Get_SIRANO: Integer; safecall;
    procedure Set_SIRANO(Value: Integer); safecall;
    function Get_DOVIZTIP: Integer; safecall;
    procedure Set_DOVIZTIP(Value: Integer); safecall;
    function Get_Proje_Kodu: WideString; safecall;
    procedure Set_Proje_Kodu(const Value: WideString); safecall;
    function Get_KOSULKODU: WideString; safecall;
    procedure Set_KOSULKODU(const Value: WideString); safecall;
    function Get_FIYATTARIHI: TDateTime; safecall;
    procedure Set_FIYATTARIHI(Value: TDateTime); safecall;
    function Get_KOSULTARIHI: TDateTime; safecall;
    procedure Set_KOSULTARIHI(Value: TDateTime); safecall;
    function Get_GENISK1TIP: Integer; safecall;
    procedure Set_GENISK1TIP(Value: Integer); safecall;
    function Get_GENISK2TIP: Integer; safecall;
    procedure Set_GENISK2TIP(Value: Integer); safecall;
    function Get_GENISK3TIP: Integer; safecall;
    procedure Set_GENISK3TIP(Value: Integer); safecall;
    function Get_EXPORTTYPE: Integer; safecall;
    procedure Set_EXPORTTYPE(Value: Integer); safecall;
    function Get_EXGUMRUKNO: WideString; safecall;
    procedure Set_EXGUMRUKNO(const Value: WideString); safecall;
    function Get_EXGUMTARIH: TDateTime; safecall;
    procedure Set_EXGUMTARIH(Value: TDateTime); safecall;
    function Get_EXFIILITARIH: TDateTime; safecall;
    procedure Set_EXFIILITARIH(Value: TDateTime); safecall;
    function Get_EXPORTREFNO: WideString; safecall;
    procedure Set_EXPORTREFNO(const Value: WideString); safecall;
    function Get_AMBHARTUR: TAmbarHarTur; safecall;
    procedure Set_AMBHARTUR(Value: TAmbarHarTur); safecall;
    function Get_OnayTipi: WideString; safecall;
    procedure Set_OnayTipi(const Value: WideString); safecall;
    function Get_OnayNum: Integer; safecall;
    procedure Set_OnayNum(Value: Integer); safecall;
    function Get_GCKOD_GIRIS: Integer; safecall;
    procedure Set_GCKOD_GIRIS(Value: Integer); safecall;
    function Get_GCKOD_CIKIS: Integer; safecall;
    procedure Set_GCKOD_CIKIS(Value: Integer); safecall;
    function Get_EKACK1: WideString; safecall;
    procedure Set_EKACK1(const Value: WideString); safecall;
    function Get_EKACK2: WideString; safecall;
    procedure Set_EKACK2(const Value: WideString); safecall;
    function Get_EKACK3: WideString; safecall;
    procedure Set_EKACK3(const Value: WideString); safecall;
    function Get_EKACK4: WideString; safecall;
    procedure Set_EKACK4(const Value: WideString); safecall;
    function Get_EKACK5: WideString; safecall;
    procedure Set_EKACK5(const Value: WideString); safecall;
    function Get_EKACK6: WideString; safecall;
    procedure Set_EKACK6(const Value: WideString); safecall;
    function Get_EKACK7: WideString; safecall;
    procedure Set_EKACK7(const Value: WideString); safecall;
    function Get_EKACK8: WideString; safecall;
    procedure Set_EKACK8(const Value: WideString); safecall;
    function Get_EKACK9: WideString; safecall;
    procedure Set_EKACK9(const Value: WideString); safecall;
    function Get_EKACK10: WideString; safecall;
    procedure Set_EKACK10(const Value: WideString); safecall;
    function Get_EKACK11: WideString; safecall;
    procedure Set_EKACK11(const Value: WideString); safecall;
    function Get_EKACK12: WideString; safecall;
    procedure Set_EKACK12(const Value: WideString); safecall;
    function Get_EKACK13: WideString; safecall;
    procedure Set_EKACK13(const Value: WideString); safecall;
    function Get_EKACK14: WideString; safecall;
    procedure Set_EKACK14(const Value: WideString); safecall;
    function Get_EKACK15: WideString; safecall;
    procedure Set_EKACK15(const Value: WideString); safecall;
    function Get_EKACK16: WideString; safecall;
    procedure Set_EKACK16(const Value: WideString); safecall;
    function Get_GEN_ISK1T: Double; safecall;
    procedure Set_GEN_ISK1T(Value: Double); safecall;
    function Get_GEN_ISK2T: Double; safecall;
    procedure Set_GEN_ISK2T(Value: Double); safecall;
    function Get_GEN_ISK3T: Double; safecall;
    procedure Set_GEN_ISK3T(Value: Double); safecall;
    function Get_CikisYeri: TCikisYeri; safecall;
    procedure Set_CikisYeri(Value: TCikisYeri); safecall;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property CariKod: WideString read Get_CariKod write Set_CariKod;
    property FATIRS_NO: WideString read Get_FATIRS_NO write Set_FATIRS_NO;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property Tip: TFaturaTip read Get_Tip write Set_Tip;
    property KOD1: WideString read Get_KOD1 write Set_KOD1;
    property YEDEK: WideString read Get_YEDEK write Set_YEDEK;
    property KOD2: WideString read Get_KOD2 write Set_KOD2;
    property TIPI: TFaturaTipi read Get_TIPI write Set_TIPI;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property BRUTTUTAR: Double read Get_BRUTTUTAR write Set_BRUTTUTAR;
    property KDV: Double read Get_KDV write Set_KDV;
    property DovizTut: Double read Get_DovizTut write Set_DovizTut;
    property SAT_ISKT: Double read Get_SAT_ISKT write Set_SAT_ISKT;
    property GENELTOPLAM: Double read Get_GENELTOPLAM write Set_GENELTOPLAM;
    property YUVARLAMA: Double read Get_YUVARLAMA write Set_YUVARLAMA;
    property MFAZ_ISKT: Double read Get_MFAZ_ISKT write Set_MFAZ_ISKT;
    property GEN_ISK1O: Double read Get_GEN_ISK1O write Set_GEN_ISK1O;
    property GEN_ISK2O: Double read Get_GEN_ISK2O write Set_GEN_ISK2O;
    property GEN_ISK3O: Double read Get_GEN_ISK3O write Set_GEN_ISK3O;
    property FAT_ALTM1: Double read Get_FAT_ALTM1 write Set_FAT_ALTM1;
    property FAT_ALTM2: Double read Get_FAT_ALTM2 write Set_FAT_ALTM2;
    property KS_KODU: WideString read Get_KS_KODU write Set_KS_KODU;
    property SIPARIS_NUMARASI: WideString read Get_SIPARIS_NUMARASI write Set_SIPARIS_NUMARASI;
    property ODEMEGUNU: Integer read Get_ODEMEGUNU write Set_ODEMEGUNU;
    property ODEMETARIHI: TDateTime read Get_ODEMETARIHI write Set_ODEMETARIHI;
    property ENTEGRE_TRH: TDateTime read Get_ENTEGRE_TRH write Set_ENTEGRE_TRH;
    property KDV_DAHILMI: WordBool read Get_KDV_DAHILMI write Set_KDV_DAHILMI;
    property SIPARIS_TEST: TDateTime read Get_SIPARIS_TEST write Set_SIPARIS_TEST;
    property CARI_KOD2: WideString read Get_CARI_KOD2 write Set_CARI_KOD2;
    property PLA_KODU: WideString read Get_PLA_KODU write Set_PLA_KODU;
    property SIRANO: Integer read Get_SIRANO write Set_SIRANO;
    property DOVIZTIP: Integer read Get_DOVIZTIP write Set_DOVIZTIP;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property KOSULKODU: WideString read Get_KOSULKODU write Set_KOSULKODU;
    property FIYATTARIHI: TDateTime read Get_FIYATTARIHI write Set_FIYATTARIHI;
    property KOSULTARIHI: TDateTime read Get_KOSULTARIHI write Set_KOSULTARIHI;
    property GENISK1TIP: Integer read Get_GENISK1TIP write Set_GENISK1TIP;
    property GENISK2TIP: Integer read Get_GENISK2TIP write Set_GENISK2TIP;
    property GENISK3TIP: Integer read Get_GENISK3TIP write Set_GENISK3TIP;
    property EXPORTTYPE: Integer read Get_EXPORTTYPE write Set_EXPORTTYPE;
    property EXGUMRUKNO: WideString read Get_EXGUMRUKNO write Set_EXGUMRUKNO;
    property EXGUMTARIH: TDateTime read Get_EXGUMTARIH write Set_EXGUMTARIH;
    property EXFIILITARIH: TDateTime read Get_EXFIILITARIH write Set_EXFIILITARIH;
    property EXPORTREFNO: WideString read Get_EXPORTREFNO write Set_EXPORTREFNO;
    property AMBHARTUR: TAmbarHarTur read Get_AMBHARTUR write Set_AMBHARTUR;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property GCKOD_GIRIS: Integer read Get_GCKOD_GIRIS write Set_GCKOD_GIRIS;
    property GCKOD_CIKIS: Integer read Get_GCKOD_CIKIS write Set_GCKOD_CIKIS;
    property EKACK1: WideString read Get_EKACK1 write Set_EKACK1;
    property EKACK2: WideString read Get_EKACK2 write Set_EKACK2;
    property EKACK3: WideString read Get_EKACK3 write Set_EKACK3;
    property EKACK4: WideString read Get_EKACK4 write Set_EKACK4;
    property EKACK5: WideString read Get_EKACK5 write Set_EKACK5;
    property EKACK6: WideString read Get_EKACK6 write Set_EKACK6;
    property EKACK7: WideString read Get_EKACK7 write Set_EKACK7;
    property EKACK8: WideString read Get_EKACK8 write Set_EKACK8;
    property EKACK9: WideString read Get_EKACK9 write Set_EKACK9;
    property EKACK10: WideString read Get_EKACK10 write Set_EKACK10;
    property EKACK11: WideString read Get_EKACK11 write Set_EKACK11;
    property EKACK12: WideString read Get_EKACK12 write Set_EKACK12;
    property EKACK13: WideString read Get_EKACK13 write Set_EKACK13;
    property EKACK14: WideString read Get_EKACK14 write Set_EKACK14;
    property EKACK15: WideString read Get_EKACK15 write Set_EKACK15;
    property EKACK16: WideString read Get_EKACK16 write Set_EKACK16;
    property GEN_ISK1T: Double read Get_GEN_ISK1T write Set_GEN_ISK1T;
    property GEN_ISK2T: Double read Get_GEN_ISK2T write Set_GEN_ISK2T;
    property GEN_ISK3T: Double read Get_GEN_ISK3T write Set_GEN_ISK3T;
    property CikisYeri: TCikisYeri read Get_CikisYeri write Set_CikisYeri;
  end;

// *********************************************************************//
// DispIntf:  IFatUstDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E84B245B-7707-4DBE-A173-F1CF107CE176}
// *********************************************************************//
  IFatUstDisp = dispinterface
    ['{E84B245B-7707-4DBE-A173-F1CF107CE176}']
    property Sube_Kodu: Integer dispid 201;
    property CariKod: WideString dispid 202;
    property FATIRS_NO: WideString dispid 203;
    property Tarih: TDateTime dispid 204;
    property Tip: TFaturaTip dispid 205;
    property KOD1: WideString dispid 206;
    property YEDEK: WideString dispid 207;
    property KOD2: WideString dispid 208;
    property TIPI: TFaturaTipi dispid 209;
    property Aciklama: WideString dispid 210;
    property BRUTTUTAR: Double dispid 211;
    property KDV: Double dispid 212;
    property DovizTut: Double dispid 213;
    property SAT_ISKT: Double dispid 214;
    property GENELTOPLAM: Double dispid 215;
    property YUVARLAMA: Double dispid 216;
    property MFAZ_ISKT: Double dispid 217;
    property GEN_ISK1O: Double dispid 218;
    property GEN_ISK2O: Double dispid 219;
    property GEN_ISK3O: Double dispid 220;
    property FAT_ALTM1: Double dispid 221;
    property FAT_ALTM2: Double dispid 222;
    property KS_KODU: WideString dispid 223;
    property SIPARIS_NUMARASI: WideString dispid 224;
    property ODEMEGUNU: Integer dispid 225;
    property ODEMETARIHI: TDateTime dispid 226;
    property ENTEGRE_TRH: TDateTime dispid 227;
    property KDV_DAHILMI: WordBool dispid 228;
    property SIPARIS_TEST: TDateTime dispid 229;
    property CARI_KOD2: WideString dispid 230;
    property PLA_KODU: WideString dispid 231;
    property SIRANO: Integer dispid 232;
    property DOVIZTIP: Integer dispid 233;
    property Proje_Kodu: WideString dispid 234;
    property KOSULKODU: WideString dispid 235;
    property FIYATTARIHI: TDateTime dispid 236;
    property KOSULTARIHI: TDateTime dispid 237;
    property GENISK1TIP: Integer dispid 238;
    property GENISK2TIP: Integer dispid 239;
    property GENISK3TIP: Integer dispid 240;
    property EXPORTTYPE: Integer dispid 241;
    property EXGUMRUKNO: WideString dispid 242;
    property EXGUMTARIH: TDateTime dispid 243;
    property EXFIILITARIH: TDateTime dispid 244;
    property EXPORTREFNO: WideString dispid 245;
    property AMBHARTUR: TAmbarHarTur dispid 246;
    property OnayTipi: WideString dispid 247;
    property OnayNum: Integer dispid 248;
    property GCKOD_GIRIS: Integer dispid 249;
    property GCKOD_CIKIS: Integer dispid 250;
    property EKACK1: WideString dispid 251;
    property EKACK2: WideString dispid 252;
    property EKACK3: WideString dispid 253;
    property EKACK4: WideString dispid 254;
    property EKACK5: WideString dispid 255;
    property EKACK6: WideString dispid 256;
    property EKACK7: WideString dispid 257;
    property EKACK8: WideString dispid 258;
    property EKACK9: WideString dispid 259;
    property EKACK10: WideString dispid 260;
    property EKACK11: WideString dispid 261;
    property EKACK12: WideString dispid 262;
    property EKACK13: WideString dispid 263;
    property EKACK14: WideString dispid 264;
    property EKACK15: WideString dispid 265;
    property EKACK16: WideString dispid 266;
    property GEN_ISK1T: Double dispid 267;
    property GEN_ISK2T: Double dispid 268;
    property GEN_ISK3T: Double dispid 269;
    property CikisYeri: TCikisYeri dispid 270;
  end;

// *********************************************************************//
// Interface: IFatKalem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {01DDD87B-B7EE-48A8-9ACB-591D129D21F0}
// *********************************************************************//
  IFatKalem = interface(IDispatch)
    ['{01DDD87B-B7EE-48A8-9ACB-591D129D21F0}']
    function Get_StokKodu: WideString; safecall;
    procedure Set_StokKodu(const Value: WideString); safecall;
    function Get_Sira: Integer; safecall;
    procedure Set_Sira(Value: Integer); safecall;
    function Get_STra_FATIRSNO: WideString; safecall;
    procedure Set_STra_FATIRSNO(const Value: WideString); safecall;
    function Get_STra_GCMIK: Double; safecall;
    procedure Set_STra_GCMIK(Value: Double); safecall;
    function Get_STra_GCMIK2: Double; safecall;
    procedure Set_STra_GCMIK2(Value: Double); safecall;
    function Get_CEVRIM: Double; safecall;
    procedure Set_CEVRIM(Value: Double); safecall;
    function Get_STra_TAR: TDateTime; safecall;
    procedure Set_STra_TAR(Value: TDateTime); safecall;
    function Get_STra_NF: Double; safecall;
    procedure Set_STra_NF(Value: Double); safecall;
    function Get_STra_BF: Double; safecall;
    procedure Set_STra_BF(Value: Double); safecall;
    function Get_STra_IAF: Double; safecall;
    procedure Set_STra_IAF(Value: Double); safecall;
    function Get_STra_KDV: Double; safecall;
    procedure Set_STra_KDV(Value: Double); safecall;
    function Get_STra_SatIsk: Double; safecall;
    procedure Set_STra_SatIsk(Value: Double); safecall;
    function Get_STra_SatIsk2: Double; safecall;
    procedure Set_STra_SatIsk2(Value: Double); safecall;
    function Get_STra_MALFISK: Double; safecall;
    procedure Set_STra_MALFISK(Value: Double); safecall;
    function Get_STra_HTUR: WideString; safecall;
    procedure Set_STra_HTUR(const Value: WideString); safecall;
    function Get_STra_DOVTIP: Integer; safecall;
    procedure Set_STra_DOVTIP(Value: Integer); safecall;
    function Get_PROMASYON_KODU: Integer; safecall;
    procedure Set_PROMASYON_KODU(Value: Integer); safecall;
    function Get_STra_DOVFIAT: Double; safecall;
    procedure Set_STra_DOVFIAT(Value: Double); safecall;
    function Get_STra_ODEGUN: Integer; safecall;
    procedure Set_STra_ODEGUN(Value: Integer); safecall;
    function Get_STra_KOD1: WideString; safecall;
    procedure Set_STra_KOD1(const Value: WideString); safecall;
    function Get_STra_KOD2: WideString; safecall;
    procedure Set_STra_KOD2(const Value: WideString); safecall;
    function Get_STra_SIPNUM: WideString; safecall;
    procedure Set_STra_SIPNUM(const Value: WideString); safecall;
    function Get_STra_SIP_TURU: WideString; safecall;
    procedure Set_STra_SIP_TURU(const Value: WideString); safecall;
    function Get_Plasiyer_Kodu: WideString; safecall;
    procedure Set_Plasiyer_Kodu(const Value: WideString); safecall;
    function Get_Ekalanneden: WideString; safecall;
    procedure Set_Ekalanneden(const Value: WideString); safecall;
    function Get_Ekalan: WideString; safecall;
    procedure Set_Ekalan(const Value: WideString); safecall;
    function Get_Ekalan1: WideString; safecall;
    procedure Set_Ekalan1(const Value: WideString); safecall;
    function Get_Stra_Otv: Double; safecall;
    procedure Set_Stra_Otv(Value: Double); safecall;
    function Get_Redneden: Integer; safecall;
    procedure Set_Redneden(Value: Integer); safecall;
    function Get_STra_SIPKONT: Integer; safecall;
    procedure Set_STra_SIPKONT(Value: Integer); safecall;
    function Get_Ambarkabulno: WideString; safecall;
    procedure Set_Ambarkabulno(const Value: WideString); safecall;
    function Get_Firmadovtip: Integer; safecall;
    procedure Set_Firmadovtip(Value: Integer); safecall;
    function Get_Firmadovtut: Double; safecall;
    procedure Set_Firmadovtut(Value: Double); safecall;
    function Get_Firmadovmal: Double; safecall;
    procedure Set_Firmadovmal(Value: Double); safecall;
    function Get_Update_Kodu: WideString; safecall;
    procedure Set_Update_Kodu(const Value: WideString); safecall;
    function Get_Irsaliyeno: WideString; safecall;
    procedure Set_Irsaliyeno(const Value: WideString); safecall;
    function Get_Irsaliyetar: TDateTime; safecall;
    procedure Set_Irsaliyetar(Value: TDateTime); safecall;
    function Get_Stra_KosulK: WideString; safecall;
    procedure Set_Stra_KosulK(const Value: WideString); safecall;
    function Get_Ecza_fat_tip: Integer; safecall;
    procedure Set_Ecza_fat_tip(Value: Integer); safecall;
    function Get_STra_testar: TDateTime; safecall;
    procedure Set_STra_testar(Value: TDateTime); safecall;
    function Get_Olcubr: Integer; safecall;
    procedure Set_Olcubr(Value: Integer); safecall;
    function Get_Vadetar: TDateTime; safecall;
    procedure Set_Vadetar(Value: TDateTime); safecall;
    function Get_Listeno: WideString; safecall;
    procedure Set_Listeno(const Value: WideString); safecall;
    function Get_BaglantiNo: Integer; safecall;
    procedure Set_BaglantiNo(Value: Integer); safecall;
    function Get_BrCevrim1: Double; safecall;
    procedure Set_BrCevrim1(Value: Double); safecall;
    function Get_BrCevrim2: Double; safecall;
    procedure Set_BrCevrim2(Value: Double); safecall;
    function Get_Yed_Bf: Double; safecall;
    procedure Set_Yed_Bf(Value: Double); safecall;
    function Get_STra_BGTIP: WideString; safecall;
    procedure Set_STra_BGTIP(const Value: WideString); safecall;
    function Get_MuhasebeKodu: WideString; safecall;
    procedure Set_MuhasebeKodu(const Value: WideString); safecall;
    function Get_ReferansKodu: WideString; safecall;
    procedure Set_ReferansKodu(const Value: WideString); safecall;
    function Get_C_Yedek6: WideString; safecall;
    procedure Set_C_Yedek6(const Value: WideString); safecall;
    function Get_ProjeKodu: WideString; safecall;
    procedure Set_ProjeKodu(const Value: WideString); safecall;
    function Get_STra_FTIRSIP: WideString; safecall;
    procedure Set_STra_FTIRSIP(const Value: WideString); safecall;
    function Get_STra_CARI_KOD: WideString; safecall;
    procedure Set_STra_CARI_KOD(const Value: WideString); safecall;
    function Get_STra_GC: WideString; safecall;
    procedure Set_STra_GC(const Value: WideString); safecall;
    function Get_DEPO_KODU: Integer; safecall;
    procedure Set_DEPO_KODU(Value: Integer); safecall;
    function Get_Gir_Depo_Kodu: Integer; safecall;
    procedure Set_Gir_Depo_Kodu(Value: Integer); safecall;
    function Get_STra_ACIK: WideString; safecall;
    procedure Set_STra_ACIK(const Value: WideString); safecall;
    function Get_Stra_OnayTipi: WideString; safecall;
    procedure Set_Stra_OnayTipi(const Value: WideString); safecall;
    function Get_Stra_OnayNum: Integer; safecall;
    procedure Set_Stra_OnayNum(Value: Integer); safecall;
    function Get_Stra_SubeKodu: Integer; safecall;
    procedure Set_Stra_SubeKodu(Value: Integer); safecall;
    function Get_Stok_IsletmeKod: Integer; safecall;
    procedure Set_Stok_IsletmeKod(Value: Integer); safecall;
    function Get_Stok_SubeKod: Integer; safecall;
    procedure Set_Stok_SubeKod(Value: Integer); safecall;
    function Get_Stra_Exporttype: Integer; safecall;
    procedure Set_Stra_Exporttype(Value: Integer); safecall;
    function Get_IncKeyNo: Integer; safecall;
    procedure Set_IncKeyNo(Value: Integer); safecall;
    function Get_IncKeyNo2: Integer; safecall;
    procedure Set_IncKeyNo2(Value: Integer); safecall;
    function Get_TesMik: Double; safecall;
    procedure Set_TesMik(Value: Double); safecall;
    function Get_TesMFMik: Double; safecall;
    procedure Set_TesMFMik(Value: Double); safecall;
    function Get_MALADI: WideString; safecall;
    procedure Set_MALADI(const Value: WideString); safecall;
    function Get_SATREF_KOD: WideString; safecall;
    procedure Set_SATREF_KOD(const Value: WideString); safecall;
    function Get_STOK_GRKOD: WideString; safecall;
    procedure Set_STOK_GRKOD(const Value: WideString); safecall;
    function Get_STOK_FIYATKODU: WideString; safecall;
    procedure Set_STOK_FIYATKODU(const Value: WideString); safecall;
    function Get_STMUHDKOD: Integer; safecall;
    procedure Set_STMUHDKOD(Value: Integer); safecall;
    function Get_SONGIRBFIAT: Double; safecall;
    procedure Set_SONGIRBFIAT(Value: Double); safecall;
    function Get_OBR1: WideString; safecall;
    procedure Set_OBR1(const Value: WideString); safecall;
    function Get_OBR2: WideString; safecall;
    procedure Set_OBR2(const Value: WideString); safecall;
    function Get_OBR3: WideString; safecall;
    procedure Set_OBR3(const Value: WideString); safecall;
    function Get_SabitDepKod: Integer; safecall;
    procedure Set_SabitDepKod(Value: Integer); safecall;
    function Get_DOVTIP: Integer; safecall;
    procedure Set_DOVTIP(Value: Integer); safecall;
    function Get_DOVIZ_TURU: Integer; safecall;
    procedure Set_DOVIZ_TURU(Value: Integer); safecall;
    function Get_Fiyatlar1: Double; safecall;
    procedure Set_Fiyatlar1(Value: Double); safecall;
    function Get_Fiyatlar2: Double; safecall;
    procedure Set_Fiyatlar2(Value: Double); safecall;
    function Get_Fiyatlar3: Double; safecall;
    procedure Set_Fiyatlar3(Value: Double); safecall;
    function Get_Fiyatlar4: Double; safecall;
    procedure Set_Fiyatlar4(Value: Double); safecall;
    function Get_Fiyatlar5: Double; safecall;
    procedure Set_Fiyatlar5(Value: Double); safecall;
    function Get_Fiyatlar6: Double; safecall;
    procedure Set_Fiyatlar6(Value: Double); safecall;
    function Get_Fiyatlar7: Double; safecall;
    procedure Set_Fiyatlar7(Value: Double); safecall;
    function Get_Kilit: WideString; safecall;
    procedure Set_Kilit(const Value: WideString); safecall;
    function Get_SatisKDVOran: Double; safecall;
    procedure Set_SatisKDVOran(Value: Double); safecall;
    function Get_AlisKDVOran: Double; safecall;
    procedure Set_AlisKDVOran(Value: Double); safecall;
    function Get_Isk_Flag: TFatKalemIskTipi; safecall;
    procedure Set_Isk_Flag(Value: TFatKalemIskTipi); safecall;
    function Get_SipTesKont: Integer; safecall;
    procedure Set_SipTesKont(Value: Integer); safecall;
    function Get_Mamulmu: WideString; safecall;
    procedure Set_Mamulmu(const Value: WideString); safecall;
    function Get_SeriTakibi: WideString; safecall;
    procedure Set_SeriTakibi(const Value: WideString); safecall;
    function Get_Stra_Exportmik: Double; safecall;
    procedure Set_Stra_Exportmik(Value: Double); safecall;
    function Get_STra_SatIsk3: Double; safecall;
    procedure Set_STra_SatIsk3(Value: Double); safecall;
    function Get_Stra_KosTar: TDateTime; safecall;
    procedure Set_Stra_KosTar(Value: TDateTime); safecall;
    function Get_Stra_FiyatTar: TDateTime; safecall;
    procedure Set_Stra_FiyatTar(Value: TDateTime); safecall;
    function Get_S_Yedek2: WideString; safecall;
    procedure Set_S_Yedek2(const Value: WideString); safecall;
    function Get_Kul_Mik: Double; safecall;
    procedure Set_Kul_Mik(Value: Double); safecall;
    function Get_Fiat_birimi: Integer; safecall;
    procedure Set_Fiat_birimi(Value: Integer); safecall;
    function Get_Satici_Kodu: WideString; safecall;
    procedure Set_Satici_Kodu(const Value: WideString); safecall;
    function Get_Sat_IskTipleri1: Integer; safecall;
    procedure Set_Sat_IskTipleri1(Value: Integer); safecall;
    function Get_Sat_IskTipleri2: Integer; safecall;
    procedure Set_Sat_IskTipleri2(Value: Integer); safecall;
    function Get_Sat_IskTipleri3: Integer; safecall;
    procedure Set_Sat_IskTipleri3(Value: Integer); safecall;
    function Get_Koli_Inc: Integer; safecall;
    procedure Set_Koli_Inc(Value: Integer); safecall;
    function Get_KoliStok: WordBool; safecall;
    procedure Set_KoliStok(Value: WordBool); safecall;
    function Get_Tur: WideString; safecall;
    procedure Set_Tur(const Value: WideString); safecall;
    function Get_Stra_FiiliTar: TDateTime; safecall;
    procedure Set_Stra_FiiliTar(Value: TDateTime); safecall;
    function Get_BirimPuan: Integer; safecall;
    procedure Set_BirimPuan(Value: Integer); safecall;
    function Get_PuanDeger: Double; safecall;
    procedure Set_PuanDeger(Value: Double); safecall;
    function Get_KalemGenIskOran1: Double; safecall;
    procedure Set_KalemGenIskOran1(Value: Double); safecall;
    function Get_KalemGenIskOran2: Double; safecall;
    procedure Set_KalemGenIskOran2(Value: Double); safecall;
    function Get_KalemGenIskOran3: Double; safecall;
    procedure Set_KalemGenIskOran3(Value: Double); safecall;
    function Get_OtvFlag: Integer; safecall;
    procedure Set_OtvFlag(Value: Integer); safecall;
    function Get_Otvtut: Double; safecall;
    procedure Set_Otvtut(Value: Double); safecall;
    function Get_STra_SatIsk4: Double; safecall;
    procedure Set_STra_SatIsk4(Value: Double); safecall;
    function Get_STra_SatIsk5: Double; safecall;
    procedure Set_STra_SatIsk5(Value: Double); safecall;
    function Get_STra_SatIsk6: Double; safecall;
    procedure Set_STra_SatIsk6(Value: Double); safecall;
    function Get_Kull1S: WideString; safecall;
    procedure Set_Kull1S(const Value: WideString); safecall;
    function Get_KKMalF: Double; safecall;
    procedure Set_KKMalF(Value: Double); safecall;
    function Get_Stra_FiyatBirimi: Integer; safecall;
    procedure Set_Stra_FiyatBirimi(Value: Integer); safecall;
    function Get_Stra_IrsKont: Integer; safecall;
    procedure Set_Stra_IrsKont(Value: Integer); safecall;
    function Get_SatisKilit: WideString; safecall;
    procedure Set_SatisKilit(const Value: WideString); safecall;
    function Get_Payda_1: Double; safecall;
    procedure Set_Payda_1(Value: Double); safecall;
    function Get_SatirBaziAcik(Index: Integer): WideString; safecall;
    procedure Set_SatirBaziAcik(Index: Integer; const Value: WideString); safecall;
    function Get_D_YEDEK10: TDateTime; safecall;
    procedure Set_D_YEDEK10(Value: TDateTime); safecall;
    function Get_Sat_IskTipleri4: Integer; safecall;
    procedure Set_Sat_IskTipleri4(Value: Integer); safecall;
    function Get_Sat_IskTipleri5: Integer; safecall;
    procedure Set_Sat_IskTipleri5(Value: Integer); safecall;
    function Get_Sat_IskTipleri6: Integer; safecall;
    procedure Set_Sat_IskTipleri6(Value: Integer); safecall;
    function Get_YapKod: WideString; safecall;
    procedure Set_YapKod(const Value: WideString); safecall;
    function Get_EsnekMi: WordBool; safecall;
    function SeriEkle(const Seri1: WideString; const Seri2: WideString; 
                      const Aciklama1: WideString; const Aciklama2: WideString; Miktar: Double): Integer; safecall;
    procedure SeriSil(SeriIndex: Integer); safecall;
    function Get_SeriSayisi: Integer; safecall;
    function SeriOku(Index: Integer): IKalemSeri; safecall;
    function Get_BRCevrim(Index: Integer): Double; safecall;
    property StokKodu: WideString read Get_StokKodu write Set_StokKodu;
    property Sira: Integer read Get_Sira write Set_Sira;
    property STra_FATIRSNO: WideString read Get_STra_FATIRSNO write Set_STra_FATIRSNO;
    property STra_GCMIK: Double read Get_STra_GCMIK write Set_STra_GCMIK;
    property STra_GCMIK2: Double read Get_STra_GCMIK2 write Set_STra_GCMIK2;
    property CEVRIM: Double read Get_CEVRIM write Set_CEVRIM;
    property STra_TAR: TDateTime read Get_STra_TAR write Set_STra_TAR;
    property STra_NF: Double read Get_STra_NF write Set_STra_NF;
    property STra_BF: Double read Get_STra_BF write Set_STra_BF;
    property STra_IAF: Double read Get_STra_IAF write Set_STra_IAF;
    property STra_KDV: Double read Get_STra_KDV write Set_STra_KDV;
    property STra_SatIsk: Double read Get_STra_SatIsk write Set_STra_SatIsk;
    property STra_SatIsk2: Double read Get_STra_SatIsk2 write Set_STra_SatIsk2;
    property STra_MALFISK: Double read Get_STra_MALFISK write Set_STra_MALFISK;
    property STra_HTUR: WideString read Get_STra_HTUR write Set_STra_HTUR;
    property STra_DOVTIP: Integer read Get_STra_DOVTIP write Set_STra_DOVTIP;
    property PROMASYON_KODU: Integer read Get_PROMASYON_KODU write Set_PROMASYON_KODU;
    property STra_DOVFIAT: Double read Get_STra_DOVFIAT write Set_STra_DOVFIAT;
    property STra_ODEGUN: Integer read Get_STra_ODEGUN write Set_STra_ODEGUN;
    property STra_KOD1: WideString read Get_STra_KOD1 write Set_STra_KOD1;
    property STra_KOD2: WideString read Get_STra_KOD2 write Set_STra_KOD2;
    property STra_SIPNUM: WideString read Get_STra_SIPNUM write Set_STra_SIPNUM;
    property STra_SIP_TURU: WideString read Get_STra_SIP_TURU write Set_STra_SIP_TURU;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property Ekalanneden: WideString read Get_Ekalanneden write Set_Ekalanneden;
    property Ekalan: WideString read Get_Ekalan write Set_Ekalan;
    property Ekalan1: WideString read Get_Ekalan1 write Set_Ekalan1;
    property Stra_Otv: Double read Get_Stra_Otv write Set_Stra_Otv;
    property Redneden: Integer read Get_Redneden write Set_Redneden;
    property STra_SIPKONT: Integer read Get_STra_SIPKONT write Set_STra_SIPKONT;
    property Ambarkabulno: WideString read Get_Ambarkabulno write Set_Ambarkabulno;
    property Firmadovtip: Integer read Get_Firmadovtip write Set_Firmadovtip;
    property Firmadovtut: Double read Get_Firmadovtut write Set_Firmadovtut;
    property Firmadovmal: Double read Get_Firmadovmal write Set_Firmadovmal;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Irsaliyeno: WideString read Get_Irsaliyeno write Set_Irsaliyeno;
    property Irsaliyetar: TDateTime read Get_Irsaliyetar write Set_Irsaliyetar;
    property Stra_KosulK: WideString read Get_Stra_KosulK write Set_Stra_KosulK;
    property Ecza_fat_tip: Integer read Get_Ecza_fat_tip write Set_Ecza_fat_tip;
    property STra_testar: TDateTime read Get_STra_testar write Set_STra_testar;
    property Olcubr: Integer read Get_Olcubr write Set_Olcubr;
    property Vadetar: TDateTime read Get_Vadetar write Set_Vadetar;
    property Listeno: WideString read Get_Listeno write Set_Listeno;
    property BaglantiNo: Integer read Get_BaglantiNo write Set_BaglantiNo;
    property BrCevrim1: Double read Get_BrCevrim1 write Set_BrCevrim1;
    property BrCevrim2: Double read Get_BrCevrim2 write Set_BrCevrim2;
    property Yed_Bf: Double read Get_Yed_Bf write Set_Yed_Bf;
    property STra_BGTIP: WideString read Get_STra_BGTIP write Set_STra_BGTIP;
    property MuhasebeKodu: WideString read Get_MuhasebeKodu write Set_MuhasebeKodu;
    property ReferansKodu: WideString read Get_ReferansKodu write Set_ReferansKodu;
    property C_Yedek6: WideString read Get_C_Yedek6 write Set_C_Yedek6;
    property ProjeKodu: WideString read Get_ProjeKodu write Set_ProjeKodu;
    property STra_FTIRSIP: WideString read Get_STra_FTIRSIP write Set_STra_FTIRSIP;
    property STra_CARI_KOD: WideString read Get_STra_CARI_KOD write Set_STra_CARI_KOD;
    property STra_GC: WideString read Get_STra_GC write Set_STra_GC;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property Gir_Depo_Kodu: Integer read Get_Gir_Depo_Kodu write Set_Gir_Depo_Kodu;
    property STra_ACIK: WideString read Get_STra_ACIK write Set_STra_ACIK;
    property Stra_OnayTipi: WideString read Get_Stra_OnayTipi write Set_Stra_OnayTipi;
    property Stra_OnayNum: Integer read Get_Stra_OnayNum write Set_Stra_OnayNum;
    property Stra_SubeKodu: Integer read Get_Stra_SubeKodu write Set_Stra_SubeKodu;
    property Stok_IsletmeKod: Integer read Get_Stok_IsletmeKod write Set_Stok_IsletmeKod;
    property Stok_SubeKod: Integer read Get_Stok_SubeKod write Set_Stok_SubeKod;
    property Stra_Exporttype: Integer read Get_Stra_Exporttype write Set_Stra_Exporttype;
    property IncKeyNo: Integer read Get_IncKeyNo write Set_IncKeyNo;
    property IncKeyNo2: Integer read Get_IncKeyNo2 write Set_IncKeyNo2;
    property TesMik: Double read Get_TesMik write Set_TesMik;
    property TesMFMik: Double read Get_TesMFMik write Set_TesMFMik;
    property MALADI: WideString read Get_MALADI write Set_MALADI;
    property SATREF_KOD: WideString read Get_SATREF_KOD write Set_SATREF_KOD;
    property STOK_GRKOD: WideString read Get_STOK_GRKOD write Set_STOK_GRKOD;
    property STOK_FIYATKODU: WideString read Get_STOK_FIYATKODU write Set_STOK_FIYATKODU;
    property STMUHDKOD: Integer read Get_STMUHDKOD write Set_STMUHDKOD;
    property SONGIRBFIAT: Double read Get_SONGIRBFIAT write Set_SONGIRBFIAT;
    property OBR1: WideString read Get_OBR1 write Set_OBR1;
    property OBR2: WideString read Get_OBR2 write Set_OBR2;
    property OBR3: WideString read Get_OBR3 write Set_OBR3;
    property SabitDepKod: Integer read Get_SabitDepKod write Set_SabitDepKod;
    property DOVTIP: Integer read Get_DOVTIP write Set_DOVTIP;
    property DOVIZ_TURU: Integer read Get_DOVIZ_TURU write Set_DOVIZ_TURU;
    property Fiyatlar1: Double read Get_Fiyatlar1 write Set_Fiyatlar1;
    property Fiyatlar2: Double read Get_Fiyatlar2 write Set_Fiyatlar2;
    property Fiyatlar3: Double read Get_Fiyatlar3 write Set_Fiyatlar3;
    property Fiyatlar4: Double read Get_Fiyatlar4 write Set_Fiyatlar4;
    property Fiyatlar5: Double read Get_Fiyatlar5 write Set_Fiyatlar5;
    property Fiyatlar6: Double read Get_Fiyatlar6 write Set_Fiyatlar6;
    property Fiyatlar7: Double read Get_Fiyatlar7 write Set_Fiyatlar7;
    property Kilit: WideString read Get_Kilit write Set_Kilit;
    property SatisKDVOran: Double read Get_SatisKDVOran write Set_SatisKDVOran;
    property AlisKDVOran: Double read Get_AlisKDVOran write Set_AlisKDVOran;
    property Isk_Flag: TFatKalemIskTipi read Get_Isk_Flag write Set_Isk_Flag;
    property SipTesKont: Integer read Get_SipTesKont write Set_SipTesKont;
    property Mamulmu: WideString read Get_Mamulmu write Set_Mamulmu;
    property SeriTakibi: WideString read Get_SeriTakibi write Set_SeriTakibi;
    property Stra_Exportmik: Double read Get_Stra_Exportmik write Set_Stra_Exportmik;
    property STra_SatIsk3: Double read Get_STra_SatIsk3 write Set_STra_SatIsk3;
    property Stra_KosTar: TDateTime read Get_Stra_KosTar write Set_Stra_KosTar;
    property Stra_FiyatTar: TDateTime read Get_Stra_FiyatTar write Set_Stra_FiyatTar;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property Kul_Mik: Double read Get_Kul_Mik write Set_Kul_Mik;
    property Fiat_birimi: Integer read Get_Fiat_birimi write Set_Fiat_birimi;
    property Satici_Kodu: WideString read Get_Satici_Kodu write Set_Satici_Kodu;
    property Sat_IskTipleri1: Integer read Get_Sat_IskTipleri1 write Set_Sat_IskTipleri1;
    property Sat_IskTipleri2: Integer read Get_Sat_IskTipleri2 write Set_Sat_IskTipleri2;
    property Sat_IskTipleri3: Integer read Get_Sat_IskTipleri3 write Set_Sat_IskTipleri3;
    property Koli_Inc: Integer read Get_Koli_Inc write Set_Koli_Inc;
    property KoliStok: WordBool read Get_KoliStok write Set_KoliStok;
    property Tur: WideString read Get_Tur write Set_Tur;
    property Stra_FiiliTar: TDateTime read Get_Stra_FiiliTar write Set_Stra_FiiliTar;
    property BirimPuan: Integer read Get_BirimPuan write Set_BirimPuan;
    property PuanDeger: Double read Get_PuanDeger write Set_PuanDeger;
    property KalemGenIskOran1: Double read Get_KalemGenIskOran1 write Set_KalemGenIskOran1;
    property KalemGenIskOran2: Double read Get_KalemGenIskOran2 write Set_KalemGenIskOran2;
    property KalemGenIskOran3: Double read Get_KalemGenIskOran3 write Set_KalemGenIskOran3;
    property OtvFlag: Integer read Get_OtvFlag write Set_OtvFlag;
    property Otvtut: Double read Get_Otvtut write Set_Otvtut;
    property STra_SatIsk4: Double read Get_STra_SatIsk4 write Set_STra_SatIsk4;
    property STra_SatIsk5: Double read Get_STra_SatIsk5 write Set_STra_SatIsk5;
    property STra_SatIsk6: Double read Get_STra_SatIsk6 write Set_STra_SatIsk6;
    property Kull1S: WideString read Get_Kull1S write Set_Kull1S;
    property KKMalF: Double read Get_KKMalF write Set_KKMalF;
    property Stra_FiyatBirimi: Integer read Get_Stra_FiyatBirimi write Set_Stra_FiyatBirimi;
    property Stra_IrsKont: Integer read Get_Stra_IrsKont write Set_Stra_IrsKont;
    property SatisKilit: WideString read Get_SatisKilit write Set_SatisKilit;
    property Payda_1: Double read Get_Payda_1 write Set_Payda_1;
    property SatirBaziAcik[Index: Integer]: WideString read Get_SatirBaziAcik write Set_SatirBaziAcik;
    property D_YEDEK10: TDateTime read Get_D_YEDEK10 write Set_D_YEDEK10;
    property Sat_IskTipleri4: Integer read Get_Sat_IskTipleri4 write Set_Sat_IskTipleri4;
    property Sat_IskTipleri5: Integer read Get_Sat_IskTipleri5 write Set_Sat_IskTipleri5;
    property Sat_IskTipleri6: Integer read Get_Sat_IskTipleri6 write Set_Sat_IskTipleri6;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
    property EsnekMi: WordBool read Get_EsnekMi;
    property SeriSayisi: Integer read Get_SeriSayisi;
    property BRCevrim[Index: Integer]: Double read Get_BRCevrim;
  end;

// *********************************************************************//
// DispIntf:  IFatKalemDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {01DDD87B-B7EE-48A8-9ACB-591D129D21F0}
// *********************************************************************//
  IFatKalemDisp = dispinterface
    ['{01DDD87B-B7EE-48A8-9ACB-591D129D21F0}']
    property StokKodu: WideString dispid 201;
    property Sira: Integer dispid 202;
    property STra_FATIRSNO: WideString dispid 203;
    property STra_GCMIK: Double dispid 204;
    property STra_GCMIK2: Double dispid 205;
    property CEVRIM: Double dispid 206;
    property STra_TAR: TDateTime dispid 207;
    property STra_NF: Double dispid 208;
    property STra_BF: Double dispid 209;
    property STra_IAF: Double dispid 210;
    property STra_KDV: Double dispid 211;
    property STra_SatIsk: Double dispid 212;
    property STra_SatIsk2: Double dispid 213;
    property STra_MALFISK: Double dispid 214;
    property STra_HTUR: WideString dispid 215;
    property STra_DOVTIP: Integer dispid 216;
    property PROMASYON_KODU: Integer dispid 217;
    property STra_DOVFIAT: Double dispid 218;
    property STra_ODEGUN: Integer dispid 219;
    property STra_KOD1: WideString dispid 220;
    property STra_KOD2: WideString dispid 221;
    property STra_SIPNUM: WideString dispid 222;
    property STra_SIP_TURU: WideString dispid 223;
    property Plasiyer_Kodu: WideString dispid 224;
    property Ekalanneden: WideString dispid 225;
    property Ekalan: WideString dispid 226;
    property Ekalan1: WideString dispid 227;
    property Stra_Otv: Double dispid 228;
    property Redneden: Integer dispid 229;
    property STra_SIPKONT: Integer dispid 230;
    property Ambarkabulno: WideString dispid 231;
    property Firmadovtip: Integer dispid 232;
    property Firmadovtut: Double dispid 233;
    property Firmadovmal: Double dispid 234;
    property Update_Kodu: WideString dispid 235;
    property Irsaliyeno: WideString dispid 236;
    property Irsaliyetar: TDateTime dispid 237;
    property Stra_KosulK: WideString dispid 238;
    property Ecza_fat_tip: Integer dispid 239;
    property STra_testar: TDateTime dispid 240;
    property Olcubr: Integer dispid 241;
    property Vadetar: TDateTime dispid 242;
    property Listeno: WideString dispid 243;
    property BaglantiNo: Integer dispid 244;
    property BrCevrim1: Double dispid 245;
    property BrCevrim2: Double dispid 246;
    property Yed_Bf: Double dispid 247;
    property STra_BGTIP: WideString dispid 248;
    property MuhasebeKodu: WideString dispid 249;
    property ReferansKodu: WideString dispid 250;
    property C_Yedek6: WideString dispid 251;
    property ProjeKodu: WideString dispid 252;
    property STra_FTIRSIP: WideString dispid 253;
    property STra_CARI_KOD: WideString dispid 254;
    property STra_GC: WideString dispid 255;
    property DEPO_KODU: Integer dispid 256;
    property Gir_Depo_Kodu: Integer dispid 257;
    property STra_ACIK: WideString dispid 258;
    property Stra_OnayTipi: WideString dispid 259;
    property Stra_OnayNum: Integer dispid 260;
    property Stra_SubeKodu: Integer dispid 261;
    property Stok_IsletmeKod: Integer dispid 262;
    property Stok_SubeKod: Integer dispid 263;
    property Stra_Exporttype: Integer dispid 264;
    property IncKeyNo: Integer dispid 265;
    property IncKeyNo2: Integer dispid 266;
    property TesMik: Double dispid 267;
    property TesMFMik: Double dispid 268;
    property MALADI: WideString dispid 269;
    property SATREF_KOD: WideString dispid 270;
    property STOK_GRKOD: WideString dispid 276;
    property STOK_FIYATKODU: WideString dispid 277;
    property STMUHDKOD: Integer dispid 279;
    property SONGIRBFIAT: Double dispid 280;
    property OBR1: WideString dispid 282;
    property OBR2: WideString dispid 283;
    property OBR3: WideString dispid 284;
    property SabitDepKod: Integer dispid 285;
    property DOVTIP: Integer dispid 286;
    property DOVIZ_TURU: Integer dispid 287;
    property Fiyatlar1: Double dispid 288;
    property Fiyatlar2: Double dispid 289;
    property Fiyatlar3: Double dispid 290;
    property Fiyatlar4: Double dispid 291;
    property Fiyatlar5: Double dispid 292;
    property Fiyatlar6: Double dispid 293;
    property Fiyatlar7: Double dispid 294;
    property Kilit: WideString dispid 295;
    property SatisKDVOran: Double dispid 296;
    property AlisKDVOran: Double dispid 297;
    property Isk_Flag: TFatKalemIskTipi dispid 298;
    property SipTesKont: Integer dispid 300;
    property Mamulmu: WideString dispid 302;
    property SeriTakibi: WideString dispid 303;
    property Stra_Exportmik: Double dispid 304;
    property STra_SatIsk3: Double dispid 305;
    property Stra_KosTar: TDateTime dispid 306;
    property Stra_FiyatTar: TDateTime dispid 307;
    property S_Yedek2: WideString dispid 308;
    property Kul_Mik: Double dispid 309;
    property Fiat_birimi: Integer dispid 310;
    property Satici_Kodu: WideString dispid 311;
    property Sat_IskTipleri1: Integer dispid 312;
    property Sat_IskTipleri2: Integer dispid 313;
    property Sat_IskTipleri3: Integer dispid 314;
    property Koli_Inc: Integer dispid 315;
    property KoliStok: WordBool dispid 316;
    property Tur: WideString dispid 317;
    property Stra_FiiliTar: TDateTime dispid 318;
    property BirimPuan: Integer dispid 319;
    property PuanDeger: Double dispid 320;
    property KalemGenIskOran1: Double dispid 321;
    property KalemGenIskOran2: Double dispid 322;
    property KalemGenIskOran3: Double dispid 323;
    property OtvFlag: Integer dispid 324;
    property Otvtut: Double dispid 325;
    property STra_SatIsk4: Double dispid 326;
    property STra_SatIsk5: Double dispid 327;
    property STra_SatIsk6: Double dispid 328;
    property Kull1S: WideString dispid 329;
    property KKMalF: Double dispid 330;
    property Stra_FiyatBirimi: Integer dispid 331;
    property Stra_IrsKont: Integer dispid 332;
    property SatisKilit: WideString dispid 333;
    property Payda_1: Double dispid 334;
    property SatirBaziAcik[Index: Integer]: WideString dispid 271;
    property D_YEDEK10: TDateTime dispid 272;
    property Sat_IskTipleri4: Integer dispid 273;
    property Sat_IskTipleri5: Integer dispid 274;
    property Sat_IskTipleri6: Integer dispid 275;
    property YapKod: WideString dispid 278;
    property EsnekMi: WordBool readonly dispid 281;
    function SeriEkle(const Seri1: WideString; const Seri2: WideString; 
                      const Aciklama1: WideString; const Aciklama2: WideString; Miktar: Double): Integer; dispid 299;
    procedure SeriSil(SeriIndex: Integer); dispid 336;
    property SeriSayisi: Integer readonly dispid 338;
    function SeriOku(Index: Integer): IKalemSeri; dispid 337;
    property BRCevrim[Index: Integer]: Double readonly dispid 301;
  end;

// *********************************************************************//
// Interface: ICari
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1EE7579F-7165-41F4-A61D-AF145320E444}
// *********************************************************************//
  ICari = interface(IData)
    ['{1EE7579F-7165-41F4-A61D-AF145320E444}']
    function TemelBilgi: ICariTemelBilgi; safecall;
    function EkBilgi: ICariEkBilgi; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICariDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1EE7579F-7165-41F4-A61D-AF145320E444}
// *********************************************************************//
  ICariDisp = dispinterface
    ['{1EE7579F-7165-41F4-A61D-AF145320E444}']
    function TemelBilgi: ICariTemelBilgi; dispid 401;
    function EkBilgi: ICariEkBilgi; dispid 402;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: ICariTemelBilgi
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB7420DC-9C87-4810-B460-767A13067212}
// *********************************************************************//
  ICariTemelBilgi = interface(IMerkez)
    ['{EB7420DC-9C87-4810-B460-767A13067212}']
    function Get_Sube_Kodu: Integer; safecall;
    procedure Set_Sube_Kodu(Value: Integer); safecall;
    function Get_ISLETME_KODU: Integer; safecall;
    procedure Set_ISLETME_KODU(Value: Integer); safecall;
    function Get_CARI_KOD: WideString; safecall;
    procedure Set_CARI_KOD(const Value: WideString); safecall;
    function Get_CARI_TEL: WideString; safecall;
    procedure Set_CARI_TEL(const Value: WideString); safecall;
    function Get_CARI_IL: WideString; safecall;
    procedure Set_CARI_IL(const Value: WideString); safecall;
    function Get_ULKE_KODU: WideString; safecall;
    procedure Set_ULKE_KODU(const Value: WideString); safecall;
    function Get_CARI_ISIM: WideString; safecall;
    procedure Set_CARI_ISIM(const Value: WideString); safecall;
    function Get_CARI_TIP: WideString; safecall;
    procedure Set_CARI_TIP(const Value: WideString); safecall;
    function Get_Grup_Kodu: WideString; safecall;
    procedure Set_Grup_Kodu(const Value: WideString); safecall;
    function Get_RAPOR_KODU1: WideString; safecall;
    procedure Set_RAPOR_KODU1(const Value: WideString); safecall;
    function Get_RAPOR_KODU2: WideString; safecall;
    procedure Set_RAPOR_KODU2(const Value: WideString); safecall;
    function Get_RAPOR_KODU3: WideString; safecall;
    procedure Set_RAPOR_KODU3(const Value: WideString); safecall;
    function Get_RAPOR_KODU4: WideString; safecall;
    procedure Set_RAPOR_KODU4(const Value: WideString); safecall;
    function Get_RAPOR_KODU5: WideString; safecall;
    procedure Set_RAPOR_KODU5(const Value: WideString); safecall;
    function Get_CARI_ADRES: WideString; safecall;
    procedure Set_CARI_ADRES(const Value: WideString); safecall;
    function Get_CARI_ILCE: WideString; safecall;
    procedure Set_CARI_ILCE(const Value: WideString); safecall;
    function Get_VERGI_DAIRESI: WideString; safecall;
    procedure Set_VERGI_DAIRESI(const Value: WideString); safecall;
    function Get_VERGI_NUMARASI: WideString; safecall;
    procedure Set_VERGI_NUMARASI(const Value: WideString); safecall;
    function Get_FAX: WideString; safecall;
    procedure Set_FAX(const Value: WideString); safecall;
    function Get_POSTAKODU: WideString; safecall;
    procedure Set_POSTAKODU(const Value: WideString); safecall;
    function Get_DETAY_KODU: Integer; safecall;
    procedure Set_DETAY_KODU(Value: Integer); safecall;
    function Get_NAKLIYE_KATSAYISI: Double; safecall;
    procedure Set_NAKLIYE_KATSAYISI(Value: Double); safecall;
    function Get_RISK_SINIRI: Double; safecall;
    procedure Set_RISK_SINIRI(Value: Double); safecall;
    function Get_TEMINATI: Double; safecall;
    procedure Set_TEMINATI(Value: Double); safecall;
    function Get_CARISK: Double; safecall;
    procedure Set_CARISK(Value: Double); safecall;
    function Get_CCRISK: Double; safecall;
    procedure Set_CCRISK(Value: Double); safecall;
    function Get_SARISK: Double; safecall;
    procedure Set_SARISK(Value: Double); safecall;
    function Get_SCRISK: Double; safecall;
    procedure Set_SCRISK(Value: Double); safecall;
    function Get_CM_BORCT: Double; safecall;
    procedure Set_CM_BORCT(Value: Double); safecall;
    function Get_CM_ALACT: Double; safecall;
    procedure Set_CM_ALACT(Value: Double); safecall;
    function Get_CM_RAP_TARIH: TDateTime; safecall;
    procedure Set_CM_RAP_TARIH(Value: TDateTime); safecall;
    function Get_KOSULKODU: WideString; safecall;
    procedure Set_KOSULKODU(const Value: WideString); safecall;
    function Get_ISKONTO_ORANI: Double; safecall;
    procedure Set_ISKONTO_ORANI(Value: Double); safecall;
    function Get_VADE_GUNU: Integer; safecall;
    procedure Set_VADE_GUNU(Value: Integer); safecall;
    function Get_LISTE_FIATI: Integer; safecall;
    procedure Set_LISTE_FIATI(Value: Integer); safecall;
    function Get_ACIK1: WideString; safecall;
    procedure Set_ACIK1(const Value: WideString); safecall;
    function Get_ACIK2: WideString; safecall;
    procedure Set_ACIK2(const Value: WideString); safecall;
    function Get_ACIK3: WideString; safecall;
    procedure Set_ACIK3(const Value: WideString); safecall;
    function Get_M_KOD: WideString; safecall;
    procedure Set_M_KOD(const Value: WideString); safecall;
    function Get_DOVIZ_TIPI: Integer; safecall;
    procedure Set_DOVIZ_TIPI(Value: Integer); safecall;
    function Get_DOVIZ_TURU: Integer; safecall;
    procedure Set_DOVIZ_TURU(Value: Integer); safecall;
    function Get_HESAPTUTMASEKLI: WideString; safecall;
    procedure Set_HESAPTUTMASEKLI(const Value: WideString); safecall;
    function Get_DOVIZLIMI: WideString; safecall;
    procedure Set_DOVIZLIMI(const Value: WideString); safecall;
    function Get_Update_Kodu: WideString; safecall;
    procedure Set_Update_Kodu(const Value: WideString); safecall;
    function Get_Plasiyer_Kodu: WideString; safecall;
    procedure Set_Plasiyer_Kodu(const Value: WideString); safecall;
    function Get_LOKALDEPO: Integer; safecall;
    procedure Set_LOKALDEPO(Value: Integer); safecall;
    function Get_EMAIL: WideString; safecall;
    procedure Set_EMAIL(const Value: WideString); safecall;
    function Get_WEB: WideString; safecall;
    procedure Set_WEB(const Value: WideString); safecall;
    function Get_KURFARKIBORC: WideString; safecall;
    procedure Set_KURFARKIBORC(const Value: WideString); safecall;
    function Get_KURFARKIALAC: WideString; safecall;
    procedure Set_KURFARKIALAC(const Value: WideString); safecall;
    function Get_S_Yedek1: WideString; safecall;
    procedure Set_S_Yedek1(const Value: WideString); safecall;
    function Get_S_Yedek2: WideString; safecall;
    procedure Set_S_Yedek2(const Value: WideString); safecall;
    function Get_F_Yedek1: Double; safecall;
    procedure Set_F_Yedek1(Value: Double); safecall;
    function Get_F_Yedek2: Double; safecall;
    procedure Set_F_Yedek2(Value: Double); safecall;
    function Get_C_Yedek1: WideString; safecall;
    procedure Set_C_Yedek1(const Value: WideString); safecall;
    function Get_C_Yedek2: WideString; safecall;
    procedure Set_C_Yedek2(const Value: WideString); safecall;
    function Get_B_Yedek1: Integer; safecall;
    procedure Set_B_Yedek1(Value: Integer); safecall;
    function Get_I_Yedek1: Integer; safecall;
    procedure Set_I_Yedek1(Value: Integer); safecall;
    function Get_L_Yedek1: Integer; safecall;
    procedure Set_L_Yedek1(Value: Integer); safecall;
    function Get_FIYATGRUBU: WideString; safecall;
    procedure Set_FIYATGRUBU(const Value: WideString); safecall;
    function Get_KayitYapanKul: WideString; safecall;
    procedure Set_KayitYapanKul(const Value: WideString); safecall;
    function Get_KayitTarihi: TDateTime; safecall;
    procedure Set_KayitTarihi(Value: TDateTime); safecall;
    function Get_DuzeltmeYapanKul: WideString; safecall;
    procedure Set_DuzeltmeYapanKul(const Value: WideString); safecall;
    function Get_DuzeltmeTarihi: TDateTime; safecall;
    procedure Set_DuzeltmeTarihi(Value: TDateTime); safecall;
    function Get_ODEMETIPI: Integer; safecall;
    procedure Set_ODEMETIPI(Value: Integer); safecall;
    function Get_OnayTipi: WideString; safecall;
    procedure Set_OnayTipi(const Value: WideString); safecall;
    function Get_OnayNum: Integer; safecall;
    procedure Set_OnayNum(Value: Integer); safecall;
    function Get_MUSTERIBAZIKDV: WideString; safecall;
    procedure Set_MUSTERIBAZIKDV(const Value: WideString); safecall;
    function Get_AGIRLIK_ISK: Double; safecall;
    procedure Set_AGIRLIK_ISK(Value: Double); safecall;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property ISLETME_KODU: Integer read Get_ISLETME_KODU write Set_ISLETME_KODU;
    property CARI_KOD: WideString read Get_CARI_KOD write Set_CARI_KOD;
    property CARI_TEL: WideString read Get_CARI_TEL write Set_CARI_TEL;
    property CARI_IL: WideString read Get_CARI_IL write Set_CARI_IL;
    property ULKE_KODU: WideString read Get_ULKE_KODU write Set_ULKE_KODU;
    property CARI_ISIM: WideString read Get_CARI_ISIM write Set_CARI_ISIM;
    property CARI_TIP: WideString read Get_CARI_TIP write Set_CARI_TIP;
    property Grup_Kodu: WideString read Get_Grup_Kodu write Set_Grup_Kodu;
    property RAPOR_KODU1: WideString read Get_RAPOR_KODU1 write Set_RAPOR_KODU1;
    property RAPOR_KODU2: WideString read Get_RAPOR_KODU2 write Set_RAPOR_KODU2;
    property RAPOR_KODU3: WideString read Get_RAPOR_KODU3 write Set_RAPOR_KODU3;
    property RAPOR_KODU4: WideString read Get_RAPOR_KODU4 write Set_RAPOR_KODU4;
    property RAPOR_KODU5: WideString read Get_RAPOR_KODU5 write Set_RAPOR_KODU5;
    property CARI_ADRES: WideString read Get_CARI_ADRES write Set_CARI_ADRES;
    property CARI_ILCE: WideString read Get_CARI_ILCE write Set_CARI_ILCE;
    property VERGI_DAIRESI: WideString read Get_VERGI_DAIRESI write Set_VERGI_DAIRESI;
    property VERGI_NUMARASI: WideString read Get_VERGI_NUMARASI write Set_VERGI_NUMARASI;
    property FAX: WideString read Get_FAX write Set_FAX;
    property POSTAKODU: WideString read Get_POSTAKODU write Set_POSTAKODU;
    property DETAY_KODU: Integer read Get_DETAY_KODU write Set_DETAY_KODU;
    property NAKLIYE_KATSAYISI: Double read Get_NAKLIYE_KATSAYISI write Set_NAKLIYE_KATSAYISI;
    property RISK_SINIRI: Double read Get_RISK_SINIRI write Set_RISK_SINIRI;
    property TEMINATI: Double read Get_TEMINATI write Set_TEMINATI;
    property CARISK: Double read Get_CARISK write Set_CARISK;
    property CCRISK: Double read Get_CCRISK write Set_CCRISK;
    property SARISK: Double read Get_SARISK write Set_SARISK;
    property SCRISK: Double read Get_SCRISK write Set_SCRISK;
    property CM_BORCT: Double read Get_CM_BORCT write Set_CM_BORCT;
    property CM_ALACT: Double read Get_CM_ALACT write Set_CM_ALACT;
    property CM_RAP_TARIH: TDateTime read Get_CM_RAP_TARIH write Set_CM_RAP_TARIH;
    property KOSULKODU: WideString read Get_KOSULKODU write Set_KOSULKODU;
    property ISKONTO_ORANI: Double read Get_ISKONTO_ORANI write Set_ISKONTO_ORANI;
    property VADE_GUNU: Integer read Get_VADE_GUNU write Set_VADE_GUNU;
    property LISTE_FIATI: Integer read Get_LISTE_FIATI write Set_LISTE_FIATI;
    property ACIK1: WideString read Get_ACIK1 write Set_ACIK1;
    property ACIK2: WideString read Get_ACIK2 write Set_ACIK2;
    property ACIK3: WideString read Get_ACIK3 write Set_ACIK3;
    property M_KOD: WideString read Get_M_KOD write Set_M_KOD;
    property DOVIZ_TIPI: Integer read Get_DOVIZ_TIPI write Set_DOVIZ_TIPI;
    property DOVIZ_TURU: Integer read Get_DOVIZ_TURU write Set_DOVIZ_TURU;
    property HESAPTUTMASEKLI: WideString read Get_HESAPTUTMASEKLI write Set_HESAPTUTMASEKLI;
    property DOVIZLIMI: WideString read Get_DOVIZLIMI write Set_DOVIZLIMI;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property LOKALDEPO: Integer read Get_LOKALDEPO write Set_LOKALDEPO;
    property EMAIL: WideString read Get_EMAIL write Set_EMAIL;
    property WEB: WideString read Get_WEB write Set_WEB;
    property KURFARKIBORC: WideString read Get_KURFARKIBORC write Set_KURFARKIBORC;
    property KURFARKIALAC: WideString read Get_KURFARKIALAC write Set_KURFARKIALAC;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property B_Yedek1: Integer read Get_B_Yedek1 write Set_B_Yedek1;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property L_Yedek1: Integer read Get_L_Yedek1 write Set_L_Yedek1;
    property FIYATGRUBU: WideString read Get_FIYATGRUBU write Set_FIYATGRUBU;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property ODEMETIPI: Integer read Get_ODEMETIPI write Set_ODEMETIPI;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property MUSTERIBAZIKDV: WideString read Get_MUSTERIBAZIKDV write Set_MUSTERIBAZIKDV;
    property AGIRLIK_ISK: Double read Get_AGIRLIK_ISK write Set_AGIRLIK_ISK;
  end;

// *********************************************************************//
// DispIntf:  ICariTemelBilgiDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB7420DC-9C87-4810-B460-767A13067212}
// *********************************************************************//
  ICariTemelBilgiDisp = dispinterface
    ['{EB7420DC-9C87-4810-B460-767A13067212}']
    property Sube_Kodu: Integer dispid 301;
    property ISLETME_KODU: Integer dispid 302;
    property CARI_KOD: WideString dispid 303;
    property CARI_TEL: WideString dispid 304;
    property CARI_IL: WideString dispid 305;
    property ULKE_KODU: WideString dispid 306;
    property CARI_ISIM: WideString dispid 307;
    property CARI_TIP: WideString dispid 308;
    property Grup_Kodu: WideString dispid 309;
    property RAPOR_KODU1: WideString dispid 310;
    property RAPOR_KODU2: WideString dispid 311;
    property RAPOR_KODU3: WideString dispid 312;
    property RAPOR_KODU4: WideString dispid 313;
    property RAPOR_KODU5: WideString dispid 314;
    property CARI_ADRES: WideString dispid 315;
    property CARI_ILCE: WideString dispid 316;
    property VERGI_DAIRESI: WideString dispid 317;
    property VERGI_NUMARASI: WideString dispid 318;
    property FAX: WideString dispid 319;
    property POSTAKODU: WideString dispid 320;
    property DETAY_KODU: Integer dispid 321;
    property NAKLIYE_KATSAYISI: Double dispid 322;
    property RISK_SINIRI: Double dispid 323;
    property TEMINATI: Double dispid 324;
    property CARISK: Double dispid 325;
    property CCRISK: Double dispid 326;
    property SARISK: Double dispid 327;
    property SCRISK: Double dispid 328;
    property CM_BORCT: Double dispid 329;
    property CM_ALACT: Double dispid 330;
    property CM_RAP_TARIH: TDateTime dispid 331;
    property KOSULKODU: WideString dispid 332;
    property ISKONTO_ORANI: Double dispid 333;
    property VADE_GUNU: Integer dispid 334;
    property LISTE_FIATI: Integer dispid 335;
    property ACIK1: WideString dispid 336;
    property ACIK2: WideString dispid 337;
    property ACIK3: WideString dispid 338;
    property M_KOD: WideString dispid 339;
    property DOVIZ_TIPI: Integer dispid 340;
    property DOVIZ_TURU: Integer dispid 341;
    property HESAPTUTMASEKLI: WideString dispid 342;
    property DOVIZLIMI: WideString dispid 343;
    property Update_Kodu: WideString dispid 344;
    property Plasiyer_Kodu: WideString dispid 345;
    property LOKALDEPO: Integer dispid 346;
    property EMAIL: WideString dispid 347;
    property WEB: WideString dispid 348;
    property KURFARKIBORC: WideString dispid 349;
    property KURFARKIALAC: WideString dispid 350;
    property S_Yedek1: WideString dispid 351;
    property S_Yedek2: WideString dispid 352;
    property F_Yedek1: Double dispid 353;
    property F_Yedek2: Double dispid 354;
    property C_Yedek1: WideString dispid 355;
    property C_Yedek2: WideString dispid 356;
    property B_Yedek1: Integer dispid 357;
    property I_Yedek1: Integer dispid 358;
    property L_Yedek1: Integer dispid 359;
    property FIYATGRUBU: WideString dispid 360;
    property KayitYapanKul: WideString dispid 361;
    property KayitTarihi: TDateTime dispid 362;
    property DuzeltmeYapanKul: WideString dispid 363;
    property DuzeltmeTarihi: TDateTime dispid 364;
    property ODEMETIPI: Integer dispid 365;
    property OnayTipi: WideString dispid 366;
    property OnayNum: Integer dispid 367;
    property MUSTERIBAZIKDV: WideString dispid 368;
    property AGIRLIK_ISK: Double dispid 369;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: ICariEkBilgi
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {05C1EF45-72D8-4102-A61B-B9A17A8B3999}
// *********************************************************************//
  ICariEkBilgi = interface(IMerkez)
    ['{05C1EF45-72D8-4102-A61B-B9A17A8B3999}']
    function Get_CARI_KOD: WideString; safecall;
    procedure Set_CARI_KOD(const Value: WideString); safecall;
    function Get_KayitTarihi: TDateTime; safecall;
    procedure Set_KayitTarihi(Value: TDateTime); safecall;
    function Get_KayitYapanKul: WideString; safecall;
    procedure Set_KayitYapanKul(const Value: WideString); safecall;
    function Get_DuzeltmeTarihi: TDateTime; safecall;
    procedure Set_DuzeltmeTarihi(Value: TDateTime); safecall;
    function Get_DuzeltmeYapanKul: WideString; safecall;
    procedure Set_DuzeltmeYapanKul(const Value: WideString); safecall;
    function Get_Kull1N: Double; safecall;
    procedure Set_Kull1N(Value: Double); safecall;
    function Get_Kull2N: Double; safecall;
    procedure Set_Kull2N(Value: Double); safecall;
    function Get_Kull3N: Double; safecall;
    procedure Set_Kull3N(Value: Double); safecall;
    function Get_Kull4N: Double; safecall;
    procedure Set_Kull4N(Value: Double); safecall;
    function Get_Kull5N: Double; safecall;
    procedure Set_Kull5N(Value: Double); safecall;
    function Get_Kull6N: Double; safecall;
    procedure Set_Kull6N(Value: Double); safecall;
    function Get_Kull7N: Double; safecall;
    procedure Set_Kull7N(Value: Double); safecall;
    function Get_Kull8N: Double; safecall;
    procedure Set_Kull8N(Value: Double); safecall;
    function Get_Kull1S: WideString; safecall;
    procedure Set_Kull1S(const Value: WideString); safecall;
    function Get_Kull2S: WideString; safecall;
    procedure Set_Kull2S(const Value: WideString); safecall;
    function Get_Kull3S: WideString; safecall;
    procedure Set_Kull3S(const Value: WideString); safecall;
    function Get_Kull4S: WideString; safecall;
    procedure Set_Kull4S(const Value: WideString); safecall;
    function Get_Kull5S: WideString; safecall;
    procedure Set_Kull5S(const Value: WideString); safecall;
    function Get_Kull6S: WideString; safecall;
    procedure Set_Kull6S(const Value: WideString); safecall;
    function Get_Kull7S: WideString; safecall;
    procedure Set_Kull7S(const Value: WideString); safecall;
    function Get_Kull8S: WideString; safecall;
    procedure Set_Kull8S(const Value: WideString); safecall;
    function Get_SALES_VOLUME: Double; safecall;
    procedure Set_SALES_VOLUME(Value: Double); safecall;
    function Get_PRIM: Double; safecall;
    procedure Set_PRIM(Value: Double); safecall;
    function Get_CIRO_TARIHI: WideString; safecall;
    procedure Set_CIRO_TARIHI(const Value: WideString); safecall;
    function Get_ESKI_YENI: WideString; safecall;
    procedure Set_ESKI_YENI(const Value: WideString); safecall;
    function Get_S_Yedek1: WideString; safecall;
    procedure Set_S_Yedek1(const Value: WideString); safecall;
    function Get_S_Yedek2: WideString; safecall;
    procedure Set_S_Yedek2(const Value: WideString); safecall;
    function Get_F_Yedek1: Double; safecall;
    procedure Set_F_Yedek1(Value: Double); safecall;
    function Get_F_Yedek2: Double; safecall;
    procedure Set_F_Yedek2(Value: Double); safecall;
    function Get_C_Yedek1: WideString; safecall;
    procedure Set_C_Yedek1(const Value: WideString); safecall;
    function Get_C_Yedek2: WideString; safecall;
    procedure Set_C_Yedek2(const Value: WideString); safecall;
    function Get_B_Yedek1: Integer; safecall;
    procedure Set_B_Yedek1(Value: Integer); safecall;
    function Get_I_Yedek1: Integer; safecall;
    procedure Set_I_Yedek1(Value: Integer); safecall;
    function Get_L_Yedek1: Integer; safecall;
    procedure Set_L_Yedek1(Value: Integer); safecall;
    function Get_ODEKOD: WideString; safecall;
    procedure Set_ODEKOD(const Value: WideString); safecall;
    property CARI_KOD: WideString read Get_CARI_KOD write Set_CARI_KOD;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property Kull1N: Double read Get_Kull1N write Set_Kull1N;
    property Kull2N: Double read Get_Kull2N write Set_Kull2N;
    property Kull3N: Double read Get_Kull3N write Set_Kull3N;
    property Kull4N: Double read Get_Kull4N write Set_Kull4N;
    property Kull5N: Double read Get_Kull5N write Set_Kull5N;
    property Kull6N: Double read Get_Kull6N write Set_Kull6N;
    property Kull7N: Double read Get_Kull7N write Set_Kull7N;
    property Kull8N: Double read Get_Kull8N write Set_Kull8N;
    property Kull1S: WideString read Get_Kull1S write Set_Kull1S;
    property Kull2S: WideString read Get_Kull2S write Set_Kull2S;
    property Kull3S: WideString read Get_Kull3S write Set_Kull3S;
    property Kull4S: WideString read Get_Kull4S write Set_Kull4S;
    property Kull5S: WideString read Get_Kull5S write Set_Kull5S;
    property Kull6S: WideString read Get_Kull6S write Set_Kull6S;
    property Kull7S: WideString read Get_Kull7S write Set_Kull7S;
    property Kull8S: WideString read Get_Kull8S write Set_Kull8S;
    property SALES_VOLUME: Double read Get_SALES_VOLUME write Set_SALES_VOLUME;
    property PRIM: Double read Get_PRIM write Set_PRIM;
    property CIRO_TARIHI: WideString read Get_CIRO_TARIHI write Set_CIRO_TARIHI;
    property ESKI_YENI: WideString read Get_ESKI_YENI write Set_ESKI_YENI;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property B_Yedek1: Integer read Get_B_Yedek1 write Set_B_Yedek1;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property L_Yedek1: Integer read Get_L_Yedek1 write Set_L_Yedek1;
    property ODEKOD: WideString read Get_ODEKOD write Set_ODEKOD;
  end;

// *********************************************************************//
// DispIntf:  ICariEkBilgiDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {05C1EF45-72D8-4102-A61B-B9A17A8B3999}
// *********************************************************************//
  ICariEkBilgiDisp = dispinterface
    ['{05C1EF45-72D8-4102-A61B-B9A17A8B3999}']
    property CARI_KOD: WideString dispid 301;
    property KayitTarihi: TDateTime dispid 302;
    property KayitYapanKul: WideString dispid 303;
    property DuzeltmeTarihi: TDateTime dispid 304;
    property DuzeltmeYapanKul: WideString dispid 305;
    property Kull1N: Double dispid 306;
    property Kull2N: Double dispid 307;
    property Kull3N: Double dispid 308;
    property Kull4N: Double dispid 309;
    property Kull5N: Double dispid 310;
    property Kull6N: Double dispid 311;
    property Kull7N: Double dispid 312;
    property Kull8N: Double dispid 313;
    property Kull1S: WideString dispid 314;
    property Kull2S: WideString dispid 315;
    property Kull3S: WideString dispid 316;
    property Kull4S: WideString dispid 317;
    property Kull5S: WideString dispid 318;
    property Kull6S: WideString dispid 319;
    property Kull7S: WideString dispid 320;
    property Kull8S: WideString dispid 321;
    property SALES_VOLUME: Double dispid 322;
    property PRIM: Double dispid 323;
    property CIRO_TARIHI: WideString dispid 324;
    property ESKI_YENI: WideString dispid 325;
    property S_Yedek1: WideString dispid 326;
    property S_Yedek2: WideString dispid 327;
    property F_Yedek1: Double dispid 328;
    property F_Yedek2: Double dispid 329;
    property C_Yedek1: WideString dispid 330;
    property C_Yedek2: WideString dispid 331;
    property B_Yedek1: Integer dispid 332;
    property I_Yedek1: Integer dispid 333;
    property L_Yedek1: Integer dispid 334;
    property ODEKOD: WideString dispid 335;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IStok
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AEC53AC8-6647-4C14-8FDD-AA7461F0C63B}
// *********************************************************************//
  IStok = interface(IData)
    ['{AEC53AC8-6647-4C14-8FDD-AA7461F0C63B}']
    function TemelBilgi: IStokTemelBilgi; safecall;
    function EkBilgi: IStokEkBilgi; safecall;
  end;

// *********************************************************************//
// DispIntf:  IStokDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AEC53AC8-6647-4C14-8FDD-AA7461F0C63B}
// *********************************************************************//
  IStokDisp = dispinterface
    ['{AEC53AC8-6647-4C14-8FDD-AA7461F0C63B}']
    function TemelBilgi: IStokTemelBilgi; dispid 401;
    function EkBilgi: IStokEkBilgi; dispid 402;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IStokTemelBilgi
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {25F6F0BC-BA98-4F9C-842D-A88AE86C405A}
// *********************************************************************//
  IStokTemelBilgi = interface(IMerkez)
    ['{25F6F0BC-BA98-4F9C-842D-A88AE86C405A}']
    function Get_Stok_Kodu: WideString; safecall;
    procedure Set_Stok_Kodu(const Value: WideString); safecall;
    function Get_Sube_Kodu: Integer; safecall;
    procedure Set_Sube_Kodu(Value: Integer); safecall;
    function Get_ISLETME_KODU: Integer; safecall;
    procedure Set_ISLETME_KODU(Value: Integer); safecall;
    function Get_Stok_Adi: WideString; safecall;
    procedure Set_Stok_Adi(const Value: WideString); safecall;
    function Get_Uretici_Kodu: WideString; safecall;
    procedure Set_Uretici_Kodu(const Value: WideString); safecall;
    function Get_Grup_Kodu: WideString; safecall;
    procedure Set_Grup_Kodu(const Value: WideString); safecall;
    function Get_Kod_1: WideString; safecall;
    procedure Set_Kod_1(const Value: WideString); safecall;
    function Get_Kod_2: WideString; safecall;
    procedure Set_Kod_2(const Value: WideString); safecall;
    function Get_Kod_3: WideString; safecall;
    procedure Set_Kod_3(const Value: WideString); safecall;
    function Get_Kod_4: WideString; safecall;
    procedure Set_Kod_4(const Value: WideString); safecall;
    function Get_Kod_5: WideString; safecall;
    procedure Set_Kod_5(const Value: WideString); safecall;
    function Get_Satici_Kodu: WideString; safecall;
    procedure Set_Satici_Kodu(const Value: WideString); safecall;
    function Get_Olcu_Br1: WideString; safecall;
    procedure Set_Olcu_Br1(const Value: WideString); safecall;
    function Get_Olcu_Br2: WideString; safecall;
    procedure Set_Olcu_Br2(const Value: WideString); safecall;
    function Get_Pay_1: Double; safecall;
    procedure Set_Pay_1(Value: Double); safecall;
    function Get_Payda_1: Double; safecall;
    procedure Set_Payda_1(Value: Double); safecall;
    function Get_Olcu_Br3: WideString; safecall;
    procedure Set_Olcu_Br3(const Value: WideString); safecall;
    function Get_Pay2: Double; safecall;
    procedure Set_Pay2(Value: Double); safecall;
    function Get_Payda2: Double; safecall;
    procedure Set_Payda2(Value: Double); safecall;
    function Get_Fiat_birimi: WideString; safecall;
    procedure Set_Fiat_birimi(const Value: WideString); safecall;
    function Get_Azami_Stok: Double; safecall;
    procedure Set_Azami_Stok(Value: Double); safecall;
    function Get_Asgari_Stok: Double; safecall;
    procedure Set_Asgari_Stok(Value: Double); safecall;
    function Get_Temin_Suresi: Double; safecall;
    procedure Set_Temin_Suresi(Value: Double); safecall;
    function Get_Kul_Mik: Double; safecall;
    procedure Set_Kul_Mik(Value: Double); safecall;
    function Get_Risk_Suresi: Integer; safecall;
    procedure Set_Risk_Suresi(Value: Integer); safecall;
    function Get_Zaman_Birimi: WideString; safecall;
    procedure Set_Zaman_Birimi(const Value: WideString); safecall;
    function Get_Satis_Fiat1: Double; safecall;
    procedure Set_Satis_Fiat1(Value: Double); safecall;
    function Get_Satis_Fiat2: Double; safecall;
    procedure Set_Satis_Fiat2(Value: Double); safecall;
    function Get_Satis_Fiat3: Double; safecall;
    procedure Set_Satis_Fiat3(Value: Double); safecall;
    function Get_Satis_Fiat4: Double; safecall;
    procedure Set_Satis_Fiat4(Value: Double); safecall;
    function Get_Sat_Dov_Tip: Integer; safecall;
    procedure Set_Sat_Dov_Tip(Value: Integer); safecall;
    function Get_Dov_Alis_Fiat: Double; safecall;
    procedure Set_Dov_Alis_Fiat(Value: Double); safecall;
    function Get_Dov_Satis_Fiat: Double; safecall;
    procedure Set_Dov_Satis_Fiat(Value: Double); safecall;
    function Get_Dov_Mal_Fiat: Double; safecall;
    procedure Set_Dov_Mal_Fiat(Value: Double); safecall;
    function Get_Muh_DetayKodu: Integer; safecall;
    procedure Set_Muh_DetayKodu(Value: Integer); safecall;
    function Get_Birim_Agirlik: Double; safecall;
    procedure Set_Birim_Agirlik(Value: Double); safecall;
    function Get_Nakliyet_Tut: Double; safecall;
    procedure Set_Nakliyet_Tut(Value: Double); safecall;
    function Get_KDV_Orani: Double; safecall;
    procedure Set_KDV_Orani(Value: Double); safecall;
    function Get_Alis_Dov_Tip: Integer; safecall;
    procedure Set_Alis_Dov_Tip(Value: Integer); safecall;
    function Get_DEPO_KODU: Integer; safecall;
    procedure Set_DEPO_KODU(Value: Integer); safecall;
    function Get_DOV_TUR: Integer; safecall;
    procedure Set_DOV_TUR(Value: Integer); safecall;
    function Get_Uret_Olcu_Br: Integer; safecall;
    procedure Set_Uret_Olcu_Br(Value: Integer); safecall;
    function Get_Bilesenmi: WideString; safecall;
    procedure Set_Bilesenmi(const Value: WideString); safecall;
    function Get_Mamulmu: WideString; safecall;
    procedure Set_Mamulmu(const Value: WideString); safecall;
    function Get_Formul_Toplami: Double; safecall;
    procedure Set_Formul_Toplami(Value: Double); safecall;
    function Get_Update_Kodu: WideString; safecall;
    procedure Set_Update_Kodu(const Value: WideString); safecall;
    function Get_Max_Iskonto: Double; safecall;
    procedure Set_Max_Iskonto(Value: Double); safecall;
    function Get_Eczaci_Kari: Double; safecall;
    procedure Set_Eczaci_Kari(Value: Double); safecall;
    function Get_Miktar: Double; safecall;
    procedure Set_Miktar(Value: Double); safecall;
    function Get_Mal_Fazlasi: Double; safecall;
    procedure Set_Mal_Fazlasi(Value: Double); safecall;
    function Get_Kdv_Tenzil_Oran: Double; safecall;
    procedure Set_Kdv_Tenzil_Oran(Value: Double); safecall;
    function Get_Kilit: WideString; safecall;
    procedure Set_Kilit(const Value: WideString); safecall;
    function Get_Onceki_Kod: WideString; safecall;
    procedure Set_Onceki_Kod(const Value: WideString); safecall;
    function Get_Sonraki_Kod: WideString; safecall;
    procedure Set_Sonraki_Kod(const Value: WideString); safecall;
    function Get_Barkod1: WideString; safecall;
    procedure Set_Barkod1(const Value: WideString); safecall;
    function Get_Barkod2: WideString; safecall;
    procedure Set_Barkod2(const Value: WideString); safecall;
    function Get_Barkod3: WideString; safecall;
    procedure Set_Barkod3(const Value: WideString); safecall;
    function Get_Alis_Kdv_Kodu: Double; safecall;
    procedure Set_Alis_Kdv_Kodu(Value: Double); safecall;
    function Get_Alis_Fiat1: Double; safecall;
    procedure Set_Alis_Fiat1(Value: Double); safecall;
    function Get_Alis_Fiat2: Double; safecall;
    procedure Set_Alis_Fiat2(Value: Double); safecall;
    function Get_Alis_Fiat3: Double; safecall;
    procedure Set_Alis_Fiat3(Value: Double); safecall;
    function Get_Alis_Fiat4: Double; safecall;
    procedure Set_Alis_Fiat4(Value: Double); safecall;
    function Get_Lot_Size: Double; safecall;
    procedure Set_Lot_Size(Value: Double); safecall;
    function Get_Min_Sip_Miktar: Double; safecall;
    procedure Set_Min_Sip_Miktar(Value: Double); safecall;
    function Get_Sabit_Sip_Aralik: Integer; safecall;
    procedure Set_Sabit_Sip_Aralik(Value: Integer); safecall;
    function Get_Sip_Politikasi: WideString; safecall;
    procedure Set_Sip_Politikasi(const Value: WideString); safecall;
    function Get_Ozellik_Kodu1: Integer; safecall;
    procedure Set_Ozellik_Kodu1(Value: Integer); safecall;
    function Get_Ozellik_Kodu2: Integer; safecall;
    procedure Set_Ozellik_Kodu2(Value: Integer); safecall;
    function Get_Ozellik_Kodu3: Integer; safecall;
    procedure Set_Ozellik_Kodu3(Value: Integer); safecall;
    function Get_Ozellik_Kodu4: Integer; safecall;
    procedure Set_Ozellik_Kodu4(Value: Integer); safecall;
    function Get_Ozellik_Kodu5: Integer; safecall;
    procedure Set_Ozellik_Kodu5(Value: Integer); safecall;
    function Get_Opsiyon_Kodu1: Integer; safecall;
    procedure Set_Opsiyon_Kodu1(Value: Integer); safecall;
    function Get_Opsiyon_Kodu2: Integer; safecall;
    procedure Set_Opsiyon_Kodu2(Value: Integer); safecall;
    function Get_Opsiyon_Kodu3: Integer; safecall;
    procedure Set_Opsiyon_Kodu3(Value: Integer); safecall;
    function Get_Opsiyon_Kodu4: Integer; safecall;
    procedure Set_Opsiyon_Kodu4(Value: Integer); safecall;
    function Get_Opsiyon_Kodu5: Integer; safecall;
    procedure Set_Opsiyon_Kodu5(Value: Integer); safecall;
    function Get_Bilesen_Op_Kodu: Integer; safecall;
    procedure Set_Bilesen_Op_Kodu(Value: Integer); safecall;
    function Get_Sip_Ver_Mal: Double; safecall;
    procedure Set_Sip_Ver_Mal(Value: Double); safecall;
    function Get_Elde_Bul_Mal: Double; safecall;
    procedure Set_Elde_Bul_Mal(Value: Double); safecall;
    function Get_Yil_Tah_Kul_Mik: Double; safecall;
    procedure Set_Yil_Tah_Kul_Mik(Value: Double); safecall;
    function Get_Ekon_Sip_Miktar: Double; safecall;
    procedure Set_Ekon_Sip_Miktar(Value: Double); safecall;
    function Get_Eski_Recete: WideString; safecall;
    procedure Set_Eski_Recete(const Value: WideString); safecall;
    function Get_Otomatik_Uretim: WideString; safecall;
    procedure Set_Otomatik_Uretim(const Value: WideString); safecall;
    function Get_Alfkod: WideString; safecall;
    procedure Set_Alfkod(const Value: WideString); safecall;
    function Get_SafKod: WideString; safecall;
    procedure Set_SafKod(const Value: WideString); safecall;
    function Get_Kodturu: WideString; safecall;
    procedure Set_Kodturu(const Value: WideString); safecall;
    function Get_S_Yedek1: WideString; safecall;
    procedure Set_S_Yedek1(const Value: WideString); safecall;
    function Get_S_Yedek2: WideString; safecall;
    procedure Set_S_Yedek2(const Value: WideString); safecall;
    function Get_F_Yedek3: Double; safecall;
    procedure Set_F_Yedek3(Value: Double); safecall;
    function Get_F_Yedek4: Double; safecall;
    procedure Set_F_Yedek4(Value: Double); safecall;
    function Get_C_Yedek5: WideString; safecall;
    procedure Set_C_Yedek5(const Value: WideString); safecall;
    function Get_C_Yedek6: WideString; safecall;
    procedure Set_C_Yedek6(const Value: WideString); safecall;
    function Get_B_Yedek7: Integer; safecall;
    procedure Set_B_Yedek7(Value: Integer); safecall;
    function Get_I_Yedek8: Integer; safecall;
    procedure Set_I_Yedek8(Value: Integer); safecall;
    function Get_L_Yedek9: Integer; safecall;
    procedure Set_L_Yedek9(Value: Integer); safecall;
    function Get_D_YEDEK10: TDateTime; safecall;
    procedure Set_D_YEDEK10(Value: TDateTime); safecall;
    function Get_Giris_Seri: WideString; safecall;
    procedure Set_Giris_Seri(const Value: WideString); safecall;
    function Get_Cikis_Seri: WideString; safecall;
    procedure Set_Cikis_Seri(const Value: WideString); safecall;
    function Get_Seri_Bak: WideString; safecall;
    procedure Set_Seri_Bak(const Value: WideString); safecall;
    function Get_Seri_Mik: WideString; safecall;
    procedure Set_Seri_Mik(const Value: WideString); safecall;
    function Get_Seri_Gir_Ot: WideString; safecall;
    procedure Set_Seri_Gir_Ot(const Value: WideString); safecall;
    function Get_Seri_Cik_Ot: WideString; safecall;
    procedure Set_Seri_Cik_Ot(const Value: WideString); safecall;
    function Get_Seri_Baslangic: WideString; safecall;
    procedure Set_Seri_Baslangic(const Value: WideString); safecall;
    function Get_FiyatKodu: WideString; safecall;
    procedure Set_FiyatKodu(const Value: WideString); safecall;
    function Get_FiyatSirasi: Integer; safecall;
    procedure Set_FiyatSirasi(Value: Integer); safecall;
    function Get_PLANLANACAK: WideString; safecall;
    procedure Set_PLANLANACAK(const Value: WideString); safecall;
    function Get_LOT_SIZECUSTOMER: Double; safecall;
    procedure Set_LOT_SIZECUSTOMER(Value: Double); safecall;
    function Get_MIN_SIP_MIKTARCUSTOMER: Double; safecall;
    procedure Set_MIN_SIP_MIKTARCUSTOMER(Value: Double); safecall;
    function Get_GUMRUKTARIFEKODU: WideString; safecall;
    procedure Set_GUMRUKTARIFEKODU(const Value: WideString); safecall;
    function Get_ABCKODU: WideString; safecall;
    procedure Set_ABCKODU(const Value: WideString); safecall;
    function Get_PERFORMANSKODU: WideString; safecall;
    procedure Set_PERFORMANSKODU(const Value: WideString); safecall;
    function Get_SATICISIPKILIT: WideString; safecall;
    procedure Set_SATICISIPKILIT(const Value: WideString); safecall;
    function Get_MUSTERISIPKILIT: WideString; safecall;
    procedure Set_MUSTERISIPKILIT(const Value: WideString); safecall;
    function Get_SATINALMAKILIT: WideString; safecall;
    procedure Set_SATINALMAKILIT(const Value: WideString); safecall;
    function Get_SatisKilit: WideString; safecall;
    procedure Set_SatisKilit(const Value: WideString); safecall;
    function Get_EN: Double; safecall;
    procedure Set_EN(Value: Double); safecall;
    function Get_BOY: Double; safecall;
    procedure Set_BOY(Value: Double); safecall;
    function Get_GENISLIK: Double; safecall;
    procedure Set_GENISLIK(Value: Double); safecall;
    function Get_SIPLIMITVAR: WideString; safecall;
    procedure Set_SIPLIMITVAR(const Value: WideString); safecall;
    function Get_SONSTOKKODU: WideString; safecall;
    procedure Set_SONSTOKKODU(const Value: WideString); safecall;
    function Get_OnayTipi: WideString; safecall;
    procedure Set_OnayTipi(const Value: WideString); safecall;
    function Get_OnayNum: Integer; safecall;
    procedure Set_OnayNum(Value: Integer); safecall;
    function Get_FIKTIF_MAM: WideString; safecall;
    procedure Set_FIKTIF_MAM(const Value: WideString); safecall;
    function Get_YAPILANDIR: WideString; safecall;
    procedure Set_YAPILANDIR(const Value: WideString); safecall;
    function Get_SBOMVARMI: WideString; safecall;
    procedure Set_SBOMVARMI(const Value: WideString); safecall;
    function Get_BAGLISTOKKOD: WideString; safecall;
    procedure Set_BAGLISTOKKOD(const Value: WideString); safecall;
    function Get_YapKod: WideString; safecall;
    procedure Set_YapKod(const Value: WideString); safecall;
    property Stok_Kodu: WideString read Get_Stok_Kodu write Set_Stok_Kodu;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property ISLETME_KODU: Integer read Get_ISLETME_KODU write Set_ISLETME_KODU;
    property Stok_Adi: WideString read Get_Stok_Adi write Set_Stok_Adi;
    property Uretici_Kodu: WideString read Get_Uretici_Kodu write Set_Uretici_Kodu;
    property Grup_Kodu: WideString read Get_Grup_Kodu write Set_Grup_Kodu;
    property Kod_1: WideString read Get_Kod_1 write Set_Kod_1;
    property Kod_2: WideString read Get_Kod_2 write Set_Kod_2;
    property Kod_3: WideString read Get_Kod_3 write Set_Kod_3;
    property Kod_4: WideString read Get_Kod_4 write Set_Kod_4;
    property Kod_5: WideString read Get_Kod_5 write Set_Kod_5;
    property Satici_Kodu: WideString read Get_Satici_Kodu write Set_Satici_Kodu;
    property Olcu_Br1: WideString read Get_Olcu_Br1 write Set_Olcu_Br1;
    property Olcu_Br2: WideString read Get_Olcu_Br2 write Set_Olcu_Br2;
    property Pay_1: Double read Get_Pay_1 write Set_Pay_1;
    property Payda_1: Double read Get_Payda_1 write Set_Payda_1;
    property Olcu_Br3: WideString read Get_Olcu_Br3 write Set_Olcu_Br3;
    property Pay2: Double read Get_Pay2 write Set_Pay2;
    property Payda2: Double read Get_Payda2 write Set_Payda2;
    property Fiat_birimi: WideString read Get_Fiat_birimi write Set_Fiat_birimi;
    property Azami_Stok: Double read Get_Azami_Stok write Set_Azami_Stok;
    property Asgari_Stok: Double read Get_Asgari_Stok write Set_Asgari_Stok;
    property Temin_Suresi: Double read Get_Temin_Suresi write Set_Temin_Suresi;
    property Kul_Mik: Double read Get_Kul_Mik write Set_Kul_Mik;
    property Risk_Suresi: Integer read Get_Risk_Suresi write Set_Risk_Suresi;
    property Zaman_Birimi: WideString read Get_Zaman_Birimi write Set_Zaman_Birimi;
    property Satis_Fiat1: Double read Get_Satis_Fiat1 write Set_Satis_Fiat1;
    property Satis_Fiat2: Double read Get_Satis_Fiat2 write Set_Satis_Fiat2;
    property Satis_Fiat3: Double read Get_Satis_Fiat3 write Set_Satis_Fiat3;
    property Satis_Fiat4: Double read Get_Satis_Fiat4 write Set_Satis_Fiat4;
    property Sat_Dov_Tip: Integer read Get_Sat_Dov_Tip write Set_Sat_Dov_Tip;
    property Dov_Alis_Fiat: Double read Get_Dov_Alis_Fiat write Set_Dov_Alis_Fiat;
    property Dov_Satis_Fiat: Double read Get_Dov_Satis_Fiat write Set_Dov_Satis_Fiat;
    property Dov_Mal_Fiat: Double read Get_Dov_Mal_Fiat write Set_Dov_Mal_Fiat;
    property Muh_DetayKodu: Integer read Get_Muh_DetayKodu write Set_Muh_DetayKodu;
    property Birim_Agirlik: Double read Get_Birim_Agirlik write Set_Birim_Agirlik;
    property Nakliyet_Tut: Double read Get_Nakliyet_Tut write Set_Nakliyet_Tut;
    property KDV_Orani: Double read Get_KDV_Orani write Set_KDV_Orani;
    property Alis_Dov_Tip: Integer read Get_Alis_Dov_Tip write Set_Alis_Dov_Tip;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property DOV_TUR: Integer read Get_DOV_TUR write Set_DOV_TUR;
    property Uret_Olcu_Br: Integer read Get_Uret_Olcu_Br write Set_Uret_Olcu_Br;
    property Bilesenmi: WideString read Get_Bilesenmi write Set_Bilesenmi;
    property Mamulmu: WideString read Get_Mamulmu write Set_Mamulmu;
    property Formul_Toplami: Double read Get_Formul_Toplami write Set_Formul_Toplami;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Max_Iskonto: Double read Get_Max_Iskonto write Set_Max_Iskonto;
    property Eczaci_Kari: Double read Get_Eczaci_Kari write Set_Eczaci_Kari;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property Mal_Fazlasi: Double read Get_Mal_Fazlasi write Set_Mal_Fazlasi;
    property Kdv_Tenzil_Oran: Double read Get_Kdv_Tenzil_Oran write Set_Kdv_Tenzil_Oran;
    property Kilit: WideString read Get_Kilit write Set_Kilit;
    property Onceki_Kod: WideString read Get_Onceki_Kod write Set_Onceki_Kod;
    property Sonraki_Kod: WideString read Get_Sonraki_Kod write Set_Sonraki_Kod;
    property Barkod1: WideString read Get_Barkod1 write Set_Barkod1;
    property Barkod2: WideString read Get_Barkod2 write Set_Barkod2;
    property Barkod3: WideString read Get_Barkod3 write Set_Barkod3;
    property Alis_Kdv_Kodu: Double read Get_Alis_Kdv_Kodu write Set_Alis_Kdv_Kodu;
    property Alis_Fiat1: Double read Get_Alis_Fiat1 write Set_Alis_Fiat1;
    property Alis_Fiat2: Double read Get_Alis_Fiat2 write Set_Alis_Fiat2;
    property Alis_Fiat3: Double read Get_Alis_Fiat3 write Set_Alis_Fiat3;
    property Alis_Fiat4: Double read Get_Alis_Fiat4 write Set_Alis_Fiat4;
    property Lot_Size: Double read Get_Lot_Size write Set_Lot_Size;
    property Min_Sip_Miktar: Double read Get_Min_Sip_Miktar write Set_Min_Sip_Miktar;
    property Sabit_Sip_Aralik: Integer read Get_Sabit_Sip_Aralik write Set_Sabit_Sip_Aralik;
    property Sip_Politikasi: WideString read Get_Sip_Politikasi write Set_Sip_Politikasi;
    property Ozellik_Kodu1: Integer read Get_Ozellik_Kodu1 write Set_Ozellik_Kodu1;
    property Ozellik_Kodu2: Integer read Get_Ozellik_Kodu2 write Set_Ozellik_Kodu2;
    property Ozellik_Kodu3: Integer read Get_Ozellik_Kodu3 write Set_Ozellik_Kodu3;
    property Ozellik_Kodu4: Integer read Get_Ozellik_Kodu4 write Set_Ozellik_Kodu4;
    property Ozellik_Kodu5: Integer read Get_Ozellik_Kodu5 write Set_Ozellik_Kodu5;
    property Opsiyon_Kodu1: Integer read Get_Opsiyon_Kodu1 write Set_Opsiyon_Kodu1;
    property Opsiyon_Kodu2: Integer read Get_Opsiyon_Kodu2 write Set_Opsiyon_Kodu2;
    property Opsiyon_Kodu3: Integer read Get_Opsiyon_Kodu3 write Set_Opsiyon_Kodu3;
    property Opsiyon_Kodu4: Integer read Get_Opsiyon_Kodu4 write Set_Opsiyon_Kodu4;
    property Opsiyon_Kodu5: Integer read Get_Opsiyon_Kodu5 write Set_Opsiyon_Kodu5;
    property Bilesen_Op_Kodu: Integer read Get_Bilesen_Op_Kodu write Set_Bilesen_Op_Kodu;
    property Sip_Ver_Mal: Double read Get_Sip_Ver_Mal write Set_Sip_Ver_Mal;
    property Elde_Bul_Mal: Double read Get_Elde_Bul_Mal write Set_Elde_Bul_Mal;
    property Yil_Tah_Kul_Mik: Double read Get_Yil_Tah_Kul_Mik write Set_Yil_Tah_Kul_Mik;
    property Ekon_Sip_Miktar: Double read Get_Ekon_Sip_Miktar write Set_Ekon_Sip_Miktar;
    property Eski_Recete: WideString read Get_Eski_Recete write Set_Eski_Recete;
    property Otomatik_Uretim: WideString read Get_Otomatik_Uretim write Set_Otomatik_Uretim;
    property Alfkod: WideString read Get_Alfkod write Set_Alfkod;
    property SafKod: WideString read Get_SafKod write Set_SafKod;
    property Kodturu: WideString read Get_Kodturu write Set_Kodturu;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek3: Double read Get_F_Yedek3 write Set_F_Yedek3;
    property F_Yedek4: Double read Get_F_Yedek4 write Set_F_Yedek4;
    property C_Yedek5: WideString read Get_C_Yedek5 write Set_C_Yedek5;
    property C_Yedek6: WideString read Get_C_Yedek6 write Set_C_Yedek6;
    property B_Yedek7: Integer read Get_B_Yedek7 write Set_B_Yedek7;
    property I_Yedek8: Integer read Get_I_Yedek8 write Set_I_Yedek8;
    property L_Yedek9: Integer read Get_L_Yedek9 write Set_L_Yedek9;
    property D_YEDEK10: TDateTime read Get_D_YEDEK10 write Set_D_YEDEK10;
    property Giris_Seri: WideString read Get_Giris_Seri write Set_Giris_Seri;
    property Cikis_Seri: WideString read Get_Cikis_Seri write Set_Cikis_Seri;
    property Seri_Bak: WideString read Get_Seri_Bak write Set_Seri_Bak;
    property Seri_Mik: WideString read Get_Seri_Mik write Set_Seri_Mik;
    property Seri_Gir_Ot: WideString read Get_Seri_Gir_Ot write Set_Seri_Gir_Ot;
    property Seri_Cik_Ot: WideString read Get_Seri_Cik_Ot write Set_Seri_Cik_Ot;
    property Seri_Baslangic: WideString read Get_Seri_Baslangic write Set_Seri_Baslangic;
    property FiyatKodu: WideString read Get_FiyatKodu write Set_FiyatKodu;
    property FiyatSirasi: Integer read Get_FiyatSirasi write Set_FiyatSirasi;
    property PLANLANACAK: WideString read Get_PLANLANACAK write Set_PLANLANACAK;
    property LOT_SIZECUSTOMER: Double read Get_LOT_SIZECUSTOMER write Set_LOT_SIZECUSTOMER;
    property MIN_SIP_MIKTARCUSTOMER: Double read Get_MIN_SIP_MIKTARCUSTOMER write Set_MIN_SIP_MIKTARCUSTOMER;
    property GUMRUKTARIFEKODU: WideString read Get_GUMRUKTARIFEKODU write Set_GUMRUKTARIFEKODU;
    property ABCKODU: WideString read Get_ABCKODU write Set_ABCKODU;
    property PERFORMANSKODU: WideString read Get_PERFORMANSKODU write Set_PERFORMANSKODU;
    property SATICISIPKILIT: WideString read Get_SATICISIPKILIT write Set_SATICISIPKILIT;
    property MUSTERISIPKILIT: WideString read Get_MUSTERISIPKILIT write Set_MUSTERISIPKILIT;
    property SATINALMAKILIT: WideString read Get_SATINALMAKILIT write Set_SATINALMAKILIT;
    property SatisKilit: WideString read Get_SatisKilit write Set_SatisKilit;
    property EN: Double read Get_EN write Set_EN;
    property BOY: Double read Get_BOY write Set_BOY;
    property GENISLIK: Double read Get_GENISLIK write Set_GENISLIK;
    property SIPLIMITVAR: WideString read Get_SIPLIMITVAR write Set_SIPLIMITVAR;
    property SONSTOKKODU: WideString read Get_SONSTOKKODU write Set_SONSTOKKODU;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property FIKTIF_MAM: WideString read Get_FIKTIF_MAM write Set_FIKTIF_MAM;
    property YAPILANDIR: WideString read Get_YAPILANDIR write Set_YAPILANDIR;
    property SBOMVARMI: WideString read Get_SBOMVARMI write Set_SBOMVARMI;
    property BAGLISTOKKOD: WideString read Get_BAGLISTOKKOD write Set_BAGLISTOKKOD;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
  end;

// *********************************************************************//
// DispIntf:  IStokTemelBilgiDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {25F6F0BC-BA98-4F9C-842D-A88AE86C405A}
// *********************************************************************//
  IStokTemelBilgiDisp = dispinterface
    ['{25F6F0BC-BA98-4F9C-842D-A88AE86C405A}']
    property Stok_Kodu: WideString dispid 301;
    property Sube_Kodu: Integer dispid 302;
    property ISLETME_KODU: Integer dispid 303;
    property Stok_Adi: WideString dispid 304;
    property Uretici_Kodu: WideString dispid 305;
    property Grup_Kodu: WideString dispid 306;
    property Kod_1: WideString dispid 307;
    property Kod_2: WideString dispid 308;
    property Kod_3: WideString dispid 309;
    property Kod_4: WideString dispid 310;
    property Kod_5: WideString dispid 311;
    property Satici_Kodu: WideString dispid 312;
    property Olcu_Br1: WideString dispid 313;
    property Olcu_Br2: WideString dispid 314;
    property Pay_1: Double dispid 315;
    property Payda_1: Double dispid 316;
    property Olcu_Br3: WideString dispid 317;
    property Pay2: Double dispid 318;
    property Payda2: Double dispid 319;
    property Fiat_birimi: WideString dispid 320;
    property Azami_Stok: Double dispid 321;
    property Asgari_Stok: Double dispid 322;
    property Temin_Suresi: Double dispid 323;
    property Kul_Mik: Double dispid 324;
    property Risk_Suresi: Integer dispid 325;
    property Zaman_Birimi: WideString dispid 326;
    property Satis_Fiat1: Double dispid 327;
    property Satis_Fiat2: Double dispid 328;
    property Satis_Fiat3: Double dispid 329;
    property Satis_Fiat4: Double dispid 330;
    property Sat_Dov_Tip: Integer dispid 331;
    property Dov_Alis_Fiat: Double dispid 332;
    property Dov_Satis_Fiat: Double dispid 333;
    property Dov_Mal_Fiat: Double dispid 334;
    property Muh_DetayKodu: Integer dispid 335;
    property Birim_Agirlik: Double dispid 336;
    property Nakliyet_Tut: Double dispid 337;
    property KDV_Orani: Double dispid 338;
    property Alis_Dov_Tip: Integer dispid 339;
    property DEPO_KODU: Integer dispid 340;
    property DOV_TUR: Integer dispid 341;
    property Uret_Olcu_Br: Integer dispid 342;
    property Bilesenmi: WideString dispid 343;
    property Mamulmu: WideString dispid 344;
    property Formul_Toplami: Double dispid 345;
    property Update_Kodu: WideString dispid 346;
    property Max_Iskonto: Double dispid 347;
    property Eczaci_Kari: Double dispid 348;
    property Miktar: Double dispid 349;
    property Mal_Fazlasi: Double dispid 350;
    property Kdv_Tenzil_Oran: Double dispid 351;
    property Kilit: WideString dispid 352;
    property Onceki_Kod: WideString dispid 353;
    property Sonraki_Kod: WideString dispid 354;
    property Barkod1: WideString dispid 355;
    property Barkod2: WideString dispid 356;
    property Barkod3: WideString dispid 357;
    property Alis_Kdv_Kodu: Double dispid 358;
    property Alis_Fiat1: Double dispid 359;
    property Alis_Fiat2: Double dispid 360;
    property Alis_Fiat3: Double dispid 361;
    property Alis_Fiat4: Double dispid 362;
    property Lot_Size: Double dispid 363;
    property Min_Sip_Miktar: Double dispid 364;
    property Sabit_Sip_Aralik: Integer dispid 365;
    property Sip_Politikasi: WideString dispid 366;
    property Ozellik_Kodu1: Integer dispid 367;
    property Ozellik_Kodu2: Integer dispid 368;
    property Ozellik_Kodu3: Integer dispid 369;
    property Ozellik_Kodu4: Integer dispid 370;
    property Ozellik_Kodu5: Integer dispid 371;
    property Opsiyon_Kodu1: Integer dispid 372;
    property Opsiyon_Kodu2: Integer dispid 373;
    property Opsiyon_Kodu3: Integer dispid 374;
    property Opsiyon_Kodu4: Integer dispid 375;
    property Opsiyon_Kodu5: Integer dispid 376;
    property Bilesen_Op_Kodu: Integer dispid 377;
    property Sip_Ver_Mal: Double dispid 378;
    property Elde_Bul_Mal: Double dispid 379;
    property Yil_Tah_Kul_Mik: Double dispid 380;
    property Ekon_Sip_Miktar: Double dispid 381;
    property Eski_Recete: WideString dispid 382;
    property Otomatik_Uretim: WideString dispid 383;
    property Alfkod: WideString dispid 384;
    property SafKod: WideString dispid 385;
    property Kodturu: WideString dispid 386;
    property S_Yedek1: WideString dispid 387;
    property S_Yedek2: WideString dispid 388;
    property F_Yedek3: Double dispid 389;
    property F_Yedek4: Double dispid 390;
    property C_Yedek5: WideString dispid 391;
    property C_Yedek6: WideString dispid 392;
    property B_Yedek7: Integer dispid 393;
    property I_Yedek8: Integer dispid 394;
    property L_Yedek9: Integer dispid 395;
    property D_YEDEK10: TDateTime dispid 396;
    property Giris_Seri: WideString dispid 397;
    property Cikis_Seri: WideString dispid 398;
    property Seri_Bak: WideString dispid 399;
    property Seri_Mik: WideString dispid 400;
    property Seri_Gir_Ot: WideString dispid 401;
    property Seri_Cik_Ot: WideString dispid 402;
    property Seri_Baslangic: WideString dispid 403;
    property FiyatKodu: WideString dispid 404;
    property FiyatSirasi: Integer dispid 405;
    property PLANLANACAK: WideString dispid 406;
    property LOT_SIZECUSTOMER: Double dispid 407;
    property MIN_SIP_MIKTARCUSTOMER: Double dispid 408;
    property GUMRUKTARIFEKODU: WideString dispid 409;
    property ABCKODU: WideString dispid 410;
    property PERFORMANSKODU: WideString dispid 411;
    property SATICISIPKILIT: WideString dispid 412;
    property MUSTERISIPKILIT: WideString dispid 413;
    property SATINALMAKILIT: WideString dispid 414;
    property SatisKilit: WideString dispid 415;
    property EN: Double dispid 416;
    property BOY: Double dispid 417;
    property GENISLIK: Double dispid 418;
    property SIPLIMITVAR: WideString dispid 419;
    property SONSTOKKODU: WideString dispid 420;
    property OnayTipi: WideString dispid 421;
    property OnayNum: Integer dispid 422;
    property FIKTIF_MAM: WideString dispid 423;
    property YAPILANDIR: WideString dispid 424;
    property SBOMVARMI: WideString dispid 425;
    property BAGLISTOKKOD: WideString dispid 426;
    property YapKod: WideString dispid 427;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IStokEkBilgi
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D8053976-640A-4084-9F1A-E4456BFC7A65}
// *********************************************************************//
  IStokEkBilgi = interface(IMerkez)
    ['{D8053976-640A-4084-9F1A-E4456BFC7A65}']
    function Get_Stok_Kodu: WideString; safecall;
    procedure Set_Stok_Kodu(const Value: WideString); safecall;
    function Get_Tur: WideString; safecall;
    procedure Set_Tur(const Value: WideString); safecall;
    function Get_Mgrup: WideString; safecall;
    procedure Set_Mgrup(const Value: WideString); safecall;
    function Get_KayitTarihi: TDateTime; safecall;
    procedure Set_KayitTarihi(Value: TDateTime); safecall;
    function Get_KayitYapanKul: WideString; safecall;
    procedure Set_KayitYapanKul(const Value: WideString); safecall;
    function Get_DuzeltmeTarihi: TDateTime; safecall;
    procedure Set_DuzeltmeTarihi(Value: TDateTime); safecall;
    function Get_DuzeltmeYapanKul: WideString; safecall;
    procedure Set_DuzeltmeYapanKul(const Value: WideString); safecall;
    function Get_Ingisim: WideString; safecall;
    procedure Set_Ingisim(const Value: WideString); safecall;
    function Get_Birim_Maliyet: Double; safecall;
    procedure Set_Birim_Maliyet(Value: Double); safecall;
    function Get_Kull1N: Double; safecall;
    procedure Set_Kull1N(Value: Double); safecall;
    function Get_Kull2N: Double; safecall;
    procedure Set_Kull2N(Value: Double); safecall;
    function Get_Kull3N: Double; safecall;
    procedure Set_Kull3N(Value: Double); safecall;
    function Get_Kull4N: Double; safecall;
    procedure Set_Kull4N(Value: Double); safecall;
    function Get_Kull5N: Double; safecall;
    procedure Set_Kull5N(Value: Double); safecall;
    function Get_Kull6N: Double; safecall;
    procedure Set_Kull6N(Value: Double); safecall;
    function Get_Kull7N: Double; safecall;
    procedure Set_Kull7N(Value: Double); safecall;
    function Get_Kull8N: Double; safecall;
    procedure Set_Kull8N(Value: Double); safecall;
    function Get_Kull1S: WideString; safecall;
    procedure Set_Kull1S(const Value: WideString); safecall;
    function Get_Kull2S: WideString; safecall;
    procedure Set_Kull2S(const Value: WideString); safecall;
    function Get_Kull3S: WideString; safecall;
    procedure Set_Kull3S(const Value: WideString); safecall;
    function Get_Kull4S: WideString; safecall;
    procedure Set_Kull4S(const Value: WideString); safecall;
    function Get_Kull5S: WideString; safecall;
    procedure Set_Kull5S(const Value: WideString); safecall;
    function Get_Kull6S: WideString; safecall;
    procedure Set_Kull6S(const Value: WideString); safecall;
    function Get_Kull7S: WideString; safecall;
    procedure Set_Kull7S(const Value: WideString); safecall;
    function Get_Kull8S: WideString; safecall;
    procedure Set_Kull8S(const Value: WideString); safecall;
    function Get_Son_Satal_Fiat: Double; safecall;
    procedure Set_Son_Satal_Fiat(Value: Double); safecall;
    function Get_Son_Satal_Tar: TDateTime; safecall;
    procedure Set_Son_Satal_Tar(Value: TDateTime); safecall;
    function Get_S_Yedek1: WideString; safecall;
    procedure Set_S_Yedek1(const Value: WideString); safecall;
    function Get_S_Yedek2: WideString; safecall;
    procedure Set_S_Yedek2(const Value: WideString); safecall;
    function Get_F_Yedek1: Double; safecall;
    procedure Set_F_Yedek1(Value: Double); safecall;
    function Get_F_Yedek2: Double; safecall;
    procedure Set_F_Yedek2(Value: Double); safecall;
    function Get_C_Yedek1: WideString; safecall;
    procedure Set_C_Yedek1(const Value: WideString); safecall;
    function Get_C_Yedek2: WideString; safecall;
    procedure Set_C_Yedek2(const Value: WideString); safecall;
    function Get_B_Yedek1: Integer; safecall;
    procedure Set_B_Yedek1(Value: Integer); safecall;
    function Get_I_Yedek1: Integer; safecall;
    procedure Set_I_Yedek1(Value: Integer); safecall;
    function Get_L_Yedek1: Integer; safecall;
    procedure Set_L_Yedek1(Value: Integer); safecall;
    function Get_Sonsattar: TDateTime; safecall;
    procedure Set_Sonsattar(Value: TDateTime); safecall;
    function Get_Dagitici_Kodu: WideString; safecall;
    procedure Set_Dagitici_Kodu(const Value: WideString); safecall;
    function Get_CURBIRIM_MALIYET: Double; safecall;
    procedure Set_CURBIRIM_MALIYET(Value: Double); safecall;
    property Stok_Kodu: WideString read Get_Stok_Kodu write Set_Stok_Kodu;
    property Tur: WideString read Get_Tur write Set_Tur;
    property Mgrup: WideString read Get_Mgrup write Set_Mgrup;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property Ingisim: WideString read Get_Ingisim write Set_Ingisim;
    property Birim_Maliyet: Double read Get_Birim_Maliyet write Set_Birim_Maliyet;
    property Kull1N: Double read Get_Kull1N write Set_Kull1N;
    property Kull2N: Double read Get_Kull2N write Set_Kull2N;
    property Kull3N: Double read Get_Kull3N write Set_Kull3N;
    property Kull4N: Double read Get_Kull4N write Set_Kull4N;
    property Kull5N: Double read Get_Kull5N write Set_Kull5N;
    property Kull6N: Double read Get_Kull6N write Set_Kull6N;
    property Kull7N: Double read Get_Kull7N write Set_Kull7N;
    property Kull8N: Double read Get_Kull8N write Set_Kull8N;
    property Kull1S: WideString read Get_Kull1S write Set_Kull1S;
    property Kull2S: WideString read Get_Kull2S write Set_Kull2S;
    property Kull3S: WideString read Get_Kull3S write Set_Kull3S;
    property Kull4S: WideString read Get_Kull4S write Set_Kull4S;
    property Kull5S: WideString read Get_Kull5S write Set_Kull5S;
    property Kull6S: WideString read Get_Kull6S write Set_Kull6S;
    property Kull7S: WideString read Get_Kull7S write Set_Kull7S;
    property Kull8S: WideString read Get_Kull8S write Set_Kull8S;
    property Son_Satal_Fiat: Double read Get_Son_Satal_Fiat write Set_Son_Satal_Fiat;
    property Son_Satal_Tar: TDateTime read Get_Son_Satal_Tar write Set_Son_Satal_Tar;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property B_Yedek1: Integer read Get_B_Yedek1 write Set_B_Yedek1;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property L_Yedek1: Integer read Get_L_Yedek1 write Set_L_Yedek1;
    property Sonsattar: TDateTime read Get_Sonsattar write Set_Sonsattar;
    property Dagitici_Kodu: WideString read Get_Dagitici_Kodu write Set_Dagitici_Kodu;
    property CURBIRIM_MALIYET: Double read Get_CURBIRIM_MALIYET write Set_CURBIRIM_MALIYET;
  end;

// *********************************************************************//
// DispIntf:  IStokEkBilgiDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D8053976-640A-4084-9F1A-E4456BFC7A65}
// *********************************************************************//
  IStokEkBilgiDisp = dispinterface
    ['{D8053976-640A-4084-9F1A-E4456BFC7A65}']
    property Stok_Kodu: WideString dispid 301;
    property Tur: WideString dispid 302;
    property Mgrup: WideString dispid 303;
    property KayitTarihi: TDateTime dispid 304;
    property KayitYapanKul: WideString dispid 305;
    property DuzeltmeTarihi: TDateTime dispid 306;
    property DuzeltmeYapanKul: WideString dispid 307;
    property Ingisim: WideString dispid 308;
    property Birim_Maliyet: Double dispid 309;
    property Kull1N: Double dispid 310;
    property Kull2N: Double dispid 311;
    property Kull3N: Double dispid 312;
    property Kull4N: Double dispid 313;
    property Kull5N: Double dispid 314;
    property Kull6N: Double dispid 315;
    property Kull7N: Double dispid 316;
    property Kull8N: Double dispid 317;
    property Kull1S: WideString dispid 318;
    property Kull2S: WideString dispid 319;
    property Kull3S: WideString dispid 320;
    property Kull4S: WideString dispid 321;
    property Kull5S: WideString dispid 322;
    property Kull6S: WideString dispid 323;
    property Kull7S: WideString dispid 324;
    property Kull8S: WideString dispid 325;
    property Son_Satal_Fiat: Double dispid 326;
    property Son_Satal_Tar: TDateTime dispid 327;
    property S_Yedek1: WideString dispid 328;
    property S_Yedek2: WideString dispid 329;
    property F_Yedek1: Double dispid 330;
    property F_Yedek2: Double dispid 331;
    property C_Yedek1: WideString dispid 332;
    property C_Yedek2: WideString dispid 333;
    property B_Yedek1: Integer dispid 334;
    property I_Yedek1: Integer dispid 335;
    property L_Yedek1: Integer dispid 336;
    property Sonsattar: TDateTime dispid 337;
    property Dagitici_Kodu: WideString dispid 338;
    property CURBIRIM_MALIYET: Double dispid 339;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IKur
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0BC0158B-4647-423D-99FF-86926EBDFE17}
// *********************************************************************//
  IKur = interface(IData)
    ['{0BC0158B-4647-423D-99FF-86926EBDFE17}']
    function Get_Sira: Integer; safecall;
    procedure Set_Sira(Value: Integer); safecall;
    function Get_Tarih: TDateTime; safecall;
    procedure Set_Tarih(Value: TDateTime); safecall;
    function Get_DOV_ALIS: Double; safecall;
    procedure Set_DOV_ALIS(Value: Double); safecall;
    function Get_DOV_SATIS: Double; safecall;
    procedure Set_DOV_SATIS(Value: Double); safecall;
    function Get_EFF_ALIS: Double; safecall;
    procedure Set_EFF_ALIS(Value: Double); safecall;
    function Get_EFF_SATIS: Double; safecall;
    procedure Set_EFF_SATIS(Value: Double); safecall;
    function Get_S_Yedek1: WideString; safecall;
    procedure Set_S_Yedek1(const Value: WideString); safecall;
    function Get_F_Yedek1: Double; safecall;
    procedure Set_F_Yedek1(Value: Double); safecall;
    function Get_F_Yedek2: Double; safecall;
    procedure Set_F_Yedek2(Value: Double); safecall;
    function Get_I_Yedek1: Integer; safecall;
    procedure Set_I_Yedek1(Value: Integer); safecall;
    property Sira: Integer read Get_Sira write Set_Sira;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property DOV_ALIS: Double read Get_DOV_ALIS write Set_DOV_ALIS;
    property DOV_SATIS: Double read Get_DOV_SATIS write Set_DOV_SATIS;
    property EFF_ALIS: Double read Get_EFF_ALIS write Set_EFF_ALIS;
    property EFF_SATIS: Double read Get_EFF_SATIS write Set_EFF_SATIS;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
  end;

// *********************************************************************//
// DispIntf:  IKurDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0BC0158B-4647-423D-99FF-86926EBDFE17}
// *********************************************************************//
  IKurDisp = dispinterface
    ['{0BC0158B-4647-423D-99FF-86926EBDFE17}']
    property Sira: Integer dispid 401;
    property Tarih: TDateTime dispid 402;
    property DOV_ALIS: Double dispid 403;
    property DOV_SATIS: Double dispid 404;
    property EFF_ALIS: Double dispid 405;
    property EFF_SATIS: Double dispid 406;
    property S_Yedek1: WideString dispid 407;
    property F_Yedek1: Double dispid 408;
    property F_Yedek2: Double dispid 409;
    property I_Yedek1: Integer dispid 410;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IDoviz
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E629DD7D-9DC9-4621-88B2-CB2F90E0F5AD}
// *********************************************************************//
  IDoviz = interface(IData)
    ['{E629DD7D-9DC9-4621-88B2-CB2F90E0F5AD}']
    function Get_Sira: Integer; safecall;
    procedure Set_Sira(Value: Integer); safecall;
    function Get_BIRIM: Integer; safecall;
    procedure Set_BIRIM(Value: Integer); safecall;
    function Get_ISIM: WideString; safecall;
    procedure Set_ISIM(const Value: WideString); safecall;
    function Get_NETSISSIRA: Integer; safecall;
    procedure Set_NETSISSIRA(Value: Integer); safecall;
    procedure DovizKurGuncelle(DovTarih: TDateTime); safecall;
    property Sira: Integer read Get_Sira write Set_Sira;
    property BIRIM: Integer read Get_BIRIM write Set_BIRIM;
    property ISIM: WideString read Get_ISIM write Set_ISIM;
    property NETSISSIRA: Integer read Get_NETSISSIRA write Set_NETSISSIRA;
  end;

// *********************************************************************//
// DispIntf:  IDovizDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E629DD7D-9DC9-4621-88B2-CB2F90E0F5AD}
// *********************************************************************//
  IDovizDisp = dispinterface
    ['{E629DD7D-9DC9-4621-88B2-CB2F90E0F5AD}']
    property Sira: Integer dispid 401;
    property BIRIM: Integer dispid 402;
    property ISIM: WideString dispid 403;
    property NETSISSIRA: Integer dispid 404;
    procedure DovizKurGuncelle(DovTarih: TDateTime); dispid 405;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: ICekSenet
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A2986128-0A31-4A78-BF4A-C20C4F3100EE}
// *********************************************************************//
  ICekSenet = interface(IMerkez)
    ['{A2986128-0A31-4A78-BF4A-C20C4F3100EE}']
    function Get_Sube_Kodu: Integer; safecall;
    procedure Set_Sube_Kodu(Value: Integer); safecall;
    function Get_SC_NO: WideString; safecall;
    procedure Set_SC_NO(const Value: WideString); safecall;
    function Get_SC_GIRTRH: TDateTime; safecall;
    procedure Set_SC_GIRTRH(Value: TDateTime); safecall;
    function Get_VADETRH: TDateTime; safecall;
    procedure Set_VADETRH(Value: TDateTime); safecall;
    function Get_SC_CIKTRH: TDateTime; safecall;
    procedure Set_SC_CIKTRH(Value: TDateTime); safecall;
    function Get_SC_ODETRH: TDateTime; safecall;
    procedure Set_SC_ODETRH(Value: TDateTime); safecall;
    function Get_SC_VERENK: WideString; safecall;
    procedure Set_SC_VERENK(const Value: WideString); safecall;
    function Get_SC_ABORCLU: WideString; safecall;
    procedure Set_SC_ABORCLU(const Value: WideString); safecall;
    function Get_AS_C: WideString; safecall;
    procedure Set_AS_C(const Value: WideString); safecall;
    function Get_SC_VERILENK: WideString; safecall;
    procedure Set_SC_VERILENK(const Value: WideString); safecall;
    function Get_SC_VERYCM: WideString; safecall;
    procedure Set_SC_VERYCM(const Value: WideString); safecall;
    function Get_SC_BANKNO: WideString; safecall;
    procedure Set_SC_BANKNO(const Value: WideString); safecall;
    function Get_SC_SONDUR: WideString; safecall;
    procedure Set_SC_SONDUR(const Value: WideString); safecall;
    function Get_SC_YERI: WideString; safecall;
    procedure Set_SC_YERI(const Value: WideString); safecall;
    function Get_RAPOR_KODU: WideString; safecall;
    procedure Set_RAPOR_KODU(const Value: WideString); safecall;
    function Get_Tutar: Double; safecall;
    procedure Set_Tutar(Value: Double); safecall;
    function Get_KURFARKI: Double; safecall;
    procedure Set_KURFARKI(Value: Double); safecall;
    function Get_SC_ALB_NO: WideString; safecall;
    procedure Set_SC_ALB_NO(const Value: WideString); safecall;
    function Get_SC_VERB_NO: WideString; safecall;
    procedure Set_SC_VERB_NO(const Value: WideString); safecall;
    function Get_YERI: WideString; safecall;
    procedure Set_YERI(const Value: WideString); safecall;
    function Get_C_NUMARA: WideString; safecall;
    procedure Set_C_NUMARA(const Value: WideString); safecall;
    function Get_Update_Kodu: WideString; safecall;
    procedure Set_Update_Kodu(const Value: WideString); safecall;
    function Get_DOVTIP: Integer; safecall;
    procedure Set_DOVTIP(Value: Integer); safecall;
    function Get_DOVTUT: Double; safecall;
    procedure Set_DOVTUT(Value: Double); safecall;
    function Get_GIRILDIGIYER: Integer; safecall;
    procedure Set_GIRILDIGIYER(Value: Integer); safecall;
    function Get_Firmadovtut: Double; safecall;
    procedure Set_Firmadovtut(Value: Double); safecall;
    function Get_Firmadovtip: Integer; safecall;
    procedure Set_Firmadovtip(Value: Integer); safecall;
    function Get_CEKSERI: WideString; safecall;
    procedure Set_CEKSERI(const Value: WideString); safecall;
    function Get_Plasiyer_Kodu: WideString; safecall;
    procedure Set_Plasiyer_Kodu(const Value: WideString); safecall;
    function Get_PLASIYER_TARIH: TDateTime; safecall;
    procedure Set_PLASIYER_TARIH(Value: TDateTime); safecall;
    function Get_RAP_KOD: WideString; safecall;
    procedure Set_RAP_KOD(const Value: WideString); safecall;
    function Get_GIRIS_BORDRO: WideString; safecall;
    procedure Set_GIRIS_BORDRO(const Value: WideString); safecall;
    function Get_CIKIS_BORDRO: WideString; safecall;
    procedure Set_CIKIS_BORDRO(const Value: WideString); safecall;
    function Get_Yedek1: WideString; safecall;
    procedure Set_Yedek1(const Value: WideString); safecall;
    function Get_Yedek2: WideString; safecall;
    procedure Set_Yedek2(const Value: WideString); safecall;
    function Get_Yedek3: Double; safecall;
    procedure Set_Yedek3(Value: Double); safecall;
    function Get_Yedek4: Double; safecall;
    procedure Set_Yedek4(Value: Double); safecall;
    function Get_Yedek5: WideString; safecall;
    procedure Set_Yedek5(const Value: WideString); safecall;
    function Get_Yedek6: WideString; safecall;
    procedure Set_Yedek6(const Value: WideString); safecall;
    function Get_Yedek8: Integer; safecall;
    procedure Set_Yedek8(Value: Integer); safecall;
    function Get_Yedek7: Integer; safecall;
    procedure Set_Yedek7(Value: Integer); safecall;
    function Get_Yedek9: Integer; safecall;
    procedure Set_Yedek9(Value: Integer); safecall;
    function Get_Yedek10: TDateTime; safecall;
    procedure Set_Yedek10(Value: TDateTime); safecall;
    function Get_Proje_Kodu: WideString; safecall;
    procedure Set_Proje_Kodu(const Value: WideString); safecall;
    function Get_KayitYapanKul: WideString; safecall;
    procedure Set_KayitYapanKul(const Value: WideString); safecall;
    function Get_KayitTarihi: TDateTime; safecall;
    procedure Set_KayitTarihi(Value: TDateTime); safecall;
    function Get_DuzeltmeYapanKul: WideString; safecall;
    procedure Set_DuzeltmeYapanKul(const Value: WideString); safecall;
    function Get_DuzeltmeTarihi: TDateTime; safecall;
    procedure Set_DuzeltmeTarihi(Value: TDateTime); safecall;
    function Get_OnayTipi: WideString; safecall;
    procedure Set_OnayTipi(const Value: WideString); safecall;
    function Get_OnayNum: Integer; safecall;
    procedure Set_OnayNum(Value: Integer); safecall;
    function Get_VONAYNUM: Integer; safecall;
    procedure Set_VONAYNUM(Value: Integer); safecall;
    function Get_VONAYTIPI: WideString; safecall;
    procedure Set_VONAYTIPI(const Value: WideString); safecall;
    function Get_KasaKodu: WideString; safecall;
    procedure Set_KasaKodu(const Value: WideString); safecall;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property SC_NO: WideString read Get_SC_NO write Set_SC_NO;
    property SC_GIRTRH: TDateTime read Get_SC_GIRTRH write Set_SC_GIRTRH;
    property VADETRH: TDateTime read Get_VADETRH write Set_VADETRH;
    property SC_CIKTRH: TDateTime read Get_SC_CIKTRH write Set_SC_CIKTRH;
    property SC_ODETRH: TDateTime read Get_SC_ODETRH write Set_SC_ODETRH;
    property SC_VERENK: WideString read Get_SC_VERENK write Set_SC_VERENK;
    property SC_ABORCLU: WideString read Get_SC_ABORCLU write Set_SC_ABORCLU;
    property AS_C: WideString read Get_AS_C write Set_AS_C;
    property SC_VERILENK: WideString read Get_SC_VERILENK write Set_SC_VERILENK;
    property SC_VERYCM: WideString read Get_SC_VERYCM write Set_SC_VERYCM;
    property SC_BANKNO: WideString read Get_SC_BANKNO write Set_SC_BANKNO;
    property SC_SONDUR: WideString read Get_SC_SONDUR write Set_SC_SONDUR;
    property SC_YERI: WideString read Get_SC_YERI write Set_SC_YERI;
    property RAPOR_KODU: WideString read Get_RAPOR_KODU write Set_RAPOR_KODU;
    property Tutar: Double read Get_Tutar write Set_Tutar;
    property KURFARKI: Double read Get_KURFARKI write Set_KURFARKI;
    property SC_ALB_NO: WideString read Get_SC_ALB_NO write Set_SC_ALB_NO;
    property SC_VERB_NO: WideString read Get_SC_VERB_NO write Set_SC_VERB_NO;
    property YERI: WideString read Get_YERI write Set_YERI;
    property C_NUMARA: WideString read Get_C_NUMARA write Set_C_NUMARA;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property DOVTIP: Integer read Get_DOVTIP write Set_DOVTIP;
    property DOVTUT: Double read Get_DOVTUT write Set_DOVTUT;
    property GIRILDIGIYER: Integer read Get_GIRILDIGIYER write Set_GIRILDIGIYER;
    property Firmadovtut: Double read Get_Firmadovtut write Set_Firmadovtut;
    property Firmadovtip: Integer read Get_Firmadovtip write Set_Firmadovtip;
    property CEKSERI: WideString read Get_CEKSERI write Set_CEKSERI;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property PLASIYER_TARIH: TDateTime read Get_PLASIYER_TARIH write Set_PLASIYER_TARIH;
    property RAP_KOD: WideString read Get_RAP_KOD write Set_RAP_KOD;
    property GIRIS_BORDRO: WideString read Get_GIRIS_BORDRO write Set_GIRIS_BORDRO;
    property CIKIS_BORDRO: WideString read Get_CIKIS_BORDRO write Set_CIKIS_BORDRO;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: WideString read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property Yedek10: TDateTime read Get_Yedek10 write Set_Yedek10;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property VONAYNUM: Integer read Get_VONAYNUM write Set_VONAYNUM;
    property VONAYTIPI: WideString read Get_VONAYTIPI write Set_VONAYTIPI;
    property KasaKodu: WideString read Get_KasaKodu write Set_KasaKodu;
  end;

// *********************************************************************//
// DispIntf:  ICekSenetDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A2986128-0A31-4A78-BF4A-C20C4F3100EE}
// *********************************************************************//
  ICekSenetDisp = dispinterface
    ['{A2986128-0A31-4A78-BF4A-C20C4F3100EE}']
    property Sube_Kodu: Integer dispid 401;
    property SC_NO: WideString dispid 402;
    property SC_GIRTRH: TDateTime dispid 403;
    property VADETRH: TDateTime dispid 404;
    property SC_CIKTRH: TDateTime dispid 405;
    property SC_ODETRH: TDateTime dispid 406;
    property SC_VERENK: WideString dispid 407;
    property SC_ABORCLU: WideString dispid 408;
    property AS_C: WideString dispid 409;
    property SC_VERILENK: WideString dispid 410;
    property SC_VERYCM: WideString dispid 411;
    property SC_BANKNO: WideString dispid 412;
    property SC_SONDUR: WideString dispid 413;
    property SC_YERI: WideString dispid 414;
    property RAPOR_KODU: WideString dispid 415;
    property Tutar: Double dispid 416;
    property KURFARKI: Double dispid 417;
    property SC_ALB_NO: WideString dispid 418;
    property SC_VERB_NO: WideString dispid 419;
    property YERI: WideString dispid 420;
    property C_NUMARA: WideString dispid 421;
    property Update_Kodu: WideString dispid 422;
    property DOVTIP: Integer dispid 423;
    property DOVTUT: Double dispid 424;
    property GIRILDIGIYER: Integer dispid 425;
    property Firmadovtut: Double dispid 426;
    property Firmadovtip: Integer dispid 427;
    property CEKSERI: WideString dispid 428;
    property Plasiyer_Kodu: WideString dispid 429;
    property PLASIYER_TARIH: TDateTime dispid 430;
    property RAP_KOD: WideString dispid 431;
    property GIRIS_BORDRO: WideString dispid 432;
    property CIKIS_BORDRO: WideString dispid 433;
    property Yedek1: WideString dispid 434;
    property Yedek2: WideString dispid 435;
    property Yedek3: Double dispid 436;
    property Yedek4: Double dispid 437;
    property Yedek5: WideString dispid 438;
    property Yedek6: WideString dispid 439;
    property Yedek8: Integer dispid 440;
    property Yedek7: Integer dispid 441;
    property Yedek9: Integer dispid 442;
    property Yedek10: TDateTime dispid 443;
    property Proje_Kodu: WideString dispid 444;
    property KayitYapanKul: WideString dispid 445;
    property KayitTarihi: TDateTime dispid 446;
    property DuzeltmeYapanKul: WideString dispid 447;
    property DuzeltmeTarihi: TDateTime dispid 448;
    property OnayTipi: WideString dispid 449;
    property OnayNum: Integer dispid 450;
    property VONAYNUM: Integer dispid 451;
    property VONAYTIPI: WideString dispid 452;
    property KasaKodu: WideString dispid 301;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: ICekSenetAna
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A1428D07-5E6A-4344-8698-083ACAED7C58}
// *********************************************************************//
  ICekSenetAna = interface(IData)
    ['{A1428D07-5E6A-4344-8698-083ACAED7C58}']
    function Get_EvrakAdedi: Integer; safecall;
    function Evrak(Index: Integer): ICekSenet; safecall;
    function Get_OkunanCS: ICekSenet; safecall;
    function EvrakYeni: ICekSenet; safecall;
    function EvraklariKaydet(KaydetmeTipi: TCekSenetEvrakKaydetmeTipi): WordBool; safecall;
    function Get_Tip: TCekSenType; safecall;
    procedure Set_Tip(Value: TCekSenType); safecall;
    function Get_OtoNumaraGetir: WordBool; safecall;
    procedure Set_OtoNumaraGetir(Value: WordBool); safecall;
    property EvrakAdedi: Integer read Get_EvrakAdedi;
    property OkunanCS: ICekSenet read Get_OkunanCS;
    property Tip: TCekSenType read Get_Tip write Set_Tip;
    property OtoNumaraGetir: WordBool read Get_OtoNumaraGetir write Set_OtoNumaraGetir;
  end;

// *********************************************************************//
// DispIntf:  ICekSenetAnaDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A1428D07-5E6A-4344-8698-083ACAED7C58}
// *********************************************************************//
  ICekSenetAnaDisp = dispinterface
    ['{A1428D07-5E6A-4344-8698-083ACAED7C58}']
    property EvrakAdedi: Integer readonly dispid 401;
    function Evrak(Index: Integer): ICekSenet; dispid 402;
    property OkunanCS: ICekSenet readonly dispid 404;
    function EvrakYeni: ICekSenet; dispid 403;
    function EvraklariKaydet(KaydetmeTipi: TCekSenetEvrakKaydetmeTipi): WordBool; dispid 405;
    property Tip: TCekSenType dispid 406;
    property OtoNumaraGetir: WordBool dispid 407;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IIReceteAna
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6F628EC9-2AAA-4A4C-9AA4-7B6F15CBC99C}
// *********************************************************************//
  IIReceteAna = interface(IData)
    ['{6F628EC9-2AAA-4A4C-9AA4-7B6F15CBC99C}']
    function Get_PrmMamulKodu: WideString; safecall;
    procedure Set_PrmMamulKodu(const Value: WideString); safecall;
    function Get_PrmSira: Integer; safecall;
    procedure Set_PrmSira(Value: Integer); safecall;
    function Get_PrmSeviye: Integer; safecall;
    procedure Set_PrmSeviye(Value: Integer); safecall;
    function Get_PrmSetNo: WideString; safecall;
    procedure Set_PrmSetNo(const Value: WideString); safecall;
    function Get_PrmOtoUret: WideString; safecall;
    procedure Set_PrmOtoUret(const Value: WideString); safecall;
    function okuRecete(Index: Integer): IRecete; safecall;
    function Get_PrmOPRBIL: WideString; safecall;
    procedure Set_PrmOPRBIL(const Value: WideString); safecall;
    procedure hazirlaReceteListe; safecall;
    function Get_ReceteSayisi: Integer; safecall;
    function YeniRecete(const MAM_KODU: WideString): IRecete; safecall;
    function Get_MamulYapKod: WideString; safecall;
    procedure Set_MamulYapKod(const Value: WideString); safecall;
    function Get_ReceteToplami: Integer; safecall;
    procedure Set_ReceteToplami(Value: Integer); safecall;
    function Get_OlcuBirimi: WideString; safecall;
    procedure Set_OlcuBirimi(const Value: WideString); safecall;
    property PrmMamulKodu: WideString read Get_PrmMamulKodu write Set_PrmMamulKodu;
    property PrmSira: Integer read Get_PrmSira write Set_PrmSira;
    property PrmSeviye: Integer read Get_PrmSeviye write Set_PrmSeviye;
    property PrmSetNo: WideString read Get_PrmSetNo write Set_PrmSetNo;
    property PrmOtoUret: WideString read Get_PrmOtoUret write Set_PrmOtoUret;
    property PrmOPRBIL: WideString read Get_PrmOPRBIL write Set_PrmOPRBIL;
    property ReceteSayisi: Integer read Get_ReceteSayisi;
    property MamulYapKod: WideString read Get_MamulYapKod write Set_MamulYapKod;
    property ReceteToplami: Integer read Get_ReceteToplami write Set_ReceteToplami;
    property OlcuBirimi: WideString read Get_OlcuBirimi write Set_OlcuBirimi;
  end;

// *********************************************************************//
// DispIntf:  IIReceteAnaDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6F628EC9-2AAA-4A4C-9AA4-7B6F15CBC99C}
// *********************************************************************//
  IIReceteAnaDisp = dispinterface
    ['{6F628EC9-2AAA-4A4C-9AA4-7B6F15CBC99C}']
    property PrmMamulKodu: WideString dispid 401;
    property PrmSira: Integer dispid 402;
    property PrmSeviye: Integer dispid 403;
    property PrmSetNo: WideString dispid 404;
    property PrmOtoUret: WideString dispid 406;
    function okuRecete(Index: Integer): IRecete; dispid 408;
    property PrmOPRBIL: WideString dispid 405;
    procedure hazirlaReceteListe; dispid 409;
    property ReceteSayisi: Integer readonly dispid 407;
    function YeniRecete(const MAM_KODU: WideString): IRecete; dispid 410;
    property MamulYapKod: WideString dispid 411;
    property ReceteToplami: Integer dispid 412;
    property OlcuBirimi: WideString dispid 413;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IRecete
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {975400BA-3949-4E3E-9E5B-EFA1A400A073}
// *********************************************************************//
  IRecete = interface(IDispatch)
    ['{975400BA-3949-4E3E-9E5B-EFA1A400A073}']
    function Get_Mamul_Kodu: WideString; safecall;
    procedure Set_Mamul_Kodu(const Value: WideString); safecall;
    function Get_Ham_Kodu: WideString; safecall;
    procedure Set_Ham_Kodu(const Value: WideString); safecall;
    function Get_Miktar: Double; safecall;
    procedure Set_Miktar(Value: Double); safecall;
    function Get_FireMik: Double; safecall;
    procedure Set_FireMik(Value: Double); safecall;
    function Get_OpNo: WideString; safecall;
    procedure Set_OpNo(const Value: WideString); safecall;
    function Get_SabitFireMik: Double; safecall;
    procedure Set_SabitFireMik(Value: Double); safecall;
    function Get_Stok_Maliyet: WideString; safecall;
    procedure Set_Stok_Maliyet(const Value: WideString); safecall;
    function Get_MiktarSabitle: WordBool; safecall;
    procedure Set_MiktarSabitle(Value: WordBool); safecall;
    function Get_H_OTOMATIK_URETIM: WordBool; safecall;
    procedure Set_H_OTOMATIK_URETIM(Value: WordBool); safecall;
    function Get_H_MamulMu: WordBool; safecall;
    procedure Set_H_MamulMu(Value: WordBool); safecall;
    function Get_H_ALIS_FIAT1: Double; safecall;
    procedure Set_H_ALIS_FIAT1(Value: Double); safecall;
    function Get_H_Stok_Adi: WideString; safecall;
    procedure Set_H_Stok_Adi(const Value: WideString); safecall;
    function Get_H_Olcu_Br1: WideString; safecall;
    procedure Set_H_Olcu_Br1(const Value: WideString); safecall;
    function Get_H_Kilit: WordBool; safecall;
    procedure Set_H_Kilit(Value: WordBool); safecall;
    function Get_M_Stok_Adi: WideString; safecall;
    procedure Set_M_Stok_Adi(const Value: WideString); safecall;
    function Get_M_Formul_Toplami: Double; safecall;
    procedure Set_M_Formul_Toplami(Value: Double); safecall;
    function Get_M_Olcu_Br1: WideString; safecall;
    procedure Set_M_Olcu_Br1(const Value: WideString); safecall;
    function Get_OncelikDegissin: WordBool; safecall;
    procedure Set_OncelikDegissin(Value: WordBool); safecall;
    function Get_Planlama_Orani: Double; safecall;
    procedure Set_Planlama_Orani(Value: Double); safecall;
    function Get_Oncelik: Integer; safecall;
    procedure Set_Oncelik(Value: Integer); safecall;
    function Get_FiktifMi: WordBool; safecall;
    procedure Set_FiktifMi(Value: WordBool); safecall;
    function Get_SarfMamul_Kodu: WideString; safecall;
    procedure Set_SarfMamul_Kodu(const Value: WideString); safecall;
    function Get_FiktifMam_Maliyet: Double; safecall;
    procedure Set_FiktifMam_Maliyet(Value: Double); safecall;
    function Get_OpKodu: WideString; safecall;
    procedure Set_OpKodu(const Value: WideString); safecall;
    function Get_Opr_Bil: WideString; safecall;
    procedure Set_Opr_Bil(const Value: WideString); safecall;
    function Get_HamYapKod: WideString; safecall;
    procedure Set_HamYapKod(const Value: WideString); safecall;
    function Get_Aciklama: WideString; safecall;
    procedure Set_Aciklama(const Value: WideString); safecall;
    function Get_IstasyonKodu: WideString; safecall;
    procedure Set_IstasyonKodu(const Value: WideString); safecall;
    function Get_HazirlikSuresi: Double; safecall;
    procedure Set_HazirlikSuresi(Value: Double); safecall;
    function Get_TransferSuresi: Double; safecall;
    procedure Set_TransferSuresi(Value: Double); safecall;
    function Get_UretimSuresi: Double; safecall;
    procedure Set_UretimSuresi(Value: Double); safecall;
    function Get_GecisMiktari: Double; safecall;
    procedure Set_GecisMiktari(Value: Double); safecall;
    function Get_IscilikMaliyeti: Double; safecall;
    procedure Set_IscilikMaliyeti(Value: Double); safecall;
    function Get_DigerMaliyetler: Double; safecall;
    procedure Set_DigerMaliyetler(Value: Double); safecall;
    function Get_UEDahilEdilsin: WordBool; safecall;
    procedure Set_UEDahilEdilsin(Value: WordBool); safecall;
    function Get_SonOperasyon: WordBool; safecall;
    procedure Set_SonOperasyon(Value: WordBool); safecall;
    function Get_SimTezMiktari: Double; safecall;
    procedure Set_SimTezMiktari(Value: Double); safecall;
    function Get_AmbarCikisFisi: TAlternaTifPolitikalar; safecall;
    procedure Set_AmbarCikisFisi(Value: TAlternaTifPolitikalar); safecall;
    function Get_DATransferFisi: TAlternaTifPolitikalar; safecall;
    procedure Set_DATransferFisi(Value: TAlternaTifPolitikalar); safecall;
    function Get_UretimSonuKaydi: TAlternaTifPolitikalar; safecall;
    procedure Set_UretimSonuKaydi(Value: TAlternaTifPolitikalar); safecall;
    function Get_Mrp: TAltPolitikaMrp; safecall;
    procedure Set_Mrp(Value: TAltPolitikaMrp); safecall;
    property Mamul_Kodu: WideString read Get_Mamul_Kodu write Set_Mamul_Kodu;
    property Ham_Kodu: WideString read Get_Ham_Kodu write Set_Ham_Kodu;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property FireMik: Double read Get_FireMik write Set_FireMik;
    property OpNo: WideString read Get_OpNo write Set_OpNo;
    property SabitFireMik: Double read Get_SabitFireMik write Set_SabitFireMik;
    property Stok_Maliyet: WideString read Get_Stok_Maliyet write Set_Stok_Maliyet;
    property MiktarSabitle: WordBool read Get_MiktarSabitle write Set_MiktarSabitle;
    property H_OTOMATIK_URETIM: WordBool read Get_H_OTOMATIK_URETIM write Set_H_OTOMATIK_URETIM;
    property H_MamulMu: WordBool read Get_H_MamulMu write Set_H_MamulMu;
    property H_ALIS_FIAT1: Double read Get_H_ALIS_FIAT1 write Set_H_ALIS_FIAT1;
    property H_Stok_Adi: WideString read Get_H_Stok_Adi write Set_H_Stok_Adi;
    property H_Olcu_Br1: WideString read Get_H_Olcu_Br1 write Set_H_Olcu_Br1;
    property H_Kilit: WordBool read Get_H_Kilit write Set_H_Kilit;
    property M_Stok_Adi: WideString read Get_M_Stok_Adi write Set_M_Stok_Adi;
    property M_Formul_Toplami: Double read Get_M_Formul_Toplami write Set_M_Formul_Toplami;
    property M_Olcu_Br1: WideString read Get_M_Olcu_Br1 write Set_M_Olcu_Br1;
    property OncelikDegissin: WordBool read Get_OncelikDegissin write Set_OncelikDegissin;
    property Planlama_Orani: Double read Get_Planlama_Orani write Set_Planlama_Orani;
    property Oncelik: Integer read Get_Oncelik write Set_Oncelik;
    property FiktifMi: WordBool read Get_FiktifMi write Set_FiktifMi;
    property SarfMamul_Kodu: WideString read Get_SarfMamul_Kodu write Set_SarfMamul_Kodu;
    property FiktifMam_Maliyet: Double read Get_FiktifMam_Maliyet write Set_FiktifMam_Maliyet;
    property OpKodu: WideString read Get_OpKodu write Set_OpKodu;
    property Opr_Bil: WideString read Get_Opr_Bil write Set_Opr_Bil;
    property HamYapKod: WideString read Get_HamYapKod write Set_HamYapKod;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property IstasyonKodu: WideString read Get_IstasyonKodu write Set_IstasyonKodu;
    property HazirlikSuresi: Double read Get_HazirlikSuresi write Set_HazirlikSuresi;
    property TransferSuresi: Double read Get_TransferSuresi write Set_TransferSuresi;
    property UretimSuresi: Double read Get_UretimSuresi write Set_UretimSuresi;
    property GecisMiktari: Double read Get_GecisMiktari write Set_GecisMiktari;
    property IscilikMaliyeti: Double read Get_IscilikMaliyeti write Set_IscilikMaliyeti;
    property DigerMaliyetler: Double read Get_DigerMaliyetler write Set_DigerMaliyetler;
    property UEDahilEdilsin: WordBool read Get_UEDahilEdilsin write Set_UEDahilEdilsin;
    property SonOperasyon: WordBool read Get_SonOperasyon write Set_SonOperasyon;
    property SimTezMiktari: Double read Get_SimTezMiktari write Set_SimTezMiktari;
    property AmbarCikisFisi: TAlternaTifPolitikalar read Get_AmbarCikisFisi write Set_AmbarCikisFisi;
    property DATransferFisi: TAlternaTifPolitikalar read Get_DATransferFisi write Set_DATransferFisi;
    property UretimSonuKaydi: TAlternaTifPolitikalar read Get_UretimSonuKaydi write Set_UretimSonuKaydi;
    property Mrp: TAltPolitikaMrp read Get_Mrp write Set_Mrp;
  end;

// *********************************************************************//
// DispIntf:  IReceteDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {975400BA-3949-4E3E-9E5B-EFA1A400A073}
// *********************************************************************//
  IReceteDisp = dispinterface
    ['{975400BA-3949-4E3E-9E5B-EFA1A400A073}']
    property Mamul_Kodu: WideString dispid 201;
    property Ham_Kodu: WideString dispid 202;
    property Miktar: Double dispid 203;
    property FireMik: Double dispid 204;
    property OpNo: WideString dispid 208;
    property SabitFireMik: Double dispid 205;
    property Stok_Maliyet: WideString dispid 206;
    property MiktarSabitle: WordBool dispid 207;
    property H_OTOMATIK_URETIM: WordBool dispid 209;
    property H_MamulMu: WordBool dispid 210;
    property H_ALIS_FIAT1: Double dispid 211;
    property H_Stok_Adi: WideString dispid 212;
    property H_Olcu_Br1: WideString dispid 213;
    property H_Kilit: WordBool dispid 214;
    property M_Stok_Adi: WideString dispid 215;
    property M_Formul_Toplami: Double dispid 216;
    property M_Olcu_Br1: WideString dispid 217;
    property OncelikDegissin: WordBool dispid 225;
    property Planlama_Orani: Double dispid 219;
    property Oncelik: Integer dispid 220;
    property FiktifMi: WordBool dispid 221;
    property SarfMamul_Kodu: WideString dispid 222;
    property FiktifMam_Maliyet: Double dispid 223;
    property OpKodu: WideString dispid 218;
    property Opr_Bil: WideString dispid 224;
    property HamYapKod: WideString dispid 226;
    property Aciklama: WideString dispid 227;
    property IstasyonKodu: WideString dispid 228;
    property HazirlikSuresi: Double dispid 229;
    property TransferSuresi: Double dispid 230;
    property UretimSuresi: Double dispid 231;
    property GecisMiktari: Double dispid 232;
    property IscilikMaliyeti: Double dispid 233;
    property DigerMaliyetler: Double dispid 234;
    property UEDahilEdilsin: WordBool dispid 235;
    property SonOperasyon: WordBool dispid 236;
    property SimTezMiktari: Double dispid 237;
    property AmbarCikisFisi: TAlternaTifPolitikalar dispid 238;
    property DATransferFisi: TAlternaTifPolitikalar dispid 239;
    property UretimSonuKaydi: TAlternaTifPolitikalar dispid 240;
    property Mrp: TAltPolitikaMrp dispid 241;
  end;

// *********************************************************************//
// Interface: INetField
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3C1ADC96-4757-4320-92B7-1DEA8F691AC3}
// *********************************************************************//
  INetField = interface(IDispatch)
    ['{3C1ADC96-4757-4320-92B7-1DEA8F691AC3}']
    function Get_FieldName: WideString; safecall;
    function Get_AsString: WideString; safecall;
    function Get_AsInteger: Integer; safecall;
    function Get_AsDateTime: TDateTime; safecall;
    function Get_AsVariant: OleVariant; safecall;
    function Get_AsFloat: Double; safecall;
    function Get_DisplayName: WideString; safecall;
    function Get_DataType: Integer; safecall;
    function Get_IsBlolb: WordBool; safecall;
    function Get_DisplayText: WideString; safecall;
    property FieldName: WideString read Get_FieldName;
    property AsString: WideString read Get_AsString;
    property AsInteger: Integer read Get_AsInteger;
    property AsDateTime: TDateTime read Get_AsDateTime;
    property AsVariant: OleVariant read Get_AsVariant;
    property AsFloat: Double read Get_AsFloat;
    property DisplayName: WideString read Get_DisplayName;
    property DataType: Integer read Get_DataType;
    property IsBlolb: WordBool read Get_IsBlolb;
    property DisplayText: WideString read Get_DisplayText;
  end;

// *********************************************************************//
// DispIntf:  INetFieldDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3C1ADC96-4757-4320-92B7-1DEA8F691AC3}
// *********************************************************************//
  INetFieldDisp = dispinterface
    ['{3C1ADC96-4757-4320-92B7-1DEA8F691AC3}']
    property FieldName: WideString readonly dispid 201;
    property AsString: WideString readonly dispid 202;
    property AsInteger: Integer readonly dispid 203;
    property AsDateTime: TDateTime readonly dispid 204;
    property AsVariant: OleVariant readonly dispid 205;
    property AsFloat: Double readonly dispid 206;
    property DisplayName: WideString readonly dispid 207;
    property DataType: Integer readonly dispid 208;
    property IsBlolb: WordBool readonly dispid 209;
    property DisplayText: WideString readonly dispid 210;
  end;

// *********************************************************************//
// Interface: IVTGuvenlik
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0680A9BF-C3A9-4F52-BBE8-7F3D01C562F4}
// *********************************************************************//
  IVTGuvenlik = interface(IDispatch)
    ['{0680A9BF-C3A9-4F52-BBE8-7F3D01C562F4}']
    function Get_KisitKapsami: TKisitKapsami; safecall;
    procedure Set_KisitKapsami(Value: TKisitKapsami); safecall;
    function Get_KullaniciKodu: Integer; safecall;
    procedure Set_KullaniciKodu(Value: Integer); safecall;
    function Get_GrupKodu: Integer; safecall;
    procedure Set_GrupKodu(Value: Integer); safecall;
    function Get_VeriTabaniNesnesi: WideString; safecall;
    procedure Set_VeriTabaniNesnesi(const Value: WideString); safecall;
    function Get_SahaAdi: WideString; safecall;
    procedure Set_SahaAdi(const Value: WideString); safecall;
    function Get_NullKontroluYapilsin: WordBool; safecall;
    procedure Set_NullKontroluYapilsin(Value: WordBool); safecall;
    function Get_HataAciklama: WideString; safecall;
    procedure Set_HataAciklama(const Value: WideString); safecall;
    procedure SatirBaziGuvenlikEkle; safecall;
    function Get_SQL: WideString; safecall;
    procedure Set_SQL(const Value: WideString); safecall;
    property KisitKapsami: TKisitKapsami read Get_KisitKapsami write Set_KisitKapsami;
    property KullaniciKodu: Integer read Get_KullaniciKodu write Set_KullaniciKodu;
    property GrupKodu: Integer read Get_GrupKodu write Set_GrupKodu;
    property VeriTabaniNesnesi: WideString read Get_VeriTabaniNesnesi write Set_VeriTabaniNesnesi;
    property SahaAdi: WideString read Get_SahaAdi write Set_SahaAdi;
    property NullKontroluYapilsin: WordBool read Get_NullKontroluYapilsin write Set_NullKontroluYapilsin;
    property HataAciklama: WideString read Get_HataAciklama write Set_HataAciklama;
    property SQL: WideString read Get_SQL write Set_SQL;
  end;

// *********************************************************************//
// DispIntf:  IVTGuvenlikDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0680A9BF-C3A9-4F52-BBE8-7F3D01C562F4}
// *********************************************************************//
  IVTGuvenlikDisp = dispinterface
    ['{0680A9BF-C3A9-4F52-BBE8-7F3D01C562F4}']
    property KisitKapsami: TKisitKapsami dispid 201;
    property KullaniciKodu: Integer dispid 202;
    property GrupKodu: Integer dispid 203;
    property VeriTabaniNesnesi: WideString dispid 204;
    property SahaAdi: WideString dispid 205;
    property NullKontroluYapilsin: WordBool dispid 206;
    property HataAciklama: WideString dispid 207;
    procedure SatirBaziGuvenlikEkle; dispid 208;
    property SQL: WideString dispid 209;
  end;

// *********************************************************************//
// Interface: IMaliyetMuhasebesi
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E07836D2-83E7-4511-BBAA-0E7D15956CB7}
// *********************************************************************//
  IMaliyetMuhasebesi = interface(IData)
    ['{E07836D2-83E7-4511-BBAA-0E7D15956CB7}']
    function Get_AyKodu: Integer; safecall;
    procedure Set_AyKodu(Value: Integer); safecall;
    function Get_YilKodu: Integer; safecall;
    procedure Set_YilKodu(Value: Integer); safecall;
    function Get_YillikIslemYapilacak: WordBool; safecall;
    procedure Set_YillikIslemYapilacak(Value: WordBool); safecall;
    function Get_HazirlikYapilacak: WordBool; safecall;
    procedure Set_HazirlikYapilacak(Value: WordBool); safecall;
    function Get_MahsupOlusturulacak: WordBool; safecall;
    procedure Set_MahsupOlusturulacak(Value: WordBool); safecall;
    function Get_FarkMahsupOlusturulacak: WordBool; safecall;
    procedure Set_FarkMahsupOlusturulacak(Value: WordBool); safecall;
    function Get_FarkMahsupAyKodu: Integer; safecall;
    procedure Set_FarkMahsupAyKodu(Value: Integer); safecall;
    function Get_PaylastirmaHasTutar: Double; safecall;
    procedure Set_PaylastirmaHasTutar(Value: Double); safecall;
    function Get_GenelSafhaSayisi: Integer; safecall;
    procedure Set_GenelSafhaSayisi(Value: Integer); safecall;
    procedure Calistir; safecall;
    function Get_Message: WideString; safecall;
    procedure Set_Message(const Value: WideString); safecall;
    property AyKodu: Integer read Get_AyKodu write Set_AyKodu;
    property YilKodu: Integer read Get_YilKodu write Set_YilKodu;
    property YillikIslemYapilacak: WordBool read Get_YillikIslemYapilacak write Set_YillikIslemYapilacak;
    property HazirlikYapilacak: WordBool read Get_HazirlikYapilacak write Set_HazirlikYapilacak;
    property MahsupOlusturulacak: WordBool read Get_MahsupOlusturulacak write Set_MahsupOlusturulacak;
    property FarkMahsupOlusturulacak: WordBool read Get_FarkMahsupOlusturulacak write Set_FarkMahsupOlusturulacak;
    property FarkMahsupAyKodu: Integer read Get_FarkMahsupAyKodu write Set_FarkMahsupAyKodu;
    property PaylastirmaHasTutar: Double read Get_PaylastirmaHasTutar write Set_PaylastirmaHasTutar;
    property GenelSafhaSayisi: Integer read Get_GenelSafhaSayisi write Set_GenelSafhaSayisi;
    property Message: WideString read Get_Message write Set_Message;
  end;

// *********************************************************************//
// DispIntf:  IMaliyetMuhasebesiDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E07836D2-83E7-4511-BBAA-0E7D15956CB7}
// *********************************************************************//
  IMaliyetMuhasebesiDisp = dispinterface
    ['{E07836D2-83E7-4511-BBAA-0E7D15956CB7}']
    property AyKodu: Integer dispid 401;
    property YilKodu: Integer dispid 402;
    property YillikIslemYapilacak: WordBool dispid 403;
    property HazirlikYapilacak: WordBool dispid 404;
    property MahsupOlusturulacak: WordBool dispid 405;
    property FarkMahsupOlusturulacak: WordBool dispid 406;
    property FarkMahsupAyKodu: Integer dispid 407;
    property PaylastirmaHasTutar: Double dispid 408;
    property GenelSafhaSayisi: Integer dispid 409;
    procedure Calistir; dispid 410;
    property Message: WideString dispid 411;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// DispIntf:  IMaliyetMuhasebesiEvents
// Flags:     (4096) Dispatchable
// GUID:      {2643E901-88EE-43C9-ACD0-D05B94ECE71E}
// *********************************************************************//
  IMaliyetMuhasebesiEvents = dispinterface
    ['{2643E901-88EE-43C9-ACD0-D05B94ECE71E}']
    procedure OnInfo; dispid 201;
  end;

// *********************************************************************//
// Interface: IStokMaliyet
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {061426B1-FEC6-4D9E-BA19-A5A2E272A1E7}
// *********************************************************************//
  IStokMaliyet = interface(IData)
    ['{061426B1-FEC6-4D9E-BA19-A5A2E272A1E7}']
    function Get_YillikIslemYapilacak: WordBool; safecall;
    procedure Set_YillikIslemYapilacak(Value: WordBool); safecall;
    function Get_SubelerDahil: WordBool; safecall;
    procedure Set_SubelerDahil(Value: WordBool); safecall;
    function Get_SubeBazMaliyetHesapla: WordBool; safecall;
    procedure Set_SubeBazMaliyetHesapla(Value: WordBool); safecall;
    function Get_BasTarih: TDateTime; safecall;
    procedure Set_BasTarih(Value: TDateTime); safecall;
    function Get_BitTarih: TDateTime; safecall;
    procedure Set_BitTarih(Value: TDateTime); safecall;
    function Get_MaliyetMerkezSubeKodu: WideString; safecall;
    procedure Set_MaliyetMerkezSubeKodu(const Value: WideString); safecall;
    function Get_DonguSayisi: Integer; safecall;
    procedure Set_DonguSayisi(Value: Integer); safecall;
    function Get_SatIadeDonemORtFiyDegerlen: WordBool; safecall;
    procedure Set_SatIadeDonemORtFiyDegerlen(Value: WordBool); safecall;
    function Get_TurKisitlamasi: TTurKisit; safecall;
    procedure Set_TurKisitlamasi(Value: TTurKisit); safecall;
    function Get_MaliyetTipi: Integer; safecall;
    function Get_SQLWhereCaluse: WideString; safecall;
    procedure Set_SQLWhereCaluse(const Value: WideString); safecall;
    function Get_StokKodu: WideString; safecall;
    procedure Set_StokKodu(const Value: WideString); safecall;
    function Get_GrupKodu: WideString; safecall;
    procedure Set_GrupKodu(const Value: WideString); safecall;
    function Get_Kod_1: WideString; safecall;
    procedure Set_Kod_1(const Value: WideString); safecall;
    function Get_Kod_2: WideString; safecall;
    procedure Set_Kod_2(const Value: WideString); safecall;
    procedure Calistir; safecall;
    function Get_Message: WideString; safecall;
    procedure Set_Message(const Value: WideString); safecall;
    property YillikIslemYapilacak: WordBool read Get_YillikIslemYapilacak write Set_YillikIslemYapilacak;
    property SubelerDahil: WordBool read Get_SubelerDahil write Set_SubelerDahil;
    property SubeBazMaliyetHesapla: WordBool read Get_SubeBazMaliyetHesapla write Set_SubeBazMaliyetHesapla;
    property BasTarih: TDateTime read Get_BasTarih write Set_BasTarih;
    property BitTarih: TDateTime read Get_BitTarih write Set_BitTarih;
    property MaliyetMerkezSubeKodu: WideString read Get_MaliyetMerkezSubeKodu write Set_MaliyetMerkezSubeKodu;
    property DonguSayisi: Integer read Get_DonguSayisi write Set_DonguSayisi;
    property SatIadeDonemORtFiyDegerlen: WordBool read Get_SatIadeDonemORtFiyDegerlen write Set_SatIadeDonemORtFiyDegerlen;
    property TurKisitlamasi: TTurKisit read Get_TurKisitlamasi write Set_TurKisitlamasi;
    property MaliyetTipi: Integer read Get_MaliyetTipi;
    property SQLWhereCaluse: WideString read Get_SQLWhereCaluse write Set_SQLWhereCaluse;
    property StokKodu: WideString read Get_StokKodu write Set_StokKodu;
    property GrupKodu: WideString read Get_GrupKodu write Set_GrupKodu;
    property Kod_1: WideString read Get_Kod_1 write Set_Kod_1;
    property Kod_2: WideString read Get_Kod_2 write Set_Kod_2;
    property Message: WideString read Get_Message write Set_Message;
  end;

// *********************************************************************//
// DispIntf:  IStokMaliyetDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {061426B1-FEC6-4D9E-BA19-A5A2E272A1E7}
// *********************************************************************//
  IStokMaliyetDisp = dispinterface
    ['{061426B1-FEC6-4D9E-BA19-A5A2E272A1E7}']
    property YillikIslemYapilacak: WordBool dispid 401;
    property SubelerDahil: WordBool dispid 402;
    property SubeBazMaliyetHesapla: WordBool dispid 403;
    property BasTarih: TDateTime dispid 404;
    property BitTarih: TDateTime dispid 405;
    property MaliyetMerkezSubeKodu: WideString dispid 406;
    property DonguSayisi: Integer dispid 407;
    property SatIadeDonemORtFiyDegerlen: WordBool dispid 408;
    property TurKisitlamasi: TTurKisit dispid 409;
    property MaliyetTipi: Integer readonly dispid 410;
    property SQLWhereCaluse: WideString dispid 411;
    property StokKodu: WideString dispid 412;
    property GrupKodu: WideString dispid 413;
    property Kod_1: WideString dispid 414;
    property Kod_2: WideString dispid 415;
    procedure Calistir; dispid 416;
    property Message: WideString dispid 417;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// DispIntf:  IStokMaliyetEvents
// Flags:     (4096) Dispatchable
// GUID:      {BB6A4ECD-291A-45AF-9668-80C951713E98}
// *********************************************************************//
  IStokMaliyetEvents = dispinterface
    ['{BB6A4ECD-291A-45AF-9668-80C951713E98}']
    procedure OnInfo; dispid 201;
  end;

// *********************************************************************//
// Interface: IAmbarFisMuh
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BB055262-5C94-4304-B8B1-36050F8E5323}
// *********************************************************************//
  IAmbarFisMuh = interface(IData)
    ['{BB055262-5C94-4304-B8B1-36050F8E5323}']
    function Get_Ay: WideString; safecall;
    procedure Set_Ay(const Value: WideString); safecall;
    function Get_Yil: WideString; safecall;
    procedure Set_Yil(const Value: WideString); safecall;
    function Get_Gun: Integer; safecall;
    procedure Set_Gun(Value: Integer); safecall;
    function Get_Aciklama: WideString; safecall;
    procedure Set_Aciklama(const Value: WideString); safecall;
    function Get_GrupKod1: WideString; safecall;
    procedure Set_GrupKod1(const Value: WideString); safecall;
    function Get_GrupKod2: WideString; safecall;
    procedure Set_GrupKod2(const Value: WideString); safecall;
    function Get_AmbFisNoKirilimliAktar: WordBool; safecall;
    procedure Set_AmbFisNoKirilimliAktar(Value: WordBool); safecall;
    function Get_SubelerDahil: WordBool; safecall;
    procedure Set_SubelerDahil(Value: WordBool); safecall;
    function Get_HesapTipi: THesTipi; safecall;
    procedure Set_HesapTipi(Value: THesTipi); safecall;
    procedure Calistir; safecall;
    property Ay: WideString read Get_Ay write Set_Ay;
    property Yil: WideString read Get_Yil write Set_Yil;
    property Gun: Integer read Get_Gun write Set_Gun;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property GrupKod1: WideString read Get_GrupKod1 write Set_GrupKod1;
    property GrupKod2: WideString read Get_GrupKod2 write Set_GrupKod2;
    property AmbFisNoKirilimliAktar: WordBool read Get_AmbFisNoKirilimliAktar write Set_AmbFisNoKirilimliAktar;
    property SubelerDahil: WordBool read Get_SubelerDahil write Set_SubelerDahil;
    property HesapTipi: THesTipi read Get_HesapTipi write Set_HesapTipi;
  end;

// *********************************************************************//
// DispIntf:  IAmbarFisMuhDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BB055262-5C94-4304-B8B1-36050F8E5323}
// *********************************************************************//
  IAmbarFisMuhDisp = dispinterface
    ['{BB055262-5C94-4304-B8B1-36050F8E5323}']
    property Ay: WideString dispid 401;
    property Yil: WideString dispid 402;
    property Gun: Integer dispid 403;
    property Aciklama: WideString dispid 404;
    property GrupKod1: WideString dispid 405;
    property GrupKod2: WideString dispid 406;
    property AmbFisNoKirilimliAktar: WordBool dispid 407;
    property SubelerDahil: WordBool dispid 408;
    property HesapTipi: THesTipi dispid 409;
    procedure Calistir; dispid 410;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// DispIntf:  IAmbarFisMuhEvents
// Flags:     (4096) Dispatchable
// GUID:      {BE114B02-F94C-4549-8199-B011697F62E7}
// *********************************************************************//
  IAmbarFisMuhEvents = dispinterface
    ['{BE114B02-F94C-4549-8199-B011697F62E7}']
  end;

// *********************************************************************//
// Interface: IDepTransMuh
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4CA06758-FF70-439A-BE39-D393332A6590}
// *********************************************************************//
  IDepTransMuh = interface(IData)
    ['{4CA06758-FF70-439A-BE39-D393332A6590}']
    function Get_YilKodu: WideString; safecall;
    procedure Set_YilKodu(const Value: WideString); safecall;
    function Get_AyKodu: WideString; safecall;
    procedure Set_AyKodu(const Value: WideString); safecall;
    function Get_MuhtelifTipHarDahEt: WordBool; safecall;
    procedure Set_MuhtelifTipHarDahEt(Value: WordBool); safecall;
    function Get_EntBilMerkezdeOlus: WordBool; safecall;
    procedure Set_EntBilMerkezdeOlus(Value: WordBool); safecall;
    function Get_FarkTransferMuhKodu: WideString; safecall;
    procedure Set_FarkTransferMuhKodu(const Value: WideString); safecall;
    function Get_CikisHesapTipi: THesTipi; safecall;
    procedure Set_CikisHesapTipi(Value: THesTipi); safecall;
    function Get_MuhTipi: TMuhasebelesTipi; safecall;
    procedure Set_MuhTipi(Value: TMuhasebelesTipi); safecall;
    procedure Calistir; safecall;
    property YilKodu: WideString read Get_YilKodu write Set_YilKodu;
    property AyKodu: WideString read Get_AyKodu write Set_AyKodu;
    property MuhtelifTipHarDahEt: WordBool read Get_MuhtelifTipHarDahEt write Set_MuhtelifTipHarDahEt;
    property EntBilMerkezdeOlus: WordBool read Get_EntBilMerkezdeOlus write Set_EntBilMerkezdeOlus;
    property FarkTransferMuhKodu: WideString read Get_FarkTransferMuhKodu write Set_FarkTransferMuhKodu;
    property CikisHesapTipi: THesTipi read Get_CikisHesapTipi write Set_CikisHesapTipi;
    property MuhTipi: TMuhasebelesTipi read Get_MuhTipi write Set_MuhTipi;
  end;

// *********************************************************************//
// DispIntf:  IDepTransMuhDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4CA06758-FF70-439A-BE39-D393332A6590}
// *********************************************************************//
  IDepTransMuhDisp = dispinterface
    ['{4CA06758-FF70-439A-BE39-D393332A6590}']
    property YilKodu: WideString dispid 401;
    property AyKodu: WideString dispid 402;
    property MuhtelifTipHarDahEt: WordBool dispid 403;
    property EntBilMerkezdeOlus: WordBool dispid 404;
    property FarkTransferMuhKodu: WideString dispid 405;
    property CikisHesapTipi: THesTipi dispid 406;
    property MuhTipi: TMuhasebelesTipi dispid 407;
    procedure Calistir; dispid 408;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// DispIntf:  IDepTransMuhEvents
// Flags:     (4096) Dispatchable
// GUID:      {F2428408-A806-4372-99FB-025C6A312F07}
// *********************************************************************//
  IDepTransMuhEvents = dispinterface
    ['{F2428408-A806-4372-99FB-025C6A312F07}']
  end;

// *********************************************************************//
// Interface: IKasaBakiye
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7C7354F4-831B-481E-A0C2-782C7C429DC5}
// *********************************************************************//
  IKasaBakiye = interface(IDispatch)
    ['{7C7354F4-831B-481E-A0C2-782C7C429DC5}']
    function Get_KsMas_Kod: WideString; safecall;
    procedure Set_KsMas_Kod(const Value: WideString); safecall;
    function Get_Giris: Double; safecall;
    procedure Set_Giris(Value: Double); safecall;
    function Get_Cikis: Double; safecall;
    procedure Set_Cikis(Value: Double); safecall;
    function Get_Devir: Double; safecall;
    procedure Set_Devir(Value: Double); safecall;
    property KsMas_Kod: WideString read Get_KsMas_Kod write Set_KsMas_Kod;
    property Giris: Double read Get_Giris write Set_Giris;
    property Cikis: Double read Get_Cikis write Set_Cikis;
    property Devir: Double read Get_Devir write Set_Devir;
  end;

// *********************************************************************//
// DispIntf:  IKasaBakiyeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7C7354F4-831B-481E-A0C2-782C7C429DC5}
// *********************************************************************//
  IKasaBakiyeDisp = dispinterface
    ['{7C7354F4-831B-481E-A0C2-782C7C429DC5}']
    property KsMas_Kod: WideString dispid 201;
    property Giris: Double dispid 202;
    property Cikis: Double dispid 203;
    property Devir: Double dispid 204;
  end;

// *********************************************************************//
// Interface: IDekont
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9D4C7424-700E-40A5-B5D3-47E4739157D8}
// *********************************************************************//
  IDekont = interface(IData)
    ['{9D4C7424-700E-40A5-B5D3-47E4739157D8}']
    function Get_Sube_Kodu: Integer; safecall;
    procedure Set_Sube_Kodu(Value: Integer); safecall;
    function Get_IncKeyNo: Integer; safecall;
    procedure Set_IncKeyNo(Value: Integer); safecall;
    function Get_Seri_No: WideString; safecall;
    procedure Set_Seri_No(const Value: WideString); safecall;
    function Get_Dekont_No: Integer; safecall;
    procedure Set_Dekont_No(Value: Integer); safecall;
    function Get_Sira_No: Integer; safecall;
    procedure Set_Sira_No(Value: Integer); safecall;
    function Get_Fisno: WideString; safecall;
    procedure Set_Fisno(const Value: WideString); safecall;
    function Get_Tarih: TDateTime; safecall;
    procedure Set_Tarih(Value: TDateTime); safecall;
    function Get_ValorTrh: TDateTime; safecall;
    procedure Set_ValorTrh(Value: TDateTime); safecall;
    function Get_ValorGun: Integer; safecall;
    procedure Set_ValorGun(Value: Integer); safecall;
    function Get_C_M: WideString; safecall;
    procedure Set_C_M(const Value: WideString); safecall;
    function Get_Kod: WideString; safecall;
    procedure Set_Kod(const Value: WideString); safecall;
    function Get_Referans: WideString; safecall;
    procedure Set_Referans(const Value: WideString); safecall;
    function Get_CRapKod: WideString; safecall;
    procedure Set_CRapKod(const Value: WideString); safecall;
    function Get_Plasiyer: WideString; safecall;
    procedure Set_Plasiyer(const Value: WideString); safecall;
    function Get_Aciklama1: WideString; safecall;
    procedure Set_Aciklama1(const Value: WideString); safecall;
    function Get_Aciklama2: WideString; safecall;
    procedure Set_Aciklama2(const Value: WideString); safecall;
    function Get_Aciklama3: WideString; safecall;
    procedure Set_Aciklama3(const Value: WideString); safecall;
    function Get_Aciklama4: WideString; safecall;
    procedure Set_Aciklama4(const Value: WideString); safecall;
    function Get_B_A: WideString; safecall;
    procedure Set_B_A(const Value: WideString); safecall;
    function Get_Tutar: Double; safecall;
    procedure Set_Tutar(Value: Double); safecall;
    function Get_Kdv_Oran: Double; safecall;
    procedure Set_Kdv_Oran(Value: Double); safecall;
    function Get_Kdv_Dahil: WideString; safecall;
    procedure Set_Kdv_Dahil(const Value: WideString); safecall;
    function Get_Genel_KDV: WideString; safecall;
    procedure Set_Genel_KDV(const Value: WideString); safecall;
    function Get_Miktar: Double; safecall;
    procedure Set_Miktar(Value: Double); safecall;
    function Get_DovTL: WideString; safecall;
    procedure Set_DovTL(const Value: WideString); safecall;
    function Get_DOVTIP: Integer; safecall;
    procedure Set_DOVTIP(Value: Integer); safecall;
    function Get_DOVTUT: Double; safecall;
    procedure Set_DOVTUT(Value: Double); safecall;
    function Get_Yedek1: WideString; safecall;
    procedure Set_Yedek1(const Value: WideString); safecall;
    function Get_Yedek2: WideString; safecall;
    procedure Set_Yedek2(const Value: WideString); safecall;
    function Get_Yedek3: Double; safecall;
    procedure Set_Yedek3(Value: Double); safecall;
    function Get_Yedek4: Double; safecall;
    procedure Set_Yedek4(Value: Double); safecall;
    function Get_Yedek5: Double; safecall;
    procedure Set_Yedek5(Value: Double); safecall;
    function Get_Yedek6: WideString; safecall;
    procedure Set_Yedek6(const Value: WideString); safecall;
    function Get_Yedek7: Integer; safecall;
    procedure Set_Yedek7(Value: Integer); safecall;
    function Get_Yedek8: Integer; safecall;
    procedure Set_Yedek8(Value: Integer); safecall;
    function Get_Yedek9: Integer; safecall;
    procedure Set_Yedek9(Value: Integer); safecall;
    function Get_Yedek10: TDateTime; safecall;
    procedure Set_Yedek10(Value: TDateTime); safecall;
    function Get_Proje_Kodu: WideString; safecall;
    procedure Set_Proje_Kodu(const Value: WideString); safecall;
    function Get_EXPORTREFNO: WideString; safecall;
    procedure Set_EXPORTREFNO(const Value: WideString); safecall;
    function Get_EXEXPENSETYPE: Integer; safecall;
    procedure Set_EXEXPENSETYPE(Value: Integer); safecall;
    function Get_CMISLENECEK: WideString; safecall;
    procedure Set_CMISLENECEK(const Value: WideString); safecall;
    function Get_SubeGirilecek: WideString; safecall;
    procedure Set_SubeGirilecek(const Value: WideString); safecall;
    function Get_KDVDOVIZ: Double; safecall;
    procedure Set_KDVDOVIZ(Value: Double); safecall;
    function CDekont(Opr: TDekOpr): WordBool; safecall;
    function MDekont(Opr: TDekOpr): WordBool; safecall;
    function Get_Entegrefkey: WideString; safecall;
    procedure Set_Entegrefkey(const Value: WideString); safecall;
    function Get_RAPOR_KODU2: WideString; safecall;
    procedure Set_RAPOR_KODU2(const Value: WideString); safecall;
    function Get_OtoVadeGunuGetir: WordBool; safecall;
    procedure Set_OtoVadeGunuGetir(Value: WordBool); safecall;
    function BDekont(Opr: TDekOpr): WordBool; safecall;
    function Get_KayitYapanKul: WideString; safecall;
    procedure Set_KayitYapanKul(const Value: WideString); safecall;
    function Get_KayitTarihi: TDateTime; safecall;
    procedure Set_KayitTarihi(Value: TDateTime); safecall;
    function Get_DuzeltmeYapanKul: WideString; safecall;
    procedure Set_DuzeltmeYapanKul(const Value: WideString); safecall;
    function Get_DuzeltmeTarihi: TDateTime; safecall;
    procedure Set_DuzeltmeTarihi(Value: TDateTime); safecall;
    function SDekont(Opr: TDekOpr): WordBool; safecall;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property IncKeyNo: Integer read Get_IncKeyNo write Set_IncKeyNo;
    property Seri_No: WideString read Get_Seri_No write Set_Seri_No;
    property Dekont_No: Integer read Get_Dekont_No write Set_Dekont_No;
    property Sira_No: Integer read Get_Sira_No write Set_Sira_No;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property ValorTrh: TDateTime read Get_ValorTrh write Set_ValorTrh;
    property ValorGun: Integer read Get_ValorGun write Set_ValorGun;
    property C_M: WideString read Get_C_M write Set_C_M;
    property Kod: WideString read Get_Kod write Set_Kod;
    property Referans: WideString read Get_Referans write Set_Referans;
    property CRapKod: WideString read Get_CRapKod write Set_CRapKod;
    property Plasiyer: WideString read Get_Plasiyer write Set_Plasiyer;
    property Aciklama1: WideString read Get_Aciklama1 write Set_Aciklama1;
    property Aciklama2: WideString read Get_Aciklama2 write Set_Aciklama2;
    property Aciklama3: WideString read Get_Aciklama3 write Set_Aciklama3;
    property Aciklama4: WideString read Get_Aciklama4 write Set_Aciklama4;
    property B_A: WideString read Get_B_A write Set_B_A;
    property Tutar: Double read Get_Tutar write Set_Tutar;
    property Kdv_Oran: Double read Get_Kdv_Oran write Set_Kdv_Oran;
    property Kdv_Dahil: WideString read Get_Kdv_Dahil write Set_Kdv_Dahil;
    property Genel_KDV: WideString read Get_Genel_KDV write Set_Genel_KDV;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property DovTL: WideString read Get_DovTL write Set_DovTL;
    property DOVTIP: Integer read Get_DOVTIP write Set_DOVTIP;
    property DOVTUT: Double read Get_DOVTUT write Set_DOVTUT;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: Double read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property Yedek10: TDateTime read Get_Yedek10 write Set_Yedek10;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property EXPORTREFNO: WideString read Get_EXPORTREFNO write Set_EXPORTREFNO;
    property EXEXPENSETYPE: Integer read Get_EXEXPENSETYPE write Set_EXEXPENSETYPE;
    property CMISLENECEK: WideString read Get_CMISLENECEK write Set_CMISLENECEK;
    property SubeGirilecek: WideString read Get_SubeGirilecek write Set_SubeGirilecek;
    property KDVDOVIZ: Double read Get_KDVDOVIZ write Set_KDVDOVIZ;
    property Entegrefkey: WideString read Get_Entegrefkey write Set_Entegrefkey;
    property RAPOR_KODU2: WideString read Get_RAPOR_KODU2 write Set_RAPOR_KODU2;
    property OtoVadeGunuGetir: WordBool read Get_OtoVadeGunuGetir write Set_OtoVadeGunuGetir;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
  end;

// *********************************************************************//
// DispIntf:  IDekontDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9D4C7424-700E-40A5-B5D3-47E4739157D8}
// *********************************************************************//
  IDekontDisp = dispinterface
    ['{9D4C7424-700E-40A5-B5D3-47E4739157D8}']
    property Sube_Kodu: Integer dispid 401;
    property IncKeyNo: Integer dispid 402;
    property Seri_No: WideString dispid 403;
    property Dekont_No: Integer dispid 404;
    property Sira_No: Integer dispid 405;
    property Fisno: WideString dispid 406;
    property Tarih: TDateTime dispid 407;
    property ValorTrh: TDateTime dispid 408;
    property ValorGun: Integer dispid 409;
    property C_M: WideString dispid 410;
    property Kod: WideString dispid 411;
    property Referans: WideString dispid 412;
    property CRapKod: WideString dispid 413;
    property Plasiyer: WideString dispid 414;
    property Aciklama1: WideString dispid 415;
    property Aciklama2: WideString dispid 416;
    property Aciklama3: WideString dispid 417;
    property Aciklama4: WideString dispid 418;
    property B_A: WideString dispid 419;
    property Tutar: Double dispid 420;
    property Kdv_Oran: Double dispid 421;
    property Kdv_Dahil: WideString dispid 422;
    property Genel_KDV: WideString dispid 423;
    property Miktar: Double dispid 424;
    property DovTL: WideString dispid 425;
    property DOVTIP: Integer dispid 426;
    property DOVTUT: Double dispid 427;
    property Yedek1: WideString dispid 429;
    property Yedek2: WideString dispid 430;
    property Yedek3: Double dispid 431;
    property Yedek4: Double dispid 432;
    property Yedek5: Double dispid 433;
    property Yedek6: WideString dispid 434;
    property Yedek7: Integer dispid 435;
    property Yedek8: Integer dispid 436;
    property Yedek9: Integer dispid 437;
    property Yedek10: TDateTime dispid 438;
    property Proje_Kodu: WideString dispid 439;
    property EXPORTREFNO: WideString dispid 440;
    property EXEXPENSETYPE: Integer dispid 441;
    property CMISLENECEK: WideString dispid 442;
    property SubeGirilecek: WideString dispid 443;
    property KDVDOVIZ: Double dispid 444;
    function CDekont(Opr: TDekOpr): WordBool; dispid 445;
    function MDekont(Opr: TDekOpr): WordBool; dispid 446;
    property Entegrefkey: WideString dispid 428;
    property RAPOR_KODU2: WideString dispid 447;
    property OtoVadeGunuGetir: WordBool dispid 448;
    function BDekont(Opr: TDekOpr): WordBool; dispid 449;
    property KayitYapanKul: WideString dispid 450;
    property KayitTarihi: TDateTime dispid 451;
    property DuzeltmeYapanKul: WideString dispid 452;
    property DuzeltmeTarihi: TDateTime dispid 453;
    function SDekont(Opr: TDekOpr): WordBool; dispid 454;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IDekCekSen
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {459B7D40-D4B4-48DF-99D6-4DFFDD10EFDC}
// *********************************************************************//
  IDekCekSen = interface(IData)
    ['{459B7D40-D4B4-48DF-99D6-4DFFDD10EFDC}']
    function Get_SC_NO: WideString; safecall;
    procedure Set_SC_NO(const Value: WideString); safecall;
    function Get_Seri: WideString; safecall;
    procedure Set_Seri(const Value: WideString); safecall;
    function Get_Dekont_Tarihi: TDateTime; safecall;
    procedure Set_Dekont_Tarihi(Value: TDateTime); safecall;
    function Get_TTHesap_Kodu: WideString; safecall;
    procedure Set_TTHesap_Kodu(const Value: WideString); safecall;
    function Get_DovizKuru: Double; safecall;
    procedure Set_DovizKuru(Value: Double); safecall;
    function Get_TahsilMasraf: Double; safecall;
    procedure Set_TahsilMasraf(Value: Double); safecall;
    function Get_Tutar: Double; safecall;
    procedure Set_Tutar(Value: Double); safecall;
    function Get_GiderHesapKodu: WideString; safecall;
    procedure Set_GiderHesapKodu(const Value: WideString); safecall;
    function Get_BankaBorcBedel: Double; safecall;
    procedure Set_BankaBorcBedel(Value: Double); safecall;
    function Get_VirmanHesapKodu: WideString; safecall;
    procedure Set_VirmanHesapKodu(const Value: WideString); safecall;
    function Get_AlacakCari: WideString; safecall;
    procedure Set_AlacakCari(const Value: WideString); safecall;
    function Get_BorcCari: WideString; safecall;
    procedure Set_BorcCari(const Value: WideString); safecall;
    function Get_Plasiyer_Kodu: WideString; safecall;
    procedure Set_Plasiyer_Kodu(const Value: WideString); safecall;
    function Get_Aciklama: WideString; safecall;
    procedure Set_Aciklama(const Value: WideString); safecall;
    function Get_Fisno: WideString; safecall;
    procedure Set_Fisno(const Value: WideString); safecall;
    function Get_CariRaporKodu: WideString; safecall;
    procedure Set_CariRaporKodu(const Value: WideString); safecall;
    function Get_Islem_Tarihi: TDateTime; safecall;
    procedure Set_Islem_Tarihi(Value: TDateTime); safecall;
    function Get_C_M: WideString; safecall;
    procedure Set_C_M(const Value: WideString); safecall;
    function Get_Banka_Kodu: WideString; safecall;
    procedure Set_Banka_Kodu(const Value: WideString); safecall;
    function Get_KURFARKI: Double; safecall;
    procedure Set_KURFARKI(Value: Double); safecall;
    function CSDOdeme(Tablo: TCekSenType): WordBool; safecall;
    function BCSDOdeme(Tablo: TCekSenType): WordBool; safecall;
    property SC_NO: WideString read Get_SC_NO write Set_SC_NO;
    property Seri: WideString read Get_Seri write Set_Seri;
    property Dekont_Tarihi: TDateTime read Get_Dekont_Tarihi write Set_Dekont_Tarihi;
    property TTHesap_Kodu: WideString read Get_TTHesap_Kodu write Set_TTHesap_Kodu;
    property DovizKuru: Double read Get_DovizKuru write Set_DovizKuru;
    property TahsilMasraf: Double read Get_TahsilMasraf write Set_TahsilMasraf;
    property Tutar: Double read Get_Tutar write Set_Tutar;
    property GiderHesapKodu: WideString read Get_GiderHesapKodu write Set_GiderHesapKodu;
    property BankaBorcBedel: Double read Get_BankaBorcBedel write Set_BankaBorcBedel;
    property VirmanHesapKodu: WideString read Get_VirmanHesapKodu write Set_VirmanHesapKodu;
    property AlacakCari: WideString read Get_AlacakCari write Set_AlacakCari;
    property BorcCari: WideString read Get_BorcCari write Set_BorcCari;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property CariRaporKodu: WideString read Get_CariRaporKodu write Set_CariRaporKodu;
    property Islem_Tarihi: TDateTime read Get_Islem_Tarihi write Set_Islem_Tarihi;
    property C_M: WideString read Get_C_M write Set_C_M;
    property Banka_Kodu: WideString read Get_Banka_Kodu write Set_Banka_Kodu;
    property KURFARKI: Double read Get_KURFARKI write Set_KURFARKI;
  end;

// *********************************************************************//
// DispIntf:  IDekCekSenDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {459B7D40-D4B4-48DF-99D6-4DFFDD10EFDC}
// *********************************************************************//
  IDekCekSenDisp = dispinterface
    ['{459B7D40-D4B4-48DF-99D6-4DFFDD10EFDC}']
    property SC_NO: WideString dispid 401;
    property Seri: WideString dispid 402;
    property Dekont_Tarihi: TDateTime dispid 403;
    property TTHesap_Kodu: WideString dispid 404;
    property DovizKuru: Double dispid 405;
    property TahsilMasraf: Double dispid 406;
    property Tutar: Double dispid 407;
    property GiderHesapKodu: WideString dispid 408;
    property BankaBorcBedel: Double dispid 409;
    property VirmanHesapKodu: WideString dispid 410;
    property AlacakCari: WideString dispid 411;
    property BorcCari: WideString dispid 412;
    property Plasiyer_Kodu: WideString dispid 413;
    property Aciklama: WideString dispid 414;
    property Fisno: WideString dispid 415;
    property CariRaporKodu: WideString dispid 416;
    property Islem_Tarihi: TDateTime dispid 417;
    property C_M: WideString dispid 418;
    property Banka_Kodu: WideString dispid 419;
    property KURFARKI: Double dispid 420;
    function CSDOdeme(Tablo: TCekSenType): WordBool; dispid 421;
    function BCSDOdeme(Tablo: TCekSenType): WordBool; dispid 422;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IProje
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D1BF7F83-64EE-430D-9C67-A055F7E4FB1E}
// *********************************************************************//
  IProje = interface(IData)
    ['{D1BF7F83-64EE-430D-9C67-A055F7E4FB1E}']
    function Get_ISLETME_KODU: Integer; safecall;
    procedure Set_ISLETME_KODU(Value: Integer); safecall;
    function Get_Proje_Kodu: WideString; safecall;
    procedure Set_Proje_Kodu(const Value: WideString); safecall;
    function Get_Tur: WideString; safecall;
    procedure Set_Tur(const Value: WideString); safecall;
    function Get_Proje_Aciklama: WideString; safecall;
    procedure Set_Proje_Aciklama(const Value: WideString); safecall;
    function Get_Rapor_Kod1: WideString; safecall;
    procedure Set_Rapor_Kod1(const Value: WideString); safecall;
    function Get_Rapor_Kod2: WideString; safecall;
    procedure Set_Rapor_Kod2(const Value: WideString); safecall;
    function Get_Ref_Kod: WideString; safecall;
    procedure Set_Ref_Kod(const Value: WideString); safecall;
    property ISLETME_KODU: Integer read Get_ISLETME_KODU write Set_ISLETME_KODU;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property Tur: WideString read Get_Tur write Set_Tur;
    property Proje_Aciklama: WideString read Get_Proje_Aciklama write Set_Proje_Aciklama;
    property Rapor_Kod1: WideString read Get_Rapor_Kod1 write Set_Rapor_Kod1;
    property Rapor_Kod2: WideString read Get_Rapor_Kod2 write Set_Rapor_Kod2;
    property Ref_Kod: WideString read Get_Ref_Kod write Set_Ref_Kod;
  end;

// *********************************************************************//
// DispIntf:  IProjeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D1BF7F83-64EE-430D-9C67-A055F7E4FB1E}
// *********************************************************************//
  IProjeDisp = dispinterface
    ['{D1BF7F83-64EE-430D-9C67-A055F7E4FB1E}']
    property ISLETME_KODU: Integer dispid 401;
    property Proje_Kodu: WideString dispid 402;
    property Tur: WideString dispid 403;
    property Proje_Aciklama: WideString dispid 404;
    property Rapor_Kod1: WideString dispid 405;
    property Rapor_Kod2: WideString dispid 406;
    property Ref_Kod: WideString dispid 407;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IMuplanTemelBilgi
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C23852E1-CCE0-47F9-AC8D-8D1F94D8293F}
// *********************************************************************//
  IMuplanTemelBilgi = interface(IMerkez)
    ['{C23852E1-CCE0-47F9-AC8D-8D1F94D8293F}']
    function Get_Sube_Kodu: Integer; safecall;
    procedure Set_Sube_Kodu(Value: Integer); safecall;
    function Get_ISLETME_KODU: Integer; safecall;
    procedure Set_ISLETME_KODU(Value: Integer); safecall;
    function Get_Hesap_Kodu: WideString; safecall;
    procedure Set_Hesap_Kodu(const Value: WideString); safecall;
    function Get_Agm: WideString; safecall;
    procedure Set_Agm(const Value: WideString); safecall;
    function Get_Hs_Adi: WideString; safecall;
    procedure Set_Hs_Adi(const Value: WideString); safecall;
    function Get_Hs_Yd_Adi: WideString; safecall;
    procedure Set_Hs_Yd_Adi(const Value: WideString); safecall;
    function Get_Hs_Grkod: WideString; safecall;
    procedure Set_Hs_Grkod(const Value: WideString); safecall;
    function Get_Olcu_Birim: WideString; safecall;
    procedure Set_Olcu_Birim(const Value: WideString); safecall;
    function Get_Hs_Blkz: WideString; safecall;
    procedure Set_Hs_Blkz(const Value: WideString); safecall;
    function Get_Calis_Tip: WideString; safecall;
    procedure Set_Calis_Tip(const Value: WideString); safecall;
    function Get_Calis_Bag: WideString; safecall;
    procedure Set_Calis_Bag(const Value: WideString); safecall;
    function Get_DOVIZLIMI: WideString; safecall;
    procedure Set_DOVIZLIMI(const Value: WideString); safecall;
    function Get_DOVIZ_TIPI: Integer; safecall;
    procedure Set_DOVIZ_TIPI(Value: Integer); safecall;
    function Get_Hesaplamaturu: WideString; safecall;
    procedure Set_Hesaplamaturu(const Value: WideString); safecall;
    function Get_Dovizkontrol: WideString; safecall;
    procedure Set_Dovizkontrol(const Value: WideString); safecall;
    function Get_Update_Kodu: WideString; safecall;
    procedure Set_Update_Kodu(const Value: WideString); safecall;
    function Get_RefKodlu_Calis: WideString; safecall;
    procedure Set_RefKodlu_Calis(const Value: WideString); safecall;
    function Get_Yedek1: WideString; safecall;
    procedure Set_Yedek1(const Value: WideString); safecall;
    function Get_Yedek2: WideString; safecall;
    procedure Set_Yedek2(const Value: WideString); safecall;
    function Get_Yedek3: Double; safecall;
    procedure Set_Yedek3(Value: Double); safecall;
    function Get_Yedek4: Double; safecall;
    procedure Set_Yedek4(Value: Double); safecall;
    function Get_Yedek5: WideString; safecall;
    procedure Set_Yedek5(const Value: WideString); safecall;
    function Get_Yedek6: WideString; safecall;
    procedure Set_Yedek6(const Value: WideString); safecall;
    function Get_Yedek7: Integer; safecall;
    procedure Set_Yedek7(Value: Integer); safecall;
    function Get_Yedek8: Integer; safecall;
    procedure Set_Yedek8(Value: Integer); safecall;
    function Get_Yedek9: Integer; safecall;
    procedure Set_Yedek9(Value: Integer); safecall;
    function Get_KayitYapanKul: WideString; safecall;
    procedure Set_KayitYapanKul(const Value: WideString); safecall;
    function Get_KayitTarihi: TDateTime; safecall;
    procedure Set_KayitTarihi(Value: TDateTime); safecall;
    function Get_DuzeltmeYapanKul: WideString; safecall;
    procedure Set_DuzeltmeYapanKul(const Value: WideString); safecall;
    function Get_DuzeltmeTarihi: TDateTime; safecall;
    procedure Set_DuzeltmeTarihi(Value: TDateTime); safecall;
    function Get_OnayTipi: WideString; safecall;
    procedure Set_OnayTipi(const Value: WideString); safecall;
    function Get_OnayNum: Integer; safecall;
    procedure Set_OnayNum(Value: Integer); safecall;
    function Get_Enf_Fark_HesKod: WideString; safecall;
    procedure Set_Enf_Fark_HesKod(const Value: WideString); safecall;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property ISLETME_KODU: Integer read Get_ISLETME_KODU write Set_ISLETME_KODU;
    property Hesap_Kodu: WideString read Get_Hesap_Kodu write Set_Hesap_Kodu;
    property Agm: WideString read Get_Agm write Set_Agm;
    property Hs_Adi: WideString read Get_Hs_Adi write Set_Hs_Adi;
    property Hs_Yd_Adi: WideString read Get_Hs_Yd_Adi write Set_Hs_Yd_Adi;
    property Hs_Grkod: WideString read Get_Hs_Grkod write Set_Hs_Grkod;
    property Olcu_Birim: WideString read Get_Olcu_Birim write Set_Olcu_Birim;
    property Hs_Blkz: WideString read Get_Hs_Blkz write Set_Hs_Blkz;
    property Calis_Tip: WideString read Get_Calis_Tip write Set_Calis_Tip;
    property Calis_Bag: WideString read Get_Calis_Bag write Set_Calis_Bag;
    property DOVIZLIMI: WideString read Get_DOVIZLIMI write Set_DOVIZLIMI;
    property DOVIZ_TIPI: Integer read Get_DOVIZ_TIPI write Set_DOVIZ_TIPI;
    property Hesaplamaturu: WideString read Get_Hesaplamaturu write Set_Hesaplamaturu;
    property Dovizkontrol: WideString read Get_Dovizkontrol write Set_Dovizkontrol;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property RefKodlu_Calis: WideString read Get_RefKodlu_Calis write Set_RefKodlu_Calis;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: WideString read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property Enf_Fark_HesKod: WideString read Get_Enf_Fark_HesKod write Set_Enf_Fark_HesKod;
  end;

// *********************************************************************//
// DispIntf:  IMuplanTemelBilgiDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C23852E1-CCE0-47F9-AC8D-8D1F94D8293F}
// *********************************************************************//
  IMuplanTemelBilgiDisp = dispinterface
    ['{C23852E1-CCE0-47F9-AC8D-8D1F94D8293F}']
    property Sube_Kodu: Integer dispid 301;
    property ISLETME_KODU: Integer dispid 302;
    property Hesap_Kodu: WideString dispid 303;
    property Agm: WideString dispid 304;
    property Hs_Adi: WideString dispid 305;
    property Hs_Yd_Adi: WideString dispid 306;
    property Hs_Grkod: WideString dispid 307;
    property Olcu_Birim: WideString dispid 308;
    property Hs_Blkz: WideString dispid 309;
    property Calis_Tip: WideString dispid 310;
    property Calis_Bag: WideString dispid 311;
    property DOVIZLIMI: WideString dispid 312;
    property DOVIZ_TIPI: Integer dispid 313;
    property Hesaplamaturu: WideString dispid 314;
    property Dovizkontrol: WideString dispid 315;
    property Update_Kodu: WideString dispid 316;
    property RefKodlu_Calis: WideString dispid 317;
    property Yedek1: WideString dispid 318;
    property Yedek2: WideString dispid 319;
    property Yedek3: Double dispid 320;
    property Yedek4: Double dispid 321;
    property Yedek5: WideString dispid 322;
    property Yedek6: WideString dispid 323;
    property Yedek7: Integer dispid 324;
    property Yedek8: Integer dispid 325;
    property Yedek9: Integer dispid 326;
    property KayitYapanKul: WideString dispid 327;
    property KayitTarihi: TDateTime dispid 328;
    property DuzeltmeYapanKul: WideString dispid 329;
    property DuzeltmeTarihi: TDateTime dispid 330;
    property OnayTipi: WideString dispid 331;
    property OnayNum: Integer dispid 332;
    property Enf_Fark_HesKod: WideString dispid 333;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IMuplanEkBilgi
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {41D6CDB4-65E7-4644-929B-A169F9F2C513}
// *********************************************************************//
  IMuplanEkBilgi = interface(IDispatch)
    ['{41D6CDB4-65E7-4644-929B-A169F9F2C513}']
    function Get_Kod: WideString; safecall;
    procedure Set_Kod(const Value: WideString); safecall;
    function Get_KayitTarihi: TDateTime; safecall;
    procedure Set_KayitTarihi(Value: TDateTime); safecall;
    function Get_KayitYapanKul: WideString; safecall;
    procedure Set_KayitYapanKul(const Value: WideString); safecall;
    function Get_DuzeltmeTarihi: TDateTime; safecall;
    procedure Set_DuzeltmeTarihi(Value: TDateTime); safecall;
    function Get_Kull1N: Double; safecall;
    procedure Set_Kull1N(Value: Double); safecall;
    function Get_Kull2N: Double; safecall;
    procedure Set_Kull2N(Value: Double); safecall;
    function Get_Kull3N: Double; safecall;
    procedure Set_Kull3N(Value: Double); safecall;
    function Get_Kull4N: Double; safecall;
    procedure Set_Kull4N(Value: Double); safecall;
    function Get_Kull5N: Double; safecall;
    procedure Set_Kull5N(Value: Double); safecall;
    function Get_Kull6N: Double; safecall;
    procedure Set_Kull6N(Value: Double); safecall;
    function Get_Kull7N: Double; safecall;
    procedure Set_Kull7N(Value: Double); safecall;
    function Get_Kull8N: Double; safecall;
    procedure Set_Kull8N(Value: Double); safecall;
    function Get_Kull1S: WideString; safecall;
    procedure Set_Kull1S(const Value: WideString); safecall;
    function Get_Kull2S: WideString; safecall;
    procedure Set_Kull2S(const Value: WideString); safecall;
    function Get_Kull3S: WideString; safecall;
    procedure Set_Kull3S(const Value: WideString); safecall;
    function Get_Kull4S: WideString; safecall;
    procedure Set_Kull4S(const Value: WideString); safecall;
    function Get_Kull5S: WideString; safecall;
    procedure Set_Kull5S(const Value: WideString); safecall;
    function Get_Kull6S: WideString; safecall;
    procedure Set_Kull6S(const Value: WideString); safecall;
    function Get_Kull7S: WideString; safecall;
    procedure Set_Kull7S(const Value: WideString); safecall;
    function Get_Kull8S: WideString; safecall;
    procedure Set_Kull8S(const Value: WideString); safecall;
    function Get_Yedek1: WideString; safecall;
    procedure Set_Yedek1(const Value: WideString); safecall;
    function Get_Yedek2: WideString; safecall;
    procedure Set_Yedek2(const Value: WideString); safecall;
    function Get_Yedek3: Double; safecall;
    procedure Set_Yedek3(Value: Double); safecall;
    function Get_Yedek4: Double; safecall;
    procedure Set_Yedek4(Value: Double); safecall;
    function Get_Yedek5: WideString; safecall;
    procedure Set_Yedek5(const Value: WideString); safecall;
    function Get_Yedek6: WideString; safecall;
    procedure Set_Yedek6(const Value: WideString); safecall;
    function Get_Yedek7: Integer; safecall;
    procedure Set_Yedek7(Value: Integer); safecall;
    function Get_Yedek8: Integer; safecall;
    procedure Set_Yedek8(Value: Integer); safecall;
    function Get_Yedek9: Integer; safecall;
    procedure Set_Yedek9(Value: Integer); safecall;
    function Get_DuzeltmeYapanKul: WideString; safecall;
    procedure Set_DuzeltmeYapanKul(const Value: WideString); safecall;
    property Kod: WideString read Get_Kod write Set_Kod;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property Kull1N: Double read Get_Kull1N write Set_Kull1N;
    property Kull2N: Double read Get_Kull2N write Set_Kull2N;
    property Kull3N: Double read Get_Kull3N write Set_Kull3N;
    property Kull4N: Double read Get_Kull4N write Set_Kull4N;
    property Kull5N: Double read Get_Kull5N write Set_Kull5N;
    property Kull6N: Double read Get_Kull6N write Set_Kull6N;
    property Kull7N: Double read Get_Kull7N write Set_Kull7N;
    property Kull8N: Double read Get_Kull8N write Set_Kull8N;
    property Kull1S: WideString read Get_Kull1S write Set_Kull1S;
    property Kull2S: WideString read Get_Kull2S write Set_Kull2S;
    property Kull3S: WideString read Get_Kull3S write Set_Kull3S;
    property Kull4S: WideString read Get_Kull4S write Set_Kull4S;
    property Kull5S: WideString read Get_Kull5S write Set_Kull5S;
    property Kull6S: WideString read Get_Kull6S write Set_Kull6S;
    property Kull7S: WideString read Get_Kull7S write Set_Kull7S;
    property Kull8S: WideString read Get_Kull8S write Set_Kull8S;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: WideString read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
  end;

// *********************************************************************//
// DispIntf:  IMuplanEkBilgiDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {41D6CDB4-65E7-4644-929B-A169F9F2C513}
// *********************************************************************//
  IMuplanEkBilgiDisp = dispinterface
    ['{41D6CDB4-65E7-4644-929B-A169F9F2C513}']
    property Kod: WideString dispid 201;
    property KayitTarihi: TDateTime dispid 202;
    property KayitYapanKul: WideString dispid 203;
    property DuzeltmeTarihi: TDateTime dispid 204;
    property Kull1N: Double dispid 205;
    property Kull2N: Double dispid 206;
    property Kull3N: Double dispid 207;
    property Kull4N: Double dispid 208;
    property Kull5N: Double dispid 209;
    property Kull6N: Double dispid 210;
    property Kull7N: Double dispid 211;
    property Kull8N: Double dispid 212;
    property Kull1S: WideString dispid 213;
    property Kull2S: WideString dispid 214;
    property Kull3S: WideString dispid 215;
    property Kull4S: WideString dispid 216;
    property Kull5S: WideString dispid 217;
    property Kull6S: WideString dispid 218;
    property Kull7S: WideString dispid 219;
    property Kull8S: WideString dispid 220;
    property Yedek1: WideString dispid 221;
    property Yedek2: WideString dispid 222;
    property Yedek3: Double dispid 223;
    property Yedek4: Double dispid 224;
    property Yedek5: WideString dispid 225;
    property Yedek6: WideString dispid 226;
    property Yedek7: Integer dispid 227;
    property Yedek8: Integer dispid 228;
    property Yedek9: Integer dispid 229;
    property DuzeltmeYapanKul: WideString dispid 230;
  end;

// *********************************************************************//
// Interface: IMuPlan
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D8265652-9AEF-48DC-8B3F-43E26BBC5A99}
// *********************************************************************//
  IMuPlan = interface(IData)
    ['{D8265652-9AEF-48DC-8B3F-43E26BBC5A99}']
    function TemelBilgi: IMuplanTemelBilgi; safecall;
    function EkBilgi: IMuplanEkBilgi; safecall;
  end;

// *********************************************************************//
// DispIntf:  IMuPlanDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D8265652-9AEF-48DC-8B3F-43E26BBC5A99}
// *********************************************************************//
  IMuPlanDisp = dispinterface
    ['{D8265652-9AEF-48DC-8B3F-43E26BBC5A99}']
    function TemelBilgi: IMuplanTemelBilgi; dispid 401;
    function EkBilgi: IMuplanEkBilgi; dispid 402;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: INetRS
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2812BD2D-6915-4EDE-925A-B7896F81AB10}
// *********************************************************************//
  INetRS = interface(IData)
    ['{2812BD2D-6915-4EDE-925A-B7896F81AB10}']
    function Ac(const SQL: WideString): WordBool; safecall;
    function Get_EOF: WordBool; safecall;
    function Get_BOF: WordBool; safecall;
    function Get_FieldCount: Integer; safecall;
    procedure IlkK; safecall;
    procedure OncekiK; safecall;
    procedure SonK; safecall;
    procedure SonrakiK; safecall;
    procedure Kapat; safecall;
    function Get_IUXQueryAdr: Integer; safecall;
    procedure Calistir(const SQL: WideString); safecall;
    function FieldByName(const Name: WideString): INetField; safecall;
    function Get_ReportQuery: WordBool; safecall;
    procedure Set_ReportQuery(Value: WordBool); safecall;
    function OpenByUniDirectional(const SQL: WideString): WordBool; safecall;
    function Fields(Index: Integer): INetField; safecall;
    property EOF: WordBool read Get_EOF;
    property BOF: WordBool read Get_BOF;
    property FieldCount: Integer read Get_FieldCount;
    property IUXQueryAdr: Integer read Get_IUXQueryAdr;
    property ReportQuery: WordBool read Get_ReportQuery write Set_ReportQuery;
  end;

// *********************************************************************//
// DispIntf:  INetRSDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2812BD2D-6915-4EDE-925A-B7896F81AB10}
// *********************************************************************//
  INetRSDisp = dispinterface
    ['{2812BD2D-6915-4EDE-925A-B7896F81AB10}']
    function Ac(const SQL: WideString): WordBool; dispid 401;
    property EOF: WordBool readonly dispid 402;
    property BOF: WordBool readonly dispid 403;
    property FieldCount: Integer readonly dispid 404;
    procedure IlkK; dispid 405;
    procedure OncekiK; dispid 406;
    procedure SonK; dispid 407;
    procedure SonrakiK; dispid 408;
    procedure Kapat; dispid 411;
    property IUXQueryAdr: Integer readonly dispid 412;
    procedure Calistir(const SQL: WideString); dispid 413;
    function FieldByName(const Name: WideString): INetField; dispid 410;
    property ReportQuery: WordBool dispid 409;
    function OpenByUniDirectional(const SQL: WideString): WordBool; dispid 414;
    function Fields(Index: Integer): INetField; dispid 415;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IDagFisOlus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F36817D5-AD76-4FDD-9658-5EFBE59A5DAC}
// *********************************************************************//
  IDagFisOlus = interface(IData)
    ['{F36817D5-AD76-4FDD-9658-5EFBE59A5DAC}']
    function Get_FisTarih: TDateTime; safecall;
    procedure Set_FisTarih(Value: TDateTime); safecall;
    function Get_Fisno: WideString; safecall;
    procedure Set_Fisno(const Value: WideString); safecall;
    function Get_BasIslemSiraNo: WideString; safecall;
    procedure Set_BasIslemSiraNo(const Value: WideString); safecall;
    function Get_BitIslemSiraNo: WideString; safecall;
    procedure Set_BitIslemSiraNo(const Value: WideString); safecall;
    function Get_BasDagFisNo: WideString; safecall;
    procedure Set_BasDagFisNo(const Value: WideString); safecall;
    function Get_BitDagFisNo: WideString; safecall;
    procedure Set_BitDagFisNo(const Value: WideString); safecall;
    function Get_FisAciklama: WideString; safecall;
    procedure Set_FisAciklama(const Value: WideString); safecall;
    function Get_DagitimTuru: TDagFisTip; safecall;
    procedure Set_DagitimTuru(Value: TDagFisTip); safecall;
    function Get_ProjeKoduKontYapilsin: WordBool; safecall;
    procedure Set_ProjeKoduKontYapilsin(Value: WordBool); safecall;
    procedure Calistir; safecall;
    property FisTarih: TDateTime read Get_FisTarih write Set_FisTarih;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property BasIslemSiraNo: WideString read Get_BasIslemSiraNo write Set_BasIslemSiraNo;
    property BitIslemSiraNo: WideString read Get_BitIslemSiraNo write Set_BitIslemSiraNo;
    property BasDagFisNo: WideString read Get_BasDagFisNo write Set_BasDagFisNo;
    property BitDagFisNo: WideString read Get_BitDagFisNo write Set_BitDagFisNo;
    property FisAciklama: WideString read Get_FisAciklama write Set_FisAciklama;
    property DagitimTuru: TDagFisTip read Get_DagitimTuru write Set_DagitimTuru;
    property ProjeKoduKontYapilsin: WordBool read Get_ProjeKoduKontYapilsin write Set_ProjeKoduKontYapilsin;
  end;

// *********************************************************************//
// DispIntf:  IDagFisOlusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F36817D5-AD76-4FDD-9658-5EFBE59A5DAC}
// *********************************************************************//
  IDagFisOlusDisp = dispinterface
    ['{F36817D5-AD76-4FDD-9658-5EFBE59A5DAC}']
    property FisTarih: TDateTime dispid 401;
    property Fisno: WideString dispid 402;
    property BasIslemSiraNo: WideString dispid 403;
    property BitIslemSiraNo: WideString dispid 404;
    property BasDagFisNo: WideString dispid 405;
    property BitDagFisNo: WideString dispid 406;
    property FisAciklama: WideString dispid 407;
    property DagitimTuru: TDagFisTip dispid 408;
    property ProjeKoduKontYapilsin: WordBool dispid 409;
    procedure Calistir; dispid 410;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// DispIntf:  IDagFisOlusEvents
// Flags:     (4096) Dispatchable
// GUID:      {E07BFE2D-B9AC-45F3-BB78-DDE3C67A971B}
// *********************************************************************//
  IDagFisOlusEvents = dispinterface
    ['{E07BFE2D-B9AC-45F3-BB78-DDE3C67A971B}']
  end;

// *********************************************************************//
// Interface: IStokPH
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DEDD42FC-614D-4C07-9AF1-FF88C5006910}
// *********************************************************************//
  IStokPH = interface(IData)
    ['{DEDD42FC-614D-4C07-9AF1-FF88C5006910}']
    function Get_Stok_Kodu: WideString; safecall;
    procedure Set_Stok_Kodu(const Value: WideString); safecall;
    function Get_Sube_Kodu: Integer; safecall;
    procedure Set_Sube_Kodu(Value: Integer); safecall;
    function Get_DEPO_KODU: Integer; safecall;
    procedure Set_DEPO_KODU(Value: Integer); safecall;
    function Get_Top_Giris_Mik: Double; safecall;
    procedure Set_Top_Giris_Mik(Value: Double); safecall;
    function Get_Top_Giris_Tut: Double; safecall;
    procedure Set_Top_Giris_Tut(Value: Double); safecall;
    function Get_Top_Cikis_Mik: Double; safecall;
    procedure Set_Top_Cikis_Mik(Value: Double); safecall;
    function Get_Top_Cikis_Tut: Double; safecall;
    procedure Set_Top_Cikis_Tut(Value: Double); safecall;
    function Get_Son_Gir_Br_Fiat: Double; safecall;
    procedure Set_Son_Gir_Br_Fiat(Value: Double); safecall;
    function Get_Son_Gir_Net_Fiat: Double; safecall;
    procedure Set_Son_Gir_Net_Fiat(Value: Double); safecall;
    function Get_Stok_Dagitim: Double; safecall;
    procedure Set_Stok_Dagitim(Value: Double); safecall;
    function Get_Mus_Top_Siparis: Double; safecall;
    procedure Set_Mus_Top_Siparis(Value: Double); safecall;
    function Get_Mus_Top_Teslim: Double; safecall;
    procedure Set_Mus_Top_Teslim(Value: Double); safecall;
    function Get_Sat_Top_Teslim: Double; safecall;
    procedure Set_Sat_Top_Teslim(Value: Double); safecall;
    function Get_Sat_Top_Siparis: Double; safecall;
    procedure Set_Sat_Top_Siparis(Value: Double); safecall;
    function Get_YOLMIK: Double; safecall;
    procedure Set_YOLMIK(Value: Double); safecall;
    property Stok_Kodu: WideString read Get_Stok_Kodu write Set_Stok_Kodu;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property Top_Giris_Mik: Double read Get_Top_Giris_Mik write Set_Top_Giris_Mik;
    property Top_Giris_Tut: Double read Get_Top_Giris_Tut write Set_Top_Giris_Tut;
    property Top_Cikis_Mik: Double read Get_Top_Cikis_Mik write Set_Top_Cikis_Mik;
    property Top_Cikis_Tut: Double read Get_Top_Cikis_Tut write Set_Top_Cikis_Tut;
    property Son_Gir_Br_Fiat: Double read Get_Son_Gir_Br_Fiat write Set_Son_Gir_Br_Fiat;
    property Son_Gir_Net_Fiat: Double read Get_Son_Gir_Net_Fiat write Set_Son_Gir_Net_Fiat;
    property Stok_Dagitim: Double read Get_Stok_Dagitim write Set_Stok_Dagitim;
    property Mus_Top_Siparis: Double read Get_Mus_Top_Siparis write Set_Mus_Top_Siparis;
    property Mus_Top_Teslim: Double read Get_Mus_Top_Teslim write Set_Mus_Top_Teslim;
    property Sat_Top_Teslim: Double read Get_Sat_Top_Teslim write Set_Sat_Top_Teslim;
    property Sat_Top_Siparis: Double read Get_Sat_Top_Siparis write Set_Sat_Top_Siparis;
    property YOLMIK: Double read Get_YOLMIK write Set_YOLMIK;
  end;

// *********************************************************************//
// DispIntf:  IStokPHDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DEDD42FC-614D-4C07-9AF1-FF88C5006910}
// *********************************************************************//
  IStokPHDisp = dispinterface
    ['{DEDD42FC-614D-4C07-9AF1-FF88C5006910}']
    property Stok_Kodu: WideString dispid 401;
    property Sube_Kodu: Integer dispid 402;
    property DEPO_KODU: Integer dispid 403;
    property Top_Giris_Mik: Double dispid 404;
    property Top_Giris_Tut: Double dispid 405;
    property Top_Cikis_Mik: Double dispid 406;
    property Top_Cikis_Tut: Double dispid 407;
    property Son_Gir_Br_Fiat: Double dispid 408;
    property Son_Gir_Net_Fiat: Double dispid 409;
    property Stok_Dagitim: Double dispid 410;
    property Mus_Top_Siparis: Double dispid 411;
    property Mus_Top_Teslim: Double dispid 412;
    property Sat_Top_Teslim: Double dispid 413;
    property Sat_Top_Siparis: Double dispid 414;
    property YOLMIK: Double dispid 415;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IStDovEnfCevir
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8727B54B-44C1-4EE5-9AAA-9A32BE250A06}
// *********************************************************************//
  IStDovEnfCevir = interface(IData)
    ['{8727B54B-44C1-4EE5-9AAA-9A32BE250A06}']
    function Get_StokKodu: WideString; safecall;
    procedure Set_StokKodu(const Value: WideString); safecall;
    function Get_GrupKodu: WideString; safecall;
    procedure Set_GrupKodu(const Value: WideString); safecall;
    function Get_KOD1: WideString; safecall;
    procedure Set_KOD1(const Value: WideString); safecall;
    function Get_KOD2: WideString; safecall;
    procedure Set_KOD2(const Value: WideString); safecall;
    function Get_Tarih1: TDateTime; safecall;
    procedure Set_Tarih1(Value: TDateTime); safecall;
    function Get_Tarih2: TDateTime; safecall;
    procedure Set_Tarih2(Value: TDateTime); safecall;
    function Get_Message: WideString; safecall;
    procedure Set_Message(const Value: WideString); safecall;
    procedure Calistir; safecall;
    property StokKodu: WideString read Get_StokKodu write Set_StokKodu;
    property GrupKodu: WideString read Get_GrupKodu write Set_GrupKodu;
    property KOD1: WideString read Get_KOD1 write Set_KOD1;
    property KOD2: WideString read Get_KOD2 write Set_KOD2;
    property Tarih1: TDateTime read Get_Tarih1 write Set_Tarih1;
    property Tarih2: TDateTime read Get_Tarih2 write Set_Tarih2;
    property Message: WideString read Get_Message write Set_Message;
  end;

// *********************************************************************//
// DispIntf:  IStDovEnfCevirDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8727B54B-44C1-4EE5-9AAA-9A32BE250A06}
// *********************************************************************//
  IStDovEnfCevirDisp = dispinterface
    ['{8727B54B-44C1-4EE5-9AAA-9A32BE250A06}']
    property StokKodu: WideString dispid 401;
    property GrupKodu: WideString dispid 402;
    property KOD1: WideString dispid 403;
    property KOD2: WideString dispid 404;
    property Tarih1: TDateTime dispid 405;
    property Tarih2: TDateTime dispid 406;
    property Message: WideString dispid 407;
    procedure Calistir; dispid 408;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// DispIntf:  IStDovEnfCevirEvents
// Flags:     (4096) Dispatchable
// GUID:      {AD142343-0038-4E87-89BD-0179E4F7BDE1}
// *********************************************************************//
  IStDovEnfCevirEvents = dispinterface
    ['{AD142343-0038-4E87-89BD-0179E4F7BDE1}']
    procedure OnInfo; dispid 201;
  end;

// *********************************************************************//
// Interface: INetGuvenlik
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {76236DD7-89FC-490F-8E56-2944A6B42DF8}
// *********************************************************************//
  INetGuvenlik = interface(IDispatch)
    ['{76236DD7-89FC-490F-8E56-2944A6B42DF8}']
    function Get_UrunSurumu: TNetProductVersion; safecall;
    function ProgramListe(ProgramIndex: Integer): WordBool; safecall;
    function Get_LisansSayisi: Integer; safecall;
    function Get_GuvenlikSunucusu: WideString; safecall;
    function Get_MusteriKodu: WideString; safecall;
    function Get_KurulumTipi: TNetKurulumTip; safecall;
    property UrunSurumu: TNetProductVersion read Get_UrunSurumu;
    property LisansSayisi: Integer read Get_LisansSayisi;
    property GuvenlikSunucusu: WideString read Get_GuvenlikSunucusu;
    property MusteriKodu: WideString read Get_MusteriKodu;
    property KurulumTipi: TNetKurulumTip read Get_KurulumTipi;
  end;

// *********************************************************************//
// DispIntf:  INetGuvenlikDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {76236DD7-89FC-490F-8E56-2944A6B42DF8}
// *********************************************************************//
  INetGuvenlikDisp = dispinterface
    ['{76236DD7-89FC-490F-8E56-2944A6B42DF8}']
    property UrunSurumu: TNetProductVersion readonly dispid 201;
    function ProgramListe(ProgramIndex: Integer): WordBool; dispid 202;
    property LisansSayisi: Integer readonly dispid 203;
    property GuvenlikSunucusu: WideString readonly dispid 204;
    property MusteriKodu: WideString readonly dispid 205;
    property KurulumTipi: TNetKurulumTip readonly dispid 206;
  end;

// *********************************************************************//
// Interface: IData2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BDEC9A7C-A6A5-43A7-A478-8853BE71E9CA}
// *********************************************************************//
  IData2 = interface(IData)
    ['{BDEC9A7C-A6A5-43A7-A478-8853BE71E9CA}']
    procedure SahalariTemizle; safecall;
    function Get_SilmeIcinGerekliSahalar: WideString; safecall;
    function Get_SonKayitNoAl: WordBool; safecall;
    procedure Set_SonKayitNoAl(Value: WordBool); safecall;
    property SilmeIcinGerekliSahalar: WideString read Get_SilmeIcinGerekliSahalar;
    property SonKayitNoAl: WordBool read Get_SonKayitNoAl write Set_SonKayitNoAl;
  end;

// *********************************************************************//
// DispIntf:  IData2Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BDEC9A7C-A6A5-43A7-A478-8853BE71E9CA}
// *********************************************************************//
  IData2Disp = dispinterface
    ['{BDEC9A7C-A6A5-43A7-A478-8853BE71E9CA}']
    procedure SahalariTemizle; dispid 401;
    property SilmeIcinGerekliSahalar: WideString readonly dispid 402;
    property SonKayitNoAl: WordBool dispid 403;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: ICariHareket
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9D4E9A01-E84E-42D2-AFFB-8200AB112EF9}
// *********************************************************************//
  ICariHareket = interface(IData2)
    ['{9D4E9A01-E84E-42D2-AFFB-8200AB112EF9}']
    function Get_Sube_Kodu: Integer; safecall;
    procedure Set_Sube_Kodu(Value: Integer); safecall;
    function Get_CARI_KOD: WideString; safecall;
    procedure Set_CARI_KOD(const Value: WideString); safecall;
    function Get_Tarih: TDateTime; safecall;
    procedure Set_Tarih(Value: TDateTime); safecall;
    function Get_Vade_Tarihi: TDateTime; safecall;
    procedure Set_Vade_Tarihi(Value: TDateTime); safecall;
    function Get_Belge_No: WideString; safecall;
    procedure Set_Belge_No(const Value: WideString); safecall;
    function Get_Aciklama: WideString; safecall;
    procedure Set_Aciklama(const Value: WideString); safecall;
    function Get_Hka: WideString; safecall;
    procedure Set_Hka(const Value: WideString); safecall;
    function Get_Borc: Double; safecall;
    procedure Set_Borc(Value: Double); safecall;
    function Get_Alacak: Double; safecall;
    procedure Set_Alacak(Value: Double); safecall;
    function Get_Bakiye: Double; safecall;
    procedure Set_Bakiye(Value: Double); safecall;
    function Get_DOVIZ_TURU: Integer; safecall;
    procedure Set_DOVIZ_TURU(Value: Integer); safecall;
    function Get_Doviz_Tutar: Double; safecall;
    procedure Set_Doviz_Tutar(Value: Double); safecall;
    function Get_RAPOR_KODU: WideString; safecall;
    procedure Set_RAPOR_KODU(const Value: WideString); safecall;
    function Get_F9sc: WideString; safecall;
    procedure Set_F9sc(const Value: WideString); safecall;
    function Get_Hareket_Turu: WideString; safecall;
    procedure Set_Hareket_Turu(const Value: WideString); safecall;
    function Get_Miktar: Double; safecall;
    procedure Set_Miktar(Value: Double); safecall;
    function Get_Ilave_Rapor_Kodu: WideString; safecall;
    procedure Set_Ilave_Rapor_Kodu(const Value: WideString); safecall;
    function Get_Update_Kodu: WideString; safecall;
    procedure Set_Update_Kodu(const Value: WideString); safecall;
    function Get_Kapatilmis_Tutar: Double; safecall;
    procedure Set_Kapatilmis_Tutar(Value: Double); safecall;
    function Get_Odeme_Gunu: Integer; safecall;
    procedure Set_Odeme_Gunu(Value: Integer); safecall;
    function Get_Firma_Doviz_Tipi: Integer; safecall;
    procedure Set_Firma_Doviz_Tipi(Value: Integer); safecall;
    function Get_Firma_Doviz_Tutari: Double; safecall;
    procedure Set_Firma_Doviz_Tutari(Value: Double); safecall;
    function Get_Plasiyer_Kodu: WideString; safecall;
    procedure Set_Plasiyer_Kodu(const Value: WideString); safecall;
    function Get_Ent_Ref_Key: WideString; safecall;
    procedure Set_Ent_Ref_Key(const Value: WideString); safecall;
    function Get_Inc_Key_Number: Integer; safecall;
    procedure Set_Inc_Key_Number(Value: Integer); safecall;
    function Get_RAPOR_KODU2: WideString; safecall;
    procedure Set_RAPOR_KODU2(const Value: WideString); safecall;
    function Get_DuzeltmeTarihi: TDateTime; safecall;
    procedure Set_DuzeltmeTarihi(Value: TDateTime); safecall;
    function Get_S_Yedek1: WideString; safecall;
    procedure Set_S_Yedek1(const Value: WideString); safecall;
    function Get_S_Yedek2: WideString; safecall;
    procedure Set_S_Yedek2(const Value: WideString); safecall;
    function Get_F_Yedek1: Double; safecall;
    procedure Set_F_Yedek1(Value: Double); safecall;
    function Get_F_Yedek2: Double; safecall;
    procedure Set_F_Yedek2(Value: Double); safecall;
    function Get_C_Yedek1: WideString; safecall;
    procedure Set_C_Yedek1(const Value: WideString); safecall;
    function Get_C_Yedek2: WideString; safecall;
    procedure Set_C_Yedek2(const Value: WideString); safecall;
    function Get_B_Yedek1: Integer; safecall;
    procedure Set_B_Yedek1(Value: Integer); safecall;
    function Get_I_Yedek1: Integer; safecall;
    procedure Set_I_Yedek1(Value: Integer); safecall;
    function Get_L_Yedek1: Integer; safecall;
    procedure Set_L_Yedek1(Value: Integer); safecall;
    function Get_D_Yedek1: TDateTime; safecall;
    procedure Set_D_Yedek1(Value: TDateTime); safecall;
    function Get_Proje_Kodu: WideString; safecall;
    procedure Set_Proje_Kodu(const Value: WideString); safecall;
    function Get_OnayTipi: WideString; safecall;
    procedure Set_OnayTipi(const Value: WideString); safecall;
    function Get_OnayNum: Integer; safecall;
    procedure Set_OnayNum(Value: Integer); safecall;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property CARI_KOD: WideString read Get_CARI_KOD write Set_CARI_KOD;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property Vade_Tarihi: TDateTime read Get_Vade_Tarihi write Set_Vade_Tarihi;
    property Belge_No: WideString read Get_Belge_No write Set_Belge_No;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property Hka: WideString read Get_Hka write Set_Hka;
    property Borc: Double read Get_Borc write Set_Borc;
    property Alacak: Double read Get_Alacak write Set_Alacak;
    property Bakiye: Double read Get_Bakiye write Set_Bakiye;
    property DOVIZ_TURU: Integer read Get_DOVIZ_TURU write Set_DOVIZ_TURU;
    property Doviz_Tutar: Double read Get_Doviz_Tutar write Set_Doviz_Tutar;
    property RAPOR_KODU: WideString read Get_RAPOR_KODU write Set_RAPOR_KODU;
    property F9sc: WideString read Get_F9sc write Set_F9sc;
    property Hareket_Turu: WideString read Get_Hareket_Turu write Set_Hareket_Turu;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property Ilave_Rapor_Kodu: WideString read Get_Ilave_Rapor_Kodu write Set_Ilave_Rapor_Kodu;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Kapatilmis_Tutar: Double read Get_Kapatilmis_Tutar write Set_Kapatilmis_Tutar;
    property Odeme_Gunu: Integer read Get_Odeme_Gunu write Set_Odeme_Gunu;
    property Firma_Doviz_Tipi: Integer read Get_Firma_Doviz_Tipi write Set_Firma_Doviz_Tipi;
    property Firma_Doviz_Tutari: Double read Get_Firma_Doviz_Tutari write Set_Firma_Doviz_Tutari;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property Ent_Ref_Key: WideString read Get_Ent_Ref_Key write Set_Ent_Ref_Key;
    property Inc_Key_Number: Integer read Get_Inc_Key_Number write Set_Inc_Key_Number;
    property RAPOR_KODU2: WideString read Get_RAPOR_KODU2 write Set_RAPOR_KODU2;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property B_Yedek1: Integer read Get_B_Yedek1 write Set_B_Yedek1;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property L_Yedek1: Integer read Get_L_Yedek1 write Set_L_Yedek1;
    property D_Yedek1: TDateTime read Get_D_Yedek1 write Set_D_Yedek1;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
  end;

// *********************************************************************//
// DispIntf:  ICariHareketDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9D4E9A01-E84E-42D2-AFFB-8200AB112EF9}
// *********************************************************************//
  ICariHareketDisp = dispinterface
    ['{9D4E9A01-E84E-42D2-AFFB-8200AB112EF9}']
    property Sube_Kodu: Integer dispid 501;
    property CARI_KOD: WideString dispid 502;
    property Tarih: TDateTime dispid 503;
    property Vade_Tarihi: TDateTime dispid 504;
    property Belge_No: WideString dispid 405;
    property Aciklama: WideString dispid 406;
    property Hka: WideString dispid 407;
    property Borc: Double dispid 408;
    property Alacak: Double dispid 409;
    property Bakiye: Double dispid 410;
    property DOVIZ_TURU: Integer dispid 411;
    property Doviz_Tutar: Double dispid 412;
    property RAPOR_KODU: WideString dispid 413;
    property F9sc: WideString dispid 414;
    property Hareket_Turu: WideString dispid 415;
    property Miktar: Double dispid 416;
    property Ilave_Rapor_Kodu: WideString dispid 417;
    property Update_Kodu: WideString dispid 418;
    property Kapatilmis_Tutar: Double dispid 419;
    property Odeme_Gunu: Integer dispid 420;
    property Firma_Doviz_Tipi: Integer dispid 421;
    property Firma_Doviz_Tutari: Double dispid 422;
    property Plasiyer_Kodu: WideString dispid 423;
    property Ent_Ref_Key: WideString dispid 424;
    property Inc_Key_Number: Integer dispid 425;
    property RAPOR_KODU2: WideString dispid 426;
    property DuzeltmeTarihi: TDateTime dispid 427;
    property S_Yedek1: WideString dispid 428;
    property S_Yedek2: WideString dispid 429;
    property F_Yedek1: Double dispid 430;
    property F_Yedek2: Double dispid 431;
    property C_Yedek1: WideString dispid 432;
    property C_Yedek2: WideString dispid 433;
    property B_Yedek1: Integer dispid 434;
    property I_Yedek1: Integer dispid 435;
    property L_Yedek1: Integer dispid 436;
    property D_Yedek1: TDateTime dispid 437;
    property Proje_Kodu: WideString dispid 438;
    property OnayTipi: WideString dispid 439;
    property OnayNum: Integer dispid 440;
    procedure SahalariTemizle; dispid 401;
    property SilmeIcinGerekliSahalar: WideString readonly dispid 402;
    property SonKayitNoAl: WordBool dispid 403;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IStokHareket
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {80EE77BE-9B9F-4354-83E7-F46FC2860200}
// *********************************************************************//
  IStokHareket = interface(IData2)
    ['{80EE77BE-9B9F-4354-83E7-F46FC2860200}']
    function Get_Stok_Kodu: WideString; safecall;
    procedure Set_Stok_Kodu(const Value: WideString); safecall;
    function Get_Fisno: WideString; safecall;
    procedure Set_Fisno(const Value: WideString); safecall;
    function Get_Sthar_Gcmik: Double; safecall;
    procedure Set_Sthar_Gcmik(Value: Double); safecall;
    function Get_Sthar_Gcmik2: Double; safecall;
    procedure Set_Sthar_Gcmik2(Value: Double); safecall;
    function Get_CEVRIM: Double; safecall;
    procedure Set_CEVRIM(Value: Double); safecall;
    function Get_Sthar_Gckod: WideString; safecall;
    procedure Set_Sthar_Gckod(const Value: WideString); safecall;
    function Get_Sthar_Tarih: TDateTime; safecall;
    procedure Set_Sthar_Tarih(Value: TDateTime); safecall;
    function Get_Sthar_Nf: Double; safecall;
    procedure Set_Sthar_Nf(Value: Double); safecall;
    function Get_Sthar_Bf: Double; safecall;
    procedure Set_Sthar_Bf(Value: Double); safecall;
    function Get_Sthar_Iaf: Double; safecall;
    procedure Set_Sthar_Iaf(Value: Double); safecall;
    function Get_Sthar_Kdv: Double; safecall;
    procedure Set_Sthar_Kdv(Value: Double); safecall;
    function Get_DEPO_KODU: Integer; safecall;
    procedure Set_DEPO_KODU(Value: Integer); safecall;
    function Get_Sthar_Aciklama: WideString; safecall;
    procedure Set_Sthar_Aciklama(const Value: WideString); safecall;
    function Get_Sthar_Satisk: Double; safecall;
    procedure Set_Sthar_Satisk(Value: Double); safecall;
    function Get_Sthar_Malfisk: Double; safecall;
    procedure Set_Sthar_Malfisk(Value: Double); safecall;
    function Get_Sthar_Ftirsip: WideString; safecall;
    procedure Set_Sthar_Ftirsip(const Value: WideString); safecall;
    function Get_Sthar_Satisk2: Double; safecall;
    procedure Set_Sthar_Satisk2(Value: Double); safecall;
    function Get_Liste_Fiat: Integer; safecall;
    procedure Set_Liste_Fiat(Value: Integer); safecall;
    function Get_Sthar_Htur: WideString; safecall;
    procedure Set_Sthar_Htur(const Value: WideString); safecall;
    function Get_Sthar_Dovtip: Integer; safecall;
    procedure Set_Sthar_Dovtip(Value: Integer); safecall;
    function Get_PROMASYON_KODU: Integer; safecall;
    procedure Set_PROMASYON_KODU(Value: Integer); safecall;
    function Get_Sthar_Dovfiat: Double; safecall;
    procedure Set_Sthar_Dovfiat(Value: Double); safecall;
    function Get_Sthar_Odegun: Integer; safecall;
    procedure Set_Sthar_Odegun(Value: Integer); safecall;
    function Get_STra_SatIsk3: Double; safecall;
    procedure Set_STra_SatIsk3(Value: Double); safecall;
    function Get_STra_SatIsk4: Double; safecall;
    procedure Set_STra_SatIsk4(Value: Double); safecall;
    function Get_STra_SatIsk5: Double; safecall;
    procedure Set_STra_SatIsk5(Value: Double); safecall;
    function Get_STra_SatIsk6: Double; safecall;
    procedure Set_STra_SatIsk6(Value: Double); safecall;
    function Get_Sthar_Bgtip: WideString; safecall;
    procedure Set_Sthar_Bgtip(const Value: WideString); safecall;
    function Get_Sthar_Kod1: WideString; safecall;
    procedure Set_Sthar_Kod1(const Value: WideString); safecall;
    function Get_Sthar_Kod2: WideString; safecall;
    procedure Set_Sthar_Kod2(const Value: WideString); safecall;
    function Get_Sthar_Sipnum: WideString; safecall;
    procedure Set_Sthar_Sipnum(const Value: WideString); safecall;
    function Get_Sthar_Carikod: WideString; safecall;
    procedure Set_Sthar_Carikod(const Value: WideString); safecall;
    function Get_Sthar_Sip_Turu: WideString; safecall;
    procedure Set_Sthar_Sip_Turu(const Value: WideString); safecall;
    function Get_Plasiyer_Kodu: WideString; safecall;
    procedure Set_Plasiyer_Kodu(const Value: WideString); safecall;
    function Get_Ekalan_Neden: WideString; safecall;
    procedure Set_Ekalan_Neden(const Value: WideString); safecall;
    function Get_Ekalan: WideString; safecall;
    procedure Set_Ekalan(const Value: WideString); safecall;
    function Get_Ekalan1: WideString; safecall;
    procedure Set_Ekalan1(const Value: WideString); safecall;
    function Get_Redmik: Double; safecall;
    procedure Set_Redmik(Value: Double); safecall;
    function Get_Redneden: Integer; safecall;
    procedure Set_Redneden(Value: Integer); safecall;
    function Get_Sira: Integer; safecall;
    procedure Set_Sira(Value: Integer); safecall;
    function Get_STra_SIPKONT: Integer; safecall;
    procedure Set_STra_SIPKONT(Value: Integer); safecall;
    function Get_Ambar_Kabulno: WideString; safecall;
    procedure Set_Ambar_Kabulno(const Value: WideString); safecall;
    function Get_Firma_Dovtip: Integer; safecall;
    procedure Set_Firma_Dovtip(Value: Integer); safecall;
    function Get_Firma_Dovtut: Double; safecall;
    procedure Set_Firma_Dovtut(Value: Double); safecall;
    function Get_Firma_Dovmal: Double; safecall;
    procedure Set_Firma_Dovmal(Value: Double); safecall;
    function Get_Update_Kodu: WideString; safecall;
    procedure Set_Update_Kodu(const Value: WideString); safecall;
    function Get_Irsaliye_No: WideString; safecall;
    procedure Set_Irsaliye_No(const Value: WideString); safecall;
    function Get_Irsaliye_Tarih: TDateTime; safecall;
    procedure Set_Irsaliye_Tarih(Value: TDateTime); safecall;
    function Get_KOSULKODU: WideString; safecall;
    procedure Set_KOSULKODU(const Value: WideString); safecall;
    function Get_Ecza_fat_tip: Integer; safecall;
    procedure Set_Ecza_fat_tip(Value: Integer); safecall;
    function Get_Sthar_Testar: TDateTime; safecall;
    procedure Set_Sthar_Testar(Value: TDateTime); safecall;
    function Get_Olcubr: Integer; safecall;
    procedure Set_Olcubr(Value: Integer); safecall;
    function Get_IncKeyNo: Integer; safecall;
    procedure Set_IncKeyNo(Value: Integer); safecall;
    function Get_Vade_Tarihi: TDateTime; safecall;
    procedure Set_Vade_Tarihi(Value: TDateTime); safecall;
    function Get_Liste_No: WideString; safecall;
    procedure Set_Liste_No(const Value: WideString); safecall;
    function Get_Baglanti_No: Integer; safecall;
    procedure Set_Baglanti_No(Value: Integer); safecall;
    function Get_Sube_Kodu: Integer; safecall;
    procedure Set_Sube_Kodu(Value: Integer); safecall;
    function Get_Muh_Kodu: WideString; safecall;
    procedure Set_Muh_Kodu(const Value: WideString); safecall;
    function Get_S_Yedek1: WideString; safecall;
    procedure Set_S_Yedek1(const Value: WideString); safecall;
    function Get_S_Yedek2: WideString; safecall;
    procedure Set_S_Yedek2(const Value: WideString); safecall;
    function Get_F_Yedek3: Double; safecall;
    procedure Set_F_Yedek3(Value: Double); safecall;
    function Get_F_Yedek4: Double; safecall;
    procedure Set_F_Yedek4(Value: Double); safecall;
    function Get_F_Yedek5: Double; safecall;
    procedure Set_F_Yedek5(Value: Double); safecall;
    function Get_C_Yedek6: WideString; safecall;
    procedure Set_C_Yedek6(const Value: WideString); safecall;
    function Get_B_Yedek7: Integer; safecall;
    procedure Set_B_Yedek7(Value: Integer); safecall;
    function Get_I_Yedek8: Integer; safecall;
    procedure Set_I_Yedek8(Value: Integer); safecall;
    function Get_L_Yedek9: Integer; safecall;
    procedure Set_L_Yedek9(Value: Integer); safecall;
    function Get_D_YEDEK10: TDateTime; safecall;
    procedure Set_D_YEDEK10(Value: TDateTime); safecall;
    function Get_Proje_Kodu: WideString; safecall;
    procedure Set_Proje_Kodu(const Value: WideString); safecall;
    function Get_FIYATTARIHI: TDateTime; safecall;
    procedure Set_FIYATTARIHI(Value: TDateTime); safecall;
    function Get_KOSULTARIHI: TDateTime; safecall;
    procedure Set_KOSULTARIHI(Value: TDateTime); safecall;
    function Get_Satisk1tip: Integer; safecall;
    procedure Set_Satisk1tip(Value: Integer); safecall;
    function Get_Satisk2tip: Integer; safecall;
    procedure Set_Satisk2tip(Value: Integer); safecall;
    function Get_Satisk3tip: Integer; safecall;
    procedure Set_Satisk3tip(Value: Integer); safecall;
    function Get_Satisk4tip: Integer; safecall;
    procedure Set_Satisk4tip(Value: Integer); safecall;
    function Get_Satisk5tip: Integer; safecall;
    procedure Set_Satisk5tip(Value: Integer); safecall;
    function Get_Satisk6tip: Integer; safecall;
    procedure Set_Satisk6tip(Value: Integer); safecall;
    function Get_EXPORTTYPE: Integer; safecall;
    procedure Set_EXPORTTYPE(Value: Integer); safecall;
    function Get_Exportmik: Double; safecall;
    procedure Set_Exportmik(Value: Double); safecall;
    function Get_DuzeltmeTarihi: TDateTime; safecall;
    procedure Set_DuzeltmeTarihi(Value: TDateTime); safecall;
    function Get_OnayTipi: WideString; safecall;
    procedure Set_OnayTipi(const Value: WideString); safecall;
    function Get_OnayNum: Integer; safecall;
    procedure Set_OnayNum(Value: Integer); safecall;
    function Get_KKMalF: Double; safecall;
    procedure Set_KKMalF(Value: Double); safecall;
    function Get_Stra_IrsKont: Integer; safecall;
    procedure Set_Stra_IrsKont(Value: Integer); safecall;
    function Get_YapKod: WideString; safecall;
    procedure Set_YapKod(const Value: WideString); safecall;
    procedure ReceteliKayit(UretSonDepo: TUretSonDepo; YariMamuldeStokKullan: WordBool; 
                            MaliyetlerCarpilsin: WordBool); safecall;
    function Get_GirisDepoKodu: SYSINT; safecall;
    procedure Set_GirisDepoKodu(Value: SYSINT); safecall;
    property Stok_Kodu: WideString read Get_Stok_Kodu write Set_Stok_Kodu;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property Sthar_Gcmik: Double read Get_Sthar_Gcmik write Set_Sthar_Gcmik;
    property Sthar_Gcmik2: Double read Get_Sthar_Gcmik2 write Set_Sthar_Gcmik2;
    property CEVRIM: Double read Get_CEVRIM write Set_CEVRIM;
    property Sthar_Gckod: WideString read Get_Sthar_Gckod write Set_Sthar_Gckod;
    property Sthar_Tarih: TDateTime read Get_Sthar_Tarih write Set_Sthar_Tarih;
    property Sthar_Nf: Double read Get_Sthar_Nf write Set_Sthar_Nf;
    property Sthar_Bf: Double read Get_Sthar_Bf write Set_Sthar_Bf;
    property Sthar_Iaf: Double read Get_Sthar_Iaf write Set_Sthar_Iaf;
    property Sthar_Kdv: Double read Get_Sthar_Kdv write Set_Sthar_Kdv;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property Sthar_Aciklama: WideString read Get_Sthar_Aciklama write Set_Sthar_Aciklama;
    property Sthar_Satisk: Double read Get_Sthar_Satisk write Set_Sthar_Satisk;
    property Sthar_Malfisk: Double read Get_Sthar_Malfisk write Set_Sthar_Malfisk;
    property Sthar_Ftirsip: WideString read Get_Sthar_Ftirsip write Set_Sthar_Ftirsip;
    property Sthar_Satisk2: Double read Get_Sthar_Satisk2 write Set_Sthar_Satisk2;
    property Liste_Fiat: Integer read Get_Liste_Fiat write Set_Liste_Fiat;
    property Sthar_Htur: WideString read Get_Sthar_Htur write Set_Sthar_Htur;
    property Sthar_Dovtip: Integer read Get_Sthar_Dovtip write Set_Sthar_Dovtip;
    property PROMASYON_KODU: Integer read Get_PROMASYON_KODU write Set_PROMASYON_KODU;
    property Sthar_Dovfiat: Double read Get_Sthar_Dovfiat write Set_Sthar_Dovfiat;
    property Sthar_Odegun: Integer read Get_Sthar_Odegun write Set_Sthar_Odegun;
    property STra_SatIsk3: Double read Get_STra_SatIsk3 write Set_STra_SatIsk3;
    property STra_SatIsk4: Double read Get_STra_SatIsk4 write Set_STra_SatIsk4;
    property STra_SatIsk5: Double read Get_STra_SatIsk5 write Set_STra_SatIsk5;
    property STra_SatIsk6: Double read Get_STra_SatIsk6 write Set_STra_SatIsk6;
    property Sthar_Bgtip: WideString read Get_Sthar_Bgtip write Set_Sthar_Bgtip;
    property Sthar_Kod1: WideString read Get_Sthar_Kod1 write Set_Sthar_Kod1;
    property Sthar_Kod2: WideString read Get_Sthar_Kod2 write Set_Sthar_Kod2;
    property Sthar_Sipnum: WideString read Get_Sthar_Sipnum write Set_Sthar_Sipnum;
    property Sthar_Carikod: WideString read Get_Sthar_Carikod write Set_Sthar_Carikod;
    property Sthar_Sip_Turu: WideString read Get_Sthar_Sip_Turu write Set_Sthar_Sip_Turu;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property Ekalan_Neden: WideString read Get_Ekalan_Neden write Set_Ekalan_Neden;
    property Ekalan: WideString read Get_Ekalan write Set_Ekalan;
    property Ekalan1: WideString read Get_Ekalan1 write Set_Ekalan1;
    property Redmik: Double read Get_Redmik write Set_Redmik;
    property Redneden: Integer read Get_Redneden write Set_Redneden;
    property Sira: Integer read Get_Sira write Set_Sira;
    property STra_SIPKONT: Integer read Get_STra_SIPKONT write Set_STra_SIPKONT;
    property Ambar_Kabulno: WideString read Get_Ambar_Kabulno write Set_Ambar_Kabulno;
    property Firma_Dovtip: Integer read Get_Firma_Dovtip write Set_Firma_Dovtip;
    property Firma_Dovtut: Double read Get_Firma_Dovtut write Set_Firma_Dovtut;
    property Firma_Dovmal: Double read Get_Firma_Dovmal write Set_Firma_Dovmal;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Irsaliye_No: WideString read Get_Irsaliye_No write Set_Irsaliye_No;
    property Irsaliye_Tarih: TDateTime read Get_Irsaliye_Tarih write Set_Irsaliye_Tarih;
    property KOSULKODU: WideString read Get_KOSULKODU write Set_KOSULKODU;
    property Ecza_fat_tip: Integer read Get_Ecza_fat_tip write Set_Ecza_fat_tip;
    property Sthar_Testar: TDateTime read Get_Sthar_Testar write Set_Sthar_Testar;
    property Olcubr: Integer read Get_Olcubr write Set_Olcubr;
    property IncKeyNo: Integer read Get_IncKeyNo write Set_IncKeyNo;
    property Vade_Tarihi: TDateTime read Get_Vade_Tarihi write Set_Vade_Tarihi;
    property Liste_No: WideString read Get_Liste_No write Set_Liste_No;
    property Baglanti_No: Integer read Get_Baglanti_No write Set_Baglanti_No;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property Muh_Kodu: WideString read Get_Muh_Kodu write Set_Muh_Kodu;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek3: Double read Get_F_Yedek3 write Set_F_Yedek3;
    property F_Yedek4: Double read Get_F_Yedek4 write Set_F_Yedek4;
    property F_Yedek5: Double read Get_F_Yedek5 write Set_F_Yedek5;
    property C_Yedek6: WideString read Get_C_Yedek6 write Set_C_Yedek6;
    property B_Yedek7: Integer read Get_B_Yedek7 write Set_B_Yedek7;
    property I_Yedek8: Integer read Get_I_Yedek8 write Set_I_Yedek8;
    property L_Yedek9: Integer read Get_L_Yedek9 write Set_L_Yedek9;
    property D_YEDEK10: TDateTime read Get_D_YEDEK10 write Set_D_YEDEK10;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property FIYATTARIHI: TDateTime read Get_FIYATTARIHI write Set_FIYATTARIHI;
    property KOSULTARIHI: TDateTime read Get_KOSULTARIHI write Set_KOSULTARIHI;
    property Satisk1tip: Integer read Get_Satisk1tip write Set_Satisk1tip;
    property Satisk2tip: Integer read Get_Satisk2tip write Set_Satisk2tip;
    property Satisk3tip: Integer read Get_Satisk3tip write Set_Satisk3tip;
    property Satisk4tip: Integer read Get_Satisk4tip write Set_Satisk4tip;
    property Satisk5tip: Integer read Get_Satisk5tip write Set_Satisk5tip;
    property Satisk6tip: Integer read Get_Satisk6tip write Set_Satisk6tip;
    property EXPORTTYPE: Integer read Get_EXPORTTYPE write Set_EXPORTTYPE;
    property Exportmik: Double read Get_Exportmik write Set_Exportmik;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property KKMalF: Double read Get_KKMalF write Set_KKMalF;
    property Stra_IrsKont: Integer read Get_Stra_IrsKont write Set_Stra_IrsKont;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
    property GirisDepoKodu: SYSINT read Get_GirisDepoKodu write Set_GirisDepoKodu;
  end;

// *********************************************************************//
// DispIntf:  IStokHareketDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {80EE77BE-9B9F-4354-83E7-F46FC2860200}
// *********************************************************************//
  IStokHareketDisp = dispinterface
    ['{80EE77BE-9B9F-4354-83E7-F46FC2860200}']
    property Stok_Kodu: WideString dispid 601;
    property Fisno: WideString dispid 602;
    property Sthar_Gcmik: Double dispid 603;
    property Sthar_Gcmik2: Double dispid 604;
    property CEVRIM: Double dispid 605;
    property Sthar_Gckod: WideString dispid 406;
    property Sthar_Tarih: TDateTime dispid 407;
    property Sthar_Nf: Double dispid 408;
    property Sthar_Bf: Double dispid 409;
    property Sthar_Iaf: Double dispid 410;
    property Sthar_Kdv: Double dispid 411;
    property DEPO_KODU: Integer dispid 412;
    property Sthar_Aciklama: WideString dispid 413;
    property Sthar_Satisk: Double dispid 414;
    property Sthar_Malfisk: Double dispid 415;
    property Sthar_Ftirsip: WideString dispid 416;
    property Sthar_Satisk2: Double dispid 417;
    property Liste_Fiat: Integer dispid 418;
    property Sthar_Htur: WideString dispid 419;
    property Sthar_Dovtip: Integer dispid 420;
    property PROMASYON_KODU: Integer dispid 421;
    property Sthar_Dovfiat: Double dispid 422;
    property Sthar_Odegun: Integer dispid 423;
    property STra_SatIsk3: Double dispid 424;
    property STra_SatIsk4: Double dispid 425;
    property STra_SatIsk5: Double dispid 426;
    property STra_SatIsk6: Double dispid 427;
    property Sthar_Bgtip: WideString dispid 428;
    property Sthar_Kod1: WideString dispid 429;
    property Sthar_Kod2: WideString dispid 430;
    property Sthar_Sipnum: WideString dispid 431;
    property Sthar_Carikod: WideString dispid 432;
    property Sthar_Sip_Turu: WideString dispid 433;
    property Plasiyer_Kodu: WideString dispid 434;
    property Ekalan_Neden: WideString dispid 435;
    property Ekalan: WideString dispid 436;
    property Ekalan1: WideString dispid 437;
    property Redmik: Double dispid 438;
    property Redneden: Integer dispid 439;
    property Sira: Integer dispid 440;
    property STra_SIPKONT: Integer dispid 441;
    property Ambar_Kabulno: WideString dispid 442;
    property Firma_Dovtip: Integer dispid 443;
    property Firma_Dovtut: Double dispid 444;
    property Firma_Dovmal: Double dispid 445;
    property Update_Kodu: WideString dispid 446;
    property Irsaliye_No: WideString dispid 447;
    property Irsaliye_Tarih: TDateTime dispid 448;
    property KOSULKODU: WideString dispid 449;
    property Ecza_fat_tip: Integer dispid 450;
    property Sthar_Testar: TDateTime dispid 451;
    property Olcubr: Integer dispid 452;
    property IncKeyNo: Integer dispid 453;
    property Vade_Tarihi: TDateTime dispid 454;
    property Liste_No: WideString dispid 455;
    property Baglanti_No: Integer dispid 456;
    property Sube_Kodu: Integer dispid 457;
    property Muh_Kodu: WideString dispid 458;
    property S_Yedek1: WideString dispid 459;
    property S_Yedek2: WideString dispid 460;
    property F_Yedek3: Double dispid 461;
    property F_Yedek4: Double dispid 462;
    property F_Yedek5: Double dispid 463;
    property C_Yedek6: WideString dispid 464;
    property B_Yedek7: Integer dispid 465;
    property I_Yedek8: Integer dispid 466;
    property L_Yedek9: Integer dispid 467;
    property D_YEDEK10: TDateTime dispid 468;
    property Proje_Kodu: WideString dispid 469;
    property FIYATTARIHI: TDateTime dispid 470;
    property KOSULTARIHI: TDateTime dispid 471;
    property Satisk1tip: Integer dispid 472;
    property Satisk2tip: Integer dispid 473;
    property Satisk3tip: Integer dispid 474;
    property Satisk4tip: Integer dispid 475;
    property Satisk5tip: Integer dispid 476;
    property Satisk6tip: Integer dispid 477;
    property EXPORTTYPE: Integer dispid 478;
    property Exportmik: Double dispid 479;
    property DuzeltmeTarihi: TDateTime dispid 480;
    property OnayTipi: WideString dispid 481;
    property OnayNum: Integer dispid 482;
    property KKMalF: Double dispid 483;
    property Stra_IrsKont: Integer dispid 484;
    property YapKod: WideString dispid 485;
    procedure ReceteliKayit(UretSonDepo: TUretSonDepo; YariMamuldeStokKullan: WordBool; 
                            MaliyetlerCarpilsin: WordBool); dispid 501;
    property GirisDepoKodu: SYSINT dispid 502;
    procedure SahalariTemizle; dispid 401;
    property SilmeIcinGerekliSahalar: WideString readonly dispid 402;
    property SonKayitNoAl: WordBool dispid 403;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IBasim
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FC60620E-E49F-4028-A3A6-6D4D7E7D01FC}
// *********************************************************************//
  IBasim = interface(IMerkez)
    ['{FC60620E-E49F-4028-A3A6-6D4D7E7D01FC}']
    function FaturaBasim(FaturaTipi: TFaturaTip; const FatNo: WideString; const CariKodu: WideString): WordBool; safecall;
    function FaturaBasimDizaynNo(FaturaTipi: TFaturaTip; const FaturaNo: WideString; 
                                 const CariKodu: WideString; DizaynNo: Integer): WordBool; safecall;
    function KantarBasim(TartimNumarasi: Integer): WordBool; safecall;
    procedure MustahsilBasim(const BelgeNo: WideString); safecall;
    function NetBasimDizaynNo(FaturaTipi: TFaturaTip; const FaturaNo: WideString; 
                              const CariKodu: WideString; DizaynNo: Integer; 
                              out ResStream: WideString): WordBool; safecall;
    procedure CekSenetBasim(BelgeTipi: TCekSenType; const BelgeNo: WideString); safecall;
    procedure BordroBasim(BelgeTipi: TCekSenType; const BelgeNo: WideString); safecall;
    procedure CekSenetBasimDizaynNo(BelgeTipi: TCekSenType; const BelgeNo: WideString; 
                                    DizaynNo: Integer); safecall;
    procedure IrsFatBarkodBas(const Fatura: IFatura; const DizaynKodu: WideString; 
                              BasimAdeti: Integer); safecall;
    procedure StokBarkodBas(const EtiketBilgi: IBarkodBilgi); safecall;
  end;

// *********************************************************************//
// DispIntf:  IBasimDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FC60620E-E49F-4028-A3A6-6D4D7E7D01FC}
// *********************************************************************//
  IBasimDisp = dispinterface
    ['{FC60620E-E49F-4028-A3A6-6D4D7E7D01FC}']
    function FaturaBasim(FaturaTipi: TFaturaTip; const FatNo: WideString; const CariKodu: WideString): WordBool; dispid 301;
    function FaturaBasimDizaynNo(FaturaTipi: TFaturaTip; const FaturaNo: WideString; 
                                 const CariKodu: WideString; DizaynNo: Integer): WordBool; dispid 302;
    function KantarBasim(TartimNumarasi: Integer): WordBool; dispid 303;
    procedure MustahsilBasim(const BelgeNo: WideString); dispid 304;
    function NetBasimDizaynNo(FaturaTipi: TFaturaTip; const FaturaNo: WideString; 
                              const CariKodu: WideString; DizaynNo: Integer; 
                              out ResStream: WideString): WordBool; dispid 305;
    procedure CekSenetBasim(BelgeTipi: TCekSenType; const BelgeNo: WideString); dispid 306;
    procedure BordroBasim(BelgeTipi: TCekSenType; const BelgeNo: WideString); dispid 307;
    procedure CekSenetBasimDizaynNo(BelgeTipi: TCekSenType; const BelgeNo: WideString; 
                                    DizaynNo: Integer); dispid 308;
    procedure IrsFatBarkodBas(const Fatura: IFatura; const DizaynKodu: WideString; 
                              BasimAdeti: Integer); dispid 309;
    procedure StokBarkodBas(const EtiketBilgi: IBarkodBilgi); dispid 310;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IMaliGrup
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B00D1D21-626B-42D7-B516-632DD6A9A92A}
// *********************************************************************//
  IMaliGrup = interface(IData2)
    ['{B00D1D21-626B-42D7-B516-632DD6A9A92A}']
    function Get_GrupKod: WideString; safecall;
    procedure Set_GrupKod(const Value: WideString); safecall;
    function Get_ISIM: WideString; safecall;
    procedure Set_ISIM(const Value: WideString); safecall;
    function Get_AnaKod: WideString; safecall;
    procedure Set_AnaKod(const Value: WideString); safecall;
    function Get_Tur: WideString; safecall;
    procedure Set_Tur(const Value: WideString); safecall;
    function Get_HangiOlcuBirimi: Shortint; safecall;
    procedure Set_HangiOlcuBirimi(Value: Shortint); safecall;
    function Get_HamOrtSatFi: WideString; safecall;
    procedure Set_HamOrtSatFi(const Value: WideString); safecall;
    function Get_BRHamMadde: Double; safecall;
    procedure Set_BRHamMadde(Value: Double); safecall;
    function Get_BRAmbalaj: Double; safecall;
    procedure Set_BRAmbalaj(Value: Double); safecall;
    function Get_BrIscSur: Double; safecall;
    procedure Set_BrIscSur(Value: Double); safecall;
    function Get_BREnerji: Double; safecall;
    procedure Set_BREnerji(Value: Double); safecall;
    function Get_BRAmort: Double; safecall;
    procedure Set_BRAmort(Value: Double); safecall;
    function Get_BRYard: Double; safecall;
    procedure Set_BRYard(Value: Double); safecall;
    function Get_BRYedek: Double; safecall;
    procedure Set_BRYedek(Value: Double); safecall;
    function Get_BRMalGider_1: Double; safecall;
    procedure Set_BRMalGider_1(Value: Double); safecall;
    function Get_BRMalGider_2: Double; safecall;
    procedure Set_BRMalGider_2(Value: Double); safecall;
    function Get_BrMalGider_3: Double; safecall;
    procedure Set_BrMalGider_3(Value: Double); safecall;
    function Get_BRMalGider_4: Double; safecall;
    procedure Set_BRMalGider_4(Value: Double); safecall;
    function Get_BRMalGider_5: Double; safecall;
    procedure Set_BRMalGider_5(Value: Double); safecall;
    function Get_YariMamulHesKod: WideString; safecall;
    procedure Set_YariMamulHesKod(const Value: WideString); safecall;
    function Get_MamulHesKod: WideString; safecall;
    procedure Set_MamulHesKod(const Value: WideString); safecall;
    function Get_HamMadSarfHes: WideString; safecall;
    procedure Set_HamMadSarfHes(const Value: WideString); safecall;
    function Get_AmbalajHes: WideString; safecall;
    procedure Set_AmbalajHes(const Value: WideString); safecall;
    function Get_SatMalMaliyet: WideString; safecall;
    procedure Set_SatMalMaliyet(const Value: WideString); safecall;
    function Get_IlkMadMalzYans: WideString; safecall;
    procedure Set_IlkMadMalzYans(const Value: WideString); safecall;
    function Get_AmbalajYans: WideString; safecall;
    procedure Set_AmbalajYans(const Value: WideString); safecall;
    function Get_IsciYans1: WideString; safecall;
    procedure Set_IsciYans1(const Value: WideString); safecall;
    function Get_IsciYans2: WideString; safecall;
    procedure Set_IsciYans2(const Value: WideString); safecall;
    function Get_EnerjiYans: WideString; safecall;
    procedure Set_EnerjiYans(const Value: WideString); safecall;
    function Get_AmortYans: WideString; safecall;
    procedure Set_AmortYans(const Value: WideString); safecall;
    function Get_YardSerYans: WideString; safecall;
    procedure Set_YardSerYans(const Value: WideString); safecall;
    function Get_YedParcaYans: WideString; safecall;
    procedure Set_YedParcaYans(const Value: WideString); safecall;
    function Get_MalGider1_Yans: WideString; safecall;
    procedure Set_MalGider1_Yans(const Value: WideString); safecall;
    function Get_MalGider2_Yans: WideString; safecall;
    procedure Set_MalGider2_Yans(const Value: WideString); safecall;
    function Get_MalGider3_Yans: WideString; safecall;
    procedure Set_MalGider3_Yans(const Value: WideString); safecall;
    function Get_MalGider4_Yans: WideString; safecall;
    procedure Set_MalGider4_Yans(const Value: WideString); safecall;
    function Get_MalGider5_Yans: WideString; safecall;
    procedure Set_MalGider5_Yans(const Value: WideString); safecall;
    function Get_AyBasiStok: Double; safecall;
    procedure Set_AyBasiStok(Value: Double); safecall;
    function Get_AySonuStok: Double; safecall;
    procedure Set_AySonuStok(Value: Double); safecall;
    function Get_Yedek1: WideString; safecall;
    procedure Set_Yedek1(const Value: WideString); safecall;
    function Get_Yedek2: WideString; safecall;
    procedure Set_Yedek2(const Value: WideString); safecall;
    function Get_Yedek3: WideString; safecall;
    procedure Set_Yedek3(const Value: WideString); safecall;
    function Get_Yedek4: WideString; safecall;
    procedure Set_Yedek4(const Value: WideString); safecall;
    function Get_Yedek5: Double; safecall;
    procedure Set_Yedek5(Value: Double); safecall;
    function Get_Yedek6: Double; safecall;
    procedure Set_Yedek6(Value: Double); safecall;
    function Get_Yedek7: Double; safecall;
    procedure Set_Yedek7(Value: Double); safecall;
    function Get_Yedek8: Double; safecall;
    procedure Set_Yedek8(Value: Double); safecall;
    function Get_Yedek9: WideString; safecall;
    procedure Set_Yedek9(const Value: WideString); safecall;
    function Get_Yedek10: WideString; safecall;
    procedure Set_Yedek10(const Value: WideString); safecall;
    function Get_Yedek11: WideString; safecall;
    procedure Set_Yedek11(const Value: WideString); safecall;
    function Get_Yedek12: WideString; safecall;
    procedure Set_Yedek12(const Value: WideString); safecall;
    function Get_Proje_Kodu: WideString; safecall;
    procedure Set_Proje_Kodu(const Value: WideString); safecall;
    function Get_MamulTransHesap: WideString; safecall;
    procedure Set_MamulTransHesap(const Value: WideString); safecall;
    function Get_KayitYapanKul: WideString; safecall;
    procedure Set_KayitYapanKul(const Value: WideString); safecall;
    function Get_KayitTarihi: TDateTime; safecall;
    procedure Set_KayitTarihi(Value: TDateTime); safecall;
    function Get_DuzeltmeYapanKul: WideString; safecall;
    procedure Set_DuzeltmeYapanKul(const Value: WideString); safecall;
    function Get_DuzeltmeTarihi: TDateTime; safecall;
    procedure Set_DuzeltmeTarihi(Value: TDateTime); safecall;
    function Get_ExpSatMalMaliyet: WideString; safecall;
    procedure Set_ExpSatMalMaliyet(const Value: WideString); safecall;
    property GrupKod: WideString read Get_GrupKod write Set_GrupKod;
    property ISIM: WideString read Get_ISIM write Set_ISIM;
    property AnaKod: WideString read Get_AnaKod write Set_AnaKod;
    property Tur: WideString read Get_Tur write Set_Tur;
    property HangiOlcuBirimi: Shortint read Get_HangiOlcuBirimi write Set_HangiOlcuBirimi;
    property HamOrtSatFi: WideString read Get_HamOrtSatFi write Set_HamOrtSatFi;
    property BRHamMadde: Double read Get_BRHamMadde write Set_BRHamMadde;
    property BRAmbalaj: Double read Get_BRAmbalaj write Set_BRAmbalaj;
    property BrIscSur: Double read Get_BrIscSur write Set_BrIscSur;
    property BREnerji: Double read Get_BREnerji write Set_BREnerji;
    property BRAmort: Double read Get_BRAmort write Set_BRAmort;
    property BRYard: Double read Get_BRYard write Set_BRYard;
    property BRYedek: Double read Get_BRYedek write Set_BRYedek;
    property BRMalGider_1: Double read Get_BRMalGider_1 write Set_BRMalGider_1;
    property BRMalGider_2: Double read Get_BRMalGider_2 write Set_BRMalGider_2;
    property BrMalGider_3: Double read Get_BrMalGider_3 write Set_BrMalGider_3;
    property BRMalGider_4: Double read Get_BRMalGider_4 write Set_BRMalGider_4;
    property BRMalGider_5: Double read Get_BRMalGider_5 write Set_BRMalGider_5;
    property YariMamulHesKod: WideString read Get_YariMamulHesKod write Set_YariMamulHesKod;
    property MamulHesKod: WideString read Get_MamulHesKod write Set_MamulHesKod;
    property HamMadSarfHes: WideString read Get_HamMadSarfHes write Set_HamMadSarfHes;
    property AmbalajHes: WideString read Get_AmbalajHes write Set_AmbalajHes;
    property SatMalMaliyet: WideString read Get_SatMalMaliyet write Set_SatMalMaliyet;
    property IlkMadMalzYans: WideString read Get_IlkMadMalzYans write Set_IlkMadMalzYans;
    property AmbalajYans: WideString read Get_AmbalajYans write Set_AmbalajYans;
    property IsciYans1: WideString read Get_IsciYans1 write Set_IsciYans1;
    property IsciYans2: WideString read Get_IsciYans2 write Set_IsciYans2;
    property EnerjiYans: WideString read Get_EnerjiYans write Set_EnerjiYans;
    property AmortYans: WideString read Get_AmortYans write Set_AmortYans;
    property YardSerYans: WideString read Get_YardSerYans write Set_YardSerYans;
    property YedParcaYans: WideString read Get_YedParcaYans write Set_YedParcaYans;
    property MalGider1_Yans: WideString read Get_MalGider1_Yans write Set_MalGider1_Yans;
    property MalGider2_Yans: WideString read Get_MalGider2_Yans write Set_MalGider2_Yans;
    property MalGider3_Yans: WideString read Get_MalGider3_Yans write Set_MalGider3_Yans;
    property MalGider4_Yans: WideString read Get_MalGider4_Yans write Set_MalGider4_Yans;
    property MalGider5_Yans: WideString read Get_MalGider5_Yans write Set_MalGider5_Yans;
    property AyBasiStok: Double read Get_AyBasiStok write Set_AyBasiStok;
    property AySonuStok: Double read Get_AySonuStok write Set_AySonuStok;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: WideString read Get_Yedek3 write Set_Yedek3;
    property Yedek4: WideString read Get_Yedek4 write Set_Yedek4;
    property Yedek5: Double read Get_Yedek5 write Set_Yedek5;
    property Yedek6: Double read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Double read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Double read Get_Yedek8 write Set_Yedek8;
    property Yedek9: WideString read Get_Yedek9 write Set_Yedek9;
    property Yedek10: WideString read Get_Yedek10 write Set_Yedek10;
    property Yedek11: WideString read Get_Yedek11 write Set_Yedek11;
    property Yedek12: WideString read Get_Yedek12 write Set_Yedek12;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property MamulTransHesap: WideString read Get_MamulTransHesap write Set_MamulTransHesap;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property ExpSatMalMaliyet: WideString read Get_ExpSatMalMaliyet write Set_ExpSatMalMaliyet;
  end;

// *********************************************************************//
// DispIntf:  IMaliGrupDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B00D1D21-626B-42D7-B516-632DD6A9A92A}
// *********************************************************************//
  IMaliGrupDisp = dispinterface
    ['{B00D1D21-626B-42D7-B516-632DD6A9A92A}']
    property GrupKod: WideString dispid 501;
    property ISIM: WideString dispid 502;
    property AnaKod: WideString dispid 503;
    property Tur: WideString dispid 504;
    property HangiOlcuBirimi: {??Shortint}OleVariant dispid 505;
    property HamOrtSatFi: WideString dispid 506;
    property BRHamMadde: Double dispid 507;
    property BRAmbalaj: Double dispid 508;
    property BrIscSur: Double dispid 409;
    property BREnerji: Double dispid 410;
    property BRAmort: Double dispid 411;
    property BRYard: Double dispid 412;
    property BRYedek: Double dispid 413;
    property BRMalGider_1: Double dispid 414;
    property BRMalGider_2: Double dispid 415;
    property BrMalGider_3: Double dispid 416;
    property BRMalGider_4: Double dispid 417;
    property BRMalGider_5: Double dispid 418;
    property YariMamulHesKod: WideString dispid 419;
    property MamulHesKod: WideString dispid 420;
    property HamMadSarfHes: WideString dispid 421;
    property AmbalajHes: WideString dispid 422;
    property SatMalMaliyet: WideString dispid 423;
    property IlkMadMalzYans: WideString dispid 424;
    property AmbalajYans: WideString dispid 425;
    property IsciYans1: WideString dispid 426;
    property IsciYans2: WideString dispid 427;
    property EnerjiYans: WideString dispid 428;
    property AmortYans: WideString dispid 429;
    property YardSerYans: WideString dispid 430;
    property YedParcaYans: WideString dispid 431;
    property MalGider1_Yans: WideString dispid 432;
    property MalGider2_Yans: WideString dispid 433;
    property MalGider3_Yans: WideString dispid 434;
    property MalGider4_Yans: WideString dispid 435;
    property MalGider5_Yans: WideString dispid 436;
    property AyBasiStok: Double dispid 437;
    property AySonuStok: Double dispid 438;
    property Yedek1: WideString dispid 439;
    property Yedek2: WideString dispid 440;
    property Yedek3: WideString dispid 441;
    property Yedek4: WideString dispid 442;
    property Yedek5: Double dispid 443;
    property Yedek6: Double dispid 444;
    property Yedek7: Double dispid 445;
    property Yedek8: Double dispid 446;
    property Yedek9: WideString dispid 447;
    property Yedek10: WideString dispid 448;
    property Yedek11: WideString dispid 449;
    property Yedek12: WideString dispid 450;
    property Proje_Kodu: WideString dispid 451;
    property MamulTransHesap: WideString dispid 452;
    property KayitYapanKul: WideString dispid 453;
    property KayitTarihi: TDateTime dispid 454;
    property DuzeltmeYapanKul: WideString dispid 455;
    property DuzeltmeTarihi: TDateTime dispid 456;
    property ExpSatMalMaliyet: WideString dispid 457;
    procedure SahalariTemizle; dispid 401;
    property SilmeIcinGerekliSahalar: WideString readonly dispid 402;
    property SonKayitNoAl: WordBool dispid 403;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IUretim
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B0249E0F-4626-4F0F-A371-94C01AD047C0}
// *********************************************************************//
  IUretim = interface(IData2)
    ['{B0249E0F-4626-4F0F-A371-94C01AD047C0}']
    function Get_UretSon_FisNo: WideString; safecall;
    procedure Set_UretSon_FisNo(const Value: WideString); safecall;
    function Get_UretSon_Tarih: TDateTime; safecall;
    procedure Set_UretSon_Tarih(Value: TDateTime); safecall;
    function Get_UretSon_SipNo: WideString; safecall;
    procedure Set_UretSon_SipNo(const Value: WideString); safecall;
    function Get_UretSon_Depo: Integer; safecall;
    procedure Set_UretSon_Depo(Value: Integer); safecall;
    function Get_UretSon_Mamul: WideString; safecall;
    procedure Set_UretSon_Mamul(const Value: WideString); safecall;
    function Get_UretSon_Miktar: Double; safecall;
    procedure Set_UretSon_Miktar(Value: Double); safecall;
    function Get_UretSon_MalY1: Double; safecall;
    procedure Set_UretSon_MalY1(Value: Double); safecall;
    function Get_UretSon_Maly2: Double; safecall;
    procedure Set_UretSon_Maly2(Value: Double); safecall;
    function Get_Sube_Kodu: Integer; safecall;
    procedure Set_Sube_Kodu(Value: Integer); safecall;
    function Get_IncKeyNo: Integer; safecall;
    procedure Set_IncKeyNo(Value: Integer); safecall;
    function Get_D_Yedek1: TDateTime; safecall;
    procedure Set_D_Yedek1(Value: TDateTime); safecall;
    function Get_D_Yedek2: TDateTime; safecall;
    procedure Set_D_Yedek2(Value: TDateTime); safecall;
    function Get_S_Yedek1: WideString; safecall;
    procedure Set_S_Yedek1(const Value: WideString); safecall;
    function Get_S_Yedek2: WideString; safecall;
    procedure Set_S_Yedek2(const Value: WideString); safecall;
    function Get_S_Yedek3: WideString; safecall;
    procedure Set_S_Yedek3(const Value: WideString); safecall;
    function Get_S_Yedek4: WideString; safecall;
    procedure Set_S_Yedek4(const Value: WideString); safecall;
    function Get_F_Yedek1: Double; safecall;
    procedure Set_F_Yedek1(Value: Double); safecall;
    function Get_F_Yedek2: Double; safecall;
    procedure Set_F_Yedek2(Value: Double); safecall;
    function Get_I_Yedek1: Integer; safecall;
    procedure Set_I_Yedek1(Value: Integer); safecall;
    function Get_I_Yedek2: Integer; safecall;
    procedure Set_I_Yedek2(Value: Integer); safecall;
    function Get_B_Yedek1: Shortint; safecall;
    procedure Set_B_Yedek1(Value: Shortint); safecall;
    function Get_B_Yedek2: Shortint; safecall;
    procedure Set_B_Yedek2(Value: Shortint); safecall;
    function Get_C_Yedek1: WideString; safecall;
    procedure Set_C_Yedek1(const Value: WideString); safecall;
    function Get_C_Yedek2: WideString; safecall;
    procedure Set_C_Yedek2(const Value: WideString); safecall;
    function Get_Proje_Kodu: WideString; safecall;
    procedure Set_Proje_Kodu(const Value: WideString); safecall;
    function Get_Aciklama: WideString; safecall;
    procedure Set_Aciklama(const Value: WideString); safecall;
    function Get_Recete_Tarih: TDateTime; safecall;
    procedure Set_Recete_Tarih(Value: TDateTime); safecall;
    function Get_SetNo: WideString; safecall;
    procedure Set_SetNo(const Value: WideString); safecall;
    function Get_Oncelik: Integer; safecall;
    procedure Set_Oncelik(Value: Integer); safecall;
    function Get_KayitYapanKul: WideString; safecall;
    procedure Set_KayitYapanKul(const Value: WideString); safecall;
    function Get_KayitTarihi: TDateTime; safecall;
    procedure Set_KayitTarihi(Value: TDateTime); safecall;
    function Get_DuzeltmeYapanKul: WideString; safecall;
    procedure Set_DuzeltmeYapanKul(const Value: WideString); safecall;
    function Get_DuzeltmeTarihi: TDateTime; safecall;
    procedure Set_DuzeltmeTarihi(Value: TDateTime); safecall;
    function Get_YapKod: WideString; safecall;
    procedure Set_YapKod(const Value: WideString); safecall;
    procedure kayitUretimSonu(UretSonDepo: TUretSonDepo; YariMamuldeStokKullan: WordBool; 
                              MaliyetlerCarpilsin: WordBool); safecall;
    procedure kayitFisNoIleUretimSonu(const Fisno: WideString; UretSonDepo: TUretSonDepo; 
                                      YariMamuldeStokKullan: WordBool; MaliyetlerCarpilsin: WordBool); safecall;
    function SonFisNumarasi(const Seri: WideString): WideString; safecall;
    procedure IsEmrindenGetir(const IsEmriNo: WideString); safecall;
    procedure UretimSonuEntegre(const UretSonEntegParam: IUretSonEnteg); safecall;
    property UretSon_FisNo: WideString read Get_UretSon_FisNo write Set_UretSon_FisNo;
    property UretSon_Tarih: TDateTime read Get_UretSon_Tarih write Set_UretSon_Tarih;
    property UretSon_SipNo: WideString read Get_UretSon_SipNo write Set_UretSon_SipNo;
    property UretSon_Depo: Integer read Get_UretSon_Depo write Set_UretSon_Depo;
    property UretSon_Mamul: WideString read Get_UretSon_Mamul write Set_UretSon_Mamul;
    property UretSon_Miktar: Double read Get_UretSon_Miktar write Set_UretSon_Miktar;
    property UretSon_MalY1: Double read Get_UretSon_MalY1 write Set_UretSon_MalY1;
    property UretSon_Maly2: Double read Get_UretSon_Maly2 write Set_UretSon_Maly2;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property IncKeyNo: Integer read Get_IncKeyNo write Set_IncKeyNo;
    property D_Yedek1: TDateTime read Get_D_Yedek1 write Set_D_Yedek1;
    property D_Yedek2: TDateTime read Get_D_Yedek2 write Set_D_Yedek2;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property S_Yedek3: WideString read Get_S_Yedek3 write Set_S_Yedek3;
    property S_Yedek4: WideString read Get_S_Yedek4 write Set_S_Yedek4;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property I_Yedek2: Integer read Get_I_Yedek2 write Set_I_Yedek2;
    property B_Yedek1: Shortint read Get_B_Yedek1 write Set_B_Yedek1;
    property B_Yedek2: Shortint read Get_B_Yedek2 write Set_B_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property Recete_Tarih: TDateTime read Get_Recete_Tarih write Set_Recete_Tarih;
    property SetNo: WideString read Get_SetNo write Set_SetNo;
    property Oncelik: Integer read Get_Oncelik write Set_Oncelik;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
  end;

// *********************************************************************//
// DispIntf:  IUretimDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B0249E0F-4626-4F0F-A371-94C01AD047C0}
// *********************************************************************//
  IUretimDisp = dispinterface
    ['{B0249E0F-4626-4F0F-A371-94C01AD047C0}']
    property UretSon_FisNo: WideString dispid 501;
    property UretSon_Tarih: TDateTime dispid 502;
    property UretSon_SipNo: WideString dispid 503;
    property UretSon_Depo: Integer dispid 504;
    property UretSon_Mamul: WideString dispid 505;
    property UretSon_Miktar: Double dispid 506;
    property UretSon_MalY1: Double dispid 507;
    property UretSon_Maly2: Double dispid 508;
    property Sube_Kodu: Integer dispid 509;
    property IncKeyNo: Integer dispid 510;
    property D_Yedek1: TDateTime dispid 511;
    property D_Yedek2: TDateTime dispid 512;
    property S_Yedek1: WideString dispid 513;
    property S_Yedek2: WideString dispid 514;
    property S_Yedek3: WideString dispid 515;
    property S_Yedek4: WideString dispid 516;
    property F_Yedek1: Double dispid 517;
    property F_Yedek2: Double dispid 518;
    property I_Yedek1: Integer dispid 519;
    property I_Yedek2: Integer dispid 520;
    property B_Yedek1: {??Shortint}OleVariant dispid 521;
    property B_Yedek2: {??Shortint}OleVariant dispid 522;
    property C_Yedek1: WideString dispid 523;
    property C_Yedek2: WideString dispid 524;
    property Proje_Kodu: WideString dispid 525;
    property Aciklama: WideString dispid 526;
    property Recete_Tarih: TDateTime dispid 527;
    property SetNo: WideString dispid 528;
    property Oncelik: Integer dispid 529;
    property KayitYapanKul: WideString dispid 530;
    property KayitTarihi: TDateTime dispid 531;
    property DuzeltmeYapanKul: WideString dispid 532;
    property DuzeltmeTarihi: TDateTime dispid 533;
    property YapKod: WideString dispid 534;
    procedure kayitUretimSonu(UretSonDepo: TUretSonDepo; YariMamuldeStokKullan: WordBool; 
                              MaliyetlerCarpilsin: WordBool); dispid 535;
    procedure kayitFisNoIleUretimSonu(const Fisno: WideString; UretSonDepo: TUretSonDepo; 
                                      YariMamuldeStokKullan: WordBool; MaliyetlerCarpilsin: WordBool); dispid 536;
    function SonFisNumarasi(const Seri: WideString): WideString; dispid 537;
    procedure IsEmrindenGetir(const IsEmriNo: WideString); dispid 538;
    procedure UretimSonuEntegre(const UretSonEntegParam: IUretSonEnteg); dispid 539;
    procedure SahalariTemizle; dispid 401;
    property SilmeIcinGerekliSahalar: WideString readonly dispid 402;
    property SonKayitNoAl: WordBool dispid 403;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IFatKosulDetay
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2FFE08F6-6EED-4218-8506-D9CFC5A4A087}
// *********************************************************************//
  IFatKosulDetay = interface(IDispatch)
    ['{2FFE08F6-6EED-4218-8506-D9CFC5A4A087}']
    function Get_KOSULKODU: WideString; safecall;
    function Get_BaslangicTarihi: TDateTime; safecall;
    function Get_BitisTarihi: TDateTime; safecall;
    function Get_StokKodu: WideString; safecall;
    function Get_RaporKodu: WideString; safecall;
    function Get_Vade: Integer; safecall;
    function Get_TutarMi: WordBool; safecall;
    function Get_IskOranlari(Index: Integer): Double; safecall;
    function Get_FIYATTARIHI: TDateTime; safecall;
    function Get_ListeFiyati: Smallint; safecall;
    function Get_MalFazlasi: IFatKosMalFazlasi; safecall;
    function Get_DetayRangeIskonto: IFatKosulRangeIsk; safecall;
    function Get_EkKosulDetayRangeIsk: IFatKosulRangeIsk; safecall;
    function Get_KalemDovTip: Integer; safecall;
    function Get_KalemBrutFiyat: Double; safecall;
    function Get_KalemMFBrutFiyat: Double; safecall;
    function Get_IlaveSekli: TFatKosIlaveSekli; safecall;
    function Get_IskToplamSekli: TFatIskToplamSekli; safecall;
    function Get_SabitVadeTar: TDateTime; safecall;
    function Get_CMHesapDahil: WordBool; safecall;
    function Get_CiroIskDahil: WordBool; safecall;
    function Get_PesinIskOran: TDateTime; safecall;
    function Get_GecikmeKatSayisi: Double; safecall;
    function Get_VadeKodu: WideString; safecall;
    function Get_VadeHangiIsk: Smallint; safecall;
    function Get_VadeIskontoTipi: Integer; safecall;
    function Get_Olcubr: Integer; safecall;
    function Get_MalFiskIliski: WideString; safecall;
    function Get_MalFiskGrupMu: WordBool; safecall;
    function Get_StokIliski: WideString; safecall;
    function Get_FireHangiIsk: Smallint; safecall;
    function Get_FireIskontoTipi: Integer; safecall;
    function Get_FIYATGRUBU: WideString; safecall;
    property KOSULKODU: WideString read Get_KOSULKODU;
    property BaslangicTarihi: TDateTime read Get_BaslangicTarihi;
    property BitisTarihi: TDateTime read Get_BitisTarihi;
    property StokKodu: WideString read Get_StokKodu;
    property RaporKodu: WideString read Get_RaporKodu;
    property Vade: Integer read Get_Vade;
    property TutarMi: WordBool read Get_TutarMi;
    property IskOranlari[Index: Integer]: Double read Get_IskOranlari;
    property FIYATTARIHI: TDateTime read Get_FIYATTARIHI;
    property ListeFiyati: Smallint read Get_ListeFiyati;
    property MalFazlasi: IFatKosMalFazlasi read Get_MalFazlasi;
    property DetayRangeIskonto: IFatKosulRangeIsk read Get_DetayRangeIskonto;
    property EkKosulDetayRangeIsk: IFatKosulRangeIsk read Get_EkKosulDetayRangeIsk;
    property KalemDovTip: Integer read Get_KalemDovTip;
    property KalemBrutFiyat: Double read Get_KalemBrutFiyat;
    property KalemMFBrutFiyat: Double read Get_KalemMFBrutFiyat;
    property IlaveSekli: TFatKosIlaveSekli read Get_IlaveSekli;
    property IskToplamSekli: TFatIskToplamSekli read Get_IskToplamSekli;
    property SabitVadeTar: TDateTime read Get_SabitVadeTar;
    property CMHesapDahil: WordBool read Get_CMHesapDahil;
    property CiroIskDahil: WordBool read Get_CiroIskDahil;
    property PesinIskOran: TDateTime read Get_PesinIskOran;
    property GecikmeKatSayisi: Double read Get_GecikmeKatSayisi;
    property VadeKodu: WideString read Get_VadeKodu;
    property VadeHangiIsk: Smallint read Get_VadeHangiIsk;
    property VadeIskontoTipi: Integer read Get_VadeIskontoTipi;
    property Olcubr: Integer read Get_Olcubr;
    property MalFiskIliski: WideString read Get_MalFiskIliski;
    property MalFiskGrupMu: WordBool read Get_MalFiskGrupMu;
    property StokIliski: WideString read Get_StokIliski;
    property FireHangiIsk: Smallint read Get_FireHangiIsk;
    property FireIskontoTipi: Integer read Get_FireIskontoTipi;
    property FIYATGRUBU: WideString read Get_FIYATGRUBU;
  end;

// *********************************************************************//
// DispIntf:  IFatKosulDetayDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2FFE08F6-6EED-4218-8506-D9CFC5A4A087}
// *********************************************************************//
  IFatKosulDetayDisp = dispinterface
    ['{2FFE08F6-6EED-4218-8506-D9CFC5A4A087}']
    property KOSULKODU: WideString readonly dispid 201;
    property BaslangicTarihi: TDateTime readonly dispid 202;
    property BitisTarihi: TDateTime readonly dispid 203;
    property StokKodu: WideString readonly dispid 204;
    property RaporKodu: WideString readonly dispid 205;
    property Vade: Integer readonly dispid 206;
    property TutarMi: WordBool readonly dispid 207;
    property IskOranlari[Index: Integer]: Double readonly dispid 208;
    property FIYATTARIHI: TDateTime readonly dispid 209;
    property ListeFiyati: Smallint readonly dispid 210;
    property MalFazlasi: IFatKosMalFazlasi readonly dispid 211;
    property DetayRangeIskonto: IFatKosulRangeIsk readonly dispid 212;
    property EkKosulDetayRangeIsk: IFatKosulRangeIsk readonly dispid 213;
    property KalemDovTip: Integer readonly dispid 214;
    property KalemBrutFiyat: Double readonly dispid 215;
    property KalemMFBrutFiyat: Double readonly dispid 216;
    property IlaveSekli: TFatKosIlaveSekli readonly dispid 217;
    property IskToplamSekli: TFatIskToplamSekli readonly dispid 218;
    property SabitVadeTar: TDateTime readonly dispid 219;
    property CMHesapDahil: WordBool readonly dispid 220;
    property CiroIskDahil: WordBool readonly dispid 221;
    property PesinIskOran: TDateTime readonly dispid 222;
    property GecikmeKatSayisi: Double readonly dispid 223;
    property VadeKodu: WideString readonly dispid 224;
    property VadeHangiIsk: Smallint readonly dispid 225;
    property VadeIskontoTipi: Integer readonly dispid 226;
    property Olcubr: Integer readonly dispid 227;
    property MalFiskIliski: WideString readonly dispid 228;
    property MalFiskGrupMu: WordBool readonly dispid 229;
    property StokIliski: WideString readonly dispid 230;
    property FireHangiIsk: Smallint readonly dispid 231;
    property FireIskontoTipi: Integer readonly dispid 232;
    property FIYATGRUBU: WideString readonly dispid 233;
  end;

// *********************************************************************//
// Interface: IFatKosMalFazlasi
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4D13A9A5-92B2-4518-9BC8-E9BB5680333B}
// *********************************************************************//
  IFatKosMalFazlasi = interface(IDispatch)
    ['{4D13A9A5-92B2-4518-9BC8-E9BB5680333B}']
    function Get_StokKodu: WideString; safecall;
    function Get_Miktarlar(Index: Integer): Double; safecall;
    function Get_Fazlalar(Index: Integer): Double; safecall;
    property StokKodu: WideString read Get_StokKodu;
    property Miktarlar[Index: Integer]: Double read Get_Miktarlar;
    property Fazlalar[Index: Integer]: Double read Get_Fazlalar;
  end;

// *********************************************************************//
// DispIntf:  IFatKosMalFazlasiDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4D13A9A5-92B2-4518-9BC8-E9BB5680333B}
// *********************************************************************//
  IFatKosMalFazlasiDisp = dispinterface
    ['{4D13A9A5-92B2-4518-9BC8-E9BB5680333B}']
    property StokKodu: WideString readonly dispid 201;
    property Miktarlar[Index: Integer]: Double readonly dispid 202;
    property Fazlalar[Index: Integer]: Double readonly dispid 203;
  end;

// *********************************************************************//
// Interface: IFatKosulRangeIsk
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {86E48A36-061A-407F-AFEB-382A1C16D126}
// *********************************************************************//
  IFatKosulRangeIsk = interface(IDispatch)
    ['{86E48A36-061A-407F-AFEB-382A1C16D126}']
    function Get_VarMi: WordBool; safecall;
    function Get_MiktarMiTutarMi: WideString; safecall;
    function Get_Degerler(Index: Integer): Double; safecall;
    function Get_Iskler(Index: Integer): Double; safecall;
    function Get_HangiIsk: Smallint; safecall;
    property VarMi: WordBool read Get_VarMi;
    property MiktarMiTutarMi: WideString read Get_MiktarMiTutarMi;
    property Degerler[Index: Integer]: Double read Get_Degerler;
    property Iskler[Index: Integer]: Double read Get_Iskler;
    property HangiIsk: Smallint read Get_HangiIsk;
  end;

// *********************************************************************//
// DispIntf:  IFatKosulRangeIskDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {86E48A36-061A-407F-AFEB-382A1C16D126}
// *********************************************************************//
  IFatKosulRangeIskDisp = dispinterface
    ['{86E48A36-061A-407F-AFEB-382A1C16D126}']
    property VarMi: WordBool readonly dispid 201;
    property MiktarMiTutarMi: WideString readonly dispid 202;
    property Degerler[Index: Integer]: Double readonly dispid 203;
    property Iskler[Index: Integer]: Double readonly dispid 204;
    property HangiIsk: Smallint readonly dispid 205;
  end;

// *********************************************************************//
// Interface: IMustahsil
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F24DFA16-3055-4FBC-97F1-F60B5D5E2994}
// *********************************************************************//
  IMustahsil = interface(IData)
    ['{F24DFA16-3055-4FBC-97F1-F60B5D5E2994}']
    procedure SonNumaraYaz(const MustahsilNo: WideString); safecall;
    function SonNumaraOku: WideString; safecall;
    procedure Init(const CariKod: WideString); safecall;
    function Get_KalemAdedi: Integer; safecall;
    procedure Sakla; safecall;
    function Get_Ust: IMustahsilUst; safecall;
    function Get_Kalem(Index: Integer): IMustahsilKalem; safecall;
    function KalemEkle(const StokKodu: WideString): IMustahsilKalem; safecall;
    property KalemAdedi: Integer read Get_KalemAdedi;
    property Ust: IMustahsilUst read Get_Ust;
    property Kalem[Index: Integer]: IMustahsilKalem read Get_Kalem;
  end;

// *********************************************************************//
// DispIntf:  IMustahsilDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F24DFA16-3055-4FBC-97F1-F60B5D5E2994}
// *********************************************************************//
  IMustahsilDisp = dispinterface
    ['{F24DFA16-3055-4FBC-97F1-F60B5D5E2994}']
    procedure SonNumaraYaz(const MustahsilNo: WideString); dispid 401;
    function SonNumaraOku: WideString; dispid 402;
    procedure Init(const CariKod: WideString); dispid 403;
    property KalemAdedi: Integer readonly dispid 404;
    procedure Sakla; dispid 405;
    property Ust: IMustahsilUst readonly dispid 406;
    property Kalem[Index: Integer]: IMustahsilKalem readonly dispid 407;
    function KalemEkle(const StokKodu: WideString): IMustahsilKalem; dispid 408;
    procedure kayitYeni; dispid 301;
    procedure kayitDuzelt; dispid 302;
    procedure kayitSil; dispid 303;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool; dispid 304;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi); dispid 305;
    procedure NetsisLog(const Aciklama: WideString); dispid 306;
    function getirAktifNDS(NDSTip: TNDSTip): Integer; dispid 307;
    property TransactSupport: WordBool dispid 308;
    property Handle: Integer readonly dispid 201;
    property Name: WideString dispid 202;
    property Kernel: IKernel readonly dispid 203;
    procedure HataVer(Kod: Integer; const Hata: WideString; const Detay: WideString); dispid 204;
  end;

// *********************************************************************//
// Interface: IMustahsilUst
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4737CFA4-5F6E-4121-993A-035AD959E52C}
// *********************************************************************//
  IMustahsilUst = interface(IDispatch)
    ['{4737CFA4-5F6E-4121-993A-035AD959E52C}']
    function Get_Sube_Kodu: Integer; safecall;
    procedure Set_Sube_Kodu(Value: Integer); safecall;
    function Get_FATIRS_NO: WideString; safecall;
    procedure Set_FATIRS_NO(const Value: WideString); safecall;
    function Get_TIPI: Integer; safecall;
    procedure Set_TIPI(Value: Integer); safecall;
    function Get_CARI_ISIM: WideString; safecall;
    procedure Set_CARI_ISIM(const Value: WideString); safecall;
    function Get_CARI_ADRES: WideString; safecall;
    procedure Set_CARI_ADRES(const Value: WideString); safecall;
    function Get_CARI_IL: WideString; safecall;
    procedure Set_CARI_IL(const Value: WideString); safecall;
    function Get_CARI_ILCE: WideString; safecall;
    procedure Set_CARI_ILCE(const Value: WideString); safecall;
    function Get_Cari_Vergi_Daire: WideString; safecall;
    procedure Set_Cari_Vergi_Daire(const Value: WideString); safecall;
    function Get_Cari_Vergi_No: WideString; safecall;
    procedure Set_Cari_Vergi_No(const Value: WideString); safecall;
    function Get_Tarih: TDateTime; safecall;
    procedure Set_Tarih(Value: TDateTime); safecall;
    function Get_Cari_Kodu: WideString; safecall;
    procedure Set_Cari_Kodu(const Value: WideString); safecall;
    function Get_BRUTTUTAR: Double; safecall;
    procedure Set_BRUTTUTAR(Value: Double); safecall;
    function Get_Fon: Double; safecall;
    procedure Set_Fon(Value: Double); safecall;
    function Get_Stopaj: Double; safecall;
    procedure Set_Stopaj(Value: Double); safecall;
    function Get_Borsa: Double; safecall;
    procedure Set_Borsa(Value: Double); safecall;
    function Get_Avans: Double; safecall;
    procedure Set_Avans(Value: Double); safecall;
    function Get_Cek_No: WideString; safecall;
    procedure Set_Cek_No(const Value: WideString); safecall;
    function Get_Banka: WideString; safecall;
    procedure Set_Banka(const Value: WideString); safecall;
    function Get_Cek_Tarih: TDateTime; safecall;
    procedure Set_Cek_Tarih(Value: TDateTime); safecall;
    function Get_Cek_Tutar: Double; safecall;
    procedure Set_Cek_Tutar(Value: Double); safecall;
    function Get_BagkurNo: Double; safecall;
    procedure Set_BagkurNo(Value: Double); safecall;
    function Get_Mera: Double; safecall;
    procedure Set_Mera(Value: Double); safecall;
    function Get_ODEMEGUNU: Smallint; safecall;
    procedure Set_ODEMEGUNU(Value: Smallint); safecall;
    function Get_Son_Islem_Tar: TDateTime; safecall;
    procedure Set_Son_Islem_Tar(Value: TDateTime); safecall;
    function Get_Bagkur: WideString; safecall;
    procedure Set_Bagkur(const Value: WideString); safecall;
    function Get_Baba_Adi: WideString; safecall;
    procedure Set_Baba_Adi(const Value: WideString); safecall;
    function Get_DogumYT: WideString; safecall;
    procedure Set_DogumYT(const Value: WideString); safecall;
    function Get_Miktar: Double; safecall;
    procedure Set_Miktar(Value: Double); safecall;
    function Get_Urun_Kodu: WideString; safecall;
    procedure Set_Urun_Kodu(const Value: WideString); safecall;
    function Get_Urun_Ismi: WideString; safecall;
    procedure Set_Urun_Ismi(const Value: WideString); safecall;
    function Get_Urun_Fiati: Double; safecall;
    procedure Set_Urun_Fiati(Value: Double); safecall;
    function Get_TesmNo: WideString; safecall;
    procedure Set_TesmNo(const Value: WideString); safecall;
    function Get_Kasa_Kodu: WideString; safecall;
    procedure Set_Kasa_Kodu(const Value: WideString); safecall;
    function Get_Update_Kodu: WideString; safecall;
    procedure Set_Update_Kodu(const Value: WideString); safecall;
    function Get_Genel_Toplam: Double; safecall;
    procedure Set_Genel_Toplam(Value: Double); safecall;
    function Get_Pesinat: Double; safecall;
    procedure Set_Pesinat(Value: Double); safecall;
    function Get_MurFiat: Double; safecall;
    procedure Set_MurFiat(Value: Double); safecall;
    function Get_GirDepo: Integer; safecall;
    procedure Set_GirDepo(Value: Integer); safecall;
    function Get_CikDepo: Integer; safecall;
    procedure Set_CikDepo(Value: Integer); safecall;
    function Get_Pesin_Satis: WordBool; safecall;
    procedure Set_Pesin_Satis(Value: WordBool); safecall;
    function Get_Proje_Kodu: WideString; safecall;
    procedure Set_Proje_Kodu(const Value: WideString); safecall;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property FATIRS_NO: WideString read Get_FATIRS_NO write Set_FATIRS_NO;
    property TIPI: Integer read Get_TIPI write Set_TIPI;
    property CARI_ISIM: WideString read Get_CARI_ISIM write Set_CARI_ISIM;
    property CARI_ADRES: WideString read Get_CARI_ADRES write Set_CARI_ADRES;
    property CARI_IL: WideString read Get_CARI_IL write Set_CARI_IL;
    property CARI_ILCE: WideString read Get_CARI_ILCE write Set_CARI_ILCE;
    property Cari_Vergi_Daire: WideString read Get_Cari_Vergi_Daire write Set_Cari_Vergi_Daire;
    property Cari_Vergi_No: WideString read Get_Cari_Vergi_No write Set_Cari_Vergi_No;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property Cari_Kodu: WideString read Get_Cari_Kodu write Set_Cari_Kodu;
    property BRUTTUTAR: Double read Get_BRUTTUTAR write Set_BRUTTUTAR;
    property Fon: Double read Get_Fon write Set_Fon;
    property Stopaj: Double read Get_Stopaj write Set_Stopaj;
    property Borsa: Double read Get_Borsa write Set_Borsa;
    property Avans: Double read Get_Avans write Set_Avans;
    property Cek_No: WideString read Get_Cek_No write Set_Cek_No;
    property Banka: WideString read Get_Banka write Set_Banka;
    property Cek_Tarih: TDateTime read Get_Cek_Tarih write Set_Cek_Tarih;
    property Cek_Tutar: Double read Get_Cek_Tutar write Set_Cek_Tutar;
    property BagkurNo: Double read Get_BagkurNo write Set_BagkurNo;
    property Mera: Double read Get_Mera write Set_Mera;
    property ODEMEGUNU: Smallint read Get_ODEMEGUNU write Set_ODEMEGUNU;
    property Son_Islem_Tar: TDateTime read Get_Son_Islem_Tar write Set_Son_Islem_Tar;
    property Bagkur: WideString read Get_Bagkur write Set_Bagkur;
    property Baba_Adi: WideString read Get_Baba_Adi write Set_Baba_Adi;
    property DogumYT: WideString read Get_DogumYT write Set_DogumYT;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property Urun_Kodu: WideString read Get_Urun_Kodu write Set_Urun_Kodu;
    property Urun_Ismi: WideString read Get_Urun_Ismi write Set_Urun_Ismi;
    property Urun_Fiati: Double read Get_Urun_Fiati write Set_Urun_Fiati;
    property TesmNo: WideString read Get_TesmNo write Set_TesmNo;
    property Kasa_Kodu: WideString read Get_Kasa_Kodu write Set_Kasa_Kodu;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Genel_Toplam: Double read Get_Genel_Toplam write Set_Genel_Toplam;
    property Pesinat: Double read Get_Pesinat write Set_Pesinat;
    property MurFiat: Double read Get_MurFiat write Set_MurFiat;
    property GirDepo: Integer read Get_GirDepo write Set_GirDepo;
    property CikDepo: Integer read Get_CikDepo write Set_CikDepo;
    property Pesin_Satis: WordBool read Get_Pesin_Satis write Set_Pesin_Satis;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
  end;

// *********************************************************************//
// DispIntf:  IMustahsilUstDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4737CFA4-5F6E-4121-993A-035AD959E52C}
// *********************************************************************//
  IMustahsilUstDisp = dispinterface
    ['{4737CFA4-5F6E-4121-993A-035AD959E52C}']
    property Sube_Kodu: Integer dispid 201;
    property FATIRS_NO: WideString dispid 202;
    property TIPI: Integer dispid 203;
    property CARI_ISIM: WideString dispid 204;
    property CARI_ADRES: WideString dispid 205;
    property CARI_IL: WideString dispid 206;
    property CARI_ILCE: WideString dispid 207;
    property Cari_Vergi_Daire: WideString dispid 208;
    property Cari_Vergi_No: WideString dispid 209;
    property Tarih: TDateTime dispid 210;
    property Cari_Kodu: WideString dispid 211;
    property BRUTTUTAR: Double dispid 212;
    property Fon: Double dispid 213;
    property Stopaj: Double dispid 214;
    property Borsa: Double dispid 215;
    property Avans: Double dispid 216;
    property Cek_No: WideString dispid 217;
    property Banka: WideString dispid 218;
    property Cek_Tarih: TDateTime dispid 219;
    property Cek_Tutar: Double dispid 220;
    property BagkurNo: Double dispid 221;
    property Mera: Double dispid 222;
    property ODEMEGUNU: Smallint dispid 223;
    property Son_Islem_Tar: TDateTime dispid 224;
    property Bagkur: WideString dispid 225;
    property Baba_Adi: WideString dispid 226;
    property DogumYT: WideString dispid 227;
    property Miktar: Double dispid 228;
    property Urun_Kodu: WideString dispid 229;
    property Urun_Ismi: WideString dispid 230;
    property Urun_Fiati: Double dispid 231;
    property TesmNo: WideString dispid 232;
    property Kasa_Kodu: WideString dispid 233;
    property Update_Kodu: WideString dispid 234;
    property Genel_Toplam: Double dispid 235;
    property Pesinat: Double dispid 236;
    property MurFiat: Double dispid 237;
    property GirDepo: Integer dispid 238;
    property CikDepo: Integer dispid 239;
    property Pesin_Satis: WordBool dispid 240;
    property Proje_Kodu: WideString dispid 241;
  end;

// *********************************************************************//
// Interface: IMustahsilKalem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EE849457-2796-4923-A149-07CA14850DD7}
// *********************************************************************//
  IMustahsilKalem = interface(IDispatch)
    ['{EE849457-2796-4923-A149-07CA14850DD7}']
    function Get_Stra_Kod: WideString; safecall;
    procedure Set_Stra_Kod(const Value: WideString); safecall;
    function Get_STra_FATIRSNO: WideString; safecall;
    procedure Set_STra_FATIRSNO(const Value: WideString); safecall;
    function Get_STra_GCMIK: Double; safecall;
    procedure Set_STra_GCMIK(Value: Double); safecall;
    function Get_STra_GCMIK2: Double; safecall;
    procedure Set_STra_GCMIK2(Value: Double); safecall;
    function Get_CEVRIM: Double; safecall;
    procedure Set_CEVRIM(Value: Double); safecall;
    function Get_STra_GC: WideString; safecall;
    procedure Set_STra_GC(const Value: WideString); safecall;
    function Get_STra_TAR: TDateTime; safecall;
    procedure Set_STra_TAR(Value: TDateTime); safecall;
    function Get_STra_NF: Double; safecall;
    procedure Set_STra_NF(Value: Double); safecall;
    function Get_STra_BF: Double; safecall;
    procedure Set_STra_BF(Value: Double); safecall;
    function Get_STra_IAF: Double; safecall;
    procedure Set_STra_IAF(Value: Double); safecall;
    function Get_STra_KDV: Integer; safecall;
    procedure Set_STra_KDV(Value: Integer); safecall;
    function Get_DEPO_KODU: Integer; safecall;
    procedure Set_DEPO_KODU(Value: Integer); safecall;
    function Get_STra_ACIK: WideString; safecall;
    procedure Set_STra_ACIK(const Value: WideString); safecall;
    function Get_STra_MALFISK: Double; safecall;
    procedure Set_STra_MALFISK(Value: Double); safecall;
    property Stra_Kod: WideString read Get_Stra_Kod write Set_Stra_Kod;
    property STra_FATIRSNO: WideString read Get_STra_FATIRSNO write Set_STra_FATIRSNO;
    property STra_GCMIK: Double read Get_STra_GCMIK write Set_STra_GCMIK;
    property STra_GCMIK2: Double read Get_STra_GCMIK2 write Set_STra_GCMIK2;
    property CEVRIM: Double read Get_CEVRIM write Set_CEVRIM;
    property STra_GC: WideString read Get_STra_GC write Set_STra_GC;
    property STra_TAR: TDateTime read Get_STra_TAR write Set_STra_TAR;
    property STra_NF: Double read Get_STra_NF write Set_STra_NF;
    property STra_BF: Double read Get_STra_BF write Set_STra_BF;
    property STra_IAF: Double read Get_STra_IAF write Set_STra_IAF;
    property STra_KDV: Integer read Get_STra_KDV write Set_STra_KDV;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property STra_ACIK: WideString read Get_STra_ACIK write Set_STra_ACIK;
    property STra_MALFISK: Double read Get_STra_MALFISK write Set_STra_MALFISK;
  end;

// *********************************************************************//
// DispIntf:  IMustahsilKalemDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EE849457-2796-4923-A149-07CA14850DD7}
// *********************************************************************//
  IMustahsilKalemDisp = dispinterface
    ['{EE849457-2796-4923-A149-07CA14850DD7}']
    property Stra_Kod: WideString dispid 201;
    property STra_FATIRSNO: WideString dispid 202;
    property STra_GCMIK: Double dispid 203;
    property STra_GCMIK2: Double dispid 204;
    property CEVRIM: Double dispid 205;
    property STra_GC: WideString dispid 206;
    property STra_TAR: TDateTime dispid 207;
    property STra_NF: Double dispid 208;
    property STra_BF: Double dispid 209;
    property STra_IAF: Double dispid 210;
    property STra_KDV: Integer dispid 211;
    property DEPO_KODU: Integer dispid 212;
    property STra_ACIK: WideString dispid 213;
    property STra_MALFISK: Double dispid 214;
  end;

// *********************************************************************//
// Interface: IKalemSeri
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D415AC72-3876-4DCB-A99C-F6C37D9E7A24}
// *********************************************************************//
  IKalemSeri = interface(IDispatch)
    ['{D415AC72-3876-4DCB-A99C-F6C37D9E7A24}']
    function Get_Seri1: WideString; safecall;
    procedure Set_Seri1(const Value: WideString); safecall;
    function Get_Seri2: WideString; safecall;
    procedure Set_Seri2(const Value: WideString); safecall;
    function Get_Aciklama1: WideString; safecall;
    procedure Set_Aciklama1(const Value: WideString); safecall;
    function Get_Aciklama2: WideString; safecall;
    procedure Set_Aciklama2(const Value: WideString); safecall;
    function Get_Miktar: Double; safecall;
    procedure Set_Miktar(Value: Double); safecall;
    property Seri1: WideString read Get_Seri1 write Set_Seri1;
    property Seri2: WideString read Get_Seri2 write Set_Seri2;
    property Aciklama1: WideString read Get_Aciklama1 write Set_Aciklama1;
    property Aciklama2: WideString read Get_Aciklama2 write Set_Aciklama2;
    property Miktar: Double read Get_Miktar write Set_Miktar;
  end;

// *********************************************************************//
// DispIntf:  IKalemSeriDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D415AC72-3876-4DCB-A99C-F6C37D9E7A24}
// *********************************************************************//
  IKalemSeriDisp = dispinterface
    ['{D415AC72-3876-4DCB-A99C-F6C37D9E7A24}']
    property Seri1: WideString dispid 201;
    property Seri2: WideString dispid 202;
    property Aciklama1: WideString dispid 203;
    property Aciklama2: WideString dispid 204;
    property Miktar: Double dispid 205;
  end;

// *********************************************************************//
// Interface: IUretSonEnteg
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A4BF38DD-1C9B-4714-B1C1-F9AC5FB291E6}
// *********************************************************************//
  IUretSonEnteg = interface(IDispatch)
    ['{A4BF38DD-1C9B-4714-B1C1-F9AC5FB291E6}']
    function Get_BasMamKod: WideString; safecall;
    procedure Set_BasMamKod(const Value: WideString); safecall;
    function Get_BitMamKod: WideString; safecall;
    procedure Set_BitMamKod(const Value: WideString); safecall;
    function Get_BasFisNo: WideString; safecall;
    procedure Set_BasFisNo(const Value: WideString); safecall;
    function Get_BitFisNo: WideString; safecall;
    procedure Set_BitFisNo(const Value: WideString); safecall;
    function Get_FisNoKirilimli: WordBool; safecall;
    procedure Set_FisNoKirilimli(Value: WordBool); safecall;
    function Get_ReferansKod: WideString; safecall;
    procedure Set_ReferansKod(const Value: WideString); safecall;
    function Get_BasTar: TDateTime; safecall;
    procedure Set_BasTar(Value: TDateTime); safecall;
    function Get_BitTar: TDateTime; safecall;
    procedure Set_BitTar(Value: TDateTime); safecall;
    property BasMamKod: WideString read Get_BasMamKod write Set_BasMamKod;
    property BitMamKod: WideString read Get_BitMamKod write Set_BitMamKod;
    property BasFisNo: WideString read Get_BasFisNo write Set_BasFisNo;
    property BitFisNo: WideString read Get_BitFisNo write Set_BitFisNo;
    property FisNoKirilimli: WordBool read Get_FisNoKirilimli write Set_FisNoKirilimli;
    property ReferansKod: WideString read Get_ReferansKod write Set_ReferansKod;
    property BasTar: TDateTime read Get_BasTar write Set_BasTar;
    property BitTar: TDateTime read Get_BitTar write Set_BitTar;
  end;

// *********************************************************************//
// DispIntf:  IUretSonEntegDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A4BF38DD-1C9B-4714-B1C1-F9AC5FB291E6}
// *********************************************************************//
  IUretSonEntegDisp = dispinterface
    ['{A4BF38DD-1C9B-4714-B1C1-F9AC5FB291E6}']
    property BasMamKod: WideString dispid 201;
    property BitMamKod: WideString dispid 202;
    property BasFisNo: WideString dispid 203;
    property BitFisNo: WideString dispid 204;
    property FisNoKirilimli: WordBool dispid 205;
    property ReferansKod: WideString dispid 206;
    property BasTar: TDateTime dispid 207;
    property BitTar: TDateTime dispid 208;
  end;

// *********************************************************************//
// Interface: ISirketList
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DB8CBAEA-B350-44BE-8A42-9ED0052F569C}
// *********************************************************************//
  ISirketList = interface(IDispatch)
    ['{DB8CBAEA-B350-44BE-8A42-9ED0052F569C}']
    function Get_SirketSayisi: Integer; safecall;
    function Get_SirketInfo(Index: Integer): ISirketInfo; safecall;
    property SirketSayisi: Integer read Get_SirketSayisi;
    property SirketInfo[Index: Integer]: ISirketInfo read Get_SirketInfo;
  end;

// *********************************************************************//
// DispIntf:  ISirketListDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DB8CBAEA-B350-44BE-8A42-9ED0052F569C}
// *********************************************************************//
  ISirketListDisp = dispinterface
    ['{DB8CBAEA-B350-44BE-8A42-9ED0052F569C}']
    property SirketSayisi: Integer readonly dispid 201;
    property SirketInfo[Index: Integer]: ISirketInfo readonly dispid 202;
  end;

// *********************************************************************//
// Interface: ISirketInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A12C06F5-E575-49C9-851F-82AE16490850}
// *********************************************************************//
  ISirketInfo = interface(IDispatch)
    ['{A12C06F5-E575-49C9-851F-82AE16490850}']
    function Get_SirketAdi: WideString; safecall;
    function Get_SirketYili: Integer; safecall;
    function Get_DevirSirket: WideString; safecall;
    function Get_DevirYili: Integer; safecall;
    property SirketAdi: WideString read Get_SirketAdi;
    property SirketYili: Integer read Get_SirketYili;
    property DevirSirket: WideString read Get_DevirSirket;
    property DevirYili: Integer read Get_DevirYili;
  end;

// *********************************************************************//
// DispIntf:  ISirketInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A12C06F5-E575-49C9-851F-82AE16490850}
// *********************************************************************//
  ISirketInfoDisp = dispinterface
    ['{A12C06F5-E575-49C9-851F-82AE16490850}']
    property SirketAdi: WideString readonly dispid 201;
    property SirketYili: Integer readonly dispid 202;
    property DevirSirket: WideString readonly dispid 203;
    property DevirYili: Integer readonly dispid 204;
  end;

// *********************************************************************//
// Interface: IFatParametre
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BD3CD6DB-8D96-4908-83E5-B5D04B280D1F}
// *********************************************************************//
  IFatParametre = interface(IDispatch)
    ['{BD3CD6DB-8D96-4908-83E5-B5D04B280D1F}']
    function Get_OzelKod1: WordBool; safecall;
    function Get_OzelKod2: WordBool; safecall;
    function Get_Aciklama: WordBool; safecall;
    function Get_StoktanAyir: WordBool; safecall;
    function Get_SiparisOnay: WordBool; safecall;
    function Get_OzelNakliye: WordBool; safecall;
    function Get_Ekalan: WordBool; safecall;
    function Get_SatirBazindaTeslimCari: WordBool; safecall;
    function Get_SatirBazindaTeslimTarihi: WordBool; safecall;
    function Get_SatisEkSorgu: WordBool; safecall;
    function Get_Referans: WordBool; safecall;
    function Get_FarkliTeslimYeri: WordBool; safecall;
    function Get_SeriNo: WordBool; safecall;
    function Get_Kosul: WordBool; safecall;
    property OzelKod1: WordBool read Get_OzelKod1;
    property OzelKod2: WordBool read Get_OzelKod2;
    property Aciklama: WordBool read Get_Aciklama;
    property StoktanAyir: WordBool read Get_StoktanAyir;
    property SiparisOnay: WordBool read Get_SiparisOnay;
    property OzelNakliye: WordBool read Get_OzelNakliye;
    property Ekalan: WordBool read Get_Ekalan;
    property SatirBazindaTeslimCari: WordBool read Get_SatirBazindaTeslimCari;
    property SatirBazindaTeslimTarihi: WordBool read Get_SatirBazindaTeslimTarihi;
    property SatisEkSorgu: WordBool read Get_SatisEkSorgu;
    property Referans: WordBool read Get_Referans;
    property FarkliTeslimYeri: WordBool read Get_FarkliTeslimYeri;
    property SeriNo: WordBool read Get_SeriNo;
    property Kosul: WordBool read Get_Kosul;
  end;

// *********************************************************************//
// DispIntf:  IFatParametreDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BD3CD6DB-8D96-4908-83E5-B5D04B280D1F}
// *********************************************************************//
  IFatParametreDisp = dispinterface
    ['{BD3CD6DB-8D96-4908-83E5-B5D04B280D1F}']
    property OzelKod1: WordBool readonly dispid 201;
    property OzelKod2: WordBool readonly dispid 202;
    property Aciklama: WordBool readonly dispid 204;
    property StoktanAyir: WordBool readonly dispid 205;
    property SiparisOnay: WordBool readonly dispid 206;
    property OzelNakliye: WordBool readonly dispid 207;
    property Ekalan: WordBool readonly dispid 208;
    property SatirBazindaTeslimCari: WordBool readonly dispid 203;
    property SatirBazindaTeslimTarihi: WordBool readonly dispid 209;
    property SatisEkSorgu: WordBool readonly dispid 210;
    property Referans: WordBool readonly dispid 211;
    property FarkliTeslimYeri: WordBool readonly dispid 212;
    property SeriNo: WordBool readonly dispid 213;
    property Kosul: WordBool readonly dispid 214;
  end;

// *********************************************************************//
// Interface: ISirketParametreler
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A40DB11-76FA-400A-B1BD-0447F3E430BB}
// *********************************************************************//
  ISirketParametreler = interface(IDispatch)
    ['{7A40DB11-76FA-400A-B1BD-0447F3E430BB}']
    function Get_Proje: WordBool; safecall;
    function Get_Plasiyer: WordBool; safecall;
    function Get_LOKALDEPO: WordBool; safecall;
    function Get_EsnekYapilandirma: WordBool; safecall;
    function Get_KarmaKoli: WordBool; safecall;
    function Get_Referans: WordBool; safecall;
    property Proje: WordBool read Get_Proje;
    property Plasiyer: WordBool read Get_Plasiyer;
    property LOKALDEPO: WordBool read Get_LOKALDEPO;
    property EsnekYapilandirma: WordBool read Get_EsnekYapilandirma;
    property KarmaKoli: WordBool read Get_KarmaKoli;
    property Referans: WordBool read Get_Referans;
  end;

// *********************************************************************//
// DispIntf:  ISirketParametrelerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A40DB11-76FA-400A-B1BD-0447F3E430BB}
// *********************************************************************//
  ISirketParametrelerDisp = dispinterface
    ['{7A40DB11-76FA-400A-B1BD-0447F3E430BB}']
    property Proje: WordBool readonly dispid 201;
    property Plasiyer: WordBool readonly dispid 202;
    property LOKALDEPO: WordBool readonly dispid 203;
    property EsnekYapilandirma: WordBool readonly dispid 204;
    property KarmaKoli: WordBool readonly dispid 205;
    property Referans: WordBool readonly dispid 206;
  end;

// *********************************************************************//
// Interface: ITRHarita
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5337A6A3-7DFE-4A99-BF81-C78FF138458D}
// *********************************************************************//
  ITRHarita = interface(IDispatch)
    ['{5337A6A3-7DFE-4A99-BF81-C78FF138458D}']
    procedure SayiEkle(const TRSehirAdi: WideString; Deger: Double); safecall;
    function Get_FormBaslik: WideString; safecall;
    procedure Set_FormBaslik(const Value: WideString); safecall;
    procedure Goster; safecall;
    function GetBitMap: OleVariant; safecall;
    property FormBaslik: WideString read Get_FormBaslik write Set_FormBaslik;
  end;

// *********************************************************************//
// DispIntf:  ITRHaritaDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5337A6A3-7DFE-4A99-BF81-C78FF138458D}
// *********************************************************************//
  ITRHaritaDisp = dispinterface
    ['{5337A6A3-7DFE-4A99-BF81-C78FF138458D}']
    procedure SayiEkle(const TRSehirAdi: WideString; Deger: Double); dispid 201;
    property FormBaslik: WideString dispid 202;
    procedure Goster; dispid 203;
    function GetBitMap: OleVariant; dispid 204;
  end;

// *********************************************************************//
// Interface: IMrp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D535B070-33DE-4655-9619-0167B5A6AAE6}
// *********************************************************************//
  IMrp = interface(IDispatch)
    ['{D535B070-33DE-4655-9619-0167B5A6AAE6}']
    function Get_BasTar: TDateTime; safecall;
    procedure Set_BasTar(Value: TDateTime); safecall;
    function Get_BitTar: TDateTime; safecall;
    procedure Set_BitTar(Value: TDateTime); safecall;
    function Get_SirketListesi: INetStrList; safecall;
    procedure Set_SirketListesi(const Value: INetStrList); safecall;
    function Get_MinStokBak: WordBool; safecall;
    procedure Set_MinStokBak(Value: WordBool); safecall;
    function Get_BakKont: WordBool; safecall;
    procedure Set_BakKont(Value: WordBool); safecall;
    function Get_MamKont: WordBool; safecall;
    procedure Set_MamKont(Value: WordBool); safecall;
    function Get_SipKont: WordBool; safecall;
    procedure Set_SipKont(Value: WordBool); safecall;
    function Get_IsEmriKont: WordBool; safecall;
    procedure Set_IsEmriKont(Value: WordBool); safecall;
    function Get_IsEmriNoBas: WideString; safecall;
    procedure Set_IsEmriNoBas(const Value: WideString); safecall;
    function Get_IsEmriNoBit: WideString; safecall;
    procedure Set_IsEmriNoBit(const Value: WideString); safecall;
    function Get_IsEmrHaricNoBas: WideString; safecall;
    procedure Set_IsEmrHaricNoBas(const Value: WideString); safecall;
    function Get_IsEmrHaricNoBit: WideString; safecall;
    procedure Set_IsEmrHaricNoBit(const Value: WideString); safecall;
    function Get_GnlYapKodDestek: WordBool; safecall;
    procedure Set_GnlYapKodDestek(Value: WordBool); safecall;
    function Get_YapKodKontrol: WordBool; safecall;
    procedure Set_YapKodKontrol(Value: WordBool); safecall;
    function Get_Detayli: WordBool; safecall;
    procedure Set_Detayli(Value: WordBool); safecall;
    procedure MGPCalistir; safecall;
    property BasTar: TDateTime read Get_BasTar write Set_BasTar;
    property BitTar: TDateTime read Get_BitTar write Set_BitTar;
    property SirketListesi: INetStrList read Get_SirketListesi write Set_SirketListesi;
    property MinStokBak: WordBool read Get_MinStokBak write Set_MinStokBak;
    property BakKont: WordBool read Get_BakKont write Set_BakKont;
    property MamKont: WordBool read Get_MamKont write Set_MamKont;
    property SipKont: WordBool read Get_SipKont write Set_SipKont;
    property IsEmriKont: WordBool read Get_IsEmriKont write Set_IsEmriKont;
    property IsEmriNoBas: WideString read Get_IsEmriNoBas write Set_IsEmriNoBas;
    property IsEmriNoBit: WideString read Get_IsEmriNoBit write Set_IsEmriNoBit;
    property IsEmrHaricNoBas: WideString read Get_IsEmrHaricNoBas write Set_IsEmrHaricNoBas;
    property IsEmrHaricNoBit: WideString read Get_IsEmrHaricNoBit write Set_IsEmrHaricNoBit;
    property GnlYapKodDestek: WordBool read Get_GnlYapKodDestek write Set_GnlYapKodDestek;
    property YapKodKontrol: WordBool read Get_YapKodKontrol write Set_YapKodKontrol;
    property Detayli: WordBool read Get_Detayli write Set_Detayli;
  end;

// *********************************************************************//
// DispIntf:  IMrpDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D535B070-33DE-4655-9619-0167B5A6AAE6}
// *********************************************************************//
  IMrpDisp = dispinterface
    ['{D535B070-33DE-4655-9619-0167B5A6AAE6}']
    property BasTar: TDateTime dispid 201;
    property BitTar: TDateTime dispid 202;
    property SirketListesi: INetStrList dispid 203;
    property MinStokBak: WordBool dispid 204;
    property BakKont: WordBool dispid 205;
    property MamKont: WordBool dispid 206;
    property SipKont: WordBool dispid 207;
    property IsEmriKont: WordBool dispid 208;
    property IsEmriNoBas: WideString dispid 209;
    property IsEmriNoBit: WideString dispid 210;
    property IsEmrHaricNoBas: WideString dispid 211;
    property IsEmrHaricNoBit: WideString dispid 212;
    property GnlYapKodDestek: WordBool dispid 213;
    property YapKodKontrol: WordBool dispid 214;
    property Detayli: WordBool dispid 215;
    procedure MGPCalistir; dispid 216;
  end;

// *********************************************************************//
// Interface: INetStrList
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B4055B60-0349-4A78-AC27-87D8F8A3F0BE}
// *********************************************************************//
  INetStrList = interface(IDispatch)
    ['{B4055B60-0349-4A78-AC27-87D8F8A3F0BE}']
    function Get_Text: WideString; safecall;
    procedure Set_Text(const Value: WideString); safecall;
    function Get_Count: Integer; safecall;
    function Get_Strings(Index: Integer): WideString; safecall;
    procedure Set_Strings(Index: Integer; const Value: WideString); safecall;
    function Add(const Str: WideString): Integer; safecall;
    property Text: WideString read Get_Text write Set_Text;
    property Count: Integer read Get_Count;
    property Strings[Index: Integer]: WideString read Get_Strings write Set_Strings;
  end;

// *********************************************************************//
// DispIntf:  INetStrListDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B4055B60-0349-4A78-AC27-87D8F8A3F0BE}
// *********************************************************************//
  INetStrListDisp = dispinterface
    ['{B4055B60-0349-4A78-AC27-87D8F8A3F0BE}']
    property Text: WideString dispid 202;
    property Count: Integer readonly dispid 201;
    property Strings[Index: Integer]: WideString dispid 203;
    function Add(const Str: WideString): Integer; dispid 204;
  end;

// *********************************************************************//
// Interface: IBarkodBilgi
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {880AB9E4-0D50-4697-AF2C-9000FC6C5E68}
// *********************************************************************//
  IBarkodBilgi = interface(IDispatch)
    ['{880AB9E4-0D50-4697-AF2C-9000FC6C5E68}']
    function Get_StokKodu: WideString; safecall;
    procedure Set_StokKodu(const Value: WideString); safecall;
    function Get_GrupKodu: WideString; safecall;
    procedure Set_GrupKodu(const Value: WideString); safecall;
    function Get_KOD1: WideString; safecall;
    procedure Set_KOD1(const Value: WideString); safecall;
    function Get_KOD2: WideString; safecall;
    procedure Set_KOD2(const Value: WideString); safecall;
    function Get_Kod3: WideString; safecall;
    procedure Set_Kod3(const Value: WideString); safecall;
    function Get_Kod4: WideString; safecall;
    procedure Set_Kod4(const Value: WideString); safecall;
    function Get_Kod5: WideString; safecall;
    procedure Set_Kod5(const Value: WideString); safecall;
    function Get_DepoKoduAlt: Integer; safecall;
    procedure Set_DepoKoduAlt(Value: Integer); safecall;
    function Get_DepoKoduUst: Integer; safecall;
    procedure Set_DepoKoduUst(Value: Integer); safecall;
    function Get_DizaynKodu: WideString; safecall;
    procedure Set_DizaynKodu(const Value: WideString); safecall;
    function Get_FiyatListesi: TFiyatListesi; safecall;
    procedure Set_FiyatListesi(Value: TFiyatListesi); safecall;
    function Get_SqlKisit: WideString; safecall;
    procedure Set_SqlKisit(const Value: WideString); safecall;
    function Get_SiralamaKisit: WideString; safecall;
    procedure Set_SiralamaKisit(const Value: WideString); safecall;
    function Get_YapKod: WideString; safecall;
    procedure Set_YapKod(const Value: WideString); safecall;
    function Get_Adet: Integer; safecall;
    procedure Set_Adet(Value: Integer); safecall;
    function Get_UpdateKodu: TUpdateKodu; safecall;
    procedure Set_UpdateKodu(Value: TUpdateKodu); safecall;
    function Get_BakiyeMiktarBas: WordBool; safecall;
    procedure Set_BakiyeMiktarBas(Value: WordBool); safecall;
    function Get_UpdateKoduSifirlansin: WordBool; safecall;
    procedure Set_UpdateKoduSifirlansin(Value: WordBool); safecall;
    property StokKodu: WideString read Get_StokKodu write Set_StokKodu;
    property GrupKodu: WideString read Get_GrupKodu write Set_GrupKodu;
    property KOD1: WideString read Get_KOD1 write Set_KOD1;
    property KOD2: WideString read Get_KOD2 write Set_KOD2;
    property Kod3: WideString read Get_Kod3 write Set_Kod3;
    property Kod4: WideString read Get_Kod4 write Set_Kod4;
    property Kod5: WideString read Get_Kod5 write Set_Kod5;
    property DepoKoduAlt: Integer read Get_DepoKoduAlt write Set_DepoKoduAlt;
    property DepoKoduUst: Integer read Get_DepoKoduUst write Set_DepoKoduUst;
    property DizaynKodu: WideString read Get_DizaynKodu write Set_DizaynKodu;
    property FiyatListesi: TFiyatListesi read Get_FiyatListesi write Set_FiyatListesi;
    property SqlKisit: WideString read Get_SqlKisit write Set_SqlKisit;
    property SiralamaKisit: WideString read Get_SiralamaKisit write Set_SiralamaKisit;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
    property Adet: Integer read Get_Adet write Set_Adet;
    property UpdateKodu: TUpdateKodu read Get_UpdateKodu write Set_UpdateKodu;
    property BakiyeMiktarBas: WordBool read Get_BakiyeMiktarBas write Set_BakiyeMiktarBas;
    property UpdateKoduSifirlansin: WordBool read Get_UpdateKoduSifirlansin write Set_UpdateKoduSifirlansin;
  end;

// *********************************************************************//
// DispIntf:  IBarkodBilgiDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {880AB9E4-0D50-4697-AF2C-9000FC6C5E68}
// *********************************************************************//
  IBarkodBilgiDisp = dispinterface
    ['{880AB9E4-0D50-4697-AF2C-9000FC6C5E68}']
    property StokKodu: WideString dispid 201;
    property GrupKodu: WideString dispid 202;
    property KOD1: WideString dispid 203;
    property KOD2: WideString dispid 204;
    property Kod3: WideString dispid 205;
    property Kod4: WideString dispid 206;
    property Kod5: WideString dispid 207;
    property DepoKoduAlt: Integer dispid 208;
    property DepoKoduUst: Integer dispid 209;
    property DizaynKodu: WideString dispid 210;
    property FiyatListesi: TFiyatListesi dispid 211;
    property SqlKisit: WideString dispid 212;
    property SiralamaKisit: WideString dispid 213;
    property YapKod: WideString dispid 214;
    property Adet: Integer dispid 215;
    property UpdateKodu: TUpdateKodu dispid 216;
    property BakiyeMiktarBas: WordBool dispid 217;
    property UpdateKoduSifirlansin: WordBool dispid 218;
  end;

// *********************************************************************//
// The Class CoKernel provides a Create and CreateRemote method to          
// create instances of the default interface IKernel exposed by              
// the CoClass Kernel. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoKernel = class
    class function Create: IKernel;
    class function CreateRemote(const MachineName: string): IKernel;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TKernel
// Help String      : Kernel Object
// Default Interface: IKernel
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TKernelProperties= class;
{$ENDIF}
  TKernel = class(TOleServer)
  private
    FIntf:        IKernel;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TKernelProperties;
    function      GetServerProperties: TKernelProperties;
{$ENDIF}
    function      GetDefaultInterface: IKernel;
  protected
    procedure InitServerData; override;
    function Get_SonNetsisHata: INetsisHata;
    function Get_Version: WideString;
    function Get_SirketListesi: ISirketList;
    function Get_EkModulVar(Index: Integer): WordBool;
    function Get_ENetsisKulSay: Integer;
    function Get_NetsisAnaSurum: TNetsisAnaSurum;
    function Get_NetsisAltSurum: TNetsisAltSurum;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IKernel);
    procedure Disconnect; override;
    procedure FreeNetsisLibrary;
    function yeniSirket(vtTipi: TVTTipi; const vtAdi: WideString; const vtKulAdi: WideString; 
                        const vtKulSifre: WideString; const NetKul: WideString; 
                        const NetSifre: WideString; Sube_Kodu: Integer): ISirket;
    function yeniKasa(const Sirket: ISirket): IKasa;
    function yeniFatura(const Sirket: ISirket; FaturaTipi: TFaturaTip): IFatura;
    function Sifrele(const Deger: WideString; SifrelemeTipi: TSifrelemeTipi): WideString;
    function yeniCari(const Sirket: ISirket): ICari;
    function yeniStok(const Sirket: ISirket): IStok;
    function yeniKur(const Sirket: ISirket): IKur;
    function yeniDoviz(const Sirket: ISirket): IDoviz;
    function yeniCekSenAna(const Sirket: ISirket; Tip: TCekSenType): ICekSenetAna;
    function sayiYuvarla(Sayi: Double; Ondalik: Integer): Double;
    function yeniReceteAna(const Sirket: ISirket): IReceteAna;
    function yeniMaliyet(const Sirket: ISirket; MaliyetTipi: TMaliyetTipi): IDispatch;
    function yeniDekont(const Sirket: ISirket): IDekont;
    function yeniCSDekont(const Sirket: ISirket; Tip: TDekCSTip): IDekCekSen;
    function yeniProje(const Sirket: ISirket): IProje;
    function yeniNetRS(const Sirket: ISirket): INetRS;
    function yeniNetGuvenlik: INetGuvenlik;
    function yeniCariHareket(const Sirket: ISirket): ICariHareket;
    function yeniStokHareket(const Sirket: ISirket): IStokHareket;
    function yeniBasim(const Sirket: ISirket): IBasim;
    function yeniMaliGrup(const Sirket: ISirket): IMaliGrup;
    function yeniUretim(const Sirket: ISirket): IUretim;
    function yeniStokBakiye(const Sirket: ISirket; const StokKodu: WideString; DepoKodu: Integer; 
                            const YapKod: WideString): IStokPH;
    function yeniMustahsil(const Sirket: ISirket; const CariKod: WideString): IMustahsil;
    function yeniParametre(const Sirket: ISirket): ISirketParametreler;
    function NOXIKS(const Deger: WideString; Code: WordBool): WideString;
    function yeniTRHarita(const Sirket: ISirket): ITRHarita;
    function SifreYap(Anahtar: Integer; const Deger: WideString): WideString;
    function SifreAc(Anahtar: Integer; const Deger: WideString): WideString;
    procedure KilitYap(KilitNo: Integer);
    procedure KilitAc(KilitNo: Integer);
    function yeniMrp(const Sirket: ISirket): IMrp;
    function DBSessionId: Integer;
    function OnayliVersion: WideString;
    function yeniMuPlan(const Sirket: ISirket): IMuPlan;
    property DefaultInterface: IKernel read GetDefaultInterface;
    property SonNetsisHata: INetsisHata read Get_SonNetsisHata;
    property Version: WideString read Get_Version;
    property SirketListesi: ISirketList read Get_SirketListesi;
    property EkModulVar[Index: Integer]: WordBool read Get_EkModulVar;
    property ENetsisKulSay: Integer read Get_ENetsisKulSay;
    property NetsisAnaSurum: TNetsisAnaSurum read Get_NetsisAnaSurum;
    property NetsisAltSurum: TNetsisAltSurum read Get_NetsisAltSurum;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TKernelProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TKernel
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TKernelProperties = class(TPersistent)
  private
    FServer:    TKernel;
    function    GetDefaultInterface: IKernel;
    constructor Create(AServer: TKernel);
  protected
    function Get_SonNetsisHata: INetsisHata;
    function Get_Version: WideString;
    function Get_SirketListesi: ISirketList;
    function Get_EkModulVar(Index: Integer): WordBool;
    function Get_ENetsisKulSay: Integer;
    function Get_NetsisAnaSurum: TNetsisAnaSurum;
    function Get_NetsisAltSurum: TNetsisAltSurum;
  public
    property DefaultInterface: IKernel read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMerkez provides a Create and CreateRemote method to          
// create instances of the default interface IMerkez exposed by              
// the CoClass Merkez. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMerkez = class
    class function Create: IMerkez;
    class function CreateRemote(const MachineName: string): IMerkez;
  end;

// *********************************************************************//
// The Class CoNetsisHata provides a Create and CreateRemote method to          
// create instances of the default interface INetsisHata exposed by              
// the CoClass NetsisHata. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNetsisHata = class
    class function Create: INetsisHata;
    class function CreateRemote(const MachineName: string): INetsisHata;
  end;

// *********************************************************************//
// The Class CoSirket provides a Create and CreateRemote method to          
// create instances of the default interface ISirket exposed by              
// the CoClass Sirket. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSirket = class
    class function Create: ISirket;
    class function CreateRemote(const MachineName: string): ISirket;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSirket
// Help String      : Sirket Object
// Default Interface: ISirket
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSirketProperties= class;
{$ENDIF}
  TSirket = class(TOleServer)
  private
    FIntf:        ISirket;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSirketProperties;
    function      GetServerProperties: TSirketProperties;
{$ENDIF}
    function      GetDefaultInterface: ISirket;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_Log: WordBool;
    function Get_IntSubeKodu: Integer;
    procedure Set_IntSubeKodu(Value: Integer);
    function Get_IntIsletmeKodu: Integer;
    procedure Set_IntIsletmeKodu(Value: Integer);
    function Get_SirketYili: Integer;
    function Get_YTLSirket: WordBool;
    function Get_DBConnectionParams: WideString;
    function Get_TemelsetCommonQuery: INetCommonQueryDispatcher;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISirket);
    procedure Disconnect; override;
    procedure AktifYap(ModulNo: Integer; ProgNo: Integer);
    function getirNDS(KulNo: Integer; ModNo: Integer; ProgNo: Integer; NDSTip: TNDSTip): Integer;
    function Bakiye_Getir(const Yapi: IStokPH): Integer;
    function SonFaturaNo(FatTip: TFaturaTip): WideString;
    function KantardanSayiOku(GUIDestek: WordBool; const KantarKodu: WideString; 
                              TestAmacli: WordBool; BeklemeSuresi: Integer): WideString;
    function F2Rehber: WideString;
    function OzelRehber(TusNumarasi: Integer): WideString;
    function MesajGetir(ModulNumarasi: Integer; DilNum: Integer): WideString;
    function GenelRehber(const TabloAdi: WideString; const SahaAdi1: WideString; 
                         const SahaAcik1: WideString; SahaTipi1: Integer; 
                         const SahaAdi2: WideString; const SahaAcik2: WideString; 
                         SahaTipi2: Integer; const SahaAdi3: WideString; 
                         const SahaAcik3: WideString; SahaTipi3: Integer; 
                         const SahaAdi4: WideString; const SahaAcik4: WideString; 
                         SahaTipi4: Integer; const SahaAdi5: WideString; 
                         const SahaAcik5: WideString; SahaTipi5: Integer; 
                         const RehberBaslik: WideString; const WhereSQL: WideString; 
                         GeriDonus: Integer; const KeySaha: WideString): WideString;
    procedure EntegrasyonEskiKayitlar(InTransaction: WordBool; const EntRefKey: WideString; 
                                      const MuhEntegreMi: WideString; 
                                      ExactSearchForEntRef: WordBool; LogSupport: WordBool);
    function DateToDBStr(prmDate: TDateTime): WideString;
    function FloatToDBStr(prmFloat: Double): WideString;
    function NetsisTamSayi(Sayi: Double; Ondalik: Integer): Double;
    function NetsisFloatToStr(Sayi: Double; Ondalik: Integer; NXNDSOndalikTipi: TNXNDSOndalikTipi): WideString;
    procedure NNRSihirbaziniAc;
    procedure NNRRaporCalistir(const DosyaAdi: WideString);
    function KullaniciKontrol(const KullaniciAdi: WideString; const KullaniciSifresi: WideString): TNXLoginResult;
    function EPostaGonder(const EMailTO: WideString; const EMailCC: WideString; 
                          const EMailKonu: WideString; const DosyaListesi: WideString; 
                          const EMailBody: WideString): WordBool;
    function HakKontrol(ModulNo: Integer; ProgramNo: Integer; HakTipi: TNXHakTipi): WordBool;
    function NRPRaporGetir(const NRPFileName: WideString; const CariKod: WideString): OleVariant;
    function ResimGetir(TabloTipi: SYSINT; const Kod: WideString): OleVariant;
    function SifreDegistir(const Eskisifre: WideString; const YeniSifre: WideString; 
                           const Onaysifre: WideString; var MinSifreUzunlugu: Integer): TSifreDegisimSonuc;
    function OnayliSurumKontrol(Major1: Integer; Minor1: Integer; Rel1: Integer; Major2: Integer; 
                                Minor2: Integer; Rel2: Integer): WordBool;
    procedure NNROnSorgu(const FormBaslik: WideString; const SabitFiltreler: WideString; 
                         const SahaDilleri: WideString; const RaporDosyasi: WideString; 
                         const FiltreDegerleri: WideString);
    property DefaultInterface: ISirket read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Log: WordBool read Get_Log;
    property SirketYili: Integer read Get_SirketYili;
    property YTLSirket: WordBool read Get_YTLSirket;
    property DBConnectionParams: WideString read Get_DBConnectionParams;
    property TemelsetCommonQuery: INetCommonQueryDispatcher read Get_TemelsetCommonQuery;
    property Name: WideString read Get_Name write Set_Name;
    property IntSubeKodu: Integer read Get_IntSubeKodu write Set_IntSubeKodu;
    property IntIsletmeKodu: Integer read Get_IntIsletmeKodu write Set_IntIsletmeKodu;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSirketProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSirket
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSirketProperties = class(TPersistent)
  private
    FServer:    TSirket;
    function    GetDefaultInterface: ISirket;
    constructor Create(AServer: TSirket);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_Log: WordBool;
    function Get_IntSubeKodu: Integer;
    procedure Set_IntSubeKodu(Value: Integer);
    function Get_IntIsletmeKodu: Integer;
    procedure Set_IntIsletmeKodu(Value: Integer);
    function Get_SirketYili: Integer;
    function Get_YTLSirket: WordBool;
    function Get_DBConnectionParams: WideString;
    function Get_TemelsetCommonQuery: INetCommonQueryDispatcher;
  public
    property DefaultInterface: ISirket read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property IntSubeKodu: Integer read Get_IntSubeKodu write Set_IntSubeKodu;
    property IntIsletmeKodu: Integer read Get_IntIsletmeKodu write Set_IntIsletmeKodu;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoData provides a Create and CreateRemote method to          
// create instances of the default interface IData exposed by              
// the CoClass Data. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoData = class
    class function Create: IData;
    class function CreateRemote(const MachineName: string): IData;
  end;

// *********************************************************************//
// The Class CoKasa provides a Create and CreateRemote method to          
// create instances of the default interface IKasa exposed by              
// the CoClass Kasa. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoKasa = class
    class function Create: IKasa;
    class function CreateRemote(const MachineName: string): IKasa;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TKasa
// Help String      : Kasa Object
// Default Interface: IKasa
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TKasaProperties= class;
{$ENDIF}
  TKasa = class(TOleServer)
  private
    FIntf:        IKasa;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TKasaProperties;
    function      GetServerProperties: TKasaProperties;
{$ENDIF}
    function      GetDefaultInterface: IKasa;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_KsMas_Kod: WideString;
    procedure Set_KsMas_Kod(const Value: WideString);
    function Get_Tarih: TDateTime;
    procedure Set_Tarih(Value: TDateTime);
    function Get_Fisno: WideString;
    procedure Set_Fisno(const Value: WideString);
    function Get_IO: WideString;
    procedure Set_IO(const Value: WideString);
    function Get_Aciklama: WideString;
    procedure Set_Aciklama(const Value: WideString);
    function Get_Tip: WideString;
    procedure Set_Tip(const Value: WideString);
    function Get_Tutar: Double;
    procedure Set_Tutar(Value: Double);
    function Get_Cari_Muh: WideString;
    procedure Set_Cari_Muh(const Value: WideString);
    function Get_Kod: WideString;
    procedure Set_Kod(const Value: WideString);
    function Get_DovizTut: Double;
    procedure Set_DovizTut(Value: Double);
    function Get_Kur: Double;
    procedure Set_Kur(Value: Double);
    function Get_Plasiyer_Kodu: WideString;
    procedure Set_Plasiyer_Kodu(const Value: WideString);
    function Get_OdemeTuru: Integer;
    procedure Set_OdemeTuru(Value: Integer);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_Zaman: WideString;
    procedure Set_Zaman(const Value: WideString);
    function Get_Kull_ID: Integer;
    procedure Set_Kull_ID(Value: Integer);
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_Kredi_Kart_No: WideString;
    procedure Set_Kredi_Kart_No(const Value: WideString);
    function Get_Kdv_Oran: Double;
    procedure Set_Kdv_Oran(Value: Double);
    function Get_Kdv_Dahil: WideString;
    procedure Set_Kdv_Dahil(const Value: WideString);
    function Get_Yedek1: WideString;
    procedure Set_Yedek1(const Value: WideString);
    function Get_Yedek2: WideString;
    procedure Set_Yedek2(const Value: WideString);
    function Get_Yedek3: Double;
    procedure Set_Yedek3(Value: Double);
    function Get_Yedek4: Double;
    procedure Set_Yedek4(Value: Double);
    function Get_Yedek5: Double;
    procedure Set_Yedek5(Value: Double);
    function Get_Yedek6: WideString;
    procedure Set_Yedek6(const Value: WideString);
    function Get_Yedek7: Integer;
    procedure Set_Yedek7(Value: Integer);
    function Get_Yedek8: Integer;
    procedure Set_Yedek8(Value: Integer);
    function Get_Yedek9: Integer;
    procedure Set_Yedek9(Value: Integer);
    function Get_Yedek10: TDateTime;
    procedure Set_Yedek10(Value: TDateTime);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
    function Get_Sira: Integer;
    procedure Set_Sira(Value: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IKasa);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    function KasaIslem(IslemTipi: TKasaIslem): WordBool;
    function Islem(IslemTipi: TKasaIslem): WordBool;
    function KasaSonBakiye: IKasaBakiye;
    function CSKOdeme(Tip: TCekSenType): WordBool;
    property DefaultInterface: IKasa read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property KsMas_Kod: WideString read Get_KsMas_Kod write Set_KsMas_Kod;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property IO: WideString read Get_IO write Set_IO;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property Tip: WideString read Get_Tip write Set_Tip;
    property Tutar: Double read Get_Tutar write Set_Tutar;
    property Cari_Muh: WideString read Get_Cari_Muh write Set_Cari_Muh;
    property Kod: WideString read Get_Kod write Set_Kod;
    property DovizTut: Double read Get_DovizTut write Set_DovizTut;
    property Kur: Double read Get_Kur write Set_Kur;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property OdemeTuru: Integer read Get_OdemeTuru write Set_OdemeTuru;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Zaman: WideString read Get_Zaman write Set_Zaman;
    property Kull_ID: Integer read Get_Kull_ID write Set_Kull_ID;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property Kredi_Kart_No: WideString read Get_Kredi_Kart_No write Set_Kredi_Kart_No;
    property Kdv_Oran: Double read Get_Kdv_Oran write Set_Kdv_Oran;
    property Kdv_Dahil: WideString read Get_Kdv_Dahil write Set_Kdv_Dahil;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: Double read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property Yedek10: TDateTime read Get_Yedek10 write Set_Yedek10;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property Sira: Integer read Get_Sira write Set_Sira;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TKasaProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TKasa
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TKasaProperties = class(TPersistent)
  private
    FServer:    TKasa;
    function    GetDefaultInterface: IKasa;
    constructor Create(AServer: TKasa);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_KsMas_Kod: WideString;
    procedure Set_KsMas_Kod(const Value: WideString);
    function Get_Tarih: TDateTime;
    procedure Set_Tarih(Value: TDateTime);
    function Get_Fisno: WideString;
    procedure Set_Fisno(const Value: WideString);
    function Get_IO: WideString;
    procedure Set_IO(const Value: WideString);
    function Get_Aciklama: WideString;
    procedure Set_Aciklama(const Value: WideString);
    function Get_Tip: WideString;
    procedure Set_Tip(const Value: WideString);
    function Get_Tutar: Double;
    procedure Set_Tutar(Value: Double);
    function Get_Cari_Muh: WideString;
    procedure Set_Cari_Muh(const Value: WideString);
    function Get_Kod: WideString;
    procedure Set_Kod(const Value: WideString);
    function Get_DovizTut: Double;
    procedure Set_DovizTut(Value: Double);
    function Get_Kur: Double;
    procedure Set_Kur(Value: Double);
    function Get_Plasiyer_Kodu: WideString;
    procedure Set_Plasiyer_Kodu(const Value: WideString);
    function Get_OdemeTuru: Integer;
    procedure Set_OdemeTuru(Value: Integer);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_Zaman: WideString;
    procedure Set_Zaman(const Value: WideString);
    function Get_Kull_ID: Integer;
    procedure Set_Kull_ID(Value: Integer);
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_Kredi_Kart_No: WideString;
    procedure Set_Kredi_Kart_No(const Value: WideString);
    function Get_Kdv_Oran: Double;
    procedure Set_Kdv_Oran(Value: Double);
    function Get_Kdv_Dahil: WideString;
    procedure Set_Kdv_Dahil(const Value: WideString);
    function Get_Yedek1: WideString;
    procedure Set_Yedek1(const Value: WideString);
    function Get_Yedek2: WideString;
    procedure Set_Yedek2(const Value: WideString);
    function Get_Yedek3: Double;
    procedure Set_Yedek3(Value: Double);
    function Get_Yedek4: Double;
    procedure Set_Yedek4(Value: Double);
    function Get_Yedek5: Double;
    procedure Set_Yedek5(Value: Double);
    function Get_Yedek6: WideString;
    procedure Set_Yedek6(const Value: WideString);
    function Get_Yedek7: Integer;
    procedure Set_Yedek7(Value: Integer);
    function Get_Yedek8: Integer;
    procedure Set_Yedek8(Value: Integer);
    function Get_Yedek9: Integer;
    procedure Set_Yedek9(Value: Integer);
    function Get_Yedek10: TDateTime;
    procedure Set_Yedek10(Value: TDateTime);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
    function Get_Sira: Integer;
    procedure Set_Sira(Value: Integer);
  public
    property DefaultInterface: IKasa read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property KsMas_Kod: WideString read Get_KsMas_Kod write Set_KsMas_Kod;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property IO: WideString read Get_IO write Set_IO;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property Tip: WideString read Get_Tip write Set_Tip;
    property Tutar: Double read Get_Tutar write Set_Tutar;
    property Cari_Muh: WideString read Get_Cari_Muh write Set_Cari_Muh;
    property Kod: WideString read Get_Kod write Set_Kod;
    property DovizTut: Double read Get_DovizTut write Set_DovizTut;
    property Kur: Double read Get_Kur write Set_Kur;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property OdemeTuru: Integer read Get_OdemeTuru write Set_OdemeTuru;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Zaman: WideString read Get_Zaman write Set_Zaman;
    property Kull_ID: Integer read Get_Kull_ID write Set_Kull_ID;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property Kredi_Kart_No: WideString read Get_Kredi_Kart_No write Set_Kredi_Kart_No;
    property Kdv_Oran: Double read Get_Kdv_Oran write Set_Kdv_Oran;
    property Kdv_Dahil: WideString read Get_Kdv_Dahil write Set_Kdv_Dahil;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: Double read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property Yedek10: TDateTime read Get_Yedek10 write Set_Yedek10;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property Sira: Integer read Get_Sira write Set_Sira;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFatura provides a Create and CreateRemote method to          
// create instances of the default interface IFatura exposed by              
// the CoClass Fatura. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFatura = class
    class function Create: IFatura;
    class function CreateRemote(const MachineName: string): IFatura;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFatura
// Help String      : Fatura Object
// Default Interface: IFatura
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFaturaProperties= class;
{$ENDIF}
  TFatura = class(TOleServer)
  private
    FIntf:        IFatura;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFaturaProperties;
    function      GetServerProperties: TFaturaProperties;
{$ENDIF}
    function      GetDefaultInterface: IFatura;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_KalemAdedi: Integer;
    function Get_Kalem(Index: Integer): IFatKalem;
    function Get_FaturaTip: TFaturaTip;
    procedure Set_FaturaTip(Value: TFaturaTip);
    function Get_KasayaIslenmesin: WordBool;
    procedure Set_KasayaIslenmesin(Value: WordBool);
    function Get_SonNumaraYazilsin: WordBool;
    procedure Set_SonNumaraYazilsin(Value: WordBool);
    function Get_OtoIskontoGetir: WordBool;
    procedure Set_OtoIskontoGetir(Value: WordBool);
    function Get_KosulluHesapla: WordBool;
    procedure Set_KosulluHesapla(Value: WordBool);
    function Get_InternalObjectAddress: Integer;
    function Get_SeriliHesapla: WordBool;
    procedure Set_SeriliHesapla(Value: WordBool);
    function Get_YedekKalem(Index: Integer): IFatKalem;
    function Get_FiyatSistemineGoreHesapla: WordBool;
    procedure Set_FiyatSistemineGoreHesapla(Value: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IFatura);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    function Ust: IFatUst;
    function kalemYeni(const StokKodu: WideString): IFatKalem;
    procedure OkuUst(const FatIrsNo: WideString; const CariKod: WideString);
    procedure OkuKalem;
    function YeniNumara(const Seri: WideString): WideString;
    procedure VadeEkle(Gunler: Integer; Boloran: Double);
    procedure VadeleriTemizle;
    procedure SatirBaziAcikTemizle;
    procedure SiparisRevizyon(const RevizyonSipNo: WideString; BaslangicTarihi: TDateTime);
    procedure Irsaliye2Fatura(const objFatura: IFatura);
    procedure Siparis2IrsFat(const objYeniBelge: IFatura);
    procedure KosullariHazirla;
    function getirKosulDetay(KalemSiraNo: Integer): IFatKosulDetay;
    procedure KosulUstHesapla;
    procedure KosulKalemHesapla(KalemSiraNo: Integer);
    function KosulUstGetir: IFatUst;
    function KosulKalemGetir(KalemSiraNo: Integer): IFatKalem;
    procedure HesaplamalariYap;
    function Parametreler: IFatParametre;
    procedure kalemSil(KalemSiraNo: Integer);
    procedure SonNumaraKaydet;
    function NoArtiBir(const FatNo: WideString): WideString;
    procedure FiyatKalemHesapla(KalemSiraNo: Integer);
    function FiyatKalemGetir(KalemSiraNo: Integer): IFatKalem;
    property DefaultInterface: IFatura read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property KalemAdedi: Integer read Get_KalemAdedi;
    property Kalem[Index: Integer]: IFatKalem read Get_Kalem;
    property FaturaTip: TFaturaTip read Get_FaturaTip write Set_FaturaTip;
    property InternalObjectAddress: Integer read Get_InternalObjectAddress;
    property YedekKalem[Index: Integer]: IFatKalem read Get_YedekKalem;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property KasayaIslenmesin: WordBool read Get_KasayaIslenmesin write Set_KasayaIslenmesin;
    property SonNumaraYazilsin: WordBool read Get_SonNumaraYazilsin write Set_SonNumaraYazilsin;
    property OtoIskontoGetir: WordBool read Get_OtoIskontoGetir write Set_OtoIskontoGetir;
    property KosulluHesapla: WordBool read Get_KosulluHesapla write Set_KosulluHesapla;
    property SeriliHesapla: WordBool read Get_SeriliHesapla write Set_SeriliHesapla;
    property FiyatSistemineGoreHesapla: WordBool read Get_FiyatSistemineGoreHesapla write Set_FiyatSistemineGoreHesapla;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFaturaProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFatura
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFaturaProperties = class(TPersistent)
  private
    FServer:    TFatura;
    function    GetDefaultInterface: IFatura;
    constructor Create(AServer: TFatura);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_KalemAdedi: Integer;
    function Get_Kalem(Index: Integer): IFatKalem;
    function Get_FaturaTip: TFaturaTip;
    procedure Set_FaturaTip(Value: TFaturaTip);
    function Get_KasayaIslenmesin: WordBool;
    procedure Set_KasayaIslenmesin(Value: WordBool);
    function Get_SonNumaraYazilsin: WordBool;
    procedure Set_SonNumaraYazilsin(Value: WordBool);
    function Get_OtoIskontoGetir: WordBool;
    procedure Set_OtoIskontoGetir(Value: WordBool);
    function Get_KosulluHesapla: WordBool;
    procedure Set_KosulluHesapla(Value: WordBool);
    function Get_InternalObjectAddress: Integer;
    function Get_SeriliHesapla: WordBool;
    procedure Set_SeriliHesapla(Value: WordBool);
    function Get_YedekKalem(Index: Integer): IFatKalem;
    function Get_FiyatSistemineGoreHesapla: WordBool;
    procedure Set_FiyatSistemineGoreHesapla(Value: WordBool);
  public
    property DefaultInterface: IFatura read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property KasayaIslenmesin: WordBool read Get_KasayaIslenmesin write Set_KasayaIslenmesin;
    property SonNumaraYazilsin: WordBool read Get_SonNumaraYazilsin write Set_SonNumaraYazilsin;
    property OtoIskontoGetir: WordBool read Get_OtoIskontoGetir write Set_OtoIskontoGetir;
    property KosulluHesapla: WordBool read Get_KosulluHesapla write Set_KosulluHesapla;
    property SeriliHesapla: WordBool read Get_SeriliHesapla write Set_SeriliHesapla;
    property FiyatSistemineGoreHesapla: WordBool read Get_FiyatSistemineGoreHesapla write Set_FiyatSistemineGoreHesapla;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFatUst provides a Create and CreateRemote method to          
// create instances of the default interface IFatUst exposed by              
// the CoClass FatUst. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFatUst = class
    class function Create: IFatUst;
    class function CreateRemote(const MachineName: string): IFatUst;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFatUst
// Help String      : FatUst Object
// Default Interface: IFatUst
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFatUstProperties= class;
{$ENDIF}
  TFatUst = class(TOleServer)
  private
    FIntf:        IFatUst;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFatUstProperties;
    function      GetServerProperties: TFatUstProperties;
{$ENDIF}
    function      GetDefaultInterface: IFatUst;
  protected
    procedure InitServerData; override;
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_CariKod: WideString;
    procedure Set_CariKod(const Value: WideString);
    function Get_FATIRS_NO: WideString;
    procedure Set_FATIRS_NO(const Value: WideString);
    function Get_Tarih: TDateTime;
    procedure Set_Tarih(Value: TDateTime);
    function Get_Tip: TFaturaTip;
    procedure Set_Tip(Value: TFaturaTip);
    function Get_KOD1: WideString;
    procedure Set_KOD1(const Value: WideString);
    function Get_YEDEK: WideString;
    procedure Set_YEDEK(const Value: WideString);
    function Get_KOD2: WideString;
    procedure Set_KOD2(const Value: WideString);
    function Get_TIPI: TFaturaTipi;
    procedure Set_TIPI(Value: TFaturaTipi);
    function Get_Aciklama: WideString;
    procedure Set_Aciklama(const Value: WideString);
    function Get_BRUTTUTAR: Double;
    procedure Set_BRUTTUTAR(Value: Double);
    function Get_KDV: Double;
    procedure Set_KDV(Value: Double);
    function Get_DovizTut: Double;
    procedure Set_DovizTut(Value: Double);
    function Get_SAT_ISKT: Double;
    procedure Set_SAT_ISKT(Value: Double);
    function Get_GENELTOPLAM: Double;
    procedure Set_GENELTOPLAM(Value: Double);
    function Get_YUVARLAMA: Double;
    procedure Set_YUVARLAMA(Value: Double);
    function Get_MFAZ_ISKT: Double;
    procedure Set_MFAZ_ISKT(Value: Double);
    function Get_GEN_ISK1O: Double;
    procedure Set_GEN_ISK1O(Value: Double);
    function Get_GEN_ISK2O: Double;
    procedure Set_GEN_ISK2O(Value: Double);
    function Get_GEN_ISK3O: Double;
    procedure Set_GEN_ISK3O(Value: Double);
    function Get_FAT_ALTM1: Double;
    procedure Set_FAT_ALTM1(Value: Double);
    function Get_FAT_ALTM2: Double;
    procedure Set_FAT_ALTM2(Value: Double);
    function Get_KS_KODU: WideString;
    procedure Set_KS_KODU(const Value: WideString);
    function Get_SIPARIS_NUMARASI: WideString;
    procedure Set_SIPARIS_NUMARASI(const Value: WideString);
    function Get_ODEMEGUNU: Integer;
    procedure Set_ODEMEGUNU(Value: Integer);
    function Get_ODEMETARIHI: TDateTime;
    procedure Set_ODEMETARIHI(Value: TDateTime);
    function Get_ENTEGRE_TRH: TDateTime;
    procedure Set_ENTEGRE_TRH(Value: TDateTime);
    function Get_KDV_DAHILMI: WordBool;
    procedure Set_KDV_DAHILMI(Value: WordBool);
    function Get_SIPARIS_TEST: TDateTime;
    procedure Set_SIPARIS_TEST(Value: TDateTime);
    function Get_CARI_KOD2: WideString;
    procedure Set_CARI_KOD2(const Value: WideString);
    function Get_PLA_KODU: WideString;
    procedure Set_PLA_KODU(const Value: WideString);
    function Get_SIRANO: Integer;
    procedure Set_SIRANO(Value: Integer);
    function Get_DOVIZTIP: Integer;
    procedure Set_DOVIZTIP(Value: Integer);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_KOSULKODU: WideString;
    procedure Set_KOSULKODU(const Value: WideString);
    function Get_FIYATTARIHI: TDateTime;
    procedure Set_FIYATTARIHI(Value: TDateTime);
    function Get_KOSULTARIHI: TDateTime;
    procedure Set_KOSULTARIHI(Value: TDateTime);
    function Get_GENISK1TIP: Integer;
    procedure Set_GENISK1TIP(Value: Integer);
    function Get_GENISK2TIP: Integer;
    procedure Set_GENISK2TIP(Value: Integer);
    function Get_GENISK3TIP: Integer;
    procedure Set_GENISK3TIP(Value: Integer);
    function Get_EXPORTTYPE: Integer;
    procedure Set_EXPORTTYPE(Value: Integer);
    function Get_EXGUMRUKNO: WideString;
    procedure Set_EXGUMRUKNO(const Value: WideString);
    function Get_EXGUMTARIH: TDateTime;
    procedure Set_EXGUMTARIH(Value: TDateTime);
    function Get_EXFIILITARIH: TDateTime;
    procedure Set_EXFIILITARIH(Value: TDateTime);
    function Get_EXPORTREFNO: WideString;
    procedure Set_EXPORTREFNO(const Value: WideString);
    function Get_AMBHARTUR: TAmbarHarTur;
    procedure Set_AMBHARTUR(Value: TAmbarHarTur);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
    function Get_GCKOD_GIRIS: Integer;
    procedure Set_GCKOD_GIRIS(Value: Integer);
    function Get_GCKOD_CIKIS: Integer;
    procedure Set_GCKOD_CIKIS(Value: Integer);
    function Get_EKACK1: WideString;
    procedure Set_EKACK1(const Value: WideString);
    function Get_EKACK2: WideString;
    procedure Set_EKACK2(const Value: WideString);
    function Get_EKACK3: WideString;
    procedure Set_EKACK3(const Value: WideString);
    function Get_EKACK4: WideString;
    procedure Set_EKACK4(const Value: WideString);
    function Get_EKACK5: WideString;
    procedure Set_EKACK5(const Value: WideString);
    function Get_EKACK6: WideString;
    procedure Set_EKACK6(const Value: WideString);
    function Get_EKACK7: WideString;
    procedure Set_EKACK7(const Value: WideString);
    function Get_EKACK8: WideString;
    procedure Set_EKACK8(const Value: WideString);
    function Get_EKACK9: WideString;
    procedure Set_EKACK9(const Value: WideString);
    function Get_EKACK10: WideString;
    procedure Set_EKACK10(const Value: WideString);
    function Get_EKACK11: WideString;
    procedure Set_EKACK11(const Value: WideString);
    function Get_EKACK12: WideString;
    procedure Set_EKACK12(const Value: WideString);
    function Get_EKACK13: WideString;
    procedure Set_EKACK13(const Value: WideString);
    function Get_EKACK14: WideString;
    procedure Set_EKACK14(const Value: WideString);
    function Get_EKACK15: WideString;
    procedure Set_EKACK15(const Value: WideString);
    function Get_EKACK16: WideString;
    procedure Set_EKACK16(const Value: WideString);
    function Get_GEN_ISK1T: Double;
    procedure Set_GEN_ISK1T(Value: Double);
    function Get_GEN_ISK2T: Double;
    procedure Set_GEN_ISK2T(Value: Double);
    function Get_GEN_ISK3T: Double;
    procedure Set_GEN_ISK3T(Value: Double);
    function Get_CikisYeri: TCikisYeri;
    procedure Set_CikisYeri(Value: TCikisYeri);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IFatUst);
    procedure Disconnect; override;
    property DefaultInterface: IFatUst read GetDefaultInterface;
    property Tip: TFaturaTip read Get_Tip write Set_Tip;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property CariKod: WideString read Get_CariKod write Set_CariKod;
    property FATIRS_NO: WideString read Get_FATIRS_NO write Set_FATIRS_NO;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property KOD1: WideString read Get_KOD1 write Set_KOD1;
    property YEDEK: WideString read Get_YEDEK write Set_YEDEK;
    property KOD2: WideString read Get_KOD2 write Set_KOD2;
    property TIPI: TFaturaTipi read Get_TIPI write Set_TIPI;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property BRUTTUTAR: Double read Get_BRUTTUTAR write Set_BRUTTUTAR;
    property KDV: Double read Get_KDV write Set_KDV;
    property DovizTut: Double read Get_DovizTut write Set_DovizTut;
    property SAT_ISKT: Double read Get_SAT_ISKT write Set_SAT_ISKT;
    property GENELTOPLAM: Double read Get_GENELTOPLAM write Set_GENELTOPLAM;
    property YUVARLAMA: Double read Get_YUVARLAMA write Set_YUVARLAMA;
    property MFAZ_ISKT: Double read Get_MFAZ_ISKT write Set_MFAZ_ISKT;
    property GEN_ISK1O: Double read Get_GEN_ISK1O write Set_GEN_ISK1O;
    property GEN_ISK2O: Double read Get_GEN_ISK2O write Set_GEN_ISK2O;
    property GEN_ISK3O: Double read Get_GEN_ISK3O write Set_GEN_ISK3O;
    property FAT_ALTM1: Double read Get_FAT_ALTM1 write Set_FAT_ALTM1;
    property FAT_ALTM2: Double read Get_FAT_ALTM2 write Set_FAT_ALTM2;
    property KS_KODU: WideString read Get_KS_KODU write Set_KS_KODU;
    property SIPARIS_NUMARASI: WideString read Get_SIPARIS_NUMARASI write Set_SIPARIS_NUMARASI;
    property ODEMEGUNU: Integer read Get_ODEMEGUNU write Set_ODEMEGUNU;
    property ODEMETARIHI: TDateTime read Get_ODEMETARIHI write Set_ODEMETARIHI;
    property ENTEGRE_TRH: TDateTime read Get_ENTEGRE_TRH write Set_ENTEGRE_TRH;
    property KDV_DAHILMI: WordBool read Get_KDV_DAHILMI write Set_KDV_DAHILMI;
    property SIPARIS_TEST: TDateTime read Get_SIPARIS_TEST write Set_SIPARIS_TEST;
    property CARI_KOD2: WideString read Get_CARI_KOD2 write Set_CARI_KOD2;
    property PLA_KODU: WideString read Get_PLA_KODU write Set_PLA_KODU;
    property SIRANO: Integer read Get_SIRANO write Set_SIRANO;
    property DOVIZTIP: Integer read Get_DOVIZTIP write Set_DOVIZTIP;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property KOSULKODU: WideString read Get_KOSULKODU write Set_KOSULKODU;
    property FIYATTARIHI: TDateTime read Get_FIYATTARIHI write Set_FIYATTARIHI;
    property KOSULTARIHI: TDateTime read Get_KOSULTARIHI write Set_KOSULTARIHI;
    property GENISK1TIP: Integer read Get_GENISK1TIP write Set_GENISK1TIP;
    property GENISK2TIP: Integer read Get_GENISK2TIP write Set_GENISK2TIP;
    property GENISK3TIP: Integer read Get_GENISK3TIP write Set_GENISK3TIP;
    property EXPORTTYPE: Integer read Get_EXPORTTYPE write Set_EXPORTTYPE;
    property EXGUMRUKNO: WideString read Get_EXGUMRUKNO write Set_EXGUMRUKNO;
    property EXGUMTARIH: TDateTime read Get_EXGUMTARIH write Set_EXGUMTARIH;
    property EXFIILITARIH: TDateTime read Get_EXFIILITARIH write Set_EXFIILITARIH;
    property EXPORTREFNO: WideString read Get_EXPORTREFNO write Set_EXPORTREFNO;
    property AMBHARTUR: TAmbarHarTur read Get_AMBHARTUR write Set_AMBHARTUR;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property GCKOD_GIRIS: Integer read Get_GCKOD_GIRIS write Set_GCKOD_GIRIS;
    property GCKOD_CIKIS: Integer read Get_GCKOD_CIKIS write Set_GCKOD_CIKIS;
    property EKACK1: WideString read Get_EKACK1 write Set_EKACK1;
    property EKACK2: WideString read Get_EKACK2 write Set_EKACK2;
    property EKACK3: WideString read Get_EKACK3 write Set_EKACK3;
    property EKACK4: WideString read Get_EKACK4 write Set_EKACK4;
    property EKACK5: WideString read Get_EKACK5 write Set_EKACK5;
    property EKACK6: WideString read Get_EKACK6 write Set_EKACK6;
    property EKACK7: WideString read Get_EKACK7 write Set_EKACK7;
    property EKACK8: WideString read Get_EKACK8 write Set_EKACK8;
    property EKACK9: WideString read Get_EKACK9 write Set_EKACK9;
    property EKACK10: WideString read Get_EKACK10 write Set_EKACK10;
    property EKACK11: WideString read Get_EKACK11 write Set_EKACK11;
    property EKACK12: WideString read Get_EKACK12 write Set_EKACK12;
    property EKACK13: WideString read Get_EKACK13 write Set_EKACK13;
    property EKACK14: WideString read Get_EKACK14 write Set_EKACK14;
    property EKACK15: WideString read Get_EKACK15 write Set_EKACK15;
    property EKACK16: WideString read Get_EKACK16 write Set_EKACK16;
    property GEN_ISK1T: Double read Get_GEN_ISK1T write Set_GEN_ISK1T;
    property GEN_ISK2T: Double read Get_GEN_ISK2T write Set_GEN_ISK2T;
    property GEN_ISK3T: Double read Get_GEN_ISK3T write Set_GEN_ISK3T;
    property CikisYeri: TCikisYeri read Get_CikisYeri write Set_CikisYeri;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFatUstProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFatUst
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFatUstProperties = class(TPersistent)
  private
    FServer:    TFatUst;
    function    GetDefaultInterface: IFatUst;
    constructor Create(AServer: TFatUst);
  protected
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_CariKod: WideString;
    procedure Set_CariKod(const Value: WideString);
    function Get_FATIRS_NO: WideString;
    procedure Set_FATIRS_NO(const Value: WideString);
    function Get_Tarih: TDateTime;
    procedure Set_Tarih(Value: TDateTime);
    function Get_Tip: TFaturaTip;
    procedure Set_Tip(Value: TFaturaTip);
    function Get_KOD1: WideString;
    procedure Set_KOD1(const Value: WideString);
    function Get_YEDEK: WideString;
    procedure Set_YEDEK(const Value: WideString);
    function Get_KOD2: WideString;
    procedure Set_KOD2(const Value: WideString);
    function Get_TIPI: TFaturaTipi;
    procedure Set_TIPI(Value: TFaturaTipi);
    function Get_Aciklama: WideString;
    procedure Set_Aciklama(const Value: WideString);
    function Get_BRUTTUTAR: Double;
    procedure Set_BRUTTUTAR(Value: Double);
    function Get_KDV: Double;
    procedure Set_KDV(Value: Double);
    function Get_DovizTut: Double;
    procedure Set_DovizTut(Value: Double);
    function Get_SAT_ISKT: Double;
    procedure Set_SAT_ISKT(Value: Double);
    function Get_GENELTOPLAM: Double;
    procedure Set_GENELTOPLAM(Value: Double);
    function Get_YUVARLAMA: Double;
    procedure Set_YUVARLAMA(Value: Double);
    function Get_MFAZ_ISKT: Double;
    procedure Set_MFAZ_ISKT(Value: Double);
    function Get_GEN_ISK1O: Double;
    procedure Set_GEN_ISK1O(Value: Double);
    function Get_GEN_ISK2O: Double;
    procedure Set_GEN_ISK2O(Value: Double);
    function Get_GEN_ISK3O: Double;
    procedure Set_GEN_ISK3O(Value: Double);
    function Get_FAT_ALTM1: Double;
    procedure Set_FAT_ALTM1(Value: Double);
    function Get_FAT_ALTM2: Double;
    procedure Set_FAT_ALTM2(Value: Double);
    function Get_KS_KODU: WideString;
    procedure Set_KS_KODU(const Value: WideString);
    function Get_SIPARIS_NUMARASI: WideString;
    procedure Set_SIPARIS_NUMARASI(const Value: WideString);
    function Get_ODEMEGUNU: Integer;
    procedure Set_ODEMEGUNU(Value: Integer);
    function Get_ODEMETARIHI: TDateTime;
    procedure Set_ODEMETARIHI(Value: TDateTime);
    function Get_ENTEGRE_TRH: TDateTime;
    procedure Set_ENTEGRE_TRH(Value: TDateTime);
    function Get_KDV_DAHILMI: WordBool;
    procedure Set_KDV_DAHILMI(Value: WordBool);
    function Get_SIPARIS_TEST: TDateTime;
    procedure Set_SIPARIS_TEST(Value: TDateTime);
    function Get_CARI_KOD2: WideString;
    procedure Set_CARI_KOD2(const Value: WideString);
    function Get_PLA_KODU: WideString;
    procedure Set_PLA_KODU(const Value: WideString);
    function Get_SIRANO: Integer;
    procedure Set_SIRANO(Value: Integer);
    function Get_DOVIZTIP: Integer;
    procedure Set_DOVIZTIP(Value: Integer);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_KOSULKODU: WideString;
    procedure Set_KOSULKODU(const Value: WideString);
    function Get_FIYATTARIHI: TDateTime;
    procedure Set_FIYATTARIHI(Value: TDateTime);
    function Get_KOSULTARIHI: TDateTime;
    procedure Set_KOSULTARIHI(Value: TDateTime);
    function Get_GENISK1TIP: Integer;
    procedure Set_GENISK1TIP(Value: Integer);
    function Get_GENISK2TIP: Integer;
    procedure Set_GENISK2TIP(Value: Integer);
    function Get_GENISK3TIP: Integer;
    procedure Set_GENISK3TIP(Value: Integer);
    function Get_EXPORTTYPE: Integer;
    procedure Set_EXPORTTYPE(Value: Integer);
    function Get_EXGUMRUKNO: WideString;
    procedure Set_EXGUMRUKNO(const Value: WideString);
    function Get_EXGUMTARIH: TDateTime;
    procedure Set_EXGUMTARIH(Value: TDateTime);
    function Get_EXFIILITARIH: TDateTime;
    procedure Set_EXFIILITARIH(Value: TDateTime);
    function Get_EXPORTREFNO: WideString;
    procedure Set_EXPORTREFNO(const Value: WideString);
    function Get_AMBHARTUR: TAmbarHarTur;
    procedure Set_AMBHARTUR(Value: TAmbarHarTur);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
    function Get_GCKOD_GIRIS: Integer;
    procedure Set_GCKOD_GIRIS(Value: Integer);
    function Get_GCKOD_CIKIS: Integer;
    procedure Set_GCKOD_CIKIS(Value: Integer);
    function Get_EKACK1: WideString;
    procedure Set_EKACK1(const Value: WideString);
    function Get_EKACK2: WideString;
    procedure Set_EKACK2(const Value: WideString);
    function Get_EKACK3: WideString;
    procedure Set_EKACK3(const Value: WideString);
    function Get_EKACK4: WideString;
    procedure Set_EKACK4(const Value: WideString);
    function Get_EKACK5: WideString;
    procedure Set_EKACK5(const Value: WideString);
    function Get_EKACK6: WideString;
    procedure Set_EKACK6(const Value: WideString);
    function Get_EKACK7: WideString;
    procedure Set_EKACK7(const Value: WideString);
    function Get_EKACK8: WideString;
    procedure Set_EKACK8(const Value: WideString);
    function Get_EKACK9: WideString;
    procedure Set_EKACK9(const Value: WideString);
    function Get_EKACK10: WideString;
    procedure Set_EKACK10(const Value: WideString);
    function Get_EKACK11: WideString;
    procedure Set_EKACK11(const Value: WideString);
    function Get_EKACK12: WideString;
    procedure Set_EKACK12(const Value: WideString);
    function Get_EKACK13: WideString;
    procedure Set_EKACK13(const Value: WideString);
    function Get_EKACK14: WideString;
    procedure Set_EKACK14(const Value: WideString);
    function Get_EKACK15: WideString;
    procedure Set_EKACK15(const Value: WideString);
    function Get_EKACK16: WideString;
    procedure Set_EKACK16(const Value: WideString);
    function Get_GEN_ISK1T: Double;
    procedure Set_GEN_ISK1T(Value: Double);
    function Get_GEN_ISK2T: Double;
    procedure Set_GEN_ISK2T(Value: Double);
    function Get_GEN_ISK3T: Double;
    procedure Set_GEN_ISK3T(Value: Double);
    function Get_CikisYeri: TCikisYeri;
    procedure Set_CikisYeri(Value: TCikisYeri);
  public
    property DefaultInterface: IFatUst read GetDefaultInterface;
  published
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property CariKod: WideString read Get_CariKod write Set_CariKod;
    property FATIRS_NO: WideString read Get_FATIRS_NO write Set_FATIRS_NO;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property KOD1: WideString read Get_KOD1 write Set_KOD1;
    property YEDEK: WideString read Get_YEDEK write Set_YEDEK;
    property KOD2: WideString read Get_KOD2 write Set_KOD2;
    property TIPI: TFaturaTipi read Get_TIPI write Set_TIPI;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property BRUTTUTAR: Double read Get_BRUTTUTAR write Set_BRUTTUTAR;
    property KDV: Double read Get_KDV write Set_KDV;
    property DovizTut: Double read Get_DovizTut write Set_DovizTut;
    property SAT_ISKT: Double read Get_SAT_ISKT write Set_SAT_ISKT;
    property GENELTOPLAM: Double read Get_GENELTOPLAM write Set_GENELTOPLAM;
    property YUVARLAMA: Double read Get_YUVARLAMA write Set_YUVARLAMA;
    property MFAZ_ISKT: Double read Get_MFAZ_ISKT write Set_MFAZ_ISKT;
    property GEN_ISK1O: Double read Get_GEN_ISK1O write Set_GEN_ISK1O;
    property GEN_ISK2O: Double read Get_GEN_ISK2O write Set_GEN_ISK2O;
    property GEN_ISK3O: Double read Get_GEN_ISK3O write Set_GEN_ISK3O;
    property FAT_ALTM1: Double read Get_FAT_ALTM1 write Set_FAT_ALTM1;
    property FAT_ALTM2: Double read Get_FAT_ALTM2 write Set_FAT_ALTM2;
    property KS_KODU: WideString read Get_KS_KODU write Set_KS_KODU;
    property SIPARIS_NUMARASI: WideString read Get_SIPARIS_NUMARASI write Set_SIPARIS_NUMARASI;
    property ODEMEGUNU: Integer read Get_ODEMEGUNU write Set_ODEMEGUNU;
    property ODEMETARIHI: TDateTime read Get_ODEMETARIHI write Set_ODEMETARIHI;
    property ENTEGRE_TRH: TDateTime read Get_ENTEGRE_TRH write Set_ENTEGRE_TRH;
    property KDV_DAHILMI: WordBool read Get_KDV_DAHILMI write Set_KDV_DAHILMI;
    property SIPARIS_TEST: TDateTime read Get_SIPARIS_TEST write Set_SIPARIS_TEST;
    property CARI_KOD2: WideString read Get_CARI_KOD2 write Set_CARI_KOD2;
    property PLA_KODU: WideString read Get_PLA_KODU write Set_PLA_KODU;
    property SIRANO: Integer read Get_SIRANO write Set_SIRANO;
    property DOVIZTIP: Integer read Get_DOVIZTIP write Set_DOVIZTIP;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property KOSULKODU: WideString read Get_KOSULKODU write Set_KOSULKODU;
    property FIYATTARIHI: TDateTime read Get_FIYATTARIHI write Set_FIYATTARIHI;
    property KOSULTARIHI: TDateTime read Get_KOSULTARIHI write Set_KOSULTARIHI;
    property GENISK1TIP: Integer read Get_GENISK1TIP write Set_GENISK1TIP;
    property GENISK2TIP: Integer read Get_GENISK2TIP write Set_GENISK2TIP;
    property GENISK3TIP: Integer read Get_GENISK3TIP write Set_GENISK3TIP;
    property EXPORTTYPE: Integer read Get_EXPORTTYPE write Set_EXPORTTYPE;
    property EXGUMRUKNO: WideString read Get_EXGUMRUKNO write Set_EXGUMRUKNO;
    property EXGUMTARIH: TDateTime read Get_EXGUMTARIH write Set_EXGUMTARIH;
    property EXFIILITARIH: TDateTime read Get_EXFIILITARIH write Set_EXFIILITARIH;
    property EXPORTREFNO: WideString read Get_EXPORTREFNO write Set_EXPORTREFNO;
    property AMBHARTUR: TAmbarHarTur read Get_AMBHARTUR write Set_AMBHARTUR;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property GCKOD_GIRIS: Integer read Get_GCKOD_GIRIS write Set_GCKOD_GIRIS;
    property GCKOD_CIKIS: Integer read Get_GCKOD_CIKIS write Set_GCKOD_CIKIS;
    property EKACK1: WideString read Get_EKACK1 write Set_EKACK1;
    property EKACK2: WideString read Get_EKACK2 write Set_EKACK2;
    property EKACK3: WideString read Get_EKACK3 write Set_EKACK3;
    property EKACK4: WideString read Get_EKACK4 write Set_EKACK4;
    property EKACK5: WideString read Get_EKACK5 write Set_EKACK5;
    property EKACK6: WideString read Get_EKACK6 write Set_EKACK6;
    property EKACK7: WideString read Get_EKACK7 write Set_EKACK7;
    property EKACK8: WideString read Get_EKACK8 write Set_EKACK8;
    property EKACK9: WideString read Get_EKACK9 write Set_EKACK9;
    property EKACK10: WideString read Get_EKACK10 write Set_EKACK10;
    property EKACK11: WideString read Get_EKACK11 write Set_EKACK11;
    property EKACK12: WideString read Get_EKACK12 write Set_EKACK12;
    property EKACK13: WideString read Get_EKACK13 write Set_EKACK13;
    property EKACK14: WideString read Get_EKACK14 write Set_EKACK14;
    property EKACK15: WideString read Get_EKACK15 write Set_EKACK15;
    property EKACK16: WideString read Get_EKACK16 write Set_EKACK16;
    property GEN_ISK1T: Double read Get_GEN_ISK1T write Set_GEN_ISK1T;
    property GEN_ISK2T: Double read Get_GEN_ISK2T write Set_GEN_ISK2T;
    property GEN_ISK3T: Double read Get_GEN_ISK3T write Set_GEN_ISK3T;
    property CikisYeri: TCikisYeri read Get_CikisYeri write Set_CikisYeri;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFatKalem provides a Create and CreateRemote method to          
// create instances of the default interface IFatKalem exposed by              
// the CoClass FatKalem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFatKalem = class
    class function Create: IFatKalem;
    class function CreateRemote(const MachineName: string): IFatKalem;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFatKalem
// Help String      : FatKalem Object
// Default Interface: IFatKalem
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFatKalemProperties= class;
{$ENDIF}
  TFatKalem = class(TOleServer)
  private
    FIntf:        IFatKalem;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFatKalemProperties;
    function      GetServerProperties: TFatKalemProperties;
{$ENDIF}
    function      GetDefaultInterface: IFatKalem;
  protected
    procedure InitServerData; override;
    function Get_StokKodu: WideString;
    procedure Set_StokKodu(const Value: WideString);
    function Get_Sira: Integer;
    procedure Set_Sira(Value: Integer);
    function Get_STra_FATIRSNO: WideString;
    procedure Set_STra_FATIRSNO(const Value: WideString);
    function Get_STra_GCMIK: Double;
    procedure Set_STra_GCMIK(Value: Double);
    function Get_STra_GCMIK2: Double;
    procedure Set_STra_GCMIK2(Value: Double);
    function Get_CEVRIM: Double;
    procedure Set_CEVRIM(Value: Double);
    function Get_STra_TAR: TDateTime;
    procedure Set_STra_TAR(Value: TDateTime);
    function Get_STra_NF: Double;
    procedure Set_STra_NF(Value: Double);
    function Get_STra_BF: Double;
    procedure Set_STra_BF(Value: Double);
    function Get_STra_IAF: Double;
    procedure Set_STra_IAF(Value: Double);
    function Get_STra_KDV: Double;
    procedure Set_STra_KDV(Value: Double);
    function Get_STra_SatIsk: Double;
    procedure Set_STra_SatIsk(Value: Double);
    function Get_STra_SatIsk2: Double;
    procedure Set_STra_SatIsk2(Value: Double);
    function Get_STra_MALFISK: Double;
    procedure Set_STra_MALFISK(Value: Double);
    function Get_STra_HTUR: WideString;
    procedure Set_STra_HTUR(const Value: WideString);
    function Get_STra_DOVTIP: Integer;
    procedure Set_STra_DOVTIP(Value: Integer);
    function Get_PROMASYON_KODU: Integer;
    procedure Set_PROMASYON_KODU(Value: Integer);
    function Get_STra_DOVFIAT: Double;
    procedure Set_STra_DOVFIAT(Value: Double);
    function Get_STra_ODEGUN: Integer;
    procedure Set_STra_ODEGUN(Value: Integer);
    function Get_STra_KOD1: WideString;
    procedure Set_STra_KOD1(const Value: WideString);
    function Get_STra_KOD2: WideString;
    procedure Set_STra_KOD2(const Value: WideString);
    function Get_STra_SIPNUM: WideString;
    procedure Set_STra_SIPNUM(const Value: WideString);
    function Get_STra_SIP_TURU: WideString;
    procedure Set_STra_SIP_TURU(const Value: WideString);
    function Get_Plasiyer_Kodu: WideString;
    procedure Set_Plasiyer_Kodu(const Value: WideString);
    function Get_Ekalanneden: WideString;
    procedure Set_Ekalanneden(const Value: WideString);
    function Get_Ekalan: WideString;
    procedure Set_Ekalan(const Value: WideString);
    function Get_Ekalan1: WideString;
    procedure Set_Ekalan1(const Value: WideString);
    function Get_Stra_Otv: Double;
    procedure Set_Stra_Otv(Value: Double);
    function Get_Redneden: Integer;
    procedure Set_Redneden(Value: Integer);
    function Get_STra_SIPKONT: Integer;
    procedure Set_STra_SIPKONT(Value: Integer);
    function Get_Ambarkabulno: WideString;
    procedure Set_Ambarkabulno(const Value: WideString);
    function Get_Firmadovtip: Integer;
    procedure Set_Firmadovtip(Value: Integer);
    function Get_Firmadovtut: Double;
    procedure Set_Firmadovtut(Value: Double);
    function Get_Firmadovmal: Double;
    procedure Set_Firmadovmal(Value: Double);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_Irsaliyeno: WideString;
    procedure Set_Irsaliyeno(const Value: WideString);
    function Get_Irsaliyetar: TDateTime;
    procedure Set_Irsaliyetar(Value: TDateTime);
    function Get_Stra_KosulK: WideString;
    procedure Set_Stra_KosulK(const Value: WideString);
    function Get_Ecza_fat_tip: Integer;
    procedure Set_Ecza_fat_tip(Value: Integer);
    function Get_STra_testar: TDateTime;
    procedure Set_STra_testar(Value: TDateTime);
    function Get_Olcubr: Integer;
    procedure Set_Olcubr(Value: Integer);
    function Get_Vadetar: TDateTime;
    procedure Set_Vadetar(Value: TDateTime);
    function Get_Listeno: WideString;
    procedure Set_Listeno(const Value: WideString);
    function Get_BaglantiNo: Integer;
    procedure Set_BaglantiNo(Value: Integer);
    function Get_BrCevrim1: Double;
    procedure Set_BrCevrim1(Value: Double);
    function Get_BrCevrim2: Double;
    procedure Set_BrCevrim2(Value: Double);
    function Get_Yed_Bf: Double;
    procedure Set_Yed_Bf(Value: Double);
    function Get_STra_BGTIP: WideString;
    procedure Set_STra_BGTIP(const Value: WideString);
    function Get_MuhasebeKodu: WideString;
    procedure Set_MuhasebeKodu(const Value: WideString);
    function Get_ReferansKodu: WideString;
    procedure Set_ReferansKodu(const Value: WideString);
    function Get_C_Yedek6: WideString;
    procedure Set_C_Yedek6(const Value: WideString);
    function Get_ProjeKodu: WideString;
    procedure Set_ProjeKodu(const Value: WideString);
    function Get_STra_FTIRSIP: WideString;
    procedure Set_STra_FTIRSIP(const Value: WideString);
    function Get_STra_CARI_KOD: WideString;
    procedure Set_STra_CARI_KOD(const Value: WideString);
    function Get_STra_GC: WideString;
    procedure Set_STra_GC(const Value: WideString);
    function Get_DEPO_KODU: Integer;
    procedure Set_DEPO_KODU(Value: Integer);
    function Get_Gir_Depo_Kodu: Integer;
    procedure Set_Gir_Depo_Kodu(Value: Integer);
    function Get_STra_ACIK: WideString;
    procedure Set_STra_ACIK(const Value: WideString);
    function Get_Stra_OnayTipi: WideString;
    procedure Set_Stra_OnayTipi(const Value: WideString);
    function Get_Stra_OnayNum: Integer;
    procedure Set_Stra_OnayNum(Value: Integer);
    function Get_Stra_SubeKodu: Integer;
    procedure Set_Stra_SubeKodu(Value: Integer);
    function Get_Stok_IsletmeKod: Integer;
    procedure Set_Stok_IsletmeKod(Value: Integer);
    function Get_Stok_SubeKod: Integer;
    procedure Set_Stok_SubeKod(Value: Integer);
    function Get_Stra_Exporttype: Integer;
    procedure Set_Stra_Exporttype(Value: Integer);
    function Get_IncKeyNo: Integer;
    procedure Set_IncKeyNo(Value: Integer);
    function Get_IncKeyNo2: Integer;
    procedure Set_IncKeyNo2(Value: Integer);
    function Get_TesMik: Double;
    procedure Set_TesMik(Value: Double);
    function Get_TesMFMik: Double;
    procedure Set_TesMFMik(Value: Double);
    function Get_MALADI: WideString;
    procedure Set_MALADI(const Value: WideString);
    function Get_SATREF_KOD: WideString;
    procedure Set_SATREF_KOD(const Value: WideString);
    function Get_STOK_GRKOD: WideString;
    procedure Set_STOK_GRKOD(const Value: WideString);
    function Get_STOK_FIYATKODU: WideString;
    procedure Set_STOK_FIYATKODU(const Value: WideString);
    function Get_STMUHDKOD: Integer;
    procedure Set_STMUHDKOD(Value: Integer);
    function Get_SONGIRBFIAT: Double;
    procedure Set_SONGIRBFIAT(Value: Double);
    function Get_OBR1: WideString;
    procedure Set_OBR1(const Value: WideString);
    function Get_OBR2: WideString;
    procedure Set_OBR2(const Value: WideString);
    function Get_OBR3: WideString;
    procedure Set_OBR3(const Value: WideString);
    function Get_SabitDepKod: Integer;
    procedure Set_SabitDepKod(Value: Integer);
    function Get_DOVTIP: Integer;
    procedure Set_DOVTIP(Value: Integer);
    function Get_DOVIZ_TURU: Integer;
    procedure Set_DOVIZ_TURU(Value: Integer);
    function Get_Fiyatlar1: Double;
    procedure Set_Fiyatlar1(Value: Double);
    function Get_Fiyatlar2: Double;
    procedure Set_Fiyatlar2(Value: Double);
    function Get_Fiyatlar3: Double;
    procedure Set_Fiyatlar3(Value: Double);
    function Get_Fiyatlar4: Double;
    procedure Set_Fiyatlar4(Value: Double);
    function Get_Fiyatlar5: Double;
    procedure Set_Fiyatlar5(Value: Double);
    function Get_Fiyatlar6: Double;
    procedure Set_Fiyatlar6(Value: Double);
    function Get_Fiyatlar7: Double;
    procedure Set_Fiyatlar7(Value: Double);
    function Get_Kilit: WideString;
    procedure Set_Kilit(const Value: WideString);
    function Get_SatisKDVOran: Double;
    procedure Set_SatisKDVOran(Value: Double);
    function Get_AlisKDVOran: Double;
    procedure Set_AlisKDVOran(Value: Double);
    function Get_Isk_Flag: TFatKalemIskTipi;
    procedure Set_Isk_Flag(Value: TFatKalemIskTipi);
    function Get_SipTesKont: Integer;
    procedure Set_SipTesKont(Value: Integer);
    function Get_Mamulmu: WideString;
    procedure Set_Mamulmu(const Value: WideString);
    function Get_SeriTakibi: WideString;
    procedure Set_SeriTakibi(const Value: WideString);
    function Get_Stra_Exportmik: Double;
    procedure Set_Stra_Exportmik(Value: Double);
    function Get_STra_SatIsk3: Double;
    procedure Set_STra_SatIsk3(Value: Double);
    function Get_Stra_KosTar: TDateTime;
    procedure Set_Stra_KosTar(Value: TDateTime);
    function Get_Stra_FiyatTar: TDateTime;
    procedure Set_Stra_FiyatTar(Value: TDateTime);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_Kul_Mik: Double;
    procedure Set_Kul_Mik(Value: Double);
    function Get_Fiat_birimi: Integer;
    procedure Set_Fiat_birimi(Value: Integer);
    function Get_Satici_Kodu: WideString;
    procedure Set_Satici_Kodu(const Value: WideString);
    function Get_Sat_IskTipleri1: Integer;
    procedure Set_Sat_IskTipleri1(Value: Integer);
    function Get_Sat_IskTipleri2: Integer;
    procedure Set_Sat_IskTipleri2(Value: Integer);
    function Get_Sat_IskTipleri3: Integer;
    procedure Set_Sat_IskTipleri3(Value: Integer);
    function Get_Koli_Inc: Integer;
    procedure Set_Koli_Inc(Value: Integer);
    function Get_KoliStok: WordBool;
    procedure Set_KoliStok(Value: WordBool);
    function Get_Tur: WideString;
    procedure Set_Tur(const Value: WideString);
    function Get_Stra_FiiliTar: TDateTime;
    procedure Set_Stra_FiiliTar(Value: TDateTime);
    function Get_BirimPuan: Integer;
    procedure Set_BirimPuan(Value: Integer);
    function Get_PuanDeger: Double;
    procedure Set_PuanDeger(Value: Double);
    function Get_KalemGenIskOran1: Double;
    procedure Set_KalemGenIskOran1(Value: Double);
    function Get_KalemGenIskOran2: Double;
    procedure Set_KalemGenIskOran2(Value: Double);
    function Get_KalemGenIskOran3: Double;
    procedure Set_KalemGenIskOran3(Value: Double);
    function Get_OtvFlag: Integer;
    procedure Set_OtvFlag(Value: Integer);
    function Get_Otvtut: Double;
    procedure Set_Otvtut(Value: Double);
    function Get_STra_SatIsk4: Double;
    procedure Set_STra_SatIsk4(Value: Double);
    function Get_STra_SatIsk5: Double;
    procedure Set_STra_SatIsk5(Value: Double);
    function Get_STra_SatIsk6: Double;
    procedure Set_STra_SatIsk6(Value: Double);
    function Get_Kull1S: WideString;
    procedure Set_Kull1S(const Value: WideString);
    function Get_KKMalF: Double;
    procedure Set_KKMalF(Value: Double);
    function Get_Stra_FiyatBirimi: Integer;
    procedure Set_Stra_FiyatBirimi(Value: Integer);
    function Get_Stra_IrsKont: Integer;
    procedure Set_Stra_IrsKont(Value: Integer);
    function Get_SatisKilit: WideString;
    procedure Set_SatisKilit(const Value: WideString);
    function Get_Payda_1: Double;
    procedure Set_Payda_1(Value: Double);
    function Get_SatirBaziAcik(Index: Integer): WideString;
    procedure Set_SatirBaziAcik(Index: Integer; const Value: WideString);
    function Get_D_YEDEK10: TDateTime;
    procedure Set_D_YEDEK10(Value: TDateTime);
    function Get_Sat_IskTipleri4: Integer;
    procedure Set_Sat_IskTipleri4(Value: Integer);
    function Get_Sat_IskTipleri5: Integer;
    procedure Set_Sat_IskTipleri5(Value: Integer);
    function Get_Sat_IskTipleri6: Integer;
    procedure Set_Sat_IskTipleri6(Value: Integer);
    function Get_YapKod: WideString;
    procedure Set_YapKod(const Value: WideString);
    function Get_EsnekMi: WordBool;
    function Get_SeriSayisi: Integer;
    function Get_BRCevrim(Index: Integer): Double;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IFatKalem);
    procedure Disconnect; override;
    function SeriEkle(const Seri1: WideString; const Seri2: WideString; 
                      const Aciklama1: WideString; const Aciklama2: WideString; Miktar: Double): Integer;
    procedure SeriSil(SeriIndex: Integer);
    function SeriOku(Index: Integer): IKalemSeri;
    property DefaultInterface: IFatKalem read GetDefaultInterface;
    property Yed_Bf: Double read Get_Yed_Bf write Set_Yed_Bf;
    property SatirBaziAcik[Index: Integer]: WideString read Get_SatirBaziAcik write Set_SatirBaziAcik;
    property EsnekMi: WordBool read Get_EsnekMi;
    property SeriSayisi: Integer read Get_SeriSayisi;
    property BRCevrim[Index: Integer]: Double read Get_BRCevrim;
    property StokKodu: WideString read Get_StokKodu write Set_StokKodu;
    property Sira: Integer read Get_Sira write Set_Sira;
    property STra_FATIRSNO: WideString read Get_STra_FATIRSNO write Set_STra_FATIRSNO;
    property STra_GCMIK: Double read Get_STra_GCMIK write Set_STra_GCMIK;
    property STra_GCMIK2: Double read Get_STra_GCMIK2 write Set_STra_GCMIK2;
    property CEVRIM: Double read Get_CEVRIM write Set_CEVRIM;
    property STra_TAR: TDateTime read Get_STra_TAR write Set_STra_TAR;
    property STra_NF: Double read Get_STra_NF write Set_STra_NF;
    property STra_BF: Double read Get_STra_BF write Set_STra_BF;
    property STra_IAF: Double read Get_STra_IAF write Set_STra_IAF;
    property STra_KDV: Double read Get_STra_KDV write Set_STra_KDV;
    property STra_SatIsk: Double read Get_STra_SatIsk write Set_STra_SatIsk;
    property STra_SatIsk2: Double read Get_STra_SatIsk2 write Set_STra_SatIsk2;
    property STra_MALFISK: Double read Get_STra_MALFISK write Set_STra_MALFISK;
    property STra_HTUR: WideString read Get_STra_HTUR write Set_STra_HTUR;
    property STra_DOVTIP: Integer read Get_STra_DOVTIP write Set_STra_DOVTIP;
    property PROMASYON_KODU: Integer read Get_PROMASYON_KODU write Set_PROMASYON_KODU;
    property STra_DOVFIAT: Double read Get_STra_DOVFIAT write Set_STra_DOVFIAT;
    property STra_ODEGUN: Integer read Get_STra_ODEGUN write Set_STra_ODEGUN;
    property STra_KOD1: WideString read Get_STra_KOD1 write Set_STra_KOD1;
    property STra_KOD2: WideString read Get_STra_KOD2 write Set_STra_KOD2;
    property STra_SIPNUM: WideString read Get_STra_SIPNUM write Set_STra_SIPNUM;
    property STra_SIP_TURU: WideString read Get_STra_SIP_TURU write Set_STra_SIP_TURU;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property Ekalanneden: WideString read Get_Ekalanneden write Set_Ekalanneden;
    property Ekalan: WideString read Get_Ekalan write Set_Ekalan;
    property Ekalan1: WideString read Get_Ekalan1 write Set_Ekalan1;
    property Stra_Otv: Double read Get_Stra_Otv write Set_Stra_Otv;
    property Redneden: Integer read Get_Redneden write Set_Redneden;
    property STra_SIPKONT: Integer read Get_STra_SIPKONT write Set_STra_SIPKONT;
    property Ambarkabulno: WideString read Get_Ambarkabulno write Set_Ambarkabulno;
    property Firmadovtip: Integer read Get_Firmadovtip write Set_Firmadovtip;
    property Firmadovtut: Double read Get_Firmadovtut write Set_Firmadovtut;
    property Firmadovmal: Double read Get_Firmadovmal write Set_Firmadovmal;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Irsaliyeno: WideString read Get_Irsaliyeno write Set_Irsaliyeno;
    property Irsaliyetar: TDateTime read Get_Irsaliyetar write Set_Irsaliyetar;
    property Stra_KosulK: WideString read Get_Stra_KosulK write Set_Stra_KosulK;
    property Ecza_fat_tip: Integer read Get_Ecza_fat_tip write Set_Ecza_fat_tip;
    property STra_testar: TDateTime read Get_STra_testar write Set_STra_testar;
    property Olcubr: Integer read Get_Olcubr write Set_Olcubr;
    property Vadetar: TDateTime read Get_Vadetar write Set_Vadetar;
    property Listeno: WideString read Get_Listeno write Set_Listeno;
    property BaglantiNo: Integer read Get_BaglantiNo write Set_BaglantiNo;
    property BrCevrim1: Double read Get_BrCevrim1 write Set_BrCevrim1;
    property BrCevrim2: Double read Get_BrCevrim2 write Set_BrCevrim2;
    property STra_BGTIP: WideString read Get_STra_BGTIP write Set_STra_BGTIP;
    property MuhasebeKodu: WideString read Get_MuhasebeKodu write Set_MuhasebeKodu;
    property ReferansKodu: WideString read Get_ReferansKodu write Set_ReferansKodu;
    property C_Yedek6: WideString read Get_C_Yedek6 write Set_C_Yedek6;
    property ProjeKodu: WideString read Get_ProjeKodu write Set_ProjeKodu;
    property STra_FTIRSIP: WideString read Get_STra_FTIRSIP write Set_STra_FTIRSIP;
    property STra_CARI_KOD: WideString read Get_STra_CARI_KOD write Set_STra_CARI_KOD;
    property STra_GC: WideString read Get_STra_GC write Set_STra_GC;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property Gir_Depo_Kodu: Integer read Get_Gir_Depo_Kodu write Set_Gir_Depo_Kodu;
    property STra_ACIK: WideString read Get_STra_ACIK write Set_STra_ACIK;
    property Stra_OnayTipi: WideString read Get_Stra_OnayTipi write Set_Stra_OnayTipi;
    property Stra_OnayNum: Integer read Get_Stra_OnayNum write Set_Stra_OnayNum;
    property Stra_SubeKodu: Integer read Get_Stra_SubeKodu write Set_Stra_SubeKodu;
    property Stok_IsletmeKod: Integer read Get_Stok_IsletmeKod write Set_Stok_IsletmeKod;
    property Stok_SubeKod: Integer read Get_Stok_SubeKod write Set_Stok_SubeKod;
    property Stra_Exporttype: Integer read Get_Stra_Exporttype write Set_Stra_Exporttype;
    property IncKeyNo: Integer read Get_IncKeyNo write Set_IncKeyNo;
    property IncKeyNo2: Integer read Get_IncKeyNo2 write Set_IncKeyNo2;
    property TesMik: Double read Get_TesMik write Set_TesMik;
    property TesMFMik: Double read Get_TesMFMik write Set_TesMFMik;
    property MALADI: WideString read Get_MALADI write Set_MALADI;
    property SATREF_KOD: WideString read Get_SATREF_KOD write Set_SATREF_KOD;
    property STOK_GRKOD: WideString read Get_STOK_GRKOD write Set_STOK_GRKOD;
    property STOK_FIYATKODU: WideString read Get_STOK_FIYATKODU write Set_STOK_FIYATKODU;
    property STMUHDKOD: Integer read Get_STMUHDKOD write Set_STMUHDKOD;
    property SONGIRBFIAT: Double read Get_SONGIRBFIAT write Set_SONGIRBFIAT;
    property OBR1: WideString read Get_OBR1 write Set_OBR1;
    property OBR2: WideString read Get_OBR2 write Set_OBR2;
    property OBR3: WideString read Get_OBR3 write Set_OBR3;
    property SabitDepKod: Integer read Get_SabitDepKod write Set_SabitDepKod;
    property DOVTIP: Integer read Get_DOVTIP write Set_DOVTIP;
    property DOVIZ_TURU: Integer read Get_DOVIZ_TURU write Set_DOVIZ_TURU;
    property Fiyatlar1: Double read Get_Fiyatlar1 write Set_Fiyatlar1;
    property Fiyatlar2: Double read Get_Fiyatlar2 write Set_Fiyatlar2;
    property Fiyatlar3: Double read Get_Fiyatlar3 write Set_Fiyatlar3;
    property Fiyatlar4: Double read Get_Fiyatlar4 write Set_Fiyatlar4;
    property Fiyatlar5: Double read Get_Fiyatlar5 write Set_Fiyatlar5;
    property Fiyatlar6: Double read Get_Fiyatlar6 write Set_Fiyatlar6;
    property Fiyatlar7: Double read Get_Fiyatlar7 write Set_Fiyatlar7;
    property Kilit: WideString read Get_Kilit write Set_Kilit;
    property SatisKDVOran: Double read Get_SatisKDVOran write Set_SatisKDVOran;
    property AlisKDVOran: Double read Get_AlisKDVOran write Set_AlisKDVOran;
    property Isk_Flag: TFatKalemIskTipi read Get_Isk_Flag write Set_Isk_Flag;
    property SipTesKont: Integer read Get_SipTesKont write Set_SipTesKont;
    property Mamulmu: WideString read Get_Mamulmu write Set_Mamulmu;
    property SeriTakibi: WideString read Get_SeriTakibi write Set_SeriTakibi;
    property Stra_Exportmik: Double read Get_Stra_Exportmik write Set_Stra_Exportmik;
    property STra_SatIsk3: Double read Get_STra_SatIsk3 write Set_STra_SatIsk3;
    property Stra_KosTar: TDateTime read Get_Stra_KosTar write Set_Stra_KosTar;
    property Stra_FiyatTar: TDateTime read Get_Stra_FiyatTar write Set_Stra_FiyatTar;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property Kul_Mik: Double read Get_Kul_Mik write Set_Kul_Mik;
    property Fiat_birimi: Integer read Get_Fiat_birimi write Set_Fiat_birimi;
    property Satici_Kodu: WideString read Get_Satici_Kodu write Set_Satici_Kodu;
    property Sat_IskTipleri1: Integer read Get_Sat_IskTipleri1 write Set_Sat_IskTipleri1;
    property Sat_IskTipleri2: Integer read Get_Sat_IskTipleri2 write Set_Sat_IskTipleri2;
    property Sat_IskTipleri3: Integer read Get_Sat_IskTipleri3 write Set_Sat_IskTipleri3;
    property Koli_Inc: Integer read Get_Koli_Inc write Set_Koli_Inc;
    property KoliStok: WordBool read Get_KoliStok write Set_KoliStok;
    property Tur: WideString read Get_Tur write Set_Tur;
    property Stra_FiiliTar: TDateTime read Get_Stra_FiiliTar write Set_Stra_FiiliTar;
    property BirimPuan: Integer read Get_BirimPuan write Set_BirimPuan;
    property PuanDeger: Double read Get_PuanDeger write Set_PuanDeger;
    property KalemGenIskOran1: Double read Get_KalemGenIskOran1 write Set_KalemGenIskOran1;
    property KalemGenIskOran2: Double read Get_KalemGenIskOran2 write Set_KalemGenIskOran2;
    property KalemGenIskOran3: Double read Get_KalemGenIskOran3 write Set_KalemGenIskOran3;
    property OtvFlag: Integer read Get_OtvFlag write Set_OtvFlag;
    property Otvtut: Double read Get_Otvtut write Set_Otvtut;
    property STra_SatIsk4: Double read Get_STra_SatIsk4 write Set_STra_SatIsk4;
    property STra_SatIsk5: Double read Get_STra_SatIsk5 write Set_STra_SatIsk5;
    property STra_SatIsk6: Double read Get_STra_SatIsk6 write Set_STra_SatIsk6;
    property Kull1S: WideString read Get_Kull1S write Set_Kull1S;
    property KKMalF: Double read Get_KKMalF write Set_KKMalF;
    property Stra_FiyatBirimi: Integer read Get_Stra_FiyatBirimi write Set_Stra_FiyatBirimi;
    property Stra_IrsKont: Integer read Get_Stra_IrsKont write Set_Stra_IrsKont;
    property SatisKilit: WideString read Get_SatisKilit write Set_SatisKilit;
    property Payda_1: Double read Get_Payda_1 write Set_Payda_1;
    property D_YEDEK10: TDateTime read Get_D_YEDEK10 write Set_D_YEDEK10;
    property Sat_IskTipleri4: Integer read Get_Sat_IskTipleri4 write Set_Sat_IskTipleri4;
    property Sat_IskTipleri5: Integer read Get_Sat_IskTipleri5 write Set_Sat_IskTipleri5;
    property Sat_IskTipleri6: Integer read Get_Sat_IskTipleri6 write Set_Sat_IskTipleri6;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFatKalemProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFatKalem
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFatKalemProperties = class(TPersistent)
  private
    FServer:    TFatKalem;
    function    GetDefaultInterface: IFatKalem;
    constructor Create(AServer: TFatKalem);
  protected
    function Get_StokKodu: WideString;
    procedure Set_StokKodu(const Value: WideString);
    function Get_Sira: Integer;
    procedure Set_Sira(Value: Integer);
    function Get_STra_FATIRSNO: WideString;
    procedure Set_STra_FATIRSNO(const Value: WideString);
    function Get_STra_GCMIK: Double;
    procedure Set_STra_GCMIK(Value: Double);
    function Get_STra_GCMIK2: Double;
    procedure Set_STra_GCMIK2(Value: Double);
    function Get_CEVRIM: Double;
    procedure Set_CEVRIM(Value: Double);
    function Get_STra_TAR: TDateTime;
    procedure Set_STra_TAR(Value: TDateTime);
    function Get_STra_NF: Double;
    procedure Set_STra_NF(Value: Double);
    function Get_STra_BF: Double;
    procedure Set_STra_BF(Value: Double);
    function Get_STra_IAF: Double;
    procedure Set_STra_IAF(Value: Double);
    function Get_STra_KDV: Double;
    procedure Set_STra_KDV(Value: Double);
    function Get_STra_SatIsk: Double;
    procedure Set_STra_SatIsk(Value: Double);
    function Get_STra_SatIsk2: Double;
    procedure Set_STra_SatIsk2(Value: Double);
    function Get_STra_MALFISK: Double;
    procedure Set_STra_MALFISK(Value: Double);
    function Get_STra_HTUR: WideString;
    procedure Set_STra_HTUR(const Value: WideString);
    function Get_STra_DOVTIP: Integer;
    procedure Set_STra_DOVTIP(Value: Integer);
    function Get_PROMASYON_KODU: Integer;
    procedure Set_PROMASYON_KODU(Value: Integer);
    function Get_STra_DOVFIAT: Double;
    procedure Set_STra_DOVFIAT(Value: Double);
    function Get_STra_ODEGUN: Integer;
    procedure Set_STra_ODEGUN(Value: Integer);
    function Get_STra_KOD1: WideString;
    procedure Set_STra_KOD1(const Value: WideString);
    function Get_STra_KOD2: WideString;
    procedure Set_STra_KOD2(const Value: WideString);
    function Get_STra_SIPNUM: WideString;
    procedure Set_STra_SIPNUM(const Value: WideString);
    function Get_STra_SIP_TURU: WideString;
    procedure Set_STra_SIP_TURU(const Value: WideString);
    function Get_Plasiyer_Kodu: WideString;
    procedure Set_Plasiyer_Kodu(const Value: WideString);
    function Get_Ekalanneden: WideString;
    procedure Set_Ekalanneden(const Value: WideString);
    function Get_Ekalan: WideString;
    procedure Set_Ekalan(const Value: WideString);
    function Get_Ekalan1: WideString;
    procedure Set_Ekalan1(const Value: WideString);
    function Get_Stra_Otv: Double;
    procedure Set_Stra_Otv(Value: Double);
    function Get_Redneden: Integer;
    procedure Set_Redneden(Value: Integer);
    function Get_STra_SIPKONT: Integer;
    procedure Set_STra_SIPKONT(Value: Integer);
    function Get_Ambarkabulno: WideString;
    procedure Set_Ambarkabulno(const Value: WideString);
    function Get_Firmadovtip: Integer;
    procedure Set_Firmadovtip(Value: Integer);
    function Get_Firmadovtut: Double;
    procedure Set_Firmadovtut(Value: Double);
    function Get_Firmadovmal: Double;
    procedure Set_Firmadovmal(Value: Double);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_Irsaliyeno: WideString;
    procedure Set_Irsaliyeno(const Value: WideString);
    function Get_Irsaliyetar: TDateTime;
    procedure Set_Irsaliyetar(Value: TDateTime);
    function Get_Stra_KosulK: WideString;
    procedure Set_Stra_KosulK(const Value: WideString);
    function Get_Ecza_fat_tip: Integer;
    procedure Set_Ecza_fat_tip(Value: Integer);
    function Get_STra_testar: TDateTime;
    procedure Set_STra_testar(Value: TDateTime);
    function Get_Olcubr: Integer;
    procedure Set_Olcubr(Value: Integer);
    function Get_Vadetar: TDateTime;
    procedure Set_Vadetar(Value: TDateTime);
    function Get_Listeno: WideString;
    procedure Set_Listeno(const Value: WideString);
    function Get_BaglantiNo: Integer;
    procedure Set_BaglantiNo(Value: Integer);
    function Get_BrCevrim1: Double;
    procedure Set_BrCevrim1(Value: Double);
    function Get_BrCevrim2: Double;
    procedure Set_BrCevrim2(Value: Double);
    function Get_Yed_Bf: Double;
    procedure Set_Yed_Bf(Value: Double);
    function Get_STra_BGTIP: WideString;
    procedure Set_STra_BGTIP(const Value: WideString);
    function Get_MuhasebeKodu: WideString;
    procedure Set_MuhasebeKodu(const Value: WideString);
    function Get_ReferansKodu: WideString;
    procedure Set_ReferansKodu(const Value: WideString);
    function Get_C_Yedek6: WideString;
    procedure Set_C_Yedek6(const Value: WideString);
    function Get_ProjeKodu: WideString;
    procedure Set_ProjeKodu(const Value: WideString);
    function Get_STra_FTIRSIP: WideString;
    procedure Set_STra_FTIRSIP(const Value: WideString);
    function Get_STra_CARI_KOD: WideString;
    procedure Set_STra_CARI_KOD(const Value: WideString);
    function Get_STra_GC: WideString;
    procedure Set_STra_GC(const Value: WideString);
    function Get_DEPO_KODU: Integer;
    procedure Set_DEPO_KODU(Value: Integer);
    function Get_Gir_Depo_Kodu: Integer;
    procedure Set_Gir_Depo_Kodu(Value: Integer);
    function Get_STra_ACIK: WideString;
    procedure Set_STra_ACIK(const Value: WideString);
    function Get_Stra_OnayTipi: WideString;
    procedure Set_Stra_OnayTipi(const Value: WideString);
    function Get_Stra_OnayNum: Integer;
    procedure Set_Stra_OnayNum(Value: Integer);
    function Get_Stra_SubeKodu: Integer;
    procedure Set_Stra_SubeKodu(Value: Integer);
    function Get_Stok_IsletmeKod: Integer;
    procedure Set_Stok_IsletmeKod(Value: Integer);
    function Get_Stok_SubeKod: Integer;
    procedure Set_Stok_SubeKod(Value: Integer);
    function Get_Stra_Exporttype: Integer;
    procedure Set_Stra_Exporttype(Value: Integer);
    function Get_IncKeyNo: Integer;
    procedure Set_IncKeyNo(Value: Integer);
    function Get_IncKeyNo2: Integer;
    procedure Set_IncKeyNo2(Value: Integer);
    function Get_TesMik: Double;
    procedure Set_TesMik(Value: Double);
    function Get_TesMFMik: Double;
    procedure Set_TesMFMik(Value: Double);
    function Get_MALADI: WideString;
    procedure Set_MALADI(const Value: WideString);
    function Get_SATREF_KOD: WideString;
    procedure Set_SATREF_KOD(const Value: WideString);
    function Get_STOK_GRKOD: WideString;
    procedure Set_STOK_GRKOD(const Value: WideString);
    function Get_STOK_FIYATKODU: WideString;
    procedure Set_STOK_FIYATKODU(const Value: WideString);
    function Get_STMUHDKOD: Integer;
    procedure Set_STMUHDKOD(Value: Integer);
    function Get_SONGIRBFIAT: Double;
    procedure Set_SONGIRBFIAT(Value: Double);
    function Get_OBR1: WideString;
    procedure Set_OBR1(const Value: WideString);
    function Get_OBR2: WideString;
    procedure Set_OBR2(const Value: WideString);
    function Get_OBR3: WideString;
    procedure Set_OBR3(const Value: WideString);
    function Get_SabitDepKod: Integer;
    procedure Set_SabitDepKod(Value: Integer);
    function Get_DOVTIP: Integer;
    procedure Set_DOVTIP(Value: Integer);
    function Get_DOVIZ_TURU: Integer;
    procedure Set_DOVIZ_TURU(Value: Integer);
    function Get_Fiyatlar1: Double;
    procedure Set_Fiyatlar1(Value: Double);
    function Get_Fiyatlar2: Double;
    procedure Set_Fiyatlar2(Value: Double);
    function Get_Fiyatlar3: Double;
    procedure Set_Fiyatlar3(Value: Double);
    function Get_Fiyatlar4: Double;
    procedure Set_Fiyatlar4(Value: Double);
    function Get_Fiyatlar5: Double;
    procedure Set_Fiyatlar5(Value: Double);
    function Get_Fiyatlar6: Double;
    procedure Set_Fiyatlar6(Value: Double);
    function Get_Fiyatlar7: Double;
    procedure Set_Fiyatlar7(Value: Double);
    function Get_Kilit: WideString;
    procedure Set_Kilit(const Value: WideString);
    function Get_SatisKDVOran: Double;
    procedure Set_SatisKDVOran(Value: Double);
    function Get_AlisKDVOran: Double;
    procedure Set_AlisKDVOran(Value: Double);
    function Get_Isk_Flag: TFatKalemIskTipi;
    procedure Set_Isk_Flag(Value: TFatKalemIskTipi);
    function Get_SipTesKont: Integer;
    procedure Set_SipTesKont(Value: Integer);
    function Get_Mamulmu: WideString;
    procedure Set_Mamulmu(const Value: WideString);
    function Get_SeriTakibi: WideString;
    procedure Set_SeriTakibi(const Value: WideString);
    function Get_Stra_Exportmik: Double;
    procedure Set_Stra_Exportmik(Value: Double);
    function Get_STra_SatIsk3: Double;
    procedure Set_STra_SatIsk3(Value: Double);
    function Get_Stra_KosTar: TDateTime;
    procedure Set_Stra_KosTar(Value: TDateTime);
    function Get_Stra_FiyatTar: TDateTime;
    procedure Set_Stra_FiyatTar(Value: TDateTime);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_Kul_Mik: Double;
    procedure Set_Kul_Mik(Value: Double);
    function Get_Fiat_birimi: Integer;
    procedure Set_Fiat_birimi(Value: Integer);
    function Get_Satici_Kodu: WideString;
    procedure Set_Satici_Kodu(const Value: WideString);
    function Get_Sat_IskTipleri1: Integer;
    procedure Set_Sat_IskTipleri1(Value: Integer);
    function Get_Sat_IskTipleri2: Integer;
    procedure Set_Sat_IskTipleri2(Value: Integer);
    function Get_Sat_IskTipleri3: Integer;
    procedure Set_Sat_IskTipleri3(Value: Integer);
    function Get_Koli_Inc: Integer;
    procedure Set_Koli_Inc(Value: Integer);
    function Get_KoliStok: WordBool;
    procedure Set_KoliStok(Value: WordBool);
    function Get_Tur: WideString;
    procedure Set_Tur(const Value: WideString);
    function Get_Stra_FiiliTar: TDateTime;
    procedure Set_Stra_FiiliTar(Value: TDateTime);
    function Get_BirimPuan: Integer;
    procedure Set_BirimPuan(Value: Integer);
    function Get_PuanDeger: Double;
    procedure Set_PuanDeger(Value: Double);
    function Get_KalemGenIskOran1: Double;
    procedure Set_KalemGenIskOran1(Value: Double);
    function Get_KalemGenIskOran2: Double;
    procedure Set_KalemGenIskOran2(Value: Double);
    function Get_KalemGenIskOran3: Double;
    procedure Set_KalemGenIskOran3(Value: Double);
    function Get_OtvFlag: Integer;
    procedure Set_OtvFlag(Value: Integer);
    function Get_Otvtut: Double;
    procedure Set_Otvtut(Value: Double);
    function Get_STra_SatIsk4: Double;
    procedure Set_STra_SatIsk4(Value: Double);
    function Get_STra_SatIsk5: Double;
    procedure Set_STra_SatIsk5(Value: Double);
    function Get_STra_SatIsk6: Double;
    procedure Set_STra_SatIsk6(Value: Double);
    function Get_Kull1S: WideString;
    procedure Set_Kull1S(const Value: WideString);
    function Get_KKMalF: Double;
    procedure Set_KKMalF(Value: Double);
    function Get_Stra_FiyatBirimi: Integer;
    procedure Set_Stra_FiyatBirimi(Value: Integer);
    function Get_Stra_IrsKont: Integer;
    procedure Set_Stra_IrsKont(Value: Integer);
    function Get_SatisKilit: WideString;
    procedure Set_SatisKilit(const Value: WideString);
    function Get_Payda_1: Double;
    procedure Set_Payda_1(Value: Double);
    function Get_SatirBaziAcik(Index: Integer): WideString;
    procedure Set_SatirBaziAcik(Index: Integer; const Value: WideString);
    function Get_D_YEDEK10: TDateTime;
    procedure Set_D_YEDEK10(Value: TDateTime);
    function Get_Sat_IskTipleri4: Integer;
    procedure Set_Sat_IskTipleri4(Value: Integer);
    function Get_Sat_IskTipleri5: Integer;
    procedure Set_Sat_IskTipleri5(Value: Integer);
    function Get_Sat_IskTipleri6: Integer;
    procedure Set_Sat_IskTipleri6(Value: Integer);
    function Get_YapKod: WideString;
    procedure Set_YapKod(const Value: WideString);
    function Get_EsnekMi: WordBool;
    function Get_SeriSayisi: Integer;
    function Get_BRCevrim(Index: Integer): Double;
  public
    property DefaultInterface: IFatKalem read GetDefaultInterface;
  published
    property StokKodu: WideString read Get_StokKodu write Set_StokKodu;
    property Sira: Integer read Get_Sira write Set_Sira;
    property STra_FATIRSNO: WideString read Get_STra_FATIRSNO write Set_STra_FATIRSNO;
    property STra_GCMIK: Double read Get_STra_GCMIK write Set_STra_GCMIK;
    property STra_GCMIK2: Double read Get_STra_GCMIK2 write Set_STra_GCMIK2;
    property CEVRIM: Double read Get_CEVRIM write Set_CEVRIM;
    property STra_TAR: TDateTime read Get_STra_TAR write Set_STra_TAR;
    property STra_NF: Double read Get_STra_NF write Set_STra_NF;
    property STra_BF: Double read Get_STra_BF write Set_STra_BF;
    property STra_IAF: Double read Get_STra_IAF write Set_STra_IAF;
    property STra_KDV: Double read Get_STra_KDV write Set_STra_KDV;
    property STra_SatIsk: Double read Get_STra_SatIsk write Set_STra_SatIsk;
    property STra_SatIsk2: Double read Get_STra_SatIsk2 write Set_STra_SatIsk2;
    property STra_MALFISK: Double read Get_STra_MALFISK write Set_STra_MALFISK;
    property STra_HTUR: WideString read Get_STra_HTUR write Set_STra_HTUR;
    property STra_DOVTIP: Integer read Get_STra_DOVTIP write Set_STra_DOVTIP;
    property PROMASYON_KODU: Integer read Get_PROMASYON_KODU write Set_PROMASYON_KODU;
    property STra_DOVFIAT: Double read Get_STra_DOVFIAT write Set_STra_DOVFIAT;
    property STra_ODEGUN: Integer read Get_STra_ODEGUN write Set_STra_ODEGUN;
    property STra_KOD1: WideString read Get_STra_KOD1 write Set_STra_KOD1;
    property STra_KOD2: WideString read Get_STra_KOD2 write Set_STra_KOD2;
    property STra_SIPNUM: WideString read Get_STra_SIPNUM write Set_STra_SIPNUM;
    property STra_SIP_TURU: WideString read Get_STra_SIP_TURU write Set_STra_SIP_TURU;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property Ekalanneden: WideString read Get_Ekalanneden write Set_Ekalanneden;
    property Ekalan: WideString read Get_Ekalan write Set_Ekalan;
    property Ekalan1: WideString read Get_Ekalan1 write Set_Ekalan1;
    property Stra_Otv: Double read Get_Stra_Otv write Set_Stra_Otv;
    property Redneden: Integer read Get_Redneden write Set_Redneden;
    property STra_SIPKONT: Integer read Get_STra_SIPKONT write Set_STra_SIPKONT;
    property Ambarkabulno: WideString read Get_Ambarkabulno write Set_Ambarkabulno;
    property Firmadovtip: Integer read Get_Firmadovtip write Set_Firmadovtip;
    property Firmadovtut: Double read Get_Firmadovtut write Set_Firmadovtut;
    property Firmadovmal: Double read Get_Firmadovmal write Set_Firmadovmal;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Irsaliyeno: WideString read Get_Irsaliyeno write Set_Irsaliyeno;
    property Irsaliyetar: TDateTime read Get_Irsaliyetar write Set_Irsaliyetar;
    property Stra_KosulK: WideString read Get_Stra_KosulK write Set_Stra_KosulK;
    property Ecza_fat_tip: Integer read Get_Ecza_fat_tip write Set_Ecza_fat_tip;
    property STra_testar: TDateTime read Get_STra_testar write Set_STra_testar;
    property Olcubr: Integer read Get_Olcubr write Set_Olcubr;
    property Vadetar: TDateTime read Get_Vadetar write Set_Vadetar;
    property Listeno: WideString read Get_Listeno write Set_Listeno;
    property BaglantiNo: Integer read Get_BaglantiNo write Set_BaglantiNo;
    property BrCevrim1: Double read Get_BrCevrim1 write Set_BrCevrim1;
    property BrCevrim2: Double read Get_BrCevrim2 write Set_BrCevrim2;
    property STra_BGTIP: WideString read Get_STra_BGTIP write Set_STra_BGTIP;
    property MuhasebeKodu: WideString read Get_MuhasebeKodu write Set_MuhasebeKodu;
    property ReferansKodu: WideString read Get_ReferansKodu write Set_ReferansKodu;
    property C_Yedek6: WideString read Get_C_Yedek6 write Set_C_Yedek6;
    property ProjeKodu: WideString read Get_ProjeKodu write Set_ProjeKodu;
    property STra_FTIRSIP: WideString read Get_STra_FTIRSIP write Set_STra_FTIRSIP;
    property STra_CARI_KOD: WideString read Get_STra_CARI_KOD write Set_STra_CARI_KOD;
    property STra_GC: WideString read Get_STra_GC write Set_STra_GC;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property Gir_Depo_Kodu: Integer read Get_Gir_Depo_Kodu write Set_Gir_Depo_Kodu;
    property STra_ACIK: WideString read Get_STra_ACIK write Set_STra_ACIK;
    property Stra_OnayTipi: WideString read Get_Stra_OnayTipi write Set_Stra_OnayTipi;
    property Stra_OnayNum: Integer read Get_Stra_OnayNum write Set_Stra_OnayNum;
    property Stra_SubeKodu: Integer read Get_Stra_SubeKodu write Set_Stra_SubeKodu;
    property Stok_IsletmeKod: Integer read Get_Stok_IsletmeKod write Set_Stok_IsletmeKod;
    property Stok_SubeKod: Integer read Get_Stok_SubeKod write Set_Stok_SubeKod;
    property Stra_Exporttype: Integer read Get_Stra_Exporttype write Set_Stra_Exporttype;
    property IncKeyNo: Integer read Get_IncKeyNo write Set_IncKeyNo;
    property IncKeyNo2: Integer read Get_IncKeyNo2 write Set_IncKeyNo2;
    property TesMik: Double read Get_TesMik write Set_TesMik;
    property TesMFMik: Double read Get_TesMFMik write Set_TesMFMik;
    property MALADI: WideString read Get_MALADI write Set_MALADI;
    property SATREF_KOD: WideString read Get_SATREF_KOD write Set_SATREF_KOD;
    property STOK_GRKOD: WideString read Get_STOK_GRKOD write Set_STOK_GRKOD;
    property STOK_FIYATKODU: WideString read Get_STOK_FIYATKODU write Set_STOK_FIYATKODU;
    property STMUHDKOD: Integer read Get_STMUHDKOD write Set_STMUHDKOD;
    property SONGIRBFIAT: Double read Get_SONGIRBFIAT write Set_SONGIRBFIAT;
    property OBR1: WideString read Get_OBR1 write Set_OBR1;
    property OBR2: WideString read Get_OBR2 write Set_OBR2;
    property OBR3: WideString read Get_OBR3 write Set_OBR3;
    property SabitDepKod: Integer read Get_SabitDepKod write Set_SabitDepKod;
    property DOVTIP: Integer read Get_DOVTIP write Set_DOVTIP;
    property DOVIZ_TURU: Integer read Get_DOVIZ_TURU write Set_DOVIZ_TURU;
    property Fiyatlar1: Double read Get_Fiyatlar1 write Set_Fiyatlar1;
    property Fiyatlar2: Double read Get_Fiyatlar2 write Set_Fiyatlar2;
    property Fiyatlar3: Double read Get_Fiyatlar3 write Set_Fiyatlar3;
    property Fiyatlar4: Double read Get_Fiyatlar4 write Set_Fiyatlar4;
    property Fiyatlar5: Double read Get_Fiyatlar5 write Set_Fiyatlar5;
    property Fiyatlar6: Double read Get_Fiyatlar6 write Set_Fiyatlar6;
    property Fiyatlar7: Double read Get_Fiyatlar7 write Set_Fiyatlar7;
    property Kilit: WideString read Get_Kilit write Set_Kilit;
    property SatisKDVOran: Double read Get_SatisKDVOran write Set_SatisKDVOran;
    property AlisKDVOran: Double read Get_AlisKDVOran write Set_AlisKDVOran;
    property Isk_Flag: TFatKalemIskTipi read Get_Isk_Flag write Set_Isk_Flag;
    property SipTesKont: Integer read Get_SipTesKont write Set_SipTesKont;
    property Mamulmu: WideString read Get_Mamulmu write Set_Mamulmu;
    property SeriTakibi: WideString read Get_SeriTakibi write Set_SeriTakibi;
    property Stra_Exportmik: Double read Get_Stra_Exportmik write Set_Stra_Exportmik;
    property STra_SatIsk3: Double read Get_STra_SatIsk3 write Set_STra_SatIsk3;
    property Stra_KosTar: TDateTime read Get_Stra_KosTar write Set_Stra_KosTar;
    property Stra_FiyatTar: TDateTime read Get_Stra_FiyatTar write Set_Stra_FiyatTar;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property Kul_Mik: Double read Get_Kul_Mik write Set_Kul_Mik;
    property Fiat_birimi: Integer read Get_Fiat_birimi write Set_Fiat_birimi;
    property Satici_Kodu: WideString read Get_Satici_Kodu write Set_Satici_Kodu;
    property Sat_IskTipleri1: Integer read Get_Sat_IskTipleri1 write Set_Sat_IskTipleri1;
    property Sat_IskTipleri2: Integer read Get_Sat_IskTipleri2 write Set_Sat_IskTipleri2;
    property Sat_IskTipleri3: Integer read Get_Sat_IskTipleri3 write Set_Sat_IskTipleri3;
    property Koli_Inc: Integer read Get_Koli_Inc write Set_Koli_Inc;
    property KoliStok: WordBool read Get_KoliStok write Set_KoliStok;
    property Tur: WideString read Get_Tur write Set_Tur;
    property Stra_FiiliTar: TDateTime read Get_Stra_FiiliTar write Set_Stra_FiiliTar;
    property BirimPuan: Integer read Get_BirimPuan write Set_BirimPuan;
    property PuanDeger: Double read Get_PuanDeger write Set_PuanDeger;
    property KalemGenIskOran1: Double read Get_KalemGenIskOran1 write Set_KalemGenIskOran1;
    property KalemGenIskOran2: Double read Get_KalemGenIskOran2 write Set_KalemGenIskOran2;
    property KalemGenIskOran3: Double read Get_KalemGenIskOran3 write Set_KalemGenIskOran3;
    property OtvFlag: Integer read Get_OtvFlag write Set_OtvFlag;
    property Otvtut: Double read Get_Otvtut write Set_Otvtut;
    property STra_SatIsk4: Double read Get_STra_SatIsk4 write Set_STra_SatIsk4;
    property STra_SatIsk5: Double read Get_STra_SatIsk5 write Set_STra_SatIsk5;
    property STra_SatIsk6: Double read Get_STra_SatIsk6 write Set_STra_SatIsk6;
    property Kull1S: WideString read Get_Kull1S write Set_Kull1S;
    property KKMalF: Double read Get_KKMalF write Set_KKMalF;
    property Stra_FiyatBirimi: Integer read Get_Stra_FiyatBirimi write Set_Stra_FiyatBirimi;
    property Stra_IrsKont: Integer read Get_Stra_IrsKont write Set_Stra_IrsKont;
    property SatisKilit: WideString read Get_SatisKilit write Set_SatisKilit;
    property Payda_1: Double read Get_Payda_1 write Set_Payda_1;
    property D_YEDEK10: TDateTime read Get_D_YEDEK10 write Set_D_YEDEK10;
    property Sat_IskTipleri4: Integer read Get_Sat_IskTipleri4 write Set_Sat_IskTipleri4;
    property Sat_IskTipleri5: Integer read Get_Sat_IskTipleri5 write Set_Sat_IskTipleri5;
    property Sat_IskTipleri6: Integer read Get_Sat_IskTipleri6 write Set_Sat_IskTipleri6;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCari provides a Create and CreateRemote method to          
// create instances of the default interface ICari exposed by              
// the CoClass Cari. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCari = class
    class function Create: ICari;
    class function CreateRemote(const MachineName: string): ICari;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCari
// Help String      : Cari Object
// Default Interface: ICari
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCariProperties= class;
{$ENDIF}
  TCari = class(TOleServer)
  private
    FIntf:        ICari;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCariProperties;
    function      GetServerProperties: TCariProperties;
{$ENDIF}
    function      GetDefaultInterface: ICari;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICari);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    function TemelBilgi: ICariTemelBilgi;
    function EkBilgi: ICariEkBilgi;
    property DefaultInterface: ICari read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCariProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCari
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCariProperties = class(TPersistent)
  private
    FServer:    TCari;
    function    GetDefaultInterface: ICari;
    constructor Create(AServer: TCari);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
  public
    property DefaultInterface: ICari read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCariTemelBilgi provides a Create and CreateRemote method to          
// create instances of the default interface ICariTemelBilgi exposed by              
// the CoClass CariTemelBilgi. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCariTemelBilgi = class
    class function Create: ICariTemelBilgi;
    class function CreateRemote(const MachineName: string): ICariTemelBilgi;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCariTemelBilgi
// Help String      : CariTemelBilgi Objesi
// Default Interface: ICariTemelBilgi
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCariTemelBilgiProperties= class;
{$ENDIF}
  TCariTemelBilgi = class(TOleServer)
  private
    FIntf:        ICariTemelBilgi;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCariTemelBilgiProperties;
    function      GetServerProperties: TCariTemelBilgiProperties;
{$ENDIF}
    function      GetDefaultInterface: ICariTemelBilgi;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_ISLETME_KODU: Integer;
    procedure Set_ISLETME_KODU(Value: Integer);
    function Get_CARI_KOD: WideString;
    procedure Set_CARI_KOD(const Value: WideString);
    function Get_CARI_TEL: WideString;
    procedure Set_CARI_TEL(const Value: WideString);
    function Get_CARI_IL: WideString;
    procedure Set_CARI_IL(const Value: WideString);
    function Get_ULKE_KODU: WideString;
    procedure Set_ULKE_KODU(const Value: WideString);
    function Get_CARI_ISIM: WideString;
    procedure Set_CARI_ISIM(const Value: WideString);
    function Get_CARI_TIP: WideString;
    procedure Set_CARI_TIP(const Value: WideString);
    function Get_Grup_Kodu: WideString;
    procedure Set_Grup_Kodu(const Value: WideString);
    function Get_RAPOR_KODU1: WideString;
    procedure Set_RAPOR_KODU1(const Value: WideString);
    function Get_RAPOR_KODU2: WideString;
    procedure Set_RAPOR_KODU2(const Value: WideString);
    function Get_RAPOR_KODU3: WideString;
    procedure Set_RAPOR_KODU3(const Value: WideString);
    function Get_RAPOR_KODU4: WideString;
    procedure Set_RAPOR_KODU4(const Value: WideString);
    function Get_RAPOR_KODU5: WideString;
    procedure Set_RAPOR_KODU5(const Value: WideString);
    function Get_CARI_ADRES: WideString;
    procedure Set_CARI_ADRES(const Value: WideString);
    function Get_CARI_ILCE: WideString;
    procedure Set_CARI_ILCE(const Value: WideString);
    function Get_VERGI_DAIRESI: WideString;
    procedure Set_VERGI_DAIRESI(const Value: WideString);
    function Get_VERGI_NUMARASI: WideString;
    procedure Set_VERGI_NUMARASI(const Value: WideString);
    function Get_FAX: WideString;
    procedure Set_FAX(const Value: WideString);
    function Get_POSTAKODU: WideString;
    procedure Set_POSTAKODU(const Value: WideString);
    function Get_DETAY_KODU: Integer;
    procedure Set_DETAY_KODU(Value: Integer);
    function Get_NAKLIYE_KATSAYISI: Double;
    procedure Set_NAKLIYE_KATSAYISI(Value: Double);
    function Get_RISK_SINIRI: Double;
    procedure Set_RISK_SINIRI(Value: Double);
    function Get_TEMINATI: Double;
    procedure Set_TEMINATI(Value: Double);
    function Get_CARISK: Double;
    procedure Set_CARISK(Value: Double);
    function Get_CCRISK: Double;
    procedure Set_CCRISK(Value: Double);
    function Get_SARISK: Double;
    procedure Set_SARISK(Value: Double);
    function Get_SCRISK: Double;
    procedure Set_SCRISK(Value: Double);
    function Get_CM_BORCT: Double;
    procedure Set_CM_BORCT(Value: Double);
    function Get_CM_ALACT: Double;
    procedure Set_CM_ALACT(Value: Double);
    function Get_CM_RAP_TARIH: TDateTime;
    procedure Set_CM_RAP_TARIH(Value: TDateTime);
    function Get_KOSULKODU: WideString;
    procedure Set_KOSULKODU(const Value: WideString);
    function Get_ISKONTO_ORANI: Double;
    procedure Set_ISKONTO_ORANI(Value: Double);
    function Get_VADE_GUNU: Integer;
    procedure Set_VADE_GUNU(Value: Integer);
    function Get_LISTE_FIATI: Integer;
    procedure Set_LISTE_FIATI(Value: Integer);
    function Get_ACIK1: WideString;
    procedure Set_ACIK1(const Value: WideString);
    function Get_ACIK2: WideString;
    procedure Set_ACIK2(const Value: WideString);
    function Get_ACIK3: WideString;
    procedure Set_ACIK3(const Value: WideString);
    function Get_M_KOD: WideString;
    procedure Set_M_KOD(const Value: WideString);
    function Get_DOVIZ_TIPI: Integer;
    procedure Set_DOVIZ_TIPI(Value: Integer);
    function Get_DOVIZ_TURU: Integer;
    procedure Set_DOVIZ_TURU(Value: Integer);
    function Get_HESAPTUTMASEKLI: WideString;
    procedure Set_HESAPTUTMASEKLI(const Value: WideString);
    function Get_DOVIZLIMI: WideString;
    procedure Set_DOVIZLIMI(const Value: WideString);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_Plasiyer_Kodu: WideString;
    procedure Set_Plasiyer_Kodu(const Value: WideString);
    function Get_LOKALDEPO: Integer;
    procedure Set_LOKALDEPO(Value: Integer);
    function Get_EMAIL: WideString;
    procedure Set_EMAIL(const Value: WideString);
    function Get_WEB: WideString;
    procedure Set_WEB(const Value: WideString);
    function Get_KURFARKIBORC: WideString;
    procedure Set_KURFARKIBORC(const Value: WideString);
    function Get_KURFARKIALAC: WideString;
    procedure Set_KURFARKIALAC(const Value: WideString);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_F_Yedek1: Double;
    procedure Set_F_Yedek1(Value: Double);
    function Get_F_Yedek2: Double;
    procedure Set_F_Yedek2(Value: Double);
    function Get_C_Yedek1: WideString;
    procedure Set_C_Yedek1(const Value: WideString);
    function Get_C_Yedek2: WideString;
    procedure Set_C_Yedek2(const Value: WideString);
    function Get_B_Yedek1: Integer;
    procedure Set_B_Yedek1(Value: Integer);
    function Get_I_Yedek1: Integer;
    procedure Set_I_Yedek1(Value: Integer);
    function Get_L_Yedek1: Integer;
    procedure Set_L_Yedek1(Value: Integer);
    function Get_FIYATGRUBU: WideString;
    procedure Set_FIYATGRUBU(const Value: WideString);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_ODEMETIPI: Integer;
    procedure Set_ODEMETIPI(Value: Integer);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
    function Get_MUSTERIBAZIKDV: WideString;
    procedure Set_MUSTERIBAZIKDV(const Value: WideString);
    function Get_AGIRLIK_ISK: Double;
    procedure Set_AGIRLIK_ISK(Value: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICariTemelBilgi);
    procedure Disconnect; override;
    property DefaultInterface: ICariTemelBilgi read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property ISLETME_KODU: Integer read Get_ISLETME_KODU write Set_ISLETME_KODU;
    property CARI_KOD: WideString read Get_CARI_KOD write Set_CARI_KOD;
    property CARI_TEL: WideString read Get_CARI_TEL write Set_CARI_TEL;
    property CARI_IL: WideString read Get_CARI_IL write Set_CARI_IL;
    property ULKE_KODU: WideString read Get_ULKE_KODU write Set_ULKE_KODU;
    property CARI_ISIM: WideString read Get_CARI_ISIM write Set_CARI_ISIM;
    property CARI_TIP: WideString read Get_CARI_TIP write Set_CARI_TIP;
    property Grup_Kodu: WideString read Get_Grup_Kodu write Set_Grup_Kodu;
    property RAPOR_KODU1: WideString read Get_RAPOR_KODU1 write Set_RAPOR_KODU1;
    property RAPOR_KODU2: WideString read Get_RAPOR_KODU2 write Set_RAPOR_KODU2;
    property RAPOR_KODU3: WideString read Get_RAPOR_KODU3 write Set_RAPOR_KODU3;
    property RAPOR_KODU4: WideString read Get_RAPOR_KODU4 write Set_RAPOR_KODU4;
    property RAPOR_KODU5: WideString read Get_RAPOR_KODU5 write Set_RAPOR_KODU5;
    property CARI_ADRES: WideString read Get_CARI_ADRES write Set_CARI_ADRES;
    property CARI_ILCE: WideString read Get_CARI_ILCE write Set_CARI_ILCE;
    property VERGI_DAIRESI: WideString read Get_VERGI_DAIRESI write Set_VERGI_DAIRESI;
    property VERGI_NUMARASI: WideString read Get_VERGI_NUMARASI write Set_VERGI_NUMARASI;
    property FAX: WideString read Get_FAX write Set_FAX;
    property POSTAKODU: WideString read Get_POSTAKODU write Set_POSTAKODU;
    property DETAY_KODU: Integer read Get_DETAY_KODU write Set_DETAY_KODU;
    property NAKLIYE_KATSAYISI: Double read Get_NAKLIYE_KATSAYISI write Set_NAKLIYE_KATSAYISI;
    property RISK_SINIRI: Double read Get_RISK_SINIRI write Set_RISK_SINIRI;
    property TEMINATI: Double read Get_TEMINATI write Set_TEMINATI;
    property CARISK: Double read Get_CARISK write Set_CARISK;
    property CCRISK: Double read Get_CCRISK write Set_CCRISK;
    property SARISK: Double read Get_SARISK write Set_SARISK;
    property SCRISK: Double read Get_SCRISK write Set_SCRISK;
    property CM_BORCT: Double read Get_CM_BORCT write Set_CM_BORCT;
    property CM_ALACT: Double read Get_CM_ALACT write Set_CM_ALACT;
    property CM_RAP_TARIH: TDateTime read Get_CM_RAP_TARIH write Set_CM_RAP_TARIH;
    property KOSULKODU: WideString read Get_KOSULKODU write Set_KOSULKODU;
    property ISKONTO_ORANI: Double read Get_ISKONTO_ORANI write Set_ISKONTO_ORANI;
    property VADE_GUNU: Integer read Get_VADE_GUNU write Set_VADE_GUNU;
    property LISTE_FIATI: Integer read Get_LISTE_FIATI write Set_LISTE_FIATI;
    property ACIK1: WideString read Get_ACIK1 write Set_ACIK1;
    property ACIK2: WideString read Get_ACIK2 write Set_ACIK2;
    property ACIK3: WideString read Get_ACIK3 write Set_ACIK3;
    property M_KOD: WideString read Get_M_KOD write Set_M_KOD;
    property DOVIZ_TIPI: Integer read Get_DOVIZ_TIPI write Set_DOVIZ_TIPI;
    property DOVIZ_TURU: Integer read Get_DOVIZ_TURU write Set_DOVIZ_TURU;
    property HESAPTUTMASEKLI: WideString read Get_HESAPTUTMASEKLI write Set_HESAPTUTMASEKLI;
    property DOVIZLIMI: WideString read Get_DOVIZLIMI write Set_DOVIZLIMI;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property LOKALDEPO: Integer read Get_LOKALDEPO write Set_LOKALDEPO;
    property EMAIL: WideString read Get_EMAIL write Set_EMAIL;
    property WEB: WideString read Get_WEB write Set_WEB;
    property KURFARKIBORC: WideString read Get_KURFARKIBORC write Set_KURFARKIBORC;
    property KURFARKIALAC: WideString read Get_KURFARKIALAC write Set_KURFARKIALAC;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property B_Yedek1: Integer read Get_B_Yedek1 write Set_B_Yedek1;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property L_Yedek1: Integer read Get_L_Yedek1 write Set_L_Yedek1;
    property FIYATGRUBU: WideString read Get_FIYATGRUBU write Set_FIYATGRUBU;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property ODEMETIPI: Integer read Get_ODEMETIPI write Set_ODEMETIPI;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property MUSTERIBAZIKDV: WideString read Get_MUSTERIBAZIKDV write Set_MUSTERIBAZIKDV;
    property AGIRLIK_ISK: Double read Get_AGIRLIK_ISK write Set_AGIRLIK_ISK;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCariTemelBilgiProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCariTemelBilgi
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCariTemelBilgiProperties = class(TPersistent)
  private
    FServer:    TCariTemelBilgi;
    function    GetDefaultInterface: ICariTemelBilgi;
    constructor Create(AServer: TCariTemelBilgi);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_ISLETME_KODU: Integer;
    procedure Set_ISLETME_KODU(Value: Integer);
    function Get_CARI_KOD: WideString;
    procedure Set_CARI_KOD(const Value: WideString);
    function Get_CARI_TEL: WideString;
    procedure Set_CARI_TEL(const Value: WideString);
    function Get_CARI_IL: WideString;
    procedure Set_CARI_IL(const Value: WideString);
    function Get_ULKE_KODU: WideString;
    procedure Set_ULKE_KODU(const Value: WideString);
    function Get_CARI_ISIM: WideString;
    procedure Set_CARI_ISIM(const Value: WideString);
    function Get_CARI_TIP: WideString;
    procedure Set_CARI_TIP(const Value: WideString);
    function Get_Grup_Kodu: WideString;
    procedure Set_Grup_Kodu(const Value: WideString);
    function Get_RAPOR_KODU1: WideString;
    procedure Set_RAPOR_KODU1(const Value: WideString);
    function Get_RAPOR_KODU2: WideString;
    procedure Set_RAPOR_KODU2(const Value: WideString);
    function Get_RAPOR_KODU3: WideString;
    procedure Set_RAPOR_KODU3(const Value: WideString);
    function Get_RAPOR_KODU4: WideString;
    procedure Set_RAPOR_KODU4(const Value: WideString);
    function Get_RAPOR_KODU5: WideString;
    procedure Set_RAPOR_KODU5(const Value: WideString);
    function Get_CARI_ADRES: WideString;
    procedure Set_CARI_ADRES(const Value: WideString);
    function Get_CARI_ILCE: WideString;
    procedure Set_CARI_ILCE(const Value: WideString);
    function Get_VERGI_DAIRESI: WideString;
    procedure Set_VERGI_DAIRESI(const Value: WideString);
    function Get_VERGI_NUMARASI: WideString;
    procedure Set_VERGI_NUMARASI(const Value: WideString);
    function Get_FAX: WideString;
    procedure Set_FAX(const Value: WideString);
    function Get_POSTAKODU: WideString;
    procedure Set_POSTAKODU(const Value: WideString);
    function Get_DETAY_KODU: Integer;
    procedure Set_DETAY_KODU(Value: Integer);
    function Get_NAKLIYE_KATSAYISI: Double;
    procedure Set_NAKLIYE_KATSAYISI(Value: Double);
    function Get_RISK_SINIRI: Double;
    procedure Set_RISK_SINIRI(Value: Double);
    function Get_TEMINATI: Double;
    procedure Set_TEMINATI(Value: Double);
    function Get_CARISK: Double;
    procedure Set_CARISK(Value: Double);
    function Get_CCRISK: Double;
    procedure Set_CCRISK(Value: Double);
    function Get_SARISK: Double;
    procedure Set_SARISK(Value: Double);
    function Get_SCRISK: Double;
    procedure Set_SCRISK(Value: Double);
    function Get_CM_BORCT: Double;
    procedure Set_CM_BORCT(Value: Double);
    function Get_CM_ALACT: Double;
    procedure Set_CM_ALACT(Value: Double);
    function Get_CM_RAP_TARIH: TDateTime;
    procedure Set_CM_RAP_TARIH(Value: TDateTime);
    function Get_KOSULKODU: WideString;
    procedure Set_KOSULKODU(const Value: WideString);
    function Get_ISKONTO_ORANI: Double;
    procedure Set_ISKONTO_ORANI(Value: Double);
    function Get_VADE_GUNU: Integer;
    procedure Set_VADE_GUNU(Value: Integer);
    function Get_LISTE_FIATI: Integer;
    procedure Set_LISTE_FIATI(Value: Integer);
    function Get_ACIK1: WideString;
    procedure Set_ACIK1(const Value: WideString);
    function Get_ACIK2: WideString;
    procedure Set_ACIK2(const Value: WideString);
    function Get_ACIK3: WideString;
    procedure Set_ACIK3(const Value: WideString);
    function Get_M_KOD: WideString;
    procedure Set_M_KOD(const Value: WideString);
    function Get_DOVIZ_TIPI: Integer;
    procedure Set_DOVIZ_TIPI(Value: Integer);
    function Get_DOVIZ_TURU: Integer;
    procedure Set_DOVIZ_TURU(Value: Integer);
    function Get_HESAPTUTMASEKLI: WideString;
    procedure Set_HESAPTUTMASEKLI(const Value: WideString);
    function Get_DOVIZLIMI: WideString;
    procedure Set_DOVIZLIMI(const Value: WideString);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_Plasiyer_Kodu: WideString;
    procedure Set_Plasiyer_Kodu(const Value: WideString);
    function Get_LOKALDEPO: Integer;
    procedure Set_LOKALDEPO(Value: Integer);
    function Get_EMAIL: WideString;
    procedure Set_EMAIL(const Value: WideString);
    function Get_WEB: WideString;
    procedure Set_WEB(const Value: WideString);
    function Get_KURFARKIBORC: WideString;
    procedure Set_KURFARKIBORC(const Value: WideString);
    function Get_KURFARKIALAC: WideString;
    procedure Set_KURFARKIALAC(const Value: WideString);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_F_Yedek1: Double;
    procedure Set_F_Yedek1(Value: Double);
    function Get_F_Yedek2: Double;
    procedure Set_F_Yedek2(Value: Double);
    function Get_C_Yedek1: WideString;
    procedure Set_C_Yedek1(const Value: WideString);
    function Get_C_Yedek2: WideString;
    procedure Set_C_Yedek2(const Value: WideString);
    function Get_B_Yedek1: Integer;
    procedure Set_B_Yedek1(Value: Integer);
    function Get_I_Yedek1: Integer;
    procedure Set_I_Yedek1(Value: Integer);
    function Get_L_Yedek1: Integer;
    procedure Set_L_Yedek1(Value: Integer);
    function Get_FIYATGRUBU: WideString;
    procedure Set_FIYATGRUBU(const Value: WideString);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_ODEMETIPI: Integer;
    procedure Set_ODEMETIPI(Value: Integer);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
    function Get_MUSTERIBAZIKDV: WideString;
    procedure Set_MUSTERIBAZIKDV(const Value: WideString);
    function Get_AGIRLIK_ISK: Double;
    procedure Set_AGIRLIK_ISK(Value: Double);
  public
    property DefaultInterface: ICariTemelBilgi read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property ISLETME_KODU: Integer read Get_ISLETME_KODU write Set_ISLETME_KODU;
    property CARI_KOD: WideString read Get_CARI_KOD write Set_CARI_KOD;
    property CARI_TEL: WideString read Get_CARI_TEL write Set_CARI_TEL;
    property CARI_IL: WideString read Get_CARI_IL write Set_CARI_IL;
    property ULKE_KODU: WideString read Get_ULKE_KODU write Set_ULKE_KODU;
    property CARI_ISIM: WideString read Get_CARI_ISIM write Set_CARI_ISIM;
    property CARI_TIP: WideString read Get_CARI_TIP write Set_CARI_TIP;
    property Grup_Kodu: WideString read Get_Grup_Kodu write Set_Grup_Kodu;
    property RAPOR_KODU1: WideString read Get_RAPOR_KODU1 write Set_RAPOR_KODU1;
    property RAPOR_KODU2: WideString read Get_RAPOR_KODU2 write Set_RAPOR_KODU2;
    property RAPOR_KODU3: WideString read Get_RAPOR_KODU3 write Set_RAPOR_KODU3;
    property RAPOR_KODU4: WideString read Get_RAPOR_KODU4 write Set_RAPOR_KODU4;
    property RAPOR_KODU5: WideString read Get_RAPOR_KODU5 write Set_RAPOR_KODU5;
    property CARI_ADRES: WideString read Get_CARI_ADRES write Set_CARI_ADRES;
    property CARI_ILCE: WideString read Get_CARI_ILCE write Set_CARI_ILCE;
    property VERGI_DAIRESI: WideString read Get_VERGI_DAIRESI write Set_VERGI_DAIRESI;
    property VERGI_NUMARASI: WideString read Get_VERGI_NUMARASI write Set_VERGI_NUMARASI;
    property FAX: WideString read Get_FAX write Set_FAX;
    property POSTAKODU: WideString read Get_POSTAKODU write Set_POSTAKODU;
    property DETAY_KODU: Integer read Get_DETAY_KODU write Set_DETAY_KODU;
    property NAKLIYE_KATSAYISI: Double read Get_NAKLIYE_KATSAYISI write Set_NAKLIYE_KATSAYISI;
    property RISK_SINIRI: Double read Get_RISK_SINIRI write Set_RISK_SINIRI;
    property TEMINATI: Double read Get_TEMINATI write Set_TEMINATI;
    property CARISK: Double read Get_CARISK write Set_CARISK;
    property CCRISK: Double read Get_CCRISK write Set_CCRISK;
    property SARISK: Double read Get_SARISK write Set_SARISK;
    property SCRISK: Double read Get_SCRISK write Set_SCRISK;
    property CM_BORCT: Double read Get_CM_BORCT write Set_CM_BORCT;
    property CM_ALACT: Double read Get_CM_ALACT write Set_CM_ALACT;
    property CM_RAP_TARIH: TDateTime read Get_CM_RAP_TARIH write Set_CM_RAP_TARIH;
    property KOSULKODU: WideString read Get_KOSULKODU write Set_KOSULKODU;
    property ISKONTO_ORANI: Double read Get_ISKONTO_ORANI write Set_ISKONTO_ORANI;
    property VADE_GUNU: Integer read Get_VADE_GUNU write Set_VADE_GUNU;
    property LISTE_FIATI: Integer read Get_LISTE_FIATI write Set_LISTE_FIATI;
    property ACIK1: WideString read Get_ACIK1 write Set_ACIK1;
    property ACIK2: WideString read Get_ACIK2 write Set_ACIK2;
    property ACIK3: WideString read Get_ACIK3 write Set_ACIK3;
    property M_KOD: WideString read Get_M_KOD write Set_M_KOD;
    property DOVIZ_TIPI: Integer read Get_DOVIZ_TIPI write Set_DOVIZ_TIPI;
    property DOVIZ_TURU: Integer read Get_DOVIZ_TURU write Set_DOVIZ_TURU;
    property HESAPTUTMASEKLI: WideString read Get_HESAPTUTMASEKLI write Set_HESAPTUTMASEKLI;
    property DOVIZLIMI: WideString read Get_DOVIZLIMI write Set_DOVIZLIMI;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property LOKALDEPO: Integer read Get_LOKALDEPO write Set_LOKALDEPO;
    property EMAIL: WideString read Get_EMAIL write Set_EMAIL;
    property WEB: WideString read Get_WEB write Set_WEB;
    property KURFARKIBORC: WideString read Get_KURFARKIBORC write Set_KURFARKIBORC;
    property KURFARKIALAC: WideString read Get_KURFARKIALAC write Set_KURFARKIALAC;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property B_Yedek1: Integer read Get_B_Yedek1 write Set_B_Yedek1;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property L_Yedek1: Integer read Get_L_Yedek1 write Set_L_Yedek1;
    property FIYATGRUBU: WideString read Get_FIYATGRUBU write Set_FIYATGRUBU;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property ODEMETIPI: Integer read Get_ODEMETIPI write Set_ODEMETIPI;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property MUSTERIBAZIKDV: WideString read Get_MUSTERIBAZIKDV write Set_MUSTERIBAZIKDV;
    property AGIRLIK_ISK: Double read Get_AGIRLIK_ISK write Set_AGIRLIK_ISK;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCariEkBilgi provides a Create and CreateRemote method to          
// create instances of the default interface ICariEkBilgi exposed by              
// the CoClass CariEkBilgi. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCariEkBilgi = class
    class function Create: ICariEkBilgi;
    class function CreateRemote(const MachineName: string): ICariEkBilgi;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCariEkBilgi
// Help String      : CariEkBilgi Object
// Default Interface: ICariEkBilgi
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCariEkBilgiProperties= class;
{$ENDIF}
  TCariEkBilgi = class(TOleServer)
  private
    FIntf:        ICariEkBilgi;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCariEkBilgiProperties;
    function      GetServerProperties: TCariEkBilgiProperties;
{$ENDIF}
    function      GetDefaultInterface: ICariEkBilgi;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_CARI_KOD: WideString;
    procedure Set_CARI_KOD(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_Kull1N: Double;
    procedure Set_Kull1N(Value: Double);
    function Get_Kull2N: Double;
    procedure Set_Kull2N(Value: Double);
    function Get_Kull3N: Double;
    procedure Set_Kull3N(Value: Double);
    function Get_Kull4N: Double;
    procedure Set_Kull4N(Value: Double);
    function Get_Kull5N: Double;
    procedure Set_Kull5N(Value: Double);
    function Get_Kull6N: Double;
    procedure Set_Kull6N(Value: Double);
    function Get_Kull7N: Double;
    procedure Set_Kull7N(Value: Double);
    function Get_Kull8N: Double;
    procedure Set_Kull8N(Value: Double);
    function Get_Kull1S: WideString;
    procedure Set_Kull1S(const Value: WideString);
    function Get_Kull2S: WideString;
    procedure Set_Kull2S(const Value: WideString);
    function Get_Kull3S: WideString;
    procedure Set_Kull3S(const Value: WideString);
    function Get_Kull4S: WideString;
    procedure Set_Kull4S(const Value: WideString);
    function Get_Kull5S: WideString;
    procedure Set_Kull5S(const Value: WideString);
    function Get_Kull6S: WideString;
    procedure Set_Kull6S(const Value: WideString);
    function Get_Kull7S: WideString;
    procedure Set_Kull7S(const Value: WideString);
    function Get_Kull8S: WideString;
    procedure Set_Kull8S(const Value: WideString);
    function Get_SALES_VOLUME: Double;
    procedure Set_SALES_VOLUME(Value: Double);
    function Get_PRIM: Double;
    procedure Set_PRIM(Value: Double);
    function Get_CIRO_TARIHI: WideString;
    procedure Set_CIRO_TARIHI(const Value: WideString);
    function Get_ESKI_YENI: WideString;
    procedure Set_ESKI_YENI(const Value: WideString);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_F_Yedek1: Double;
    procedure Set_F_Yedek1(Value: Double);
    function Get_F_Yedek2: Double;
    procedure Set_F_Yedek2(Value: Double);
    function Get_C_Yedek1: WideString;
    procedure Set_C_Yedek1(const Value: WideString);
    function Get_C_Yedek2: WideString;
    procedure Set_C_Yedek2(const Value: WideString);
    function Get_B_Yedek1: Integer;
    procedure Set_B_Yedek1(Value: Integer);
    function Get_I_Yedek1: Integer;
    procedure Set_I_Yedek1(Value: Integer);
    function Get_L_Yedek1: Integer;
    procedure Set_L_Yedek1(Value: Integer);
    function Get_ODEKOD: WideString;
    procedure Set_ODEKOD(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICariEkBilgi);
    procedure Disconnect; override;
    property DefaultInterface: ICariEkBilgi read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property CARI_KOD: WideString read Get_CARI_KOD write Set_CARI_KOD;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property Kull1N: Double read Get_Kull1N write Set_Kull1N;
    property Kull2N: Double read Get_Kull2N write Set_Kull2N;
    property Kull3N: Double read Get_Kull3N write Set_Kull3N;
    property Kull4N: Double read Get_Kull4N write Set_Kull4N;
    property Kull5N: Double read Get_Kull5N write Set_Kull5N;
    property Kull6N: Double read Get_Kull6N write Set_Kull6N;
    property Kull7N: Double read Get_Kull7N write Set_Kull7N;
    property Kull8N: Double read Get_Kull8N write Set_Kull8N;
    property Kull1S: WideString read Get_Kull1S write Set_Kull1S;
    property Kull2S: WideString read Get_Kull2S write Set_Kull2S;
    property Kull3S: WideString read Get_Kull3S write Set_Kull3S;
    property Kull4S: WideString read Get_Kull4S write Set_Kull4S;
    property Kull5S: WideString read Get_Kull5S write Set_Kull5S;
    property Kull6S: WideString read Get_Kull6S write Set_Kull6S;
    property Kull7S: WideString read Get_Kull7S write Set_Kull7S;
    property Kull8S: WideString read Get_Kull8S write Set_Kull8S;
    property SALES_VOLUME: Double read Get_SALES_VOLUME write Set_SALES_VOLUME;
    property PRIM: Double read Get_PRIM write Set_PRIM;
    property CIRO_TARIHI: WideString read Get_CIRO_TARIHI write Set_CIRO_TARIHI;
    property ESKI_YENI: WideString read Get_ESKI_YENI write Set_ESKI_YENI;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property B_Yedek1: Integer read Get_B_Yedek1 write Set_B_Yedek1;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property L_Yedek1: Integer read Get_L_Yedek1 write Set_L_Yedek1;
    property ODEKOD: WideString read Get_ODEKOD write Set_ODEKOD;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCariEkBilgiProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCariEkBilgi
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCariEkBilgiProperties = class(TPersistent)
  private
    FServer:    TCariEkBilgi;
    function    GetDefaultInterface: ICariEkBilgi;
    constructor Create(AServer: TCariEkBilgi);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_CARI_KOD: WideString;
    procedure Set_CARI_KOD(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_Kull1N: Double;
    procedure Set_Kull1N(Value: Double);
    function Get_Kull2N: Double;
    procedure Set_Kull2N(Value: Double);
    function Get_Kull3N: Double;
    procedure Set_Kull3N(Value: Double);
    function Get_Kull4N: Double;
    procedure Set_Kull4N(Value: Double);
    function Get_Kull5N: Double;
    procedure Set_Kull5N(Value: Double);
    function Get_Kull6N: Double;
    procedure Set_Kull6N(Value: Double);
    function Get_Kull7N: Double;
    procedure Set_Kull7N(Value: Double);
    function Get_Kull8N: Double;
    procedure Set_Kull8N(Value: Double);
    function Get_Kull1S: WideString;
    procedure Set_Kull1S(const Value: WideString);
    function Get_Kull2S: WideString;
    procedure Set_Kull2S(const Value: WideString);
    function Get_Kull3S: WideString;
    procedure Set_Kull3S(const Value: WideString);
    function Get_Kull4S: WideString;
    procedure Set_Kull4S(const Value: WideString);
    function Get_Kull5S: WideString;
    procedure Set_Kull5S(const Value: WideString);
    function Get_Kull6S: WideString;
    procedure Set_Kull6S(const Value: WideString);
    function Get_Kull7S: WideString;
    procedure Set_Kull7S(const Value: WideString);
    function Get_Kull8S: WideString;
    procedure Set_Kull8S(const Value: WideString);
    function Get_SALES_VOLUME: Double;
    procedure Set_SALES_VOLUME(Value: Double);
    function Get_PRIM: Double;
    procedure Set_PRIM(Value: Double);
    function Get_CIRO_TARIHI: WideString;
    procedure Set_CIRO_TARIHI(const Value: WideString);
    function Get_ESKI_YENI: WideString;
    procedure Set_ESKI_YENI(const Value: WideString);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_F_Yedek1: Double;
    procedure Set_F_Yedek1(Value: Double);
    function Get_F_Yedek2: Double;
    procedure Set_F_Yedek2(Value: Double);
    function Get_C_Yedek1: WideString;
    procedure Set_C_Yedek1(const Value: WideString);
    function Get_C_Yedek2: WideString;
    procedure Set_C_Yedek2(const Value: WideString);
    function Get_B_Yedek1: Integer;
    procedure Set_B_Yedek1(Value: Integer);
    function Get_I_Yedek1: Integer;
    procedure Set_I_Yedek1(Value: Integer);
    function Get_L_Yedek1: Integer;
    procedure Set_L_Yedek1(Value: Integer);
    function Get_ODEKOD: WideString;
    procedure Set_ODEKOD(const Value: WideString);
  public
    property DefaultInterface: ICariEkBilgi read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property CARI_KOD: WideString read Get_CARI_KOD write Set_CARI_KOD;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property Kull1N: Double read Get_Kull1N write Set_Kull1N;
    property Kull2N: Double read Get_Kull2N write Set_Kull2N;
    property Kull3N: Double read Get_Kull3N write Set_Kull3N;
    property Kull4N: Double read Get_Kull4N write Set_Kull4N;
    property Kull5N: Double read Get_Kull5N write Set_Kull5N;
    property Kull6N: Double read Get_Kull6N write Set_Kull6N;
    property Kull7N: Double read Get_Kull7N write Set_Kull7N;
    property Kull8N: Double read Get_Kull8N write Set_Kull8N;
    property Kull1S: WideString read Get_Kull1S write Set_Kull1S;
    property Kull2S: WideString read Get_Kull2S write Set_Kull2S;
    property Kull3S: WideString read Get_Kull3S write Set_Kull3S;
    property Kull4S: WideString read Get_Kull4S write Set_Kull4S;
    property Kull5S: WideString read Get_Kull5S write Set_Kull5S;
    property Kull6S: WideString read Get_Kull6S write Set_Kull6S;
    property Kull7S: WideString read Get_Kull7S write Set_Kull7S;
    property Kull8S: WideString read Get_Kull8S write Set_Kull8S;
    property SALES_VOLUME: Double read Get_SALES_VOLUME write Set_SALES_VOLUME;
    property PRIM: Double read Get_PRIM write Set_PRIM;
    property CIRO_TARIHI: WideString read Get_CIRO_TARIHI write Set_CIRO_TARIHI;
    property ESKI_YENI: WideString read Get_ESKI_YENI write Set_ESKI_YENI;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property B_Yedek1: Integer read Get_B_Yedek1 write Set_B_Yedek1;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property L_Yedek1: Integer read Get_L_Yedek1 write Set_L_Yedek1;
    property ODEKOD: WideString read Get_ODEKOD write Set_ODEKOD;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoStok provides a Create and CreateRemote method to          
// create instances of the default interface IStok exposed by              
// the CoClass Stok. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStok = class
    class function Create: IStok;
    class function CreateRemote(const MachineName: string): IStok;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStok
// Help String      : Stok Object
// Default Interface: IStok
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TStokProperties= class;
{$ENDIF}
  TStok = class(TOleServer)
  private
    FIntf:        IStok;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TStokProperties;
    function      GetServerProperties: TStokProperties;
{$ENDIF}
    function      GetDefaultInterface: IStok;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IStok);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    function TemelBilgi: IStokTemelBilgi;
    function EkBilgi: IStokEkBilgi;
    property DefaultInterface: IStok read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TStokProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TStok
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TStokProperties = class(TPersistent)
  private
    FServer:    TStok;
    function    GetDefaultInterface: IStok;
    constructor Create(AServer: TStok);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
  public
    property DefaultInterface: IStok read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoStokTemelBilgi provides a Create and CreateRemote method to          
// create instances of the default interface IStokTemelBilgi exposed by              
// the CoClass StokTemelBilgi. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStokTemelBilgi = class
    class function Create: IStokTemelBilgi;
    class function CreateRemote(const MachineName: string): IStokTemelBilgi;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStokTemelBilgi
// Help String      : StokTemelBilgi Object
// Default Interface: IStokTemelBilgi
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TStokTemelBilgiProperties= class;
{$ENDIF}
  TStokTemelBilgi = class(TOleServer)
  private
    FIntf:        IStokTemelBilgi;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TStokTemelBilgiProperties;
    function      GetServerProperties: TStokTemelBilgiProperties;
{$ENDIF}
    function      GetDefaultInterface: IStokTemelBilgi;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_Stok_Kodu: WideString;
    procedure Set_Stok_Kodu(const Value: WideString);
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_ISLETME_KODU: Integer;
    procedure Set_ISLETME_KODU(Value: Integer);
    function Get_Stok_Adi: WideString;
    procedure Set_Stok_Adi(const Value: WideString);
    function Get_Uretici_Kodu: WideString;
    procedure Set_Uretici_Kodu(const Value: WideString);
    function Get_Grup_Kodu: WideString;
    procedure Set_Grup_Kodu(const Value: WideString);
    function Get_Kod_1: WideString;
    procedure Set_Kod_1(const Value: WideString);
    function Get_Kod_2: WideString;
    procedure Set_Kod_2(const Value: WideString);
    function Get_Kod_3: WideString;
    procedure Set_Kod_3(const Value: WideString);
    function Get_Kod_4: WideString;
    procedure Set_Kod_4(const Value: WideString);
    function Get_Kod_5: WideString;
    procedure Set_Kod_5(const Value: WideString);
    function Get_Satici_Kodu: WideString;
    procedure Set_Satici_Kodu(const Value: WideString);
    function Get_Olcu_Br1: WideString;
    procedure Set_Olcu_Br1(const Value: WideString);
    function Get_Olcu_Br2: WideString;
    procedure Set_Olcu_Br2(const Value: WideString);
    function Get_Pay_1: Double;
    procedure Set_Pay_1(Value: Double);
    function Get_Payda_1: Double;
    procedure Set_Payda_1(Value: Double);
    function Get_Olcu_Br3: WideString;
    procedure Set_Olcu_Br3(const Value: WideString);
    function Get_Pay2: Double;
    procedure Set_Pay2(Value: Double);
    function Get_Payda2: Double;
    procedure Set_Payda2(Value: Double);
    function Get_Fiat_birimi: WideString;
    procedure Set_Fiat_birimi(const Value: WideString);
    function Get_Azami_Stok: Double;
    procedure Set_Azami_Stok(Value: Double);
    function Get_Asgari_Stok: Double;
    procedure Set_Asgari_Stok(Value: Double);
    function Get_Temin_Suresi: Double;
    procedure Set_Temin_Suresi(Value: Double);
    function Get_Kul_Mik: Double;
    procedure Set_Kul_Mik(Value: Double);
    function Get_Risk_Suresi: Integer;
    procedure Set_Risk_Suresi(Value: Integer);
    function Get_Zaman_Birimi: WideString;
    procedure Set_Zaman_Birimi(const Value: WideString);
    function Get_Satis_Fiat1: Double;
    procedure Set_Satis_Fiat1(Value: Double);
    function Get_Satis_Fiat2: Double;
    procedure Set_Satis_Fiat2(Value: Double);
    function Get_Satis_Fiat3: Double;
    procedure Set_Satis_Fiat3(Value: Double);
    function Get_Satis_Fiat4: Double;
    procedure Set_Satis_Fiat4(Value: Double);
    function Get_Sat_Dov_Tip: Integer;
    procedure Set_Sat_Dov_Tip(Value: Integer);
    function Get_Dov_Alis_Fiat: Double;
    procedure Set_Dov_Alis_Fiat(Value: Double);
    function Get_Dov_Satis_Fiat: Double;
    procedure Set_Dov_Satis_Fiat(Value: Double);
    function Get_Dov_Mal_Fiat: Double;
    procedure Set_Dov_Mal_Fiat(Value: Double);
    function Get_Muh_DetayKodu: Integer;
    procedure Set_Muh_DetayKodu(Value: Integer);
    function Get_Birim_Agirlik: Double;
    procedure Set_Birim_Agirlik(Value: Double);
    function Get_Nakliyet_Tut: Double;
    procedure Set_Nakliyet_Tut(Value: Double);
    function Get_KDV_Orani: Double;
    procedure Set_KDV_Orani(Value: Double);
    function Get_Alis_Dov_Tip: Integer;
    procedure Set_Alis_Dov_Tip(Value: Integer);
    function Get_DEPO_KODU: Integer;
    procedure Set_DEPO_KODU(Value: Integer);
    function Get_DOV_TUR: Integer;
    procedure Set_DOV_TUR(Value: Integer);
    function Get_Uret_Olcu_Br: Integer;
    procedure Set_Uret_Olcu_Br(Value: Integer);
    function Get_Bilesenmi: WideString;
    procedure Set_Bilesenmi(const Value: WideString);
    function Get_Mamulmu: WideString;
    procedure Set_Mamulmu(const Value: WideString);
    function Get_Formul_Toplami: Double;
    procedure Set_Formul_Toplami(Value: Double);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_Max_Iskonto: Double;
    procedure Set_Max_Iskonto(Value: Double);
    function Get_Eczaci_Kari: Double;
    procedure Set_Eczaci_Kari(Value: Double);
    function Get_Miktar: Double;
    procedure Set_Miktar(Value: Double);
    function Get_Mal_Fazlasi: Double;
    procedure Set_Mal_Fazlasi(Value: Double);
    function Get_Kdv_Tenzil_Oran: Double;
    procedure Set_Kdv_Tenzil_Oran(Value: Double);
    function Get_Kilit: WideString;
    procedure Set_Kilit(const Value: WideString);
    function Get_Onceki_Kod: WideString;
    procedure Set_Onceki_Kod(const Value: WideString);
    function Get_Sonraki_Kod: WideString;
    procedure Set_Sonraki_Kod(const Value: WideString);
    function Get_Barkod1: WideString;
    procedure Set_Barkod1(const Value: WideString);
    function Get_Barkod2: WideString;
    procedure Set_Barkod2(const Value: WideString);
    function Get_Barkod3: WideString;
    procedure Set_Barkod3(const Value: WideString);
    function Get_Alis_Kdv_Kodu: Double;
    procedure Set_Alis_Kdv_Kodu(Value: Double);
    function Get_Alis_Fiat1: Double;
    procedure Set_Alis_Fiat1(Value: Double);
    function Get_Alis_Fiat2: Double;
    procedure Set_Alis_Fiat2(Value: Double);
    function Get_Alis_Fiat3: Double;
    procedure Set_Alis_Fiat3(Value: Double);
    function Get_Alis_Fiat4: Double;
    procedure Set_Alis_Fiat4(Value: Double);
    function Get_Lot_Size: Double;
    procedure Set_Lot_Size(Value: Double);
    function Get_Min_Sip_Miktar: Double;
    procedure Set_Min_Sip_Miktar(Value: Double);
    function Get_Sabit_Sip_Aralik: Integer;
    procedure Set_Sabit_Sip_Aralik(Value: Integer);
    function Get_Sip_Politikasi: WideString;
    procedure Set_Sip_Politikasi(const Value: WideString);
    function Get_Ozellik_Kodu1: Integer;
    procedure Set_Ozellik_Kodu1(Value: Integer);
    function Get_Ozellik_Kodu2: Integer;
    procedure Set_Ozellik_Kodu2(Value: Integer);
    function Get_Ozellik_Kodu3: Integer;
    procedure Set_Ozellik_Kodu3(Value: Integer);
    function Get_Ozellik_Kodu4: Integer;
    procedure Set_Ozellik_Kodu4(Value: Integer);
    function Get_Ozellik_Kodu5: Integer;
    procedure Set_Ozellik_Kodu5(Value: Integer);
    function Get_Opsiyon_Kodu1: Integer;
    procedure Set_Opsiyon_Kodu1(Value: Integer);
    function Get_Opsiyon_Kodu2: Integer;
    procedure Set_Opsiyon_Kodu2(Value: Integer);
    function Get_Opsiyon_Kodu3: Integer;
    procedure Set_Opsiyon_Kodu3(Value: Integer);
    function Get_Opsiyon_Kodu4: Integer;
    procedure Set_Opsiyon_Kodu4(Value: Integer);
    function Get_Opsiyon_Kodu5: Integer;
    procedure Set_Opsiyon_Kodu5(Value: Integer);
    function Get_Bilesen_Op_Kodu: Integer;
    procedure Set_Bilesen_Op_Kodu(Value: Integer);
    function Get_Sip_Ver_Mal: Double;
    procedure Set_Sip_Ver_Mal(Value: Double);
    function Get_Elde_Bul_Mal: Double;
    procedure Set_Elde_Bul_Mal(Value: Double);
    function Get_Yil_Tah_Kul_Mik: Double;
    procedure Set_Yil_Tah_Kul_Mik(Value: Double);
    function Get_Ekon_Sip_Miktar: Double;
    procedure Set_Ekon_Sip_Miktar(Value: Double);
    function Get_Eski_Recete: WideString;
    procedure Set_Eski_Recete(const Value: WideString);
    function Get_Otomatik_Uretim: WideString;
    procedure Set_Otomatik_Uretim(const Value: WideString);
    function Get_Alfkod: WideString;
    procedure Set_Alfkod(const Value: WideString);
    function Get_SafKod: WideString;
    procedure Set_SafKod(const Value: WideString);
    function Get_Kodturu: WideString;
    procedure Set_Kodturu(const Value: WideString);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_F_Yedek3: Double;
    procedure Set_F_Yedek3(Value: Double);
    function Get_F_Yedek4: Double;
    procedure Set_F_Yedek4(Value: Double);
    function Get_C_Yedek5: WideString;
    procedure Set_C_Yedek5(const Value: WideString);
    function Get_C_Yedek6: WideString;
    procedure Set_C_Yedek6(const Value: WideString);
    function Get_B_Yedek7: Integer;
    procedure Set_B_Yedek7(Value: Integer);
    function Get_I_Yedek8: Integer;
    procedure Set_I_Yedek8(Value: Integer);
    function Get_L_Yedek9: Integer;
    procedure Set_L_Yedek9(Value: Integer);
    function Get_D_YEDEK10: TDateTime;
    procedure Set_D_YEDEK10(Value: TDateTime);
    function Get_Giris_Seri: WideString;
    procedure Set_Giris_Seri(const Value: WideString);
    function Get_Cikis_Seri: WideString;
    procedure Set_Cikis_Seri(const Value: WideString);
    function Get_Seri_Bak: WideString;
    procedure Set_Seri_Bak(const Value: WideString);
    function Get_Seri_Mik: WideString;
    procedure Set_Seri_Mik(const Value: WideString);
    function Get_Seri_Gir_Ot: WideString;
    procedure Set_Seri_Gir_Ot(const Value: WideString);
    function Get_Seri_Cik_Ot: WideString;
    procedure Set_Seri_Cik_Ot(const Value: WideString);
    function Get_Seri_Baslangic: WideString;
    procedure Set_Seri_Baslangic(const Value: WideString);
    function Get_FiyatKodu: WideString;
    procedure Set_FiyatKodu(const Value: WideString);
    function Get_FiyatSirasi: Integer;
    procedure Set_FiyatSirasi(Value: Integer);
    function Get_PLANLANACAK: WideString;
    procedure Set_PLANLANACAK(const Value: WideString);
    function Get_LOT_SIZECUSTOMER: Double;
    procedure Set_LOT_SIZECUSTOMER(Value: Double);
    function Get_MIN_SIP_MIKTARCUSTOMER: Double;
    procedure Set_MIN_SIP_MIKTARCUSTOMER(Value: Double);
    function Get_GUMRUKTARIFEKODU: WideString;
    procedure Set_GUMRUKTARIFEKODU(const Value: WideString);
    function Get_ABCKODU: WideString;
    procedure Set_ABCKODU(const Value: WideString);
    function Get_PERFORMANSKODU: WideString;
    procedure Set_PERFORMANSKODU(const Value: WideString);
    function Get_SATICISIPKILIT: WideString;
    procedure Set_SATICISIPKILIT(const Value: WideString);
    function Get_MUSTERISIPKILIT: WideString;
    procedure Set_MUSTERISIPKILIT(const Value: WideString);
    function Get_SATINALMAKILIT: WideString;
    procedure Set_SATINALMAKILIT(const Value: WideString);
    function Get_SatisKilit: WideString;
    procedure Set_SatisKilit(const Value: WideString);
    function Get_EN: Double;
    procedure Set_EN(Value: Double);
    function Get_BOY: Double;
    procedure Set_BOY(Value: Double);
    function Get_GENISLIK: Double;
    procedure Set_GENISLIK(Value: Double);
    function Get_SIPLIMITVAR: WideString;
    procedure Set_SIPLIMITVAR(const Value: WideString);
    function Get_SONSTOKKODU: WideString;
    procedure Set_SONSTOKKODU(const Value: WideString);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
    function Get_FIKTIF_MAM: WideString;
    procedure Set_FIKTIF_MAM(const Value: WideString);
    function Get_YAPILANDIR: WideString;
    procedure Set_YAPILANDIR(const Value: WideString);
    function Get_SBOMVARMI: WideString;
    procedure Set_SBOMVARMI(const Value: WideString);
    function Get_BAGLISTOKKOD: WideString;
    procedure Set_BAGLISTOKKOD(const Value: WideString);
    function Get_YapKod: WideString;
    procedure Set_YapKod(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IStokTemelBilgi);
    procedure Disconnect; override;
    property DefaultInterface: IStokTemelBilgi read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property Stok_Kodu: WideString read Get_Stok_Kodu write Set_Stok_Kodu;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property ISLETME_KODU: Integer read Get_ISLETME_KODU write Set_ISLETME_KODU;
    property Stok_Adi: WideString read Get_Stok_Adi write Set_Stok_Adi;
    property Uretici_Kodu: WideString read Get_Uretici_Kodu write Set_Uretici_Kodu;
    property Grup_Kodu: WideString read Get_Grup_Kodu write Set_Grup_Kodu;
    property Kod_1: WideString read Get_Kod_1 write Set_Kod_1;
    property Kod_2: WideString read Get_Kod_2 write Set_Kod_2;
    property Kod_3: WideString read Get_Kod_3 write Set_Kod_3;
    property Kod_4: WideString read Get_Kod_4 write Set_Kod_4;
    property Kod_5: WideString read Get_Kod_5 write Set_Kod_5;
    property Satici_Kodu: WideString read Get_Satici_Kodu write Set_Satici_Kodu;
    property Olcu_Br1: WideString read Get_Olcu_Br1 write Set_Olcu_Br1;
    property Olcu_Br2: WideString read Get_Olcu_Br2 write Set_Olcu_Br2;
    property Pay_1: Double read Get_Pay_1 write Set_Pay_1;
    property Payda_1: Double read Get_Payda_1 write Set_Payda_1;
    property Olcu_Br3: WideString read Get_Olcu_Br3 write Set_Olcu_Br3;
    property Pay2: Double read Get_Pay2 write Set_Pay2;
    property Payda2: Double read Get_Payda2 write Set_Payda2;
    property Fiat_birimi: WideString read Get_Fiat_birimi write Set_Fiat_birimi;
    property Azami_Stok: Double read Get_Azami_Stok write Set_Azami_Stok;
    property Asgari_Stok: Double read Get_Asgari_Stok write Set_Asgari_Stok;
    property Temin_Suresi: Double read Get_Temin_Suresi write Set_Temin_Suresi;
    property Kul_Mik: Double read Get_Kul_Mik write Set_Kul_Mik;
    property Risk_Suresi: Integer read Get_Risk_Suresi write Set_Risk_Suresi;
    property Zaman_Birimi: WideString read Get_Zaman_Birimi write Set_Zaman_Birimi;
    property Satis_Fiat1: Double read Get_Satis_Fiat1 write Set_Satis_Fiat1;
    property Satis_Fiat2: Double read Get_Satis_Fiat2 write Set_Satis_Fiat2;
    property Satis_Fiat3: Double read Get_Satis_Fiat3 write Set_Satis_Fiat3;
    property Satis_Fiat4: Double read Get_Satis_Fiat4 write Set_Satis_Fiat4;
    property Sat_Dov_Tip: Integer read Get_Sat_Dov_Tip write Set_Sat_Dov_Tip;
    property Dov_Alis_Fiat: Double read Get_Dov_Alis_Fiat write Set_Dov_Alis_Fiat;
    property Dov_Satis_Fiat: Double read Get_Dov_Satis_Fiat write Set_Dov_Satis_Fiat;
    property Dov_Mal_Fiat: Double read Get_Dov_Mal_Fiat write Set_Dov_Mal_Fiat;
    property Muh_DetayKodu: Integer read Get_Muh_DetayKodu write Set_Muh_DetayKodu;
    property Birim_Agirlik: Double read Get_Birim_Agirlik write Set_Birim_Agirlik;
    property Nakliyet_Tut: Double read Get_Nakliyet_Tut write Set_Nakliyet_Tut;
    property KDV_Orani: Double read Get_KDV_Orani write Set_KDV_Orani;
    property Alis_Dov_Tip: Integer read Get_Alis_Dov_Tip write Set_Alis_Dov_Tip;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property DOV_TUR: Integer read Get_DOV_TUR write Set_DOV_TUR;
    property Uret_Olcu_Br: Integer read Get_Uret_Olcu_Br write Set_Uret_Olcu_Br;
    property Bilesenmi: WideString read Get_Bilesenmi write Set_Bilesenmi;
    property Mamulmu: WideString read Get_Mamulmu write Set_Mamulmu;
    property Formul_Toplami: Double read Get_Formul_Toplami write Set_Formul_Toplami;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Max_Iskonto: Double read Get_Max_Iskonto write Set_Max_Iskonto;
    property Eczaci_Kari: Double read Get_Eczaci_Kari write Set_Eczaci_Kari;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property Mal_Fazlasi: Double read Get_Mal_Fazlasi write Set_Mal_Fazlasi;
    property Kdv_Tenzil_Oran: Double read Get_Kdv_Tenzil_Oran write Set_Kdv_Tenzil_Oran;
    property Kilit: WideString read Get_Kilit write Set_Kilit;
    property Onceki_Kod: WideString read Get_Onceki_Kod write Set_Onceki_Kod;
    property Sonraki_Kod: WideString read Get_Sonraki_Kod write Set_Sonraki_Kod;
    property Barkod1: WideString read Get_Barkod1 write Set_Barkod1;
    property Barkod2: WideString read Get_Barkod2 write Set_Barkod2;
    property Barkod3: WideString read Get_Barkod3 write Set_Barkod3;
    property Alis_Kdv_Kodu: Double read Get_Alis_Kdv_Kodu write Set_Alis_Kdv_Kodu;
    property Alis_Fiat1: Double read Get_Alis_Fiat1 write Set_Alis_Fiat1;
    property Alis_Fiat2: Double read Get_Alis_Fiat2 write Set_Alis_Fiat2;
    property Alis_Fiat3: Double read Get_Alis_Fiat3 write Set_Alis_Fiat3;
    property Alis_Fiat4: Double read Get_Alis_Fiat4 write Set_Alis_Fiat4;
    property Lot_Size: Double read Get_Lot_Size write Set_Lot_Size;
    property Min_Sip_Miktar: Double read Get_Min_Sip_Miktar write Set_Min_Sip_Miktar;
    property Sabit_Sip_Aralik: Integer read Get_Sabit_Sip_Aralik write Set_Sabit_Sip_Aralik;
    property Sip_Politikasi: WideString read Get_Sip_Politikasi write Set_Sip_Politikasi;
    property Ozellik_Kodu1: Integer read Get_Ozellik_Kodu1 write Set_Ozellik_Kodu1;
    property Ozellik_Kodu2: Integer read Get_Ozellik_Kodu2 write Set_Ozellik_Kodu2;
    property Ozellik_Kodu3: Integer read Get_Ozellik_Kodu3 write Set_Ozellik_Kodu3;
    property Ozellik_Kodu4: Integer read Get_Ozellik_Kodu4 write Set_Ozellik_Kodu4;
    property Ozellik_Kodu5: Integer read Get_Ozellik_Kodu5 write Set_Ozellik_Kodu5;
    property Opsiyon_Kodu1: Integer read Get_Opsiyon_Kodu1 write Set_Opsiyon_Kodu1;
    property Opsiyon_Kodu2: Integer read Get_Opsiyon_Kodu2 write Set_Opsiyon_Kodu2;
    property Opsiyon_Kodu3: Integer read Get_Opsiyon_Kodu3 write Set_Opsiyon_Kodu3;
    property Opsiyon_Kodu4: Integer read Get_Opsiyon_Kodu4 write Set_Opsiyon_Kodu4;
    property Opsiyon_Kodu5: Integer read Get_Opsiyon_Kodu5 write Set_Opsiyon_Kodu5;
    property Bilesen_Op_Kodu: Integer read Get_Bilesen_Op_Kodu write Set_Bilesen_Op_Kodu;
    property Sip_Ver_Mal: Double read Get_Sip_Ver_Mal write Set_Sip_Ver_Mal;
    property Elde_Bul_Mal: Double read Get_Elde_Bul_Mal write Set_Elde_Bul_Mal;
    property Yil_Tah_Kul_Mik: Double read Get_Yil_Tah_Kul_Mik write Set_Yil_Tah_Kul_Mik;
    property Ekon_Sip_Miktar: Double read Get_Ekon_Sip_Miktar write Set_Ekon_Sip_Miktar;
    property Eski_Recete: WideString read Get_Eski_Recete write Set_Eski_Recete;
    property Otomatik_Uretim: WideString read Get_Otomatik_Uretim write Set_Otomatik_Uretim;
    property Alfkod: WideString read Get_Alfkod write Set_Alfkod;
    property SafKod: WideString read Get_SafKod write Set_SafKod;
    property Kodturu: WideString read Get_Kodturu write Set_Kodturu;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek3: Double read Get_F_Yedek3 write Set_F_Yedek3;
    property F_Yedek4: Double read Get_F_Yedek4 write Set_F_Yedek4;
    property C_Yedek5: WideString read Get_C_Yedek5 write Set_C_Yedek5;
    property C_Yedek6: WideString read Get_C_Yedek6 write Set_C_Yedek6;
    property B_Yedek7: Integer read Get_B_Yedek7 write Set_B_Yedek7;
    property I_Yedek8: Integer read Get_I_Yedek8 write Set_I_Yedek8;
    property L_Yedek9: Integer read Get_L_Yedek9 write Set_L_Yedek9;
    property D_YEDEK10: TDateTime read Get_D_YEDEK10 write Set_D_YEDEK10;
    property Giris_Seri: WideString read Get_Giris_Seri write Set_Giris_Seri;
    property Cikis_Seri: WideString read Get_Cikis_Seri write Set_Cikis_Seri;
    property Seri_Bak: WideString read Get_Seri_Bak write Set_Seri_Bak;
    property Seri_Mik: WideString read Get_Seri_Mik write Set_Seri_Mik;
    property Seri_Gir_Ot: WideString read Get_Seri_Gir_Ot write Set_Seri_Gir_Ot;
    property Seri_Cik_Ot: WideString read Get_Seri_Cik_Ot write Set_Seri_Cik_Ot;
    property Seri_Baslangic: WideString read Get_Seri_Baslangic write Set_Seri_Baslangic;
    property FiyatKodu: WideString read Get_FiyatKodu write Set_FiyatKodu;
    property FiyatSirasi: Integer read Get_FiyatSirasi write Set_FiyatSirasi;
    property PLANLANACAK: WideString read Get_PLANLANACAK write Set_PLANLANACAK;
    property LOT_SIZECUSTOMER: Double read Get_LOT_SIZECUSTOMER write Set_LOT_SIZECUSTOMER;
    property MIN_SIP_MIKTARCUSTOMER: Double read Get_MIN_SIP_MIKTARCUSTOMER write Set_MIN_SIP_MIKTARCUSTOMER;
    property GUMRUKTARIFEKODU: WideString read Get_GUMRUKTARIFEKODU write Set_GUMRUKTARIFEKODU;
    property ABCKODU: WideString read Get_ABCKODU write Set_ABCKODU;
    property PERFORMANSKODU: WideString read Get_PERFORMANSKODU write Set_PERFORMANSKODU;
    property SATICISIPKILIT: WideString read Get_SATICISIPKILIT write Set_SATICISIPKILIT;
    property MUSTERISIPKILIT: WideString read Get_MUSTERISIPKILIT write Set_MUSTERISIPKILIT;
    property SATINALMAKILIT: WideString read Get_SATINALMAKILIT write Set_SATINALMAKILIT;
    property SatisKilit: WideString read Get_SatisKilit write Set_SatisKilit;
    property EN: Double read Get_EN write Set_EN;
    property BOY: Double read Get_BOY write Set_BOY;
    property GENISLIK: Double read Get_GENISLIK write Set_GENISLIK;
    property SIPLIMITVAR: WideString read Get_SIPLIMITVAR write Set_SIPLIMITVAR;
    property SONSTOKKODU: WideString read Get_SONSTOKKODU write Set_SONSTOKKODU;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property FIKTIF_MAM: WideString read Get_FIKTIF_MAM write Set_FIKTIF_MAM;
    property YAPILANDIR: WideString read Get_YAPILANDIR write Set_YAPILANDIR;
    property SBOMVARMI: WideString read Get_SBOMVARMI write Set_SBOMVARMI;
    property BAGLISTOKKOD: WideString read Get_BAGLISTOKKOD write Set_BAGLISTOKKOD;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TStokTemelBilgiProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TStokTemelBilgi
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TStokTemelBilgiProperties = class(TPersistent)
  private
    FServer:    TStokTemelBilgi;
    function    GetDefaultInterface: IStokTemelBilgi;
    constructor Create(AServer: TStokTemelBilgi);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_Stok_Kodu: WideString;
    procedure Set_Stok_Kodu(const Value: WideString);
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_ISLETME_KODU: Integer;
    procedure Set_ISLETME_KODU(Value: Integer);
    function Get_Stok_Adi: WideString;
    procedure Set_Stok_Adi(const Value: WideString);
    function Get_Uretici_Kodu: WideString;
    procedure Set_Uretici_Kodu(const Value: WideString);
    function Get_Grup_Kodu: WideString;
    procedure Set_Grup_Kodu(const Value: WideString);
    function Get_Kod_1: WideString;
    procedure Set_Kod_1(const Value: WideString);
    function Get_Kod_2: WideString;
    procedure Set_Kod_2(const Value: WideString);
    function Get_Kod_3: WideString;
    procedure Set_Kod_3(const Value: WideString);
    function Get_Kod_4: WideString;
    procedure Set_Kod_4(const Value: WideString);
    function Get_Kod_5: WideString;
    procedure Set_Kod_5(const Value: WideString);
    function Get_Satici_Kodu: WideString;
    procedure Set_Satici_Kodu(const Value: WideString);
    function Get_Olcu_Br1: WideString;
    procedure Set_Olcu_Br1(const Value: WideString);
    function Get_Olcu_Br2: WideString;
    procedure Set_Olcu_Br2(const Value: WideString);
    function Get_Pay_1: Double;
    procedure Set_Pay_1(Value: Double);
    function Get_Payda_1: Double;
    procedure Set_Payda_1(Value: Double);
    function Get_Olcu_Br3: WideString;
    procedure Set_Olcu_Br3(const Value: WideString);
    function Get_Pay2: Double;
    procedure Set_Pay2(Value: Double);
    function Get_Payda2: Double;
    procedure Set_Payda2(Value: Double);
    function Get_Fiat_birimi: WideString;
    procedure Set_Fiat_birimi(const Value: WideString);
    function Get_Azami_Stok: Double;
    procedure Set_Azami_Stok(Value: Double);
    function Get_Asgari_Stok: Double;
    procedure Set_Asgari_Stok(Value: Double);
    function Get_Temin_Suresi: Double;
    procedure Set_Temin_Suresi(Value: Double);
    function Get_Kul_Mik: Double;
    procedure Set_Kul_Mik(Value: Double);
    function Get_Risk_Suresi: Integer;
    procedure Set_Risk_Suresi(Value: Integer);
    function Get_Zaman_Birimi: WideString;
    procedure Set_Zaman_Birimi(const Value: WideString);
    function Get_Satis_Fiat1: Double;
    procedure Set_Satis_Fiat1(Value: Double);
    function Get_Satis_Fiat2: Double;
    procedure Set_Satis_Fiat2(Value: Double);
    function Get_Satis_Fiat3: Double;
    procedure Set_Satis_Fiat3(Value: Double);
    function Get_Satis_Fiat4: Double;
    procedure Set_Satis_Fiat4(Value: Double);
    function Get_Sat_Dov_Tip: Integer;
    procedure Set_Sat_Dov_Tip(Value: Integer);
    function Get_Dov_Alis_Fiat: Double;
    procedure Set_Dov_Alis_Fiat(Value: Double);
    function Get_Dov_Satis_Fiat: Double;
    procedure Set_Dov_Satis_Fiat(Value: Double);
    function Get_Dov_Mal_Fiat: Double;
    procedure Set_Dov_Mal_Fiat(Value: Double);
    function Get_Muh_DetayKodu: Integer;
    procedure Set_Muh_DetayKodu(Value: Integer);
    function Get_Birim_Agirlik: Double;
    procedure Set_Birim_Agirlik(Value: Double);
    function Get_Nakliyet_Tut: Double;
    procedure Set_Nakliyet_Tut(Value: Double);
    function Get_KDV_Orani: Double;
    procedure Set_KDV_Orani(Value: Double);
    function Get_Alis_Dov_Tip: Integer;
    procedure Set_Alis_Dov_Tip(Value: Integer);
    function Get_DEPO_KODU: Integer;
    procedure Set_DEPO_KODU(Value: Integer);
    function Get_DOV_TUR: Integer;
    procedure Set_DOV_TUR(Value: Integer);
    function Get_Uret_Olcu_Br: Integer;
    procedure Set_Uret_Olcu_Br(Value: Integer);
    function Get_Bilesenmi: WideString;
    procedure Set_Bilesenmi(const Value: WideString);
    function Get_Mamulmu: WideString;
    procedure Set_Mamulmu(const Value: WideString);
    function Get_Formul_Toplami: Double;
    procedure Set_Formul_Toplami(Value: Double);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_Max_Iskonto: Double;
    procedure Set_Max_Iskonto(Value: Double);
    function Get_Eczaci_Kari: Double;
    procedure Set_Eczaci_Kari(Value: Double);
    function Get_Miktar: Double;
    procedure Set_Miktar(Value: Double);
    function Get_Mal_Fazlasi: Double;
    procedure Set_Mal_Fazlasi(Value: Double);
    function Get_Kdv_Tenzil_Oran: Double;
    procedure Set_Kdv_Tenzil_Oran(Value: Double);
    function Get_Kilit: WideString;
    procedure Set_Kilit(const Value: WideString);
    function Get_Onceki_Kod: WideString;
    procedure Set_Onceki_Kod(const Value: WideString);
    function Get_Sonraki_Kod: WideString;
    procedure Set_Sonraki_Kod(const Value: WideString);
    function Get_Barkod1: WideString;
    procedure Set_Barkod1(const Value: WideString);
    function Get_Barkod2: WideString;
    procedure Set_Barkod2(const Value: WideString);
    function Get_Barkod3: WideString;
    procedure Set_Barkod3(const Value: WideString);
    function Get_Alis_Kdv_Kodu: Double;
    procedure Set_Alis_Kdv_Kodu(Value: Double);
    function Get_Alis_Fiat1: Double;
    procedure Set_Alis_Fiat1(Value: Double);
    function Get_Alis_Fiat2: Double;
    procedure Set_Alis_Fiat2(Value: Double);
    function Get_Alis_Fiat3: Double;
    procedure Set_Alis_Fiat3(Value: Double);
    function Get_Alis_Fiat4: Double;
    procedure Set_Alis_Fiat4(Value: Double);
    function Get_Lot_Size: Double;
    procedure Set_Lot_Size(Value: Double);
    function Get_Min_Sip_Miktar: Double;
    procedure Set_Min_Sip_Miktar(Value: Double);
    function Get_Sabit_Sip_Aralik: Integer;
    procedure Set_Sabit_Sip_Aralik(Value: Integer);
    function Get_Sip_Politikasi: WideString;
    procedure Set_Sip_Politikasi(const Value: WideString);
    function Get_Ozellik_Kodu1: Integer;
    procedure Set_Ozellik_Kodu1(Value: Integer);
    function Get_Ozellik_Kodu2: Integer;
    procedure Set_Ozellik_Kodu2(Value: Integer);
    function Get_Ozellik_Kodu3: Integer;
    procedure Set_Ozellik_Kodu3(Value: Integer);
    function Get_Ozellik_Kodu4: Integer;
    procedure Set_Ozellik_Kodu4(Value: Integer);
    function Get_Ozellik_Kodu5: Integer;
    procedure Set_Ozellik_Kodu5(Value: Integer);
    function Get_Opsiyon_Kodu1: Integer;
    procedure Set_Opsiyon_Kodu1(Value: Integer);
    function Get_Opsiyon_Kodu2: Integer;
    procedure Set_Opsiyon_Kodu2(Value: Integer);
    function Get_Opsiyon_Kodu3: Integer;
    procedure Set_Opsiyon_Kodu3(Value: Integer);
    function Get_Opsiyon_Kodu4: Integer;
    procedure Set_Opsiyon_Kodu4(Value: Integer);
    function Get_Opsiyon_Kodu5: Integer;
    procedure Set_Opsiyon_Kodu5(Value: Integer);
    function Get_Bilesen_Op_Kodu: Integer;
    procedure Set_Bilesen_Op_Kodu(Value: Integer);
    function Get_Sip_Ver_Mal: Double;
    procedure Set_Sip_Ver_Mal(Value: Double);
    function Get_Elde_Bul_Mal: Double;
    procedure Set_Elde_Bul_Mal(Value: Double);
    function Get_Yil_Tah_Kul_Mik: Double;
    procedure Set_Yil_Tah_Kul_Mik(Value: Double);
    function Get_Ekon_Sip_Miktar: Double;
    procedure Set_Ekon_Sip_Miktar(Value: Double);
    function Get_Eski_Recete: WideString;
    procedure Set_Eski_Recete(const Value: WideString);
    function Get_Otomatik_Uretim: WideString;
    procedure Set_Otomatik_Uretim(const Value: WideString);
    function Get_Alfkod: WideString;
    procedure Set_Alfkod(const Value: WideString);
    function Get_SafKod: WideString;
    procedure Set_SafKod(const Value: WideString);
    function Get_Kodturu: WideString;
    procedure Set_Kodturu(const Value: WideString);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_F_Yedek3: Double;
    procedure Set_F_Yedek3(Value: Double);
    function Get_F_Yedek4: Double;
    procedure Set_F_Yedek4(Value: Double);
    function Get_C_Yedek5: WideString;
    procedure Set_C_Yedek5(const Value: WideString);
    function Get_C_Yedek6: WideString;
    procedure Set_C_Yedek6(const Value: WideString);
    function Get_B_Yedek7: Integer;
    procedure Set_B_Yedek7(Value: Integer);
    function Get_I_Yedek8: Integer;
    procedure Set_I_Yedek8(Value: Integer);
    function Get_L_Yedek9: Integer;
    procedure Set_L_Yedek9(Value: Integer);
    function Get_D_YEDEK10: TDateTime;
    procedure Set_D_YEDEK10(Value: TDateTime);
    function Get_Giris_Seri: WideString;
    procedure Set_Giris_Seri(const Value: WideString);
    function Get_Cikis_Seri: WideString;
    procedure Set_Cikis_Seri(const Value: WideString);
    function Get_Seri_Bak: WideString;
    procedure Set_Seri_Bak(const Value: WideString);
    function Get_Seri_Mik: WideString;
    procedure Set_Seri_Mik(const Value: WideString);
    function Get_Seri_Gir_Ot: WideString;
    procedure Set_Seri_Gir_Ot(const Value: WideString);
    function Get_Seri_Cik_Ot: WideString;
    procedure Set_Seri_Cik_Ot(const Value: WideString);
    function Get_Seri_Baslangic: WideString;
    procedure Set_Seri_Baslangic(const Value: WideString);
    function Get_FiyatKodu: WideString;
    procedure Set_FiyatKodu(const Value: WideString);
    function Get_FiyatSirasi: Integer;
    procedure Set_FiyatSirasi(Value: Integer);
    function Get_PLANLANACAK: WideString;
    procedure Set_PLANLANACAK(const Value: WideString);
    function Get_LOT_SIZECUSTOMER: Double;
    procedure Set_LOT_SIZECUSTOMER(Value: Double);
    function Get_MIN_SIP_MIKTARCUSTOMER: Double;
    procedure Set_MIN_SIP_MIKTARCUSTOMER(Value: Double);
    function Get_GUMRUKTARIFEKODU: WideString;
    procedure Set_GUMRUKTARIFEKODU(const Value: WideString);
    function Get_ABCKODU: WideString;
    procedure Set_ABCKODU(const Value: WideString);
    function Get_PERFORMANSKODU: WideString;
    procedure Set_PERFORMANSKODU(const Value: WideString);
    function Get_SATICISIPKILIT: WideString;
    procedure Set_SATICISIPKILIT(const Value: WideString);
    function Get_MUSTERISIPKILIT: WideString;
    procedure Set_MUSTERISIPKILIT(const Value: WideString);
    function Get_SATINALMAKILIT: WideString;
    procedure Set_SATINALMAKILIT(const Value: WideString);
    function Get_SatisKilit: WideString;
    procedure Set_SatisKilit(const Value: WideString);
    function Get_EN: Double;
    procedure Set_EN(Value: Double);
    function Get_BOY: Double;
    procedure Set_BOY(Value: Double);
    function Get_GENISLIK: Double;
    procedure Set_GENISLIK(Value: Double);
    function Get_SIPLIMITVAR: WideString;
    procedure Set_SIPLIMITVAR(const Value: WideString);
    function Get_SONSTOKKODU: WideString;
    procedure Set_SONSTOKKODU(const Value: WideString);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
    function Get_FIKTIF_MAM: WideString;
    procedure Set_FIKTIF_MAM(const Value: WideString);
    function Get_YAPILANDIR: WideString;
    procedure Set_YAPILANDIR(const Value: WideString);
    function Get_SBOMVARMI: WideString;
    procedure Set_SBOMVARMI(const Value: WideString);
    function Get_BAGLISTOKKOD: WideString;
    procedure Set_BAGLISTOKKOD(const Value: WideString);
    function Get_YapKod: WideString;
    procedure Set_YapKod(const Value: WideString);
  public
    property DefaultInterface: IStokTemelBilgi read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property Stok_Kodu: WideString read Get_Stok_Kodu write Set_Stok_Kodu;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property ISLETME_KODU: Integer read Get_ISLETME_KODU write Set_ISLETME_KODU;
    property Stok_Adi: WideString read Get_Stok_Adi write Set_Stok_Adi;
    property Uretici_Kodu: WideString read Get_Uretici_Kodu write Set_Uretici_Kodu;
    property Grup_Kodu: WideString read Get_Grup_Kodu write Set_Grup_Kodu;
    property Kod_1: WideString read Get_Kod_1 write Set_Kod_1;
    property Kod_2: WideString read Get_Kod_2 write Set_Kod_2;
    property Kod_3: WideString read Get_Kod_3 write Set_Kod_3;
    property Kod_4: WideString read Get_Kod_4 write Set_Kod_4;
    property Kod_5: WideString read Get_Kod_5 write Set_Kod_5;
    property Satici_Kodu: WideString read Get_Satici_Kodu write Set_Satici_Kodu;
    property Olcu_Br1: WideString read Get_Olcu_Br1 write Set_Olcu_Br1;
    property Olcu_Br2: WideString read Get_Olcu_Br2 write Set_Olcu_Br2;
    property Pay_1: Double read Get_Pay_1 write Set_Pay_1;
    property Payda_1: Double read Get_Payda_1 write Set_Payda_1;
    property Olcu_Br3: WideString read Get_Olcu_Br3 write Set_Olcu_Br3;
    property Pay2: Double read Get_Pay2 write Set_Pay2;
    property Payda2: Double read Get_Payda2 write Set_Payda2;
    property Fiat_birimi: WideString read Get_Fiat_birimi write Set_Fiat_birimi;
    property Azami_Stok: Double read Get_Azami_Stok write Set_Azami_Stok;
    property Asgari_Stok: Double read Get_Asgari_Stok write Set_Asgari_Stok;
    property Temin_Suresi: Double read Get_Temin_Suresi write Set_Temin_Suresi;
    property Kul_Mik: Double read Get_Kul_Mik write Set_Kul_Mik;
    property Risk_Suresi: Integer read Get_Risk_Suresi write Set_Risk_Suresi;
    property Zaman_Birimi: WideString read Get_Zaman_Birimi write Set_Zaman_Birimi;
    property Satis_Fiat1: Double read Get_Satis_Fiat1 write Set_Satis_Fiat1;
    property Satis_Fiat2: Double read Get_Satis_Fiat2 write Set_Satis_Fiat2;
    property Satis_Fiat3: Double read Get_Satis_Fiat3 write Set_Satis_Fiat3;
    property Satis_Fiat4: Double read Get_Satis_Fiat4 write Set_Satis_Fiat4;
    property Sat_Dov_Tip: Integer read Get_Sat_Dov_Tip write Set_Sat_Dov_Tip;
    property Dov_Alis_Fiat: Double read Get_Dov_Alis_Fiat write Set_Dov_Alis_Fiat;
    property Dov_Satis_Fiat: Double read Get_Dov_Satis_Fiat write Set_Dov_Satis_Fiat;
    property Dov_Mal_Fiat: Double read Get_Dov_Mal_Fiat write Set_Dov_Mal_Fiat;
    property Muh_DetayKodu: Integer read Get_Muh_DetayKodu write Set_Muh_DetayKodu;
    property Birim_Agirlik: Double read Get_Birim_Agirlik write Set_Birim_Agirlik;
    property Nakliyet_Tut: Double read Get_Nakliyet_Tut write Set_Nakliyet_Tut;
    property KDV_Orani: Double read Get_KDV_Orani write Set_KDV_Orani;
    property Alis_Dov_Tip: Integer read Get_Alis_Dov_Tip write Set_Alis_Dov_Tip;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property DOV_TUR: Integer read Get_DOV_TUR write Set_DOV_TUR;
    property Uret_Olcu_Br: Integer read Get_Uret_Olcu_Br write Set_Uret_Olcu_Br;
    property Bilesenmi: WideString read Get_Bilesenmi write Set_Bilesenmi;
    property Mamulmu: WideString read Get_Mamulmu write Set_Mamulmu;
    property Formul_Toplami: Double read Get_Formul_Toplami write Set_Formul_Toplami;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Max_Iskonto: Double read Get_Max_Iskonto write Set_Max_Iskonto;
    property Eczaci_Kari: Double read Get_Eczaci_Kari write Set_Eczaci_Kari;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property Mal_Fazlasi: Double read Get_Mal_Fazlasi write Set_Mal_Fazlasi;
    property Kdv_Tenzil_Oran: Double read Get_Kdv_Tenzil_Oran write Set_Kdv_Tenzil_Oran;
    property Kilit: WideString read Get_Kilit write Set_Kilit;
    property Onceki_Kod: WideString read Get_Onceki_Kod write Set_Onceki_Kod;
    property Sonraki_Kod: WideString read Get_Sonraki_Kod write Set_Sonraki_Kod;
    property Barkod1: WideString read Get_Barkod1 write Set_Barkod1;
    property Barkod2: WideString read Get_Barkod2 write Set_Barkod2;
    property Barkod3: WideString read Get_Barkod3 write Set_Barkod3;
    property Alis_Kdv_Kodu: Double read Get_Alis_Kdv_Kodu write Set_Alis_Kdv_Kodu;
    property Alis_Fiat1: Double read Get_Alis_Fiat1 write Set_Alis_Fiat1;
    property Alis_Fiat2: Double read Get_Alis_Fiat2 write Set_Alis_Fiat2;
    property Alis_Fiat3: Double read Get_Alis_Fiat3 write Set_Alis_Fiat3;
    property Alis_Fiat4: Double read Get_Alis_Fiat4 write Set_Alis_Fiat4;
    property Lot_Size: Double read Get_Lot_Size write Set_Lot_Size;
    property Min_Sip_Miktar: Double read Get_Min_Sip_Miktar write Set_Min_Sip_Miktar;
    property Sabit_Sip_Aralik: Integer read Get_Sabit_Sip_Aralik write Set_Sabit_Sip_Aralik;
    property Sip_Politikasi: WideString read Get_Sip_Politikasi write Set_Sip_Politikasi;
    property Ozellik_Kodu1: Integer read Get_Ozellik_Kodu1 write Set_Ozellik_Kodu1;
    property Ozellik_Kodu2: Integer read Get_Ozellik_Kodu2 write Set_Ozellik_Kodu2;
    property Ozellik_Kodu3: Integer read Get_Ozellik_Kodu3 write Set_Ozellik_Kodu3;
    property Ozellik_Kodu4: Integer read Get_Ozellik_Kodu4 write Set_Ozellik_Kodu4;
    property Ozellik_Kodu5: Integer read Get_Ozellik_Kodu5 write Set_Ozellik_Kodu5;
    property Opsiyon_Kodu1: Integer read Get_Opsiyon_Kodu1 write Set_Opsiyon_Kodu1;
    property Opsiyon_Kodu2: Integer read Get_Opsiyon_Kodu2 write Set_Opsiyon_Kodu2;
    property Opsiyon_Kodu3: Integer read Get_Opsiyon_Kodu3 write Set_Opsiyon_Kodu3;
    property Opsiyon_Kodu4: Integer read Get_Opsiyon_Kodu4 write Set_Opsiyon_Kodu4;
    property Opsiyon_Kodu5: Integer read Get_Opsiyon_Kodu5 write Set_Opsiyon_Kodu5;
    property Bilesen_Op_Kodu: Integer read Get_Bilesen_Op_Kodu write Set_Bilesen_Op_Kodu;
    property Sip_Ver_Mal: Double read Get_Sip_Ver_Mal write Set_Sip_Ver_Mal;
    property Elde_Bul_Mal: Double read Get_Elde_Bul_Mal write Set_Elde_Bul_Mal;
    property Yil_Tah_Kul_Mik: Double read Get_Yil_Tah_Kul_Mik write Set_Yil_Tah_Kul_Mik;
    property Ekon_Sip_Miktar: Double read Get_Ekon_Sip_Miktar write Set_Ekon_Sip_Miktar;
    property Eski_Recete: WideString read Get_Eski_Recete write Set_Eski_Recete;
    property Otomatik_Uretim: WideString read Get_Otomatik_Uretim write Set_Otomatik_Uretim;
    property Alfkod: WideString read Get_Alfkod write Set_Alfkod;
    property SafKod: WideString read Get_SafKod write Set_SafKod;
    property Kodturu: WideString read Get_Kodturu write Set_Kodturu;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek3: Double read Get_F_Yedek3 write Set_F_Yedek3;
    property F_Yedek4: Double read Get_F_Yedek4 write Set_F_Yedek4;
    property C_Yedek5: WideString read Get_C_Yedek5 write Set_C_Yedek5;
    property C_Yedek6: WideString read Get_C_Yedek6 write Set_C_Yedek6;
    property B_Yedek7: Integer read Get_B_Yedek7 write Set_B_Yedek7;
    property I_Yedek8: Integer read Get_I_Yedek8 write Set_I_Yedek8;
    property L_Yedek9: Integer read Get_L_Yedek9 write Set_L_Yedek9;
    property D_YEDEK10: TDateTime read Get_D_YEDEK10 write Set_D_YEDEK10;
    property Giris_Seri: WideString read Get_Giris_Seri write Set_Giris_Seri;
    property Cikis_Seri: WideString read Get_Cikis_Seri write Set_Cikis_Seri;
    property Seri_Bak: WideString read Get_Seri_Bak write Set_Seri_Bak;
    property Seri_Mik: WideString read Get_Seri_Mik write Set_Seri_Mik;
    property Seri_Gir_Ot: WideString read Get_Seri_Gir_Ot write Set_Seri_Gir_Ot;
    property Seri_Cik_Ot: WideString read Get_Seri_Cik_Ot write Set_Seri_Cik_Ot;
    property Seri_Baslangic: WideString read Get_Seri_Baslangic write Set_Seri_Baslangic;
    property FiyatKodu: WideString read Get_FiyatKodu write Set_FiyatKodu;
    property FiyatSirasi: Integer read Get_FiyatSirasi write Set_FiyatSirasi;
    property PLANLANACAK: WideString read Get_PLANLANACAK write Set_PLANLANACAK;
    property LOT_SIZECUSTOMER: Double read Get_LOT_SIZECUSTOMER write Set_LOT_SIZECUSTOMER;
    property MIN_SIP_MIKTARCUSTOMER: Double read Get_MIN_SIP_MIKTARCUSTOMER write Set_MIN_SIP_MIKTARCUSTOMER;
    property GUMRUKTARIFEKODU: WideString read Get_GUMRUKTARIFEKODU write Set_GUMRUKTARIFEKODU;
    property ABCKODU: WideString read Get_ABCKODU write Set_ABCKODU;
    property PERFORMANSKODU: WideString read Get_PERFORMANSKODU write Set_PERFORMANSKODU;
    property SATICISIPKILIT: WideString read Get_SATICISIPKILIT write Set_SATICISIPKILIT;
    property MUSTERISIPKILIT: WideString read Get_MUSTERISIPKILIT write Set_MUSTERISIPKILIT;
    property SATINALMAKILIT: WideString read Get_SATINALMAKILIT write Set_SATINALMAKILIT;
    property SatisKilit: WideString read Get_SatisKilit write Set_SatisKilit;
    property EN: Double read Get_EN write Set_EN;
    property BOY: Double read Get_BOY write Set_BOY;
    property GENISLIK: Double read Get_GENISLIK write Set_GENISLIK;
    property SIPLIMITVAR: WideString read Get_SIPLIMITVAR write Set_SIPLIMITVAR;
    property SONSTOKKODU: WideString read Get_SONSTOKKODU write Set_SONSTOKKODU;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property FIKTIF_MAM: WideString read Get_FIKTIF_MAM write Set_FIKTIF_MAM;
    property YAPILANDIR: WideString read Get_YAPILANDIR write Set_YAPILANDIR;
    property SBOMVARMI: WideString read Get_SBOMVARMI write Set_SBOMVARMI;
    property BAGLISTOKKOD: WideString read Get_BAGLISTOKKOD write Set_BAGLISTOKKOD;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoStokEkBilgi provides a Create and CreateRemote method to          
// create instances of the default interface IStokEkBilgi exposed by              
// the CoClass StokEkBilgi. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStokEkBilgi = class
    class function Create: IStokEkBilgi;
    class function CreateRemote(const MachineName: string): IStokEkBilgi;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStokEkBilgi
// Help String      : StokEkBilgi Object
// Default Interface: IStokEkBilgi
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TStokEkBilgiProperties= class;
{$ENDIF}
  TStokEkBilgi = class(TOleServer)
  private
    FIntf:        IStokEkBilgi;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TStokEkBilgiProperties;
    function      GetServerProperties: TStokEkBilgiProperties;
{$ENDIF}
    function      GetDefaultInterface: IStokEkBilgi;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_Stok_Kodu: WideString;
    procedure Set_Stok_Kodu(const Value: WideString);
    function Get_Tur: WideString;
    procedure Set_Tur(const Value: WideString);
    function Get_Mgrup: WideString;
    procedure Set_Mgrup(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_Ingisim: WideString;
    procedure Set_Ingisim(const Value: WideString);
    function Get_Birim_Maliyet: Double;
    procedure Set_Birim_Maliyet(Value: Double);
    function Get_Kull1N: Double;
    procedure Set_Kull1N(Value: Double);
    function Get_Kull2N: Double;
    procedure Set_Kull2N(Value: Double);
    function Get_Kull3N: Double;
    procedure Set_Kull3N(Value: Double);
    function Get_Kull4N: Double;
    procedure Set_Kull4N(Value: Double);
    function Get_Kull5N: Double;
    procedure Set_Kull5N(Value: Double);
    function Get_Kull6N: Double;
    procedure Set_Kull6N(Value: Double);
    function Get_Kull7N: Double;
    procedure Set_Kull7N(Value: Double);
    function Get_Kull8N: Double;
    procedure Set_Kull8N(Value: Double);
    function Get_Kull1S: WideString;
    procedure Set_Kull1S(const Value: WideString);
    function Get_Kull2S: WideString;
    procedure Set_Kull2S(const Value: WideString);
    function Get_Kull3S: WideString;
    procedure Set_Kull3S(const Value: WideString);
    function Get_Kull4S: WideString;
    procedure Set_Kull4S(const Value: WideString);
    function Get_Kull5S: WideString;
    procedure Set_Kull5S(const Value: WideString);
    function Get_Kull6S: WideString;
    procedure Set_Kull6S(const Value: WideString);
    function Get_Kull7S: WideString;
    procedure Set_Kull7S(const Value: WideString);
    function Get_Kull8S: WideString;
    procedure Set_Kull8S(const Value: WideString);
    function Get_Son_Satal_Fiat: Double;
    procedure Set_Son_Satal_Fiat(Value: Double);
    function Get_Son_Satal_Tar: TDateTime;
    procedure Set_Son_Satal_Tar(Value: TDateTime);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_F_Yedek1: Double;
    procedure Set_F_Yedek1(Value: Double);
    function Get_F_Yedek2: Double;
    procedure Set_F_Yedek2(Value: Double);
    function Get_C_Yedek1: WideString;
    procedure Set_C_Yedek1(const Value: WideString);
    function Get_C_Yedek2: WideString;
    procedure Set_C_Yedek2(const Value: WideString);
    function Get_B_Yedek1: Integer;
    procedure Set_B_Yedek1(Value: Integer);
    function Get_I_Yedek1: Integer;
    procedure Set_I_Yedek1(Value: Integer);
    function Get_L_Yedek1: Integer;
    procedure Set_L_Yedek1(Value: Integer);
    function Get_Sonsattar: TDateTime;
    procedure Set_Sonsattar(Value: TDateTime);
    function Get_Dagitici_Kodu: WideString;
    procedure Set_Dagitici_Kodu(const Value: WideString);
    function Get_CURBIRIM_MALIYET: Double;
    procedure Set_CURBIRIM_MALIYET(Value: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IStokEkBilgi);
    procedure Disconnect; override;
    property DefaultInterface: IStokEkBilgi read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property Stok_Kodu: WideString read Get_Stok_Kodu write Set_Stok_Kodu;
    property Tur: WideString read Get_Tur write Set_Tur;
    property Mgrup: WideString read Get_Mgrup write Set_Mgrup;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property Ingisim: WideString read Get_Ingisim write Set_Ingisim;
    property Birim_Maliyet: Double read Get_Birim_Maliyet write Set_Birim_Maliyet;
    property Kull1N: Double read Get_Kull1N write Set_Kull1N;
    property Kull2N: Double read Get_Kull2N write Set_Kull2N;
    property Kull3N: Double read Get_Kull3N write Set_Kull3N;
    property Kull4N: Double read Get_Kull4N write Set_Kull4N;
    property Kull5N: Double read Get_Kull5N write Set_Kull5N;
    property Kull6N: Double read Get_Kull6N write Set_Kull6N;
    property Kull7N: Double read Get_Kull7N write Set_Kull7N;
    property Kull8N: Double read Get_Kull8N write Set_Kull8N;
    property Kull1S: WideString read Get_Kull1S write Set_Kull1S;
    property Kull2S: WideString read Get_Kull2S write Set_Kull2S;
    property Kull3S: WideString read Get_Kull3S write Set_Kull3S;
    property Kull4S: WideString read Get_Kull4S write Set_Kull4S;
    property Kull5S: WideString read Get_Kull5S write Set_Kull5S;
    property Kull6S: WideString read Get_Kull6S write Set_Kull6S;
    property Kull7S: WideString read Get_Kull7S write Set_Kull7S;
    property Kull8S: WideString read Get_Kull8S write Set_Kull8S;
    property Son_Satal_Fiat: Double read Get_Son_Satal_Fiat write Set_Son_Satal_Fiat;
    property Son_Satal_Tar: TDateTime read Get_Son_Satal_Tar write Set_Son_Satal_Tar;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property B_Yedek1: Integer read Get_B_Yedek1 write Set_B_Yedek1;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property L_Yedek1: Integer read Get_L_Yedek1 write Set_L_Yedek1;
    property Sonsattar: TDateTime read Get_Sonsattar write Set_Sonsattar;
    property Dagitici_Kodu: WideString read Get_Dagitici_Kodu write Set_Dagitici_Kodu;
    property CURBIRIM_MALIYET: Double read Get_CURBIRIM_MALIYET write Set_CURBIRIM_MALIYET;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TStokEkBilgiProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TStokEkBilgi
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TStokEkBilgiProperties = class(TPersistent)
  private
    FServer:    TStokEkBilgi;
    function    GetDefaultInterface: IStokEkBilgi;
    constructor Create(AServer: TStokEkBilgi);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_Stok_Kodu: WideString;
    procedure Set_Stok_Kodu(const Value: WideString);
    function Get_Tur: WideString;
    procedure Set_Tur(const Value: WideString);
    function Get_Mgrup: WideString;
    procedure Set_Mgrup(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_Ingisim: WideString;
    procedure Set_Ingisim(const Value: WideString);
    function Get_Birim_Maliyet: Double;
    procedure Set_Birim_Maliyet(Value: Double);
    function Get_Kull1N: Double;
    procedure Set_Kull1N(Value: Double);
    function Get_Kull2N: Double;
    procedure Set_Kull2N(Value: Double);
    function Get_Kull3N: Double;
    procedure Set_Kull3N(Value: Double);
    function Get_Kull4N: Double;
    procedure Set_Kull4N(Value: Double);
    function Get_Kull5N: Double;
    procedure Set_Kull5N(Value: Double);
    function Get_Kull6N: Double;
    procedure Set_Kull6N(Value: Double);
    function Get_Kull7N: Double;
    procedure Set_Kull7N(Value: Double);
    function Get_Kull8N: Double;
    procedure Set_Kull8N(Value: Double);
    function Get_Kull1S: WideString;
    procedure Set_Kull1S(const Value: WideString);
    function Get_Kull2S: WideString;
    procedure Set_Kull2S(const Value: WideString);
    function Get_Kull3S: WideString;
    procedure Set_Kull3S(const Value: WideString);
    function Get_Kull4S: WideString;
    procedure Set_Kull4S(const Value: WideString);
    function Get_Kull5S: WideString;
    procedure Set_Kull5S(const Value: WideString);
    function Get_Kull6S: WideString;
    procedure Set_Kull6S(const Value: WideString);
    function Get_Kull7S: WideString;
    procedure Set_Kull7S(const Value: WideString);
    function Get_Kull8S: WideString;
    procedure Set_Kull8S(const Value: WideString);
    function Get_Son_Satal_Fiat: Double;
    procedure Set_Son_Satal_Fiat(Value: Double);
    function Get_Son_Satal_Tar: TDateTime;
    procedure Set_Son_Satal_Tar(Value: TDateTime);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_F_Yedek1: Double;
    procedure Set_F_Yedek1(Value: Double);
    function Get_F_Yedek2: Double;
    procedure Set_F_Yedek2(Value: Double);
    function Get_C_Yedek1: WideString;
    procedure Set_C_Yedek1(const Value: WideString);
    function Get_C_Yedek2: WideString;
    procedure Set_C_Yedek2(const Value: WideString);
    function Get_B_Yedek1: Integer;
    procedure Set_B_Yedek1(Value: Integer);
    function Get_I_Yedek1: Integer;
    procedure Set_I_Yedek1(Value: Integer);
    function Get_L_Yedek1: Integer;
    procedure Set_L_Yedek1(Value: Integer);
    function Get_Sonsattar: TDateTime;
    procedure Set_Sonsattar(Value: TDateTime);
    function Get_Dagitici_Kodu: WideString;
    procedure Set_Dagitici_Kodu(const Value: WideString);
    function Get_CURBIRIM_MALIYET: Double;
    procedure Set_CURBIRIM_MALIYET(Value: Double);
  public
    property DefaultInterface: IStokEkBilgi read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property Stok_Kodu: WideString read Get_Stok_Kodu write Set_Stok_Kodu;
    property Tur: WideString read Get_Tur write Set_Tur;
    property Mgrup: WideString read Get_Mgrup write Set_Mgrup;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property Ingisim: WideString read Get_Ingisim write Set_Ingisim;
    property Birim_Maliyet: Double read Get_Birim_Maliyet write Set_Birim_Maliyet;
    property Kull1N: Double read Get_Kull1N write Set_Kull1N;
    property Kull2N: Double read Get_Kull2N write Set_Kull2N;
    property Kull3N: Double read Get_Kull3N write Set_Kull3N;
    property Kull4N: Double read Get_Kull4N write Set_Kull4N;
    property Kull5N: Double read Get_Kull5N write Set_Kull5N;
    property Kull6N: Double read Get_Kull6N write Set_Kull6N;
    property Kull7N: Double read Get_Kull7N write Set_Kull7N;
    property Kull8N: Double read Get_Kull8N write Set_Kull8N;
    property Kull1S: WideString read Get_Kull1S write Set_Kull1S;
    property Kull2S: WideString read Get_Kull2S write Set_Kull2S;
    property Kull3S: WideString read Get_Kull3S write Set_Kull3S;
    property Kull4S: WideString read Get_Kull4S write Set_Kull4S;
    property Kull5S: WideString read Get_Kull5S write Set_Kull5S;
    property Kull6S: WideString read Get_Kull6S write Set_Kull6S;
    property Kull7S: WideString read Get_Kull7S write Set_Kull7S;
    property Kull8S: WideString read Get_Kull8S write Set_Kull8S;
    property Son_Satal_Fiat: Double read Get_Son_Satal_Fiat write Set_Son_Satal_Fiat;
    property Son_Satal_Tar: TDateTime read Get_Son_Satal_Tar write Set_Son_Satal_Tar;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property B_Yedek1: Integer read Get_B_Yedek1 write Set_B_Yedek1;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property L_Yedek1: Integer read Get_L_Yedek1 write Set_L_Yedek1;
    property Sonsattar: TDateTime read Get_Sonsattar write Set_Sonsattar;
    property Dagitici_Kodu: WideString read Get_Dagitici_Kodu write Set_Dagitici_Kodu;
    property CURBIRIM_MALIYET: Double read Get_CURBIRIM_MALIYET write Set_CURBIRIM_MALIYET;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoKur provides a Create and CreateRemote method to          
// create instances of the default interface IKur exposed by              
// the CoClass Kur. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoKur = class
    class function Create: IKur;
    class function CreateRemote(const MachineName: string): IKur;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TKur
// Help String      : Doviz Object
// Default Interface: IKur
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TKurProperties= class;
{$ENDIF}
  TKur = class(TOleServer)
  private
    FIntf:        IKur;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TKurProperties;
    function      GetServerProperties: TKurProperties;
{$ENDIF}
    function      GetDefaultInterface: IKur;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_Sira: Integer;
    procedure Set_Sira(Value: Integer);
    function Get_Tarih: TDateTime;
    procedure Set_Tarih(Value: TDateTime);
    function Get_DOV_ALIS: Double;
    procedure Set_DOV_ALIS(Value: Double);
    function Get_DOV_SATIS: Double;
    procedure Set_DOV_SATIS(Value: Double);
    function Get_EFF_ALIS: Double;
    procedure Set_EFF_ALIS(Value: Double);
    function Get_EFF_SATIS: Double;
    procedure Set_EFF_SATIS(Value: Double);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_F_Yedek1: Double;
    procedure Set_F_Yedek1(Value: Double);
    function Get_F_Yedek2: Double;
    procedure Set_F_Yedek2(Value: Double);
    function Get_I_Yedek1: Integer;
    procedure Set_I_Yedek1(Value: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IKur);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    property DefaultInterface: IKur read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property Sira: Integer read Get_Sira write Set_Sira;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property DOV_ALIS: Double read Get_DOV_ALIS write Set_DOV_ALIS;
    property DOV_SATIS: Double read Get_DOV_SATIS write Set_DOV_SATIS;
    property EFF_ALIS: Double read Get_EFF_ALIS write Set_EFF_ALIS;
    property EFF_SATIS: Double read Get_EFF_SATIS write Set_EFF_SATIS;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TKurProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TKur
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TKurProperties = class(TPersistent)
  private
    FServer:    TKur;
    function    GetDefaultInterface: IKur;
    constructor Create(AServer: TKur);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_Sira: Integer;
    procedure Set_Sira(Value: Integer);
    function Get_Tarih: TDateTime;
    procedure Set_Tarih(Value: TDateTime);
    function Get_DOV_ALIS: Double;
    procedure Set_DOV_ALIS(Value: Double);
    function Get_DOV_SATIS: Double;
    procedure Set_DOV_SATIS(Value: Double);
    function Get_EFF_ALIS: Double;
    procedure Set_EFF_ALIS(Value: Double);
    function Get_EFF_SATIS: Double;
    procedure Set_EFF_SATIS(Value: Double);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_F_Yedek1: Double;
    procedure Set_F_Yedek1(Value: Double);
    function Get_F_Yedek2: Double;
    procedure Set_F_Yedek2(Value: Double);
    function Get_I_Yedek1: Integer;
    procedure Set_I_Yedek1(Value: Integer);
  public
    property DefaultInterface: IKur read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property Sira: Integer read Get_Sira write Set_Sira;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property DOV_ALIS: Double read Get_DOV_ALIS write Set_DOV_ALIS;
    property DOV_SATIS: Double read Get_DOV_SATIS write Set_DOV_SATIS;
    property EFF_ALIS: Double read Get_EFF_ALIS write Set_EFF_ALIS;
    property EFF_SATIS: Double read Get_EFF_SATIS write Set_EFF_SATIS;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDoviz provides a Create and CreateRemote method to          
// create instances of the default interface IDoviz exposed by              
// the CoClass Doviz. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDoviz = class
    class function Create: IDoviz;
    class function CreateRemote(const MachineName: string): IDoviz;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDoviz
// Help String      : Doviz Object
// Default Interface: IDoviz
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDovizProperties= class;
{$ENDIF}
  TDoviz = class(TOleServer)
  private
    FIntf:        IDoviz;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDovizProperties;
    function      GetServerProperties: TDovizProperties;
{$ENDIF}
    function      GetDefaultInterface: IDoviz;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_Sira: Integer;
    procedure Set_Sira(Value: Integer);
    function Get_BIRIM: Integer;
    procedure Set_BIRIM(Value: Integer);
    function Get_ISIM: WideString;
    procedure Set_ISIM(const Value: WideString);
    function Get_NETSISSIRA: Integer;
    procedure Set_NETSISSIRA(Value: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDoviz);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    procedure DovizKurGuncelle(DovTarih: TDateTime);
    property DefaultInterface: IDoviz read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property Sira: Integer read Get_Sira write Set_Sira;
    property BIRIM: Integer read Get_BIRIM write Set_BIRIM;
    property ISIM: WideString read Get_ISIM write Set_ISIM;
    property NETSISSIRA: Integer read Get_NETSISSIRA write Set_NETSISSIRA;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDovizProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDoviz
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDovizProperties = class(TPersistent)
  private
    FServer:    TDoviz;
    function    GetDefaultInterface: IDoviz;
    constructor Create(AServer: TDoviz);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_Sira: Integer;
    procedure Set_Sira(Value: Integer);
    function Get_BIRIM: Integer;
    procedure Set_BIRIM(Value: Integer);
    function Get_ISIM: WideString;
    procedure Set_ISIM(const Value: WideString);
    function Get_NETSISSIRA: Integer;
    procedure Set_NETSISSIRA(Value: Integer);
  public
    property DefaultInterface: IDoviz read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property Sira: Integer read Get_Sira write Set_Sira;
    property BIRIM: Integer read Get_BIRIM write Set_BIRIM;
    property ISIM: WideString read Get_ISIM write Set_ISIM;
    property NETSISSIRA: Integer read Get_NETSISSIRA write Set_NETSISSIRA;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCekSenet provides a Create and CreateRemote method to          
// create instances of the default interface ICekSenet exposed by              
// the CoClass CekSenet. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCekSenet = class
    class function Create: ICekSenet;
    class function CreateRemote(const MachineName: string): ICekSenet;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCekSenet
// Help String      : CekSenet Object
// Default Interface: ICekSenet
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCekSenetProperties= class;
{$ENDIF}
  TCekSenet = class(TOleServer)
  private
    FIntf:        ICekSenet;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCekSenetProperties;
    function      GetServerProperties: TCekSenetProperties;
{$ENDIF}
    function      GetDefaultInterface: ICekSenet;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_SC_NO: WideString;
    procedure Set_SC_NO(const Value: WideString);
    function Get_SC_GIRTRH: TDateTime;
    procedure Set_SC_GIRTRH(Value: TDateTime);
    function Get_VADETRH: TDateTime;
    procedure Set_VADETRH(Value: TDateTime);
    function Get_SC_CIKTRH: TDateTime;
    procedure Set_SC_CIKTRH(Value: TDateTime);
    function Get_SC_ODETRH: TDateTime;
    procedure Set_SC_ODETRH(Value: TDateTime);
    function Get_SC_VERENK: WideString;
    procedure Set_SC_VERENK(const Value: WideString);
    function Get_SC_ABORCLU: WideString;
    procedure Set_SC_ABORCLU(const Value: WideString);
    function Get_AS_C: WideString;
    procedure Set_AS_C(const Value: WideString);
    function Get_SC_VERILENK: WideString;
    procedure Set_SC_VERILENK(const Value: WideString);
    function Get_SC_VERYCM: WideString;
    procedure Set_SC_VERYCM(const Value: WideString);
    function Get_SC_BANKNO: WideString;
    procedure Set_SC_BANKNO(const Value: WideString);
    function Get_SC_SONDUR: WideString;
    procedure Set_SC_SONDUR(const Value: WideString);
    function Get_SC_YERI: WideString;
    procedure Set_SC_YERI(const Value: WideString);
    function Get_RAPOR_KODU: WideString;
    procedure Set_RAPOR_KODU(const Value: WideString);
    function Get_Tutar: Double;
    procedure Set_Tutar(Value: Double);
    function Get_KURFARKI: Double;
    procedure Set_KURFARKI(Value: Double);
    function Get_SC_ALB_NO: WideString;
    procedure Set_SC_ALB_NO(const Value: WideString);
    function Get_SC_VERB_NO: WideString;
    procedure Set_SC_VERB_NO(const Value: WideString);
    function Get_YERI: WideString;
    procedure Set_YERI(const Value: WideString);
    function Get_C_NUMARA: WideString;
    procedure Set_C_NUMARA(const Value: WideString);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_DOVTIP: Integer;
    procedure Set_DOVTIP(Value: Integer);
    function Get_DOVTUT: Double;
    procedure Set_DOVTUT(Value: Double);
    function Get_GIRILDIGIYER: Integer;
    procedure Set_GIRILDIGIYER(Value: Integer);
    function Get_Firmadovtut: Double;
    procedure Set_Firmadovtut(Value: Double);
    function Get_Firmadovtip: Integer;
    procedure Set_Firmadovtip(Value: Integer);
    function Get_CEKSERI: WideString;
    procedure Set_CEKSERI(const Value: WideString);
    function Get_Plasiyer_Kodu: WideString;
    procedure Set_Plasiyer_Kodu(const Value: WideString);
    function Get_PLASIYER_TARIH: TDateTime;
    procedure Set_PLASIYER_TARIH(Value: TDateTime);
    function Get_RAP_KOD: WideString;
    procedure Set_RAP_KOD(const Value: WideString);
    function Get_GIRIS_BORDRO: WideString;
    procedure Set_GIRIS_BORDRO(const Value: WideString);
    function Get_CIKIS_BORDRO: WideString;
    procedure Set_CIKIS_BORDRO(const Value: WideString);
    function Get_Yedek1: WideString;
    procedure Set_Yedek1(const Value: WideString);
    function Get_Yedek2: WideString;
    procedure Set_Yedek2(const Value: WideString);
    function Get_Yedek3: Double;
    procedure Set_Yedek3(Value: Double);
    function Get_Yedek4: Double;
    procedure Set_Yedek4(Value: Double);
    function Get_Yedek5: WideString;
    procedure Set_Yedek5(const Value: WideString);
    function Get_Yedek6: WideString;
    procedure Set_Yedek6(const Value: WideString);
    function Get_Yedek8: Integer;
    procedure Set_Yedek8(Value: Integer);
    function Get_Yedek7: Integer;
    procedure Set_Yedek7(Value: Integer);
    function Get_Yedek9: Integer;
    procedure Set_Yedek9(Value: Integer);
    function Get_Yedek10: TDateTime;
    procedure Set_Yedek10(Value: TDateTime);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
    function Get_VONAYNUM: Integer;
    procedure Set_VONAYNUM(Value: Integer);
    function Get_VONAYTIPI: WideString;
    procedure Set_VONAYTIPI(const Value: WideString);
    function Get_KasaKodu: WideString;
    procedure Set_KasaKodu(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICekSenet);
    procedure Disconnect; override;
    property DefaultInterface: ICekSenet read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property SC_NO: WideString read Get_SC_NO write Set_SC_NO;
    property SC_GIRTRH: TDateTime read Get_SC_GIRTRH write Set_SC_GIRTRH;
    property VADETRH: TDateTime read Get_VADETRH write Set_VADETRH;
    property SC_CIKTRH: TDateTime read Get_SC_CIKTRH write Set_SC_CIKTRH;
    property SC_ODETRH: TDateTime read Get_SC_ODETRH write Set_SC_ODETRH;
    property SC_VERENK: WideString read Get_SC_VERENK write Set_SC_VERENK;
    property SC_ABORCLU: WideString read Get_SC_ABORCLU write Set_SC_ABORCLU;
    property AS_C: WideString read Get_AS_C write Set_AS_C;
    property SC_VERILENK: WideString read Get_SC_VERILENK write Set_SC_VERILENK;
    property SC_VERYCM: WideString read Get_SC_VERYCM write Set_SC_VERYCM;
    property SC_BANKNO: WideString read Get_SC_BANKNO write Set_SC_BANKNO;
    property SC_SONDUR: WideString read Get_SC_SONDUR write Set_SC_SONDUR;
    property SC_YERI: WideString read Get_SC_YERI write Set_SC_YERI;
    property RAPOR_KODU: WideString read Get_RAPOR_KODU write Set_RAPOR_KODU;
    property Tutar: Double read Get_Tutar write Set_Tutar;
    property KURFARKI: Double read Get_KURFARKI write Set_KURFARKI;
    property SC_ALB_NO: WideString read Get_SC_ALB_NO write Set_SC_ALB_NO;
    property SC_VERB_NO: WideString read Get_SC_VERB_NO write Set_SC_VERB_NO;
    property YERI: WideString read Get_YERI write Set_YERI;
    property C_NUMARA: WideString read Get_C_NUMARA write Set_C_NUMARA;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property DOVTIP: Integer read Get_DOVTIP write Set_DOVTIP;
    property DOVTUT: Double read Get_DOVTUT write Set_DOVTUT;
    property GIRILDIGIYER: Integer read Get_GIRILDIGIYER write Set_GIRILDIGIYER;
    property Firmadovtut: Double read Get_Firmadovtut write Set_Firmadovtut;
    property Firmadovtip: Integer read Get_Firmadovtip write Set_Firmadovtip;
    property CEKSERI: WideString read Get_CEKSERI write Set_CEKSERI;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property PLASIYER_TARIH: TDateTime read Get_PLASIYER_TARIH write Set_PLASIYER_TARIH;
    property RAP_KOD: WideString read Get_RAP_KOD write Set_RAP_KOD;
    property GIRIS_BORDRO: WideString read Get_GIRIS_BORDRO write Set_GIRIS_BORDRO;
    property CIKIS_BORDRO: WideString read Get_CIKIS_BORDRO write Set_CIKIS_BORDRO;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: WideString read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property Yedek10: TDateTime read Get_Yedek10 write Set_Yedek10;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property VONAYNUM: Integer read Get_VONAYNUM write Set_VONAYNUM;
    property VONAYTIPI: WideString read Get_VONAYTIPI write Set_VONAYTIPI;
    property KasaKodu: WideString read Get_KasaKodu write Set_KasaKodu;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCekSenetProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCekSenet
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCekSenetProperties = class(TPersistent)
  private
    FServer:    TCekSenet;
    function    GetDefaultInterface: ICekSenet;
    constructor Create(AServer: TCekSenet);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_SC_NO: WideString;
    procedure Set_SC_NO(const Value: WideString);
    function Get_SC_GIRTRH: TDateTime;
    procedure Set_SC_GIRTRH(Value: TDateTime);
    function Get_VADETRH: TDateTime;
    procedure Set_VADETRH(Value: TDateTime);
    function Get_SC_CIKTRH: TDateTime;
    procedure Set_SC_CIKTRH(Value: TDateTime);
    function Get_SC_ODETRH: TDateTime;
    procedure Set_SC_ODETRH(Value: TDateTime);
    function Get_SC_VERENK: WideString;
    procedure Set_SC_VERENK(const Value: WideString);
    function Get_SC_ABORCLU: WideString;
    procedure Set_SC_ABORCLU(const Value: WideString);
    function Get_AS_C: WideString;
    procedure Set_AS_C(const Value: WideString);
    function Get_SC_VERILENK: WideString;
    procedure Set_SC_VERILENK(const Value: WideString);
    function Get_SC_VERYCM: WideString;
    procedure Set_SC_VERYCM(const Value: WideString);
    function Get_SC_BANKNO: WideString;
    procedure Set_SC_BANKNO(const Value: WideString);
    function Get_SC_SONDUR: WideString;
    procedure Set_SC_SONDUR(const Value: WideString);
    function Get_SC_YERI: WideString;
    procedure Set_SC_YERI(const Value: WideString);
    function Get_RAPOR_KODU: WideString;
    procedure Set_RAPOR_KODU(const Value: WideString);
    function Get_Tutar: Double;
    procedure Set_Tutar(Value: Double);
    function Get_KURFARKI: Double;
    procedure Set_KURFARKI(Value: Double);
    function Get_SC_ALB_NO: WideString;
    procedure Set_SC_ALB_NO(const Value: WideString);
    function Get_SC_VERB_NO: WideString;
    procedure Set_SC_VERB_NO(const Value: WideString);
    function Get_YERI: WideString;
    procedure Set_YERI(const Value: WideString);
    function Get_C_NUMARA: WideString;
    procedure Set_C_NUMARA(const Value: WideString);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_DOVTIP: Integer;
    procedure Set_DOVTIP(Value: Integer);
    function Get_DOVTUT: Double;
    procedure Set_DOVTUT(Value: Double);
    function Get_GIRILDIGIYER: Integer;
    procedure Set_GIRILDIGIYER(Value: Integer);
    function Get_Firmadovtut: Double;
    procedure Set_Firmadovtut(Value: Double);
    function Get_Firmadovtip: Integer;
    procedure Set_Firmadovtip(Value: Integer);
    function Get_CEKSERI: WideString;
    procedure Set_CEKSERI(const Value: WideString);
    function Get_Plasiyer_Kodu: WideString;
    procedure Set_Plasiyer_Kodu(const Value: WideString);
    function Get_PLASIYER_TARIH: TDateTime;
    procedure Set_PLASIYER_TARIH(Value: TDateTime);
    function Get_RAP_KOD: WideString;
    procedure Set_RAP_KOD(const Value: WideString);
    function Get_GIRIS_BORDRO: WideString;
    procedure Set_GIRIS_BORDRO(const Value: WideString);
    function Get_CIKIS_BORDRO: WideString;
    procedure Set_CIKIS_BORDRO(const Value: WideString);
    function Get_Yedek1: WideString;
    procedure Set_Yedek1(const Value: WideString);
    function Get_Yedek2: WideString;
    procedure Set_Yedek2(const Value: WideString);
    function Get_Yedek3: Double;
    procedure Set_Yedek3(Value: Double);
    function Get_Yedek4: Double;
    procedure Set_Yedek4(Value: Double);
    function Get_Yedek5: WideString;
    procedure Set_Yedek5(const Value: WideString);
    function Get_Yedek6: WideString;
    procedure Set_Yedek6(const Value: WideString);
    function Get_Yedek8: Integer;
    procedure Set_Yedek8(Value: Integer);
    function Get_Yedek7: Integer;
    procedure Set_Yedek7(Value: Integer);
    function Get_Yedek9: Integer;
    procedure Set_Yedek9(Value: Integer);
    function Get_Yedek10: TDateTime;
    procedure Set_Yedek10(Value: TDateTime);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
    function Get_VONAYNUM: Integer;
    procedure Set_VONAYNUM(Value: Integer);
    function Get_VONAYTIPI: WideString;
    procedure Set_VONAYTIPI(const Value: WideString);
    function Get_KasaKodu: WideString;
    procedure Set_KasaKodu(const Value: WideString);
  public
    property DefaultInterface: ICekSenet read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property SC_NO: WideString read Get_SC_NO write Set_SC_NO;
    property SC_GIRTRH: TDateTime read Get_SC_GIRTRH write Set_SC_GIRTRH;
    property VADETRH: TDateTime read Get_VADETRH write Set_VADETRH;
    property SC_CIKTRH: TDateTime read Get_SC_CIKTRH write Set_SC_CIKTRH;
    property SC_ODETRH: TDateTime read Get_SC_ODETRH write Set_SC_ODETRH;
    property SC_VERENK: WideString read Get_SC_VERENK write Set_SC_VERENK;
    property SC_ABORCLU: WideString read Get_SC_ABORCLU write Set_SC_ABORCLU;
    property AS_C: WideString read Get_AS_C write Set_AS_C;
    property SC_VERILENK: WideString read Get_SC_VERILENK write Set_SC_VERILENK;
    property SC_VERYCM: WideString read Get_SC_VERYCM write Set_SC_VERYCM;
    property SC_BANKNO: WideString read Get_SC_BANKNO write Set_SC_BANKNO;
    property SC_SONDUR: WideString read Get_SC_SONDUR write Set_SC_SONDUR;
    property SC_YERI: WideString read Get_SC_YERI write Set_SC_YERI;
    property RAPOR_KODU: WideString read Get_RAPOR_KODU write Set_RAPOR_KODU;
    property Tutar: Double read Get_Tutar write Set_Tutar;
    property KURFARKI: Double read Get_KURFARKI write Set_KURFARKI;
    property SC_ALB_NO: WideString read Get_SC_ALB_NO write Set_SC_ALB_NO;
    property SC_VERB_NO: WideString read Get_SC_VERB_NO write Set_SC_VERB_NO;
    property YERI: WideString read Get_YERI write Set_YERI;
    property C_NUMARA: WideString read Get_C_NUMARA write Set_C_NUMARA;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property DOVTIP: Integer read Get_DOVTIP write Set_DOVTIP;
    property DOVTUT: Double read Get_DOVTUT write Set_DOVTUT;
    property GIRILDIGIYER: Integer read Get_GIRILDIGIYER write Set_GIRILDIGIYER;
    property Firmadovtut: Double read Get_Firmadovtut write Set_Firmadovtut;
    property Firmadovtip: Integer read Get_Firmadovtip write Set_Firmadovtip;
    property CEKSERI: WideString read Get_CEKSERI write Set_CEKSERI;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property PLASIYER_TARIH: TDateTime read Get_PLASIYER_TARIH write Set_PLASIYER_TARIH;
    property RAP_KOD: WideString read Get_RAP_KOD write Set_RAP_KOD;
    property GIRIS_BORDRO: WideString read Get_GIRIS_BORDRO write Set_GIRIS_BORDRO;
    property CIKIS_BORDRO: WideString read Get_CIKIS_BORDRO write Set_CIKIS_BORDRO;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: WideString read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property Yedek10: TDateTime read Get_Yedek10 write Set_Yedek10;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property VONAYNUM: Integer read Get_VONAYNUM write Set_VONAYNUM;
    property VONAYTIPI: WideString read Get_VONAYTIPI write Set_VONAYTIPI;
    property KasaKodu: WideString read Get_KasaKodu write Set_KasaKodu;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCekSenetAna provides a Create and CreateRemote method to          
// create instances of the default interface ICekSenetAna exposed by              
// the CoClass CekSenetAna. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCekSenetAna = class
    class function Create: ICekSenetAna;
    class function CreateRemote(const MachineName: string): ICekSenetAna;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCekSenetAna
// Help String      : CekSenetAna Object
// Default Interface: ICekSenetAna
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCekSenetAnaProperties= class;
{$ENDIF}
  TCekSenetAna = class(TOleServer)
  private
    FIntf:        ICekSenetAna;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCekSenetAnaProperties;
    function      GetServerProperties: TCekSenetAnaProperties;
{$ENDIF}
    function      GetDefaultInterface: ICekSenetAna;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_EvrakAdedi: Integer;
    function Get_OkunanCS: ICekSenet;
    function Get_Tip: TCekSenType;
    procedure Set_Tip(Value: TCekSenType);
    function Get_OtoNumaraGetir: WordBool;
    procedure Set_OtoNumaraGetir(Value: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICekSenetAna);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    function Evrak(Index: Integer): ICekSenet;
    function EvrakYeni: ICekSenet;
    function EvraklariKaydet(KaydetmeTipi: TCekSenetEvrakKaydetmeTipi): WordBool;
    property DefaultInterface: ICekSenetAna read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property EvrakAdedi: Integer read Get_EvrakAdedi;
    property OkunanCS: ICekSenet read Get_OkunanCS;
    property Tip: TCekSenType read Get_Tip write Set_Tip;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property OtoNumaraGetir: WordBool read Get_OtoNumaraGetir write Set_OtoNumaraGetir;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCekSenetAnaProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCekSenetAna
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCekSenetAnaProperties = class(TPersistent)
  private
    FServer:    TCekSenetAna;
    function    GetDefaultInterface: ICekSenetAna;
    constructor Create(AServer: TCekSenetAna);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_EvrakAdedi: Integer;
    function Get_OkunanCS: ICekSenet;
    function Get_Tip: TCekSenType;
    procedure Set_Tip(Value: TCekSenType);
    function Get_OtoNumaraGetir: WordBool;
    procedure Set_OtoNumaraGetir(Value: WordBool);
  public
    property DefaultInterface: ICekSenetAna read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property OtoNumaraGetir: WordBool read Get_OtoNumaraGetir write Set_OtoNumaraGetir;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoIReceteAna provides a Create and CreateRemote method to          
// create instances of the default interface IIReceteAna exposed by              
// the CoClass IReceteAna. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoIReceteAna = class
    class function Create: IIReceteAna;
    class function CreateRemote(const MachineName: string): IIReceteAna;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TIReceteAna
// Help String      : IReceteAna Object
// Default Interface: IIReceteAna
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TIReceteAnaProperties= class;
{$ENDIF}
  TIReceteAna = class(TOleServer)
  private
    FIntf:        IIReceteAna;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TIReceteAnaProperties;
    function      GetServerProperties: TIReceteAnaProperties;
{$ENDIF}
    function      GetDefaultInterface: IIReceteAna;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_PrmMamulKodu: WideString;
    procedure Set_PrmMamulKodu(const Value: WideString);
    function Get_PrmSira: Integer;
    procedure Set_PrmSira(Value: Integer);
    function Get_PrmSeviye: Integer;
    procedure Set_PrmSeviye(Value: Integer);
    function Get_PrmSetNo: WideString;
    procedure Set_PrmSetNo(const Value: WideString);
    function Get_PrmOtoUret: WideString;
    procedure Set_PrmOtoUret(const Value: WideString);
    function Get_PrmOPRBIL: WideString;
    procedure Set_PrmOPRBIL(const Value: WideString);
    function Get_ReceteSayisi: Integer;
    function Get_MamulYapKod: WideString;
    procedure Set_MamulYapKod(const Value: WideString);
    function Get_ReceteToplami: Integer;
    procedure Set_ReceteToplami(Value: Integer);
    function Get_OlcuBirimi: WideString;
    procedure Set_OlcuBirimi(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IIReceteAna);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    function okuRecete(Index: Integer): IRecete;
    procedure hazirlaReceteListe;
    function YeniRecete(const MAM_KODU: WideString): IRecete;
    property DefaultInterface: IIReceteAna read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property ReceteSayisi: Integer read Get_ReceteSayisi;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property PrmMamulKodu: WideString read Get_PrmMamulKodu write Set_PrmMamulKodu;
    property PrmSira: Integer read Get_PrmSira write Set_PrmSira;
    property PrmSeviye: Integer read Get_PrmSeviye write Set_PrmSeviye;
    property PrmSetNo: WideString read Get_PrmSetNo write Set_PrmSetNo;
    property PrmOtoUret: WideString read Get_PrmOtoUret write Set_PrmOtoUret;
    property PrmOPRBIL: WideString read Get_PrmOPRBIL write Set_PrmOPRBIL;
    property MamulYapKod: WideString read Get_MamulYapKod write Set_MamulYapKod;
    property ReceteToplami: Integer read Get_ReceteToplami write Set_ReceteToplami;
    property OlcuBirimi: WideString read Get_OlcuBirimi write Set_OlcuBirimi;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TIReceteAnaProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TIReceteAna
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TIReceteAnaProperties = class(TPersistent)
  private
    FServer:    TIReceteAna;
    function    GetDefaultInterface: IIReceteAna;
    constructor Create(AServer: TIReceteAna);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_PrmMamulKodu: WideString;
    procedure Set_PrmMamulKodu(const Value: WideString);
    function Get_PrmSira: Integer;
    procedure Set_PrmSira(Value: Integer);
    function Get_PrmSeviye: Integer;
    procedure Set_PrmSeviye(Value: Integer);
    function Get_PrmSetNo: WideString;
    procedure Set_PrmSetNo(const Value: WideString);
    function Get_PrmOtoUret: WideString;
    procedure Set_PrmOtoUret(const Value: WideString);
    function Get_PrmOPRBIL: WideString;
    procedure Set_PrmOPRBIL(const Value: WideString);
    function Get_ReceteSayisi: Integer;
    function Get_MamulYapKod: WideString;
    procedure Set_MamulYapKod(const Value: WideString);
    function Get_ReceteToplami: Integer;
    procedure Set_ReceteToplami(Value: Integer);
    function Get_OlcuBirimi: WideString;
    procedure Set_OlcuBirimi(const Value: WideString);
  public
    property DefaultInterface: IIReceteAna read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property PrmMamulKodu: WideString read Get_PrmMamulKodu write Set_PrmMamulKodu;
    property PrmSira: Integer read Get_PrmSira write Set_PrmSira;
    property PrmSeviye: Integer read Get_PrmSeviye write Set_PrmSeviye;
    property PrmSetNo: WideString read Get_PrmSetNo write Set_PrmSetNo;
    property PrmOtoUret: WideString read Get_PrmOtoUret write Set_PrmOtoUret;
    property PrmOPRBIL: WideString read Get_PrmOPRBIL write Set_PrmOPRBIL;
    property MamulYapKod: WideString read Get_MamulYapKod write Set_MamulYapKod;
    property ReceteToplami: Integer read Get_ReceteToplami write Set_ReceteToplami;
    property OlcuBirimi: WideString read Get_OlcuBirimi write Set_OlcuBirimi;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoRecete provides a Create and CreateRemote method to          
// create instances of the default interface IRecete exposed by              
// the CoClass Recete. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRecete = class
    class function Create: IRecete;
    class function CreateRemote(const MachineName: string): IRecete;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TRecete
// Help String      : Recete Object
// Default Interface: IRecete
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TReceteProperties= class;
{$ENDIF}
  TRecete = class(TOleServer)
  private
    FIntf:        IRecete;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TReceteProperties;
    function      GetServerProperties: TReceteProperties;
{$ENDIF}
    function      GetDefaultInterface: IRecete;
  protected
    procedure InitServerData; override;
    function Get_Mamul_Kodu: WideString;
    procedure Set_Mamul_Kodu(const Value: WideString);
    function Get_Ham_Kodu: WideString;
    procedure Set_Ham_Kodu(const Value: WideString);
    function Get_Miktar: Double;
    procedure Set_Miktar(Value: Double);
    function Get_FireMik: Double;
    procedure Set_FireMik(Value: Double);
    function Get_OpNo: WideString;
    procedure Set_OpNo(const Value: WideString);
    function Get_SabitFireMik: Double;
    procedure Set_SabitFireMik(Value: Double);
    function Get_Stok_Maliyet: WideString;
    procedure Set_Stok_Maliyet(const Value: WideString);
    function Get_MiktarSabitle: WordBool;
    procedure Set_MiktarSabitle(Value: WordBool);
    function Get_H_OTOMATIK_URETIM: WordBool;
    procedure Set_H_OTOMATIK_URETIM(Value: WordBool);
    function Get_H_MamulMu: WordBool;
    procedure Set_H_MamulMu(Value: WordBool);
    function Get_H_ALIS_FIAT1: Double;
    procedure Set_H_ALIS_FIAT1(Value: Double);
    function Get_H_Stok_Adi: WideString;
    procedure Set_H_Stok_Adi(const Value: WideString);
    function Get_H_Olcu_Br1: WideString;
    procedure Set_H_Olcu_Br1(const Value: WideString);
    function Get_H_Kilit: WordBool;
    procedure Set_H_Kilit(Value: WordBool);
    function Get_M_Stok_Adi: WideString;
    procedure Set_M_Stok_Adi(const Value: WideString);
    function Get_M_Formul_Toplami: Double;
    procedure Set_M_Formul_Toplami(Value: Double);
    function Get_M_Olcu_Br1: WideString;
    procedure Set_M_Olcu_Br1(const Value: WideString);
    function Get_OncelikDegissin: WordBool;
    procedure Set_OncelikDegissin(Value: WordBool);
    function Get_Planlama_Orani: Double;
    procedure Set_Planlama_Orani(Value: Double);
    function Get_Oncelik: Integer;
    procedure Set_Oncelik(Value: Integer);
    function Get_FiktifMi: WordBool;
    procedure Set_FiktifMi(Value: WordBool);
    function Get_SarfMamul_Kodu: WideString;
    procedure Set_SarfMamul_Kodu(const Value: WideString);
    function Get_FiktifMam_Maliyet: Double;
    procedure Set_FiktifMam_Maliyet(Value: Double);
    function Get_OpKodu: WideString;
    procedure Set_OpKodu(const Value: WideString);
    function Get_Opr_Bil: WideString;
    procedure Set_Opr_Bil(const Value: WideString);
    function Get_HamYapKod: WideString;
    procedure Set_HamYapKod(const Value: WideString);
    function Get_Aciklama: WideString;
    procedure Set_Aciklama(const Value: WideString);
    function Get_IstasyonKodu: WideString;
    procedure Set_IstasyonKodu(const Value: WideString);
    function Get_HazirlikSuresi: Double;
    procedure Set_HazirlikSuresi(Value: Double);
    function Get_TransferSuresi: Double;
    procedure Set_TransferSuresi(Value: Double);
    function Get_UretimSuresi: Double;
    procedure Set_UretimSuresi(Value: Double);
    function Get_GecisMiktari: Double;
    procedure Set_GecisMiktari(Value: Double);
    function Get_IscilikMaliyeti: Double;
    procedure Set_IscilikMaliyeti(Value: Double);
    function Get_DigerMaliyetler: Double;
    procedure Set_DigerMaliyetler(Value: Double);
    function Get_UEDahilEdilsin: WordBool;
    procedure Set_UEDahilEdilsin(Value: WordBool);
    function Get_SonOperasyon: WordBool;
    procedure Set_SonOperasyon(Value: WordBool);
    function Get_SimTezMiktari: Double;
    procedure Set_SimTezMiktari(Value: Double);
    function Get_AmbarCikisFisi: TAlternaTifPolitikalar;
    procedure Set_AmbarCikisFisi(Value: TAlternaTifPolitikalar);
    function Get_DATransferFisi: TAlternaTifPolitikalar;
    procedure Set_DATransferFisi(Value: TAlternaTifPolitikalar);
    function Get_UretimSonuKaydi: TAlternaTifPolitikalar;
    procedure Set_UretimSonuKaydi(Value: TAlternaTifPolitikalar);
    function Get_Mrp: TAltPolitikaMrp;
    procedure Set_Mrp(Value: TAltPolitikaMrp);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IRecete);
    procedure Disconnect; override;
    property DefaultInterface: IRecete read GetDefaultInterface;
    property OncelikDegissin: WordBool read Get_OncelikDegissin write Set_OncelikDegissin;
    property Planlama_Orani: Double read Get_Planlama_Orani write Set_Planlama_Orani;
    property Oncelik: Integer read Get_Oncelik write Set_Oncelik;
    property Mamul_Kodu: WideString read Get_Mamul_Kodu write Set_Mamul_Kodu;
    property Ham_Kodu: WideString read Get_Ham_Kodu write Set_Ham_Kodu;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property FireMik: Double read Get_FireMik write Set_FireMik;
    property OpNo: WideString read Get_OpNo write Set_OpNo;
    property SabitFireMik: Double read Get_SabitFireMik write Set_SabitFireMik;
    property Stok_Maliyet: WideString read Get_Stok_Maliyet write Set_Stok_Maliyet;
    property MiktarSabitle: WordBool read Get_MiktarSabitle write Set_MiktarSabitle;
    property H_OTOMATIK_URETIM: WordBool read Get_H_OTOMATIK_URETIM write Set_H_OTOMATIK_URETIM;
    property H_MamulMu: WordBool read Get_H_MamulMu write Set_H_MamulMu;
    property H_ALIS_FIAT1: Double read Get_H_ALIS_FIAT1 write Set_H_ALIS_FIAT1;
    property H_Stok_Adi: WideString read Get_H_Stok_Adi write Set_H_Stok_Adi;
    property H_Olcu_Br1: WideString read Get_H_Olcu_Br1 write Set_H_Olcu_Br1;
    property H_Kilit: WordBool read Get_H_Kilit write Set_H_Kilit;
    property M_Stok_Adi: WideString read Get_M_Stok_Adi write Set_M_Stok_Adi;
    property M_Formul_Toplami: Double read Get_M_Formul_Toplami write Set_M_Formul_Toplami;
    property M_Olcu_Br1: WideString read Get_M_Olcu_Br1 write Set_M_Olcu_Br1;
    property FiktifMi: WordBool read Get_FiktifMi write Set_FiktifMi;
    property SarfMamul_Kodu: WideString read Get_SarfMamul_Kodu write Set_SarfMamul_Kodu;
    property FiktifMam_Maliyet: Double read Get_FiktifMam_Maliyet write Set_FiktifMam_Maliyet;
    property OpKodu: WideString read Get_OpKodu write Set_OpKodu;
    property Opr_Bil: WideString read Get_Opr_Bil write Set_Opr_Bil;
    property HamYapKod: WideString read Get_HamYapKod write Set_HamYapKod;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property IstasyonKodu: WideString read Get_IstasyonKodu write Set_IstasyonKodu;
    property HazirlikSuresi: Double read Get_HazirlikSuresi write Set_HazirlikSuresi;
    property TransferSuresi: Double read Get_TransferSuresi write Set_TransferSuresi;
    property UretimSuresi: Double read Get_UretimSuresi write Set_UretimSuresi;
    property GecisMiktari: Double read Get_GecisMiktari write Set_GecisMiktari;
    property IscilikMaliyeti: Double read Get_IscilikMaliyeti write Set_IscilikMaliyeti;
    property DigerMaliyetler: Double read Get_DigerMaliyetler write Set_DigerMaliyetler;
    property UEDahilEdilsin: WordBool read Get_UEDahilEdilsin write Set_UEDahilEdilsin;
    property SonOperasyon: WordBool read Get_SonOperasyon write Set_SonOperasyon;
    property SimTezMiktari: Double read Get_SimTezMiktari write Set_SimTezMiktari;
    property AmbarCikisFisi: TAlternaTifPolitikalar read Get_AmbarCikisFisi write Set_AmbarCikisFisi;
    property DATransferFisi: TAlternaTifPolitikalar read Get_DATransferFisi write Set_DATransferFisi;
    property UretimSonuKaydi: TAlternaTifPolitikalar read Get_UretimSonuKaydi write Set_UretimSonuKaydi;
    property Mrp: TAltPolitikaMrp read Get_Mrp write Set_Mrp;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TReceteProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TRecete
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TReceteProperties = class(TPersistent)
  private
    FServer:    TRecete;
    function    GetDefaultInterface: IRecete;
    constructor Create(AServer: TRecete);
  protected
    function Get_Mamul_Kodu: WideString;
    procedure Set_Mamul_Kodu(const Value: WideString);
    function Get_Ham_Kodu: WideString;
    procedure Set_Ham_Kodu(const Value: WideString);
    function Get_Miktar: Double;
    procedure Set_Miktar(Value: Double);
    function Get_FireMik: Double;
    procedure Set_FireMik(Value: Double);
    function Get_OpNo: WideString;
    procedure Set_OpNo(const Value: WideString);
    function Get_SabitFireMik: Double;
    procedure Set_SabitFireMik(Value: Double);
    function Get_Stok_Maliyet: WideString;
    procedure Set_Stok_Maliyet(const Value: WideString);
    function Get_MiktarSabitle: WordBool;
    procedure Set_MiktarSabitle(Value: WordBool);
    function Get_H_OTOMATIK_URETIM: WordBool;
    procedure Set_H_OTOMATIK_URETIM(Value: WordBool);
    function Get_H_MamulMu: WordBool;
    procedure Set_H_MamulMu(Value: WordBool);
    function Get_H_ALIS_FIAT1: Double;
    procedure Set_H_ALIS_FIAT1(Value: Double);
    function Get_H_Stok_Adi: WideString;
    procedure Set_H_Stok_Adi(const Value: WideString);
    function Get_H_Olcu_Br1: WideString;
    procedure Set_H_Olcu_Br1(const Value: WideString);
    function Get_H_Kilit: WordBool;
    procedure Set_H_Kilit(Value: WordBool);
    function Get_M_Stok_Adi: WideString;
    procedure Set_M_Stok_Adi(const Value: WideString);
    function Get_M_Formul_Toplami: Double;
    procedure Set_M_Formul_Toplami(Value: Double);
    function Get_M_Olcu_Br1: WideString;
    procedure Set_M_Olcu_Br1(const Value: WideString);
    function Get_OncelikDegissin: WordBool;
    procedure Set_OncelikDegissin(Value: WordBool);
    function Get_Planlama_Orani: Double;
    procedure Set_Planlama_Orani(Value: Double);
    function Get_Oncelik: Integer;
    procedure Set_Oncelik(Value: Integer);
    function Get_FiktifMi: WordBool;
    procedure Set_FiktifMi(Value: WordBool);
    function Get_SarfMamul_Kodu: WideString;
    procedure Set_SarfMamul_Kodu(const Value: WideString);
    function Get_FiktifMam_Maliyet: Double;
    procedure Set_FiktifMam_Maliyet(Value: Double);
    function Get_OpKodu: WideString;
    procedure Set_OpKodu(const Value: WideString);
    function Get_Opr_Bil: WideString;
    procedure Set_Opr_Bil(const Value: WideString);
    function Get_HamYapKod: WideString;
    procedure Set_HamYapKod(const Value: WideString);
    function Get_Aciklama: WideString;
    procedure Set_Aciklama(const Value: WideString);
    function Get_IstasyonKodu: WideString;
    procedure Set_IstasyonKodu(const Value: WideString);
    function Get_HazirlikSuresi: Double;
    procedure Set_HazirlikSuresi(Value: Double);
    function Get_TransferSuresi: Double;
    procedure Set_TransferSuresi(Value: Double);
    function Get_UretimSuresi: Double;
    procedure Set_UretimSuresi(Value: Double);
    function Get_GecisMiktari: Double;
    procedure Set_GecisMiktari(Value: Double);
    function Get_IscilikMaliyeti: Double;
    procedure Set_IscilikMaliyeti(Value: Double);
    function Get_DigerMaliyetler: Double;
    procedure Set_DigerMaliyetler(Value: Double);
    function Get_UEDahilEdilsin: WordBool;
    procedure Set_UEDahilEdilsin(Value: WordBool);
    function Get_SonOperasyon: WordBool;
    procedure Set_SonOperasyon(Value: WordBool);
    function Get_SimTezMiktari: Double;
    procedure Set_SimTezMiktari(Value: Double);
    function Get_AmbarCikisFisi: TAlternaTifPolitikalar;
    procedure Set_AmbarCikisFisi(Value: TAlternaTifPolitikalar);
    function Get_DATransferFisi: TAlternaTifPolitikalar;
    procedure Set_DATransferFisi(Value: TAlternaTifPolitikalar);
    function Get_UretimSonuKaydi: TAlternaTifPolitikalar;
    procedure Set_UretimSonuKaydi(Value: TAlternaTifPolitikalar);
    function Get_Mrp: TAltPolitikaMrp;
    procedure Set_Mrp(Value: TAltPolitikaMrp);
  public
    property DefaultInterface: IRecete read GetDefaultInterface;
  published
    property Mamul_Kodu: WideString read Get_Mamul_Kodu write Set_Mamul_Kodu;
    property Ham_Kodu: WideString read Get_Ham_Kodu write Set_Ham_Kodu;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property FireMik: Double read Get_FireMik write Set_FireMik;
    property OpNo: WideString read Get_OpNo write Set_OpNo;
    property SabitFireMik: Double read Get_SabitFireMik write Set_SabitFireMik;
    property Stok_Maliyet: WideString read Get_Stok_Maliyet write Set_Stok_Maliyet;
    property MiktarSabitle: WordBool read Get_MiktarSabitle write Set_MiktarSabitle;
    property H_OTOMATIK_URETIM: WordBool read Get_H_OTOMATIK_URETIM write Set_H_OTOMATIK_URETIM;
    property H_MamulMu: WordBool read Get_H_MamulMu write Set_H_MamulMu;
    property H_ALIS_FIAT1: Double read Get_H_ALIS_FIAT1 write Set_H_ALIS_FIAT1;
    property H_Stok_Adi: WideString read Get_H_Stok_Adi write Set_H_Stok_Adi;
    property H_Olcu_Br1: WideString read Get_H_Olcu_Br1 write Set_H_Olcu_Br1;
    property H_Kilit: WordBool read Get_H_Kilit write Set_H_Kilit;
    property M_Stok_Adi: WideString read Get_M_Stok_Adi write Set_M_Stok_Adi;
    property M_Formul_Toplami: Double read Get_M_Formul_Toplami write Set_M_Formul_Toplami;
    property M_Olcu_Br1: WideString read Get_M_Olcu_Br1 write Set_M_Olcu_Br1;
    property FiktifMi: WordBool read Get_FiktifMi write Set_FiktifMi;
    property SarfMamul_Kodu: WideString read Get_SarfMamul_Kodu write Set_SarfMamul_Kodu;
    property FiktifMam_Maliyet: Double read Get_FiktifMam_Maliyet write Set_FiktifMam_Maliyet;
    property OpKodu: WideString read Get_OpKodu write Set_OpKodu;
    property Opr_Bil: WideString read Get_Opr_Bil write Set_Opr_Bil;
    property HamYapKod: WideString read Get_HamYapKod write Set_HamYapKod;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property IstasyonKodu: WideString read Get_IstasyonKodu write Set_IstasyonKodu;
    property HazirlikSuresi: Double read Get_HazirlikSuresi write Set_HazirlikSuresi;
    property TransferSuresi: Double read Get_TransferSuresi write Set_TransferSuresi;
    property UretimSuresi: Double read Get_UretimSuresi write Set_UretimSuresi;
    property GecisMiktari: Double read Get_GecisMiktari write Set_GecisMiktari;
    property IscilikMaliyeti: Double read Get_IscilikMaliyeti write Set_IscilikMaliyeti;
    property DigerMaliyetler: Double read Get_DigerMaliyetler write Set_DigerMaliyetler;
    property UEDahilEdilsin: WordBool read Get_UEDahilEdilsin write Set_UEDahilEdilsin;
    property SonOperasyon: WordBool read Get_SonOperasyon write Set_SonOperasyon;
    property SimTezMiktari: Double read Get_SimTezMiktari write Set_SimTezMiktari;
    property AmbarCikisFisi: TAlternaTifPolitikalar read Get_AmbarCikisFisi write Set_AmbarCikisFisi;
    property DATransferFisi: TAlternaTifPolitikalar read Get_DATransferFisi write Set_DATransferFisi;
    property UretimSonuKaydi: TAlternaTifPolitikalar read Get_UretimSonuKaydi write Set_UretimSonuKaydi;
    property Mrp: TAltPolitikaMrp read Get_Mrp write Set_Mrp;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNetField provides a Create and CreateRemote method to          
// create instances of the default interface INetField exposed by              
// the CoClass NetField. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNetField = class
    class function Create: INetField;
    class function CreateRemote(const MachineName: string): INetField;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNetField
// Help String      : NetField Object
// Default Interface: INetField
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNetFieldProperties= class;
{$ENDIF}
  TNetField = class(TOleServer)
  private
    FIntf:        INetField;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNetFieldProperties;
    function      GetServerProperties: TNetFieldProperties;
{$ENDIF}
    function      GetDefaultInterface: INetField;
  protected
    procedure InitServerData; override;
    function Get_FieldName: WideString;
    function Get_AsString: WideString;
    function Get_AsInteger: Integer;
    function Get_AsDateTime: TDateTime;
    function Get_AsVariant: OleVariant;
    function Get_AsFloat: Double;
    function Get_DisplayName: WideString;
    function Get_DataType: Integer;
    function Get_IsBlolb: WordBool;
    function Get_DisplayText: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: INetField);
    procedure Disconnect; override;
    property DefaultInterface: INetField read GetDefaultInterface;
    property FieldName: WideString read Get_FieldName;
    property AsString: WideString read Get_AsString;
    property AsInteger: Integer read Get_AsInteger;
    property AsDateTime: TDateTime read Get_AsDateTime;
    property AsVariant: OleVariant read Get_AsVariant;
    property AsFloat: Double read Get_AsFloat;
    property DisplayName: WideString read Get_DisplayName;
    property DataType: Integer read Get_DataType;
    property IsBlolb: WordBool read Get_IsBlolb;
    property DisplayText: WideString read Get_DisplayText;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNetFieldProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNetField
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNetFieldProperties = class(TPersistent)
  private
    FServer:    TNetField;
    function    GetDefaultInterface: INetField;
    constructor Create(AServer: TNetField);
  protected
    function Get_FieldName: WideString;
    function Get_AsString: WideString;
    function Get_AsInteger: Integer;
    function Get_AsDateTime: TDateTime;
    function Get_AsVariant: OleVariant;
    function Get_AsFloat: Double;
    function Get_DisplayName: WideString;
    function Get_DataType: Integer;
    function Get_IsBlolb: WordBool;
    function Get_DisplayText: WideString;
  public
    property DefaultInterface: INetField read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoVTGuvenlik provides a Create and CreateRemote method to          
// create instances of the default interface IVTGuvenlik exposed by              
// the CoClass VTGuvenlik. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoVTGuvenlik = class
    class function Create: IVTGuvenlik;
    class function CreateRemote(const MachineName: string): IVTGuvenlik;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TVTGuvenlik
// Help String      : VTGuvenlik Object
// Default Interface: IVTGuvenlik
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TVTGuvenlikProperties= class;
{$ENDIF}
  TVTGuvenlik = class(TOleServer)
  private
    FIntf:        IVTGuvenlik;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TVTGuvenlikProperties;
    function      GetServerProperties: TVTGuvenlikProperties;
{$ENDIF}
    function      GetDefaultInterface: IVTGuvenlik;
  protected
    procedure InitServerData; override;
    function Get_KisitKapsami: TKisitKapsami;
    procedure Set_KisitKapsami(Value: TKisitKapsami);
    function Get_KullaniciKodu: Integer;
    procedure Set_KullaniciKodu(Value: Integer);
    function Get_GrupKodu: Integer;
    procedure Set_GrupKodu(Value: Integer);
    function Get_VeriTabaniNesnesi: WideString;
    procedure Set_VeriTabaniNesnesi(const Value: WideString);
    function Get_SahaAdi: WideString;
    procedure Set_SahaAdi(const Value: WideString);
    function Get_NullKontroluYapilsin: WordBool;
    procedure Set_NullKontroluYapilsin(Value: WordBool);
    function Get_HataAciklama: WideString;
    procedure Set_HataAciklama(const Value: WideString);
    function Get_SQL: WideString;
    procedure Set_SQL(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IVTGuvenlik);
    procedure Disconnect; override;
    procedure SatirBaziGuvenlikEkle;
    property DefaultInterface: IVTGuvenlik read GetDefaultInterface;
    property KisitKapsami: TKisitKapsami read Get_KisitKapsami write Set_KisitKapsami;
    property KullaniciKodu: Integer read Get_KullaniciKodu write Set_KullaniciKodu;
    property GrupKodu: Integer read Get_GrupKodu write Set_GrupKodu;
    property VeriTabaniNesnesi: WideString read Get_VeriTabaniNesnesi write Set_VeriTabaniNesnesi;
    property SahaAdi: WideString read Get_SahaAdi write Set_SahaAdi;
    property NullKontroluYapilsin: WordBool read Get_NullKontroluYapilsin write Set_NullKontroluYapilsin;
    property HataAciklama: WideString read Get_HataAciklama write Set_HataAciklama;
    property SQL: WideString read Get_SQL write Set_SQL;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TVTGuvenlikProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TVTGuvenlik
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TVTGuvenlikProperties = class(TPersistent)
  private
    FServer:    TVTGuvenlik;
    function    GetDefaultInterface: IVTGuvenlik;
    constructor Create(AServer: TVTGuvenlik);
  protected
    function Get_KisitKapsami: TKisitKapsami;
    procedure Set_KisitKapsami(Value: TKisitKapsami);
    function Get_KullaniciKodu: Integer;
    procedure Set_KullaniciKodu(Value: Integer);
    function Get_GrupKodu: Integer;
    procedure Set_GrupKodu(Value: Integer);
    function Get_VeriTabaniNesnesi: WideString;
    procedure Set_VeriTabaniNesnesi(const Value: WideString);
    function Get_SahaAdi: WideString;
    procedure Set_SahaAdi(const Value: WideString);
    function Get_NullKontroluYapilsin: WordBool;
    procedure Set_NullKontroluYapilsin(Value: WordBool);
    function Get_HataAciklama: WideString;
    procedure Set_HataAciklama(const Value: WideString);
    function Get_SQL: WideString;
    procedure Set_SQL(const Value: WideString);
  public
    property DefaultInterface: IVTGuvenlik read GetDefaultInterface;
  published
    property KisitKapsami: TKisitKapsami read Get_KisitKapsami write Set_KisitKapsami;
    property KullaniciKodu: Integer read Get_KullaniciKodu write Set_KullaniciKodu;
    property GrupKodu: Integer read Get_GrupKodu write Set_GrupKodu;
    property VeriTabaniNesnesi: WideString read Get_VeriTabaniNesnesi write Set_VeriTabaniNesnesi;
    property SahaAdi: WideString read Get_SahaAdi write Set_SahaAdi;
    property NullKontroluYapilsin: WordBool read Get_NullKontroluYapilsin write Set_NullKontroluYapilsin;
    property HataAciklama: WideString read Get_HataAciklama write Set_HataAciklama;
    property SQL: WideString read Get_SQL write Set_SQL;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMaliyetMuhasebesi provides a Create and CreateRemote method to          
// create instances of the default interface IMaliyetMuhasebesi exposed by              
// the CoClass MaliyetMuhasebesi. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMaliyetMuhasebesi = class
    class function Create: IMaliyetMuhasebesi;
    class function CreateRemote(const MachineName: string): IMaliyetMuhasebesi;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMaliyetMuhasebesi
// Help String      : MaliyetMuhasebesi Object
// Default Interface: IMaliyetMuhasebesi
// Def. Intf. DISP? : No
// Event   Interface: IMaliyetMuhasebesiEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMaliyetMuhasebesiProperties= class;
{$ENDIF}
  TMaliyetMuhasebesi = class(TOleServer)
  private
    FOnInfo: TNotifyEvent;
    FIntf:        IMaliyetMuhasebesi;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMaliyetMuhasebesiProperties;
    function      GetServerProperties: TMaliyetMuhasebesiProperties;
{$ENDIF}
    function      GetDefaultInterface: IMaliyetMuhasebesi;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_AyKodu: Integer;
    procedure Set_AyKodu(Value: Integer);
    function Get_YilKodu: Integer;
    procedure Set_YilKodu(Value: Integer);
    function Get_YillikIslemYapilacak: WordBool;
    procedure Set_YillikIslemYapilacak(Value: WordBool);
    function Get_HazirlikYapilacak: WordBool;
    procedure Set_HazirlikYapilacak(Value: WordBool);
    function Get_MahsupOlusturulacak: WordBool;
    procedure Set_MahsupOlusturulacak(Value: WordBool);
    function Get_FarkMahsupOlusturulacak: WordBool;
    procedure Set_FarkMahsupOlusturulacak(Value: WordBool);
    function Get_FarkMahsupAyKodu: Integer;
    procedure Set_FarkMahsupAyKodu(Value: Integer);
    function Get_PaylastirmaHasTutar: Double;
    procedure Set_PaylastirmaHasTutar(Value: Double);
    function Get_GenelSafhaSayisi: Integer;
    procedure Set_GenelSafhaSayisi(Value: Integer);
    function Get_Message: WideString;
    procedure Set_Message(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IMaliyetMuhasebesi);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    procedure Calistir;
    property DefaultInterface: IMaliyetMuhasebesi read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property AyKodu: Integer read Get_AyKodu write Set_AyKodu;
    property YilKodu: Integer read Get_YilKodu write Set_YilKodu;
    property YillikIslemYapilacak: WordBool read Get_YillikIslemYapilacak write Set_YillikIslemYapilacak;
    property HazirlikYapilacak: WordBool read Get_HazirlikYapilacak write Set_HazirlikYapilacak;
    property MahsupOlusturulacak: WordBool read Get_MahsupOlusturulacak write Set_MahsupOlusturulacak;
    property FarkMahsupOlusturulacak: WordBool read Get_FarkMahsupOlusturulacak write Set_FarkMahsupOlusturulacak;
    property FarkMahsupAyKodu: Integer read Get_FarkMahsupAyKodu write Set_FarkMahsupAyKodu;
    property PaylastirmaHasTutar: Double read Get_PaylastirmaHasTutar write Set_PaylastirmaHasTutar;
    property GenelSafhaSayisi: Integer read Get_GenelSafhaSayisi write Set_GenelSafhaSayisi;
    property Message: WideString read Get_Message write Set_Message;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMaliyetMuhasebesiProperties read GetServerProperties;
{$ENDIF}
    property OnInfo: TNotifyEvent read FOnInfo write FOnInfo;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMaliyetMuhasebesi
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMaliyetMuhasebesiProperties = class(TPersistent)
  private
    FServer:    TMaliyetMuhasebesi;
    function    GetDefaultInterface: IMaliyetMuhasebesi;
    constructor Create(AServer: TMaliyetMuhasebesi);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_AyKodu: Integer;
    procedure Set_AyKodu(Value: Integer);
    function Get_YilKodu: Integer;
    procedure Set_YilKodu(Value: Integer);
    function Get_YillikIslemYapilacak: WordBool;
    procedure Set_YillikIslemYapilacak(Value: WordBool);
    function Get_HazirlikYapilacak: WordBool;
    procedure Set_HazirlikYapilacak(Value: WordBool);
    function Get_MahsupOlusturulacak: WordBool;
    procedure Set_MahsupOlusturulacak(Value: WordBool);
    function Get_FarkMahsupOlusturulacak: WordBool;
    procedure Set_FarkMahsupOlusturulacak(Value: WordBool);
    function Get_FarkMahsupAyKodu: Integer;
    procedure Set_FarkMahsupAyKodu(Value: Integer);
    function Get_PaylastirmaHasTutar: Double;
    procedure Set_PaylastirmaHasTutar(Value: Double);
    function Get_GenelSafhaSayisi: Integer;
    procedure Set_GenelSafhaSayisi(Value: Integer);
    function Get_Message: WideString;
    procedure Set_Message(const Value: WideString);
  public
    property DefaultInterface: IMaliyetMuhasebesi read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property AyKodu: Integer read Get_AyKodu write Set_AyKodu;
    property YilKodu: Integer read Get_YilKodu write Set_YilKodu;
    property YillikIslemYapilacak: WordBool read Get_YillikIslemYapilacak write Set_YillikIslemYapilacak;
    property HazirlikYapilacak: WordBool read Get_HazirlikYapilacak write Set_HazirlikYapilacak;
    property MahsupOlusturulacak: WordBool read Get_MahsupOlusturulacak write Set_MahsupOlusturulacak;
    property FarkMahsupOlusturulacak: WordBool read Get_FarkMahsupOlusturulacak write Set_FarkMahsupOlusturulacak;
    property FarkMahsupAyKodu: Integer read Get_FarkMahsupAyKodu write Set_FarkMahsupAyKodu;
    property PaylastirmaHasTutar: Double read Get_PaylastirmaHasTutar write Set_PaylastirmaHasTutar;
    property GenelSafhaSayisi: Integer read Get_GenelSafhaSayisi write Set_GenelSafhaSayisi;
    property Message: WideString read Get_Message write Set_Message;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoStokMaliyet provides a Create and CreateRemote method to          
// create instances of the default interface IStokMaliyet exposed by              
// the CoClass StokMaliyet. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStokMaliyet = class
    class function Create: IStokMaliyet;
    class function CreateRemote(const MachineName: string): IStokMaliyet;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStokMaliyet
// Help String      : StokMaliyet Object
// Default Interface: IStokMaliyet
// Def. Intf. DISP? : No
// Event   Interface: IStokMaliyetEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TStokMaliyetProperties= class;
{$ENDIF}
  TStokMaliyet = class(TOleServer)
  private
    FOnInfo: TNotifyEvent;
    FIntf:        IStokMaliyet;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TStokMaliyetProperties;
    function      GetServerProperties: TStokMaliyetProperties;
{$ENDIF}
    function      GetDefaultInterface: IStokMaliyet;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_YillikIslemYapilacak: WordBool;
    procedure Set_YillikIslemYapilacak(Value: WordBool);
    function Get_SubelerDahil: WordBool;
    procedure Set_SubelerDahil(Value: WordBool);
    function Get_SubeBazMaliyetHesapla: WordBool;
    procedure Set_SubeBazMaliyetHesapla(Value: WordBool);
    function Get_BasTarih: TDateTime;
    procedure Set_BasTarih(Value: TDateTime);
    function Get_BitTarih: TDateTime;
    procedure Set_BitTarih(Value: TDateTime);
    function Get_MaliyetMerkezSubeKodu: WideString;
    procedure Set_MaliyetMerkezSubeKodu(const Value: WideString);
    function Get_DonguSayisi: Integer;
    procedure Set_DonguSayisi(Value: Integer);
    function Get_SatIadeDonemORtFiyDegerlen: WordBool;
    procedure Set_SatIadeDonemORtFiyDegerlen(Value: WordBool);
    function Get_TurKisitlamasi: TTurKisit;
    procedure Set_TurKisitlamasi(Value: TTurKisit);
    function Get_MaliyetTipi: Integer;
    function Get_SQLWhereCaluse: WideString;
    procedure Set_SQLWhereCaluse(const Value: WideString);
    function Get_StokKodu: WideString;
    procedure Set_StokKodu(const Value: WideString);
    function Get_GrupKodu: WideString;
    procedure Set_GrupKodu(const Value: WideString);
    function Get_Kod_1: WideString;
    procedure Set_Kod_1(const Value: WideString);
    function Get_Kod_2: WideString;
    procedure Set_Kod_2(const Value: WideString);
    function Get_Message: WideString;
    procedure Set_Message(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IStokMaliyet);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    procedure Calistir;
    property DefaultInterface: IStokMaliyet read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property MaliyetTipi: Integer read Get_MaliyetTipi;
    property Message: WideString read Get_Message write Set_Message;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property YillikIslemYapilacak: WordBool read Get_YillikIslemYapilacak write Set_YillikIslemYapilacak;
    property SubelerDahil: WordBool read Get_SubelerDahil write Set_SubelerDahil;
    property SubeBazMaliyetHesapla: WordBool read Get_SubeBazMaliyetHesapla write Set_SubeBazMaliyetHesapla;
    property BasTarih: TDateTime read Get_BasTarih write Set_BasTarih;
    property BitTarih: TDateTime read Get_BitTarih write Set_BitTarih;
    property MaliyetMerkezSubeKodu: WideString read Get_MaliyetMerkezSubeKodu write Set_MaliyetMerkezSubeKodu;
    property DonguSayisi: Integer read Get_DonguSayisi write Set_DonguSayisi;
    property SatIadeDonemORtFiyDegerlen: WordBool read Get_SatIadeDonemORtFiyDegerlen write Set_SatIadeDonemORtFiyDegerlen;
    property TurKisitlamasi: TTurKisit read Get_TurKisitlamasi write Set_TurKisitlamasi;
    property SQLWhereCaluse: WideString read Get_SQLWhereCaluse write Set_SQLWhereCaluse;
    property StokKodu: WideString read Get_StokKodu write Set_StokKodu;
    property GrupKodu: WideString read Get_GrupKodu write Set_GrupKodu;
    property Kod_1: WideString read Get_Kod_1 write Set_Kod_1;
    property Kod_2: WideString read Get_Kod_2 write Set_Kod_2;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TStokMaliyetProperties read GetServerProperties;
{$ENDIF}
    property OnInfo: TNotifyEvent read FOnInfo write FOnInfo;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TStokMaliyet
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TStokMaliyetProperties = class(TPersistent)
  private
    FServer:    TStokMaliyet;
    function    GetDefaultInterface: IStokMaliyet;
    constructor Create(AServer: TStokMaliyet);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_YillikIslemYapilacak: WordBool;
    procedure Set_YillikIslemYapilacak(Value: WordBool);
    function Get_SubelerDahil: WordBool;
    procedure Set_SubelerDahil(Value: WordBool);
    function Get_SubeBazMaliyetHesapla: WordBool;
    procedure Set_SubeBazMaliyetHesapla(Value: WordBool);
    function Get_BasTarih: TDateTime;
    procedure Set_BasTarih(Value: TDateTime);
    function Get_BitTarih: TDateTime;
    procedure Set_BitTarih(Value: TDateTime);
    function Get_MaliyetMerkezSubeKodu: WideString;
    procedure Set_MaliyetMerkezSubeKodu(const Value: WideString);
    function Get_DonguSayisi: Integer;
    procedure Set_DonguSayisi(Value: Integer);
    function Get_SatIadeDonemORtFiyDegerlen: WordBool;
    procedure Set_SatIadeDonemORtFiyDegerlen(Value: WordBool);
    function Get_TurKisitlamasi: TTurKisit;
    procedure Set_TurKisitlamasi(Value: TTurKisit);
    function Get_MaliyetTipi: Integer;
    function Get_SQLWhereCaluse: WideString;
    procedure Set_SQLWhereCaluse(const Value: WideString);
    function Get_StokKodu: WideString;
    procedure Set_StokKodu(const Value: WideString);
    function Get_GrupKodu: WideString;
    procedure Set_GrupKodu(const Value: WideString);
    function Get_Kod_1: WideString;
    procedure Set_Kod_1(const Value: WideString);
    function Get_Kod_2: WideString;
    procedure Set_Kod_2(const Value: WideString);
    function Get_Message: WideString;
    procedure Set_Message(const Value: WideString);
  public
    property DefaultInterface: IStokMaliyet read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property YillikIslemYapilacak: WordBool read Get_YillikIslemYapilacak write Set_YillikIslemYapilacak;
    property SubelerDahil: WordBool read Get_SubelerDahil write Set_SubelerDahil;
    property SubeBazMaliyetHesapla: WordBool read Get_SubeBazMaliyetHesapla write Set_SubeBazMaliyetHesapla;
    property BasTarih: TDateTime read Get_BasTarih write Set_BasTarih;
    property BitTarih: TDateTime read Get_BitTarih write Set_BitTarih;
    property MaliyetMerkezSubeKodu: WideString read Get_MaliyetMerkezSubeKodu write Set_MaliyetMerkezSubeKodu;
    property DonguSayisi: Integer read Get_DonguSayisi write Set_DonguSayisi;
    property SatIadeDonemORtFiyDegerlen: WordBool read Get_SatIadeDonemORtFiyDegerlen write Set_SatIadeDonemORtFiyDegerlen;
    property TurKisitlamasi: TTurKisit read Get_TurKisitlamasi write Set_TurKisitlamasi;
    property SQLWhereCaluse: WideString read Get_SQLWhereCaluse write Set_SQLWhereCaluse;
    property StokKodu: WideString read Get_StokKodu write Set_StokKodu;
    property GrupKodu: WideString read Get_GrupKodu write Set_GrupKodu;
    property Kod_1: WideString read Get_Kod_1 write Set_Kod_1;
    property Kod_2: WideString read Get_Kod_2 write Set_Kod_2;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoAmbarFisMuh provides a Create and CreateRemote method to          
// create instances of the default interface IAmbarFisMuh exposed by              
// the CoClass AmbarFisMuh. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAmbarFisMuh = class
    class function Create: IAmbarFisMuh;
    class function CreateRemote(const MachineName: string): IAmbarFisMuh;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAmbarFisMuh
// Help String      : AmbarFisMuh Object
// Default Interface: IAmbarFisMuh
// Def. Intf. DISP? : No
// Event   Interface: IAmbarFisMuhEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TAmbarFisMuhProperties= class;
{$ENDIF}
  TAmbarFisMuh = class(TOleServer)
  private
    FIntf:        IAmbarFisMuh;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TAmbarFisMuhProperties;
    function      GetServerProperties: TAmbarFisMuhProperties;
{$ENDIF}
    function      GetDefaultInterface: IAmbarFisMuh;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_Ay: WideString;
    procedure Set_Ay(const Value: WideString);
    function Get_Yil: WideString;
    procedure Set_Yil(const Value: WideString);
    function Get_Gun: Integer;
    procedure Set_Gun(Value: Integer);
    function Get_Aciklama: WideString;
    procedure Set_Aciklama(const Value: WideString);
    function Get_GrupKod1: WideString;
    procedure Set_GrupKod1(const Value: WideString);
    function Get_GrupKod2: WideString;
    procedure Set_GrupKod2(const Value: WideString);
    function Get_AmbFisNoKirilimliAktar: WordBool;
    procedure Set_AmbFisNoKirilimliAktar(Value: WordBool);
    function Get_SubelerDahil: WordBool;
    procedure Set_SubelerDahil(Value: WordBool);
    function Get_HesapTipi: THesTipi;
    procedure Set_HesapTipi(Value: THesTipi);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IAmbarFisMuh);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    procedure Calistir;
    property DefaultInterface: IAmbarFisMuh read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property Ay: WideString read Get_Ay write Set_Ay;
    property Yil: WideString read Get_Yil write Set_Yil;
    property Gun: Integer read Get_Gun write Set_Gun;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property GrupKod1: WideString read Get_GrupKod1 write Set_GrupKod1;
    property GrupKod2: WideString read Get_GrupKod2 write Set_GrupKod2;
    property AmbFisNoKirilimliAktar: WordBool read Get_AmbFisNoKirilimliAktar write Set_AmbFisNoKirilimliAktar;
    property SubelerDahil: WordBool read Get_SubelerDahil write Set_SubelerDahil;
    property HesapTipi: THesTipi read Get_HesapTipi write Set_HesapTipi;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TAmbarFisMuhProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TAmbarFisMuh
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TAmbarFisMuhProperties = class(TPersistent)
  private
    FServer:    TAmbarFisMuh;
    function    GetDefaultInterface: IAmbarFisMuh;
    constructor Create(AServer: TAmbarFisMuh);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_Ay: WideString;
    procedure Set_Ay(const Value: WideString);
    function Get_Yil: WideString;
    procedure Set_Yil(const Value: WideString);
    function Get_Gun: Integer;
    procedure Set_Gun(Value: Integer);
    function Get_Aciklama: WideString;
    procedure Set_Aciklama(const Value: WideString);
    function Get_GrupKod1: WideString;
    procedure Set_GrupKod1(const Value: WideString);
    function Get_GrupKod2: WideString;
    procedure Set_GrupKod2(const Value: WideString);
    function Get_AmbFisNoKirilimliAktar: WordBool;
    procedure Set_AmbFisNoKirilimliAktar(Value: WordBool);
    function Get_SubelerDahil: WordBool;
    procedure Set_SubelerDahil(Value: WordBool);
    function Get_HesapTipi: THesTipi;
    procedure Set_HesapTipi(Value: THesTipi);
  public
    property DefaultInterface: IAmbarFisMuh read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property Ay: WideString read Get_Ay write Set_Ay;
    property Yil: WideString read Get_Yil write Set_Yil;
    property Gun: Integer read Get_Gun write Set_Gun;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property GrupKod1: WideString read Get_GrupKod1 write Set_GrupKod1;
    property GrupKod2: WideString read Get_GrupKod2 write Set_GrupKod2;
    property AmbFisNoKirilimliAktar: WordBool read Get_AmbFisNoKirilimliAktar write Set_AmbFisNoKirilimliAktar;
    property SubelerDahil: WordBool read Get_SubelerDahil write Set_SubelerDahil;
    property HesapTipi: THesTipi read Get_HesapTipi write Set_HesapTipi;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDepTransMuh provides a Create and CreateRemote method to          
// create instances of the default interface IDepTransMuh exposed by              
// the CoClass DepTransMuh. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDepTransMuh = class
    class function Create: IDepTransMuh;
    class function CreateRemote(const MachineName: string): IDepTransMuh;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDepTransMuh
// Help String      : DepTransMuh Object
// Default Interface: IDepTransMuh
// Def. Intf. DISP? : No
// Event   Interface: IDepTransMuhEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDepTransMuhProperties= class;
{$ENDIF}
  TDepTransMuh = class(TOleServer)
  private
    FIntf:        IDepTransMuh;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDepTransMuhProperties;
    function      GetServerProperties: TDepTransMuhProperties;
{$ENDIF}
    function      GetDefaultInterface: IDepTransMuh;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_YilKodu: WideString;
    procedure Set_YilKodu(const Value: WideString);
    function Get_AyKodu: WideString;
    procedure Set_AyKodu(const Value: WideString);
    function Get_MuhtelifTipHarDahEt: WordBool;
    procedure Set_MuhtelifTipHarDahEt(Value: WordBool);
    function Get_EntBilMerkezdeOlus: WordBool;
    procedure Set_EntBilMerkezdeOlus(Value: WordBool);
    function Get_FarkTransferMuhKodu: WideString;
    procedure Set_FarkTransferMuhKodu(const Value: WideString);
    function Get_CikisHesapTipi: THesTipi;
    procedure Set_CikisHesapTipi(Value: THesTipi);
    function Get_MuhTipi: TMuhasebelesTipi;
    procedure Set_MuhTipi(Value: TMuhasebelesTipi);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDepTransMuh);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    procedure Calistir;
    property DefaultInterface: IDepTransMuh read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property YilKodu: WideString read Get_YilKodu write Set_YilKodu;
    property AyKodu: WideString read Get_AyKodu write Set_AyKodu;
    property MuhtelifTipHarDahEt: WordBool read Get_MuhtelifTipHarDahEt write Set_MuhtelifTipHarDahEt;
    property EntBilMerkezdeOlus: WordBool read Get_EntBilMerkezdeOlus write Set_EntBilMerkezdeOlus;
    property FarkTransferMuhKodu: WideString read Get_FarkTransferMuhKodu write Set_FarkTransferMuhKodu;
    property CikisHesapTipi: THesTipi read Get_CikisHesapTipi write Set_CikisHesapTipi;
    property MuhTipi: TMuhasebelesTipi read Get_MuhTipi write Set_MuhTipi;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDepTransMuhProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDepTransMuh
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDepTransMuhProperties = class(TPersistent)
  private
    FServer:    TDepTransMuh;
    function    GetDefaultInterface: IDepTransMuh;
    constructor Create(AServer: TDepTransMuh);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_YilKodu: WideString;
    procedure Set_YilKodu(const Value: WideString);
    function Get_AyKodu: WideString;
    procedure Set_AyKodu(const Value: WideString);
    function Get_MuhtelifTipHarDahEt: WordBool;
    procedure Set_MuhtelifTipHarDahEt(Value: WordBool);
    function Get_EntBilMerkezdeOlus: WordBool;
    procedure Set_EntBilMerkezdeOlus(Value: WordBool);
    function Get_FarkTransferMuhKodu: WideString;
    procedure Set_FarkTransferMuhKodu(const Value: WideString);
    function Get_CikisHesapTipi: THesTipi;
    procedure Set_CikisHesapTipi(Value: THesTipi);
    function Get_MuhTipi: TMuhasebelesTipi;
    procedure Set_MuhTipi(Value: TMuhasebelesTipi);
  public
    property DefaultInterface: IDepTransMuh read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property YilKodu: WideString read Get_YilKodu write Set_YilKodu;
    property AyKodu: WideString read Get_AyKodu write Set_AyKodu;
    property MuhtelifTipHarDahEt: WordBool read Get_MuhtelifTipHarDahEt write Set_MuhtelifTipHarDahEt;
    property EntBilMerkezdeOlus: WordBool read Get_EntBilMerkezdeOlus write Set_EntBilMerkezdeOlus;
    property FarkTransferMuhKodu: WideString read Get_FarkTransferMuhKodu write Set_FarkTransferMuhKodu;
    property CikisHesapTipi: THesTipi read Get_CikisHesapTipi write Set_CikisHesapTipi;
    property MuhTipi: TMuhasebelesTipi read Get_MuhTipi write Set_MuhTipi;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoKasaBakiye provides a Create and CreateRemote method to          
// create instances of the default interface IKasaBakiye exposed by              
// the CoClass KasaBakiye. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoKasaBakiye = class
    class function Create: IKasaBakiye;
    class function CreateRemote(const MachineName: string): IKasaBakiye;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TKasaBakiye
// Help String      : KasaBakiye Object
// Default Interface: IKasaBakiye
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TKasaBakiyeProperties= class;
{$ENDIF}
  TKasaBakiye = class(TOleServer)
  private
    FIntf:        IKasaBakiye;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TKasaBakiyeProperties;
    function      GetServerProperties: TKasaBakiyeProperties;
{$ENDIF}
    function      GetDefaultInterface: IKasaBakiye;
  protected
    procedure InitServerData; override;
    function Get_KsMas_Kod: WideString;
    procedure Set_KsMas_Kod(const Value: WideString);
    function Get_Giris: Double;
    procedure Set_Giris(Value: Double);
    function Get_Cikis: Double;
    procedure Set_Cikis(Value: Double);
    function Get_Devir: Double;
    procedure Set_Devir(Value: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IKasaBakiye);
    procedure Disconnect; override;
    property DefaultInterface: IKasaBakiye read GetDefaultInterface;
    property KsMas_Kod: WideString read Get_KsMas_Kod write Set_KsMas_Kod;
    property Giris: Double read Get_Giris write Set_Giris;
    property Cikis: Double read Get_Cikis write Set_Cikis;
    property Devir: Double read Get_Devir write Set_Devir;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TKasaBakiyeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TKasaBakiye
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TKasaBakiyeProperties = class(TPersistent)
  private
    FServer:    TKasaBakiye;
    function    GetDefaultInterface: IKasaBakiye;
    constructor Create(AServer: TKasaBakiye);
  protected
    function Get_KsMas_Kod: WideString;
    procedure Set_KsMas_Kod(const Value: WideString);
    function Get_Giris: Double;
    procedure Set_Giris(Value: Double);
    function Get_Cikis: Double;
    procedure Set_Cikis(Value: Double);
    function Get_Devir: Double;
    procedure Set_Devir(Value: Double);
  public
    property DefaultInterface: IKasaBakiye read GetDefaultInterface;
  published
    property KsMas_Kod: WideString read Get_KsMas_Kod write Set_KsMas_Kod;
    property Giris: Double read Get_Giris write Set_Giris;
    property Cikis: Double read Get_Cikis write Set_Cikis;
    property Devir: Double read Get_Devir write Set_Devir;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDekont provides a Create and CreateRemote method to          
// create instances of the default interface IDekont exposed by              
// the CoClass Dekont. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDekont = class
    class function Create: IDekont;
    class function CreateRemote(const MachineName: string): IDekont;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDekont
// Help String      : Dekont Object
// Default Interface: IDekont
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDekontProperties= class;
{$ENDIF}
  TDekont = class(TOleServer)
  private
    FIntf:        IDekont;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDekontProperties;
    function      GetServerProperties: TDekontProperties;
{$ENDIF}
    function      GetDefaultInterface: IDekont;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_IncKeyNo: Integer;
    procedure Set_IncKeyNo(Value: Integer);
    function Get_Seri_No: WideString;
    procedure Set_Seri_No(const Value: WideString);
    function Get_Dekont_No: Integer;
    procedure Set_Dekont_No(Value: Integer);
    function Get_Sira_No: Integer;
    procedure Set_Sira_No(Value: Integer);
    function Get_Fisno: WideString;
    procedure Set_Fisno(const Value: WideString);
    function Get_Tarih: TDateTime;
    procedure Set_Tarih(Value: TDateTime);
    function Get_ValorTrh: TDateTime;
    procedure Set_ValorTrh(Value: TDateTime);
    function Get_ValorGun: Integer;
    procedure Set_ValorGun(Value: Integer);
    function Get_C_M: WideString;
    procedure Set_C_M(const Value: WideString);
    function Get_Kod: WideString;
    procedure Set_Kod(const Value: WideString);
    function Get_Referans: WideString;
    procedure Set_Referans(const Value: WideString);
    function Get_CRapKod: WideString;
    procedure Set_CRapKod(const Value: WideString);
    function Get_Plasiyer: WideString;
    procedure Set_Plasiyer(const Value: WideString);
    function Get_Aciklama1: WideString;
    procedure Set_Aciklama1(const Value: WideString);
    function Get_Aciklama2: WideString;
    procedure Set_Aciklama2(const Value: WideString);
    function Get_Aciklama3: WideString;
    procedure Set_Aciklama3(const Value: WideString);
    function Get_Aciklama4: WideString;
    procedure Set_Aciklama4(const Value: WideString);
    function Get_B_A: WideString;
    procedure Set_B_A(const Value: WideString);
    function Get_Tutar: Double;
    procedure Set_Tutar(Value: Double);
    function Get_Kdv_Oran: Double;
    procedure Set_Kdv_Oran(Value: Double);
    function Get_Kdv_Dahil: WideString;
    procedure Set_Kdv_Dahil(const Value: WideString);
    function Get_Genel_KDV: WideString;
    procedure Set_Genel_KDV(const Value: WideString);
    function Get_Miktar: Double;
    procedure Set_Miktar(Value: Double);
    function Get_DovTL: WideString;
    procedure Set_DovTL(const Value: WideString);
    function Get_DOVTIP: Integer;
    procedure Set_DOVTIP(Value: Integer);
    function Get_DOVTUT: Double;
    procedure Set_DOVTUT(Value: Double);
    function Get_Yedek1: WideString;
    procedure Set_Yedek1(const Value: WideString);
    function Get_Yedek2: WideString;
    procedure Set_Yedek2(const Value: WideString);
    function Get_Yedek3: Double;
    procedure Set_Yedek3(Value: Double);
    function Get_Yedek4: Double;
    procedure Set_Yedek4(Value: Double);
    function Get_Yedek5: Double;
    procedure Set_Yedek5(Value: Double);
    function Get_Yedek6: WideString;
    procedure Set_Yedek6(const Value: WideString);
    function Get_Yedek7: Integer;
    procedure Set_Yedek7(Value: Integer);
    function Get_Yedek8: Integer;
    procedure Set_Yedek8(Value: Integer);
    function Get_Yedek9: Integer;
    procedure Set_Yedek9(Value: Integer);
    function Get_Yedek10: TDateTime;
    procedure Set_Yedek10(Value: TDateTime);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_EXPORTREFNO: WideString;
    procedure Set_EXPORTREFNO(const Value: WideString);
    function Get_EXEXPENSETYPE: Integer;
    procedure Set_EXEXPENSETYPE(Value: Integer);
    function Get_CMISLENECEK: WideString;
    procedure Set_CMISLENECEK(const Value: WideString);
    function Get_SubeGirilecek: WideString;
    procedure Set_SubeGirilecek(const Value: WideString);
    function Get_KDVDOVIZ: Double;
    procedure Set_KDVDOVIZ(Value: Double);
    function Get_Entegrefkey: WideString;
    procedure Set_Entegrefkey(const Value: WideString);
    function Get_RAPOR_KODU2: WideString;
    procedure Set_RAPOR_KODU2(const Value: WideString);
    function Get_OtoVadeGunuGetir: WordBool;
    procedure Set_OtoVadeGunuGetir(Value: WordBool);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDekont);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    function CDekont(Opr: TDekOpr): WordBool;
    function MDekont(Opr: TDekOpr): WordBool;
    function BDekont(Opr: TDekOpr): WordBool;
    function SDekont(Opr: TDekOpr): WordBool;
    property DefaultInterface: IDekont read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property IncKeyNo: Integer read Get_IncKeyNo write Set_IncKeyNo;
    property Seri_No: WideString read Get_Seri_No write Set_Seri_No;
    property Dekont_No: Integer read Get_Dekont_No write Set_Dekont_No;
    property Sira_No: Integer read Get_Sira_No write Set_Sira_No;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property ValorTrh: TDateTime read Get_ValorTrh write Set_ValorTrh;
    property ValorGun: Integer read Get_ValorGun write Set_ValorGun;
    property C_M: WideString read Get_C_M write Set_C_M;
    property Kod: WideString read Get_Kod write Set_Kod;
    property Referans: WideString read Get_Referans write Set_Referans;
    property CRapKod: WideString read Get_CRapKod write Set_CRapKod;
    property Plasiyer: WideString read Get_Plasiyer write Set_Plasiyer;
    property Aciklama1: WideString read Get_Aciklama1 write Set_Aciklama1;
    property Aciklama2: WideString read Get_Aciklama2 write Set_Aciklama2;
    property Aciklama3: WideString read Get_Aciklama3 write Set_Aciklama3;
    property Aciklama4: WideString read Get_Aciklama4 write Set_Aciklama4;
    property B_A: WideString read Get_B_A write Set_B_A;
    property Tutar: Double read Get_Tutar write Set_Tutar;
    property Kdv_Oran: Double read Get_Kdv_Oran write Set_Kdv_Oran;
    property Kdv_Dahil: WideString read Get_Kdv_Dahil write Set_Kdv_Dahil;
    property Genel_KDV: WideString read Get_Genel_KDV write Set_Genel_KDV;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property DovTL: WideString read Get_DovTL write Set_DovTL;
    property DOVTIP: Integer read Get_DOVTIP write Set_DOVTIP;
    property DOVTUT: Double read Get_DOVTUT write Set_DOVTUT;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: Double read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property Yedek10: TDateTime read Get_Yedek10 write Set_Yedek10;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property EXPORTREFNO: WideString read Get_EXPORTREFNO write Set_EXPORTREFNO;
    property EXEXPENSETYPE: Integer read Get_EXEXPENSETYPE write Set_EXEXPENSETYPE;
    property CMISLENECEK: WideString read Get_CMISLENECEK write Set_CMISLENECEK;
    property SubeGirilecek: WideString read Get_SubeGirilecek write Set_SubeGirilecek;
    property KDVDOVIZ: Double read Get_KDVDOVIZ write Set_KDVDOVIZ;
    property Entegrefkey: WideString read Get_Entegrefkey write Set_Entegrefkey;
    property RAPOR_KODU2: WideString read Get_RAPOR_KODU2 write Set_RAPOR_KODU2;
    property OtoVadeGunuGetir: WordBool read Get_OtoVadeGunuGetir write Set_OtoVadeGunuGetir;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDekontProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDekont
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDekontProperties = class(TPersistent)
  private
    FServer:    TDekont;
    function    GetDefaultInterface: IDekont;
    constructor Create(AServer: TDekont);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_IncKeyNo: Integer;
    procedure Set_IncKeyNo(Value: Integer);
    function Get_Seri_No: WideString;
    procedure Set_Seri_No(const Value: WideString);
    function Get_Dekont_No: Integer;
    procedure Set_Dekont_No(Value: Integer);
    function Get_Sira_No: Integer;
    procedure Set_Sira_No(Value: Integer);
    function Get_Fisno: WideString;
    procedure Set_Fisno(const Value: WideString);
    function Get_Tarih: TDateTime;
    procedure Set_Tarih(Value: TDateTime);
    function Get_ValorTrh: TDateTime;
    procedure Set_ValorTrh(Value: TDateTime);
    function Get_ValorGun: Integer;
    procedure Set_ValorGun(Value: Integer);
    function Get_C_M: WideString;
    procedure Set_C_M(const Value: WideString);
    function Get_Kod: WideString;
    procedure Set_Kod(const Value: WideString);
    function Get_Referans: WideString;
    procedure Set_Referans(const Value: WideString);
    function Get_CRapKod: WideString;
    procedure Set_CRapKod(const Value: WideString);
    function Get_Plasiyer: WideString;
    procedure Set_Plasiyer(const Value: WideString);
    function Get_Aciklama1: WideString;
    procedure Set_Aciklama1(const Value: WideString);
    function Get_Aciklama2: WideString;
    procedure Set_Aciklama2(const Value: WideString);
    function Get_Aciklama3: WideString;
    procedure Set_Aciklama3(const Value: WideString);
    function Get_Aciklama4: WideString;
    procedure Set_Aciklama4(const Value: WideString);
    function Get_B_A: WideString;
    procedure Set_B_A(const Value: WideString);
    function Get_Tutar: Double;
    procedure Set_Tutar(Value: Double);
    function Get_Kdv_Oran: Double;
    procedure Set_Kdv_Oran(Value: Double);
    function Get_Kdv_Dahil: WideString;
    procedure Set_Kdv_Dahil(const Value: WideString);
    function Get_Genel_KDV: WideString;
    procedure Set_Genel_KDV(const Value: WideString);
    function Get_Miktar: Double;
    procedure Set_Miktar(Value: Double);
    function Get_DovTL: WideString;
    procedure Set_DovTL(const Value: WideString);
    function Get_DOVTIP: Integer;
    procedure Set_DOVTIP(Value: Integer);
    function Get_DOVTUT: Double;
    procedure Set_DOVTUT(Value: Double);
    function Get_Yedek1: WideString;
    procedure Set_Yedek1(const Value: WideString);
    function Get_Yedek2: WideString;
    procedure Set_Yedek2(const Value: WideString);
    function Get_Yedek3: Double;
    procedure Set_Yedek3(Value: Double);
    function Get_Yedek4: Double;
    procedure Set_Yedek4(Value: Double);
    function Get_Yedek5: Double;
    procedure Set_Yedek5(Value: Double);
    function Get_Yedek6: WideString;
    procedure Set_Yedek6(const Value: WideString);
    function Get_Yedek7: Integer;
    procedure Set_Yedek7(Value: Integer);
    function Get_Yedek8: Integer;
    procedure Set_Yedek8(Value: Integer);
    function Get_Yedek9: Integer;
    procedure Set_Yedek9(Value: Integer);
    function Get_Yedek10: TDateTime;
    procedure Set_Yedek10(Value: TDateTime);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_EXPORTREFNO: WideString;
    procedure Set_EXPORTREFNO(const Value: WideString);
    function Get_EXEXPENSETYPE: Integer;
    procedure Set_EXEXPENSETYPE(Value: Integer);
    function Get_CMISLENECEK: WideString;
    procedure Set_CMISLENECEK(const Value: WideString);
    function Get_SubeGirilecek: WideString;
    procedure Set_SubeGirilecek(const Value: WideString);
    function Get_KDVDOVIZ: Double;
    procedure Set_KDVDOVIZ(Value: Double);
    function Get_Entegrefkey: WideString;
    procedure Set_Entegrefkey(const Value: WideString);
    function Get_RAPOR_KODU2: WideString;
    procedure Set_RAPOR_KODU2(const Value: WideString);
    function Get_OtoVadeGunuGetir: WordBool;
    procedure Set_OtoVadeGunuGetir(Value: WordBool);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
  public
    property DefaultInterface: IDekont read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property IncKeyNo: Integer read Get_IncKeyNo write Set_IncKeyNo;
    property Seri_No: WideString read Get_Seri_No write Set_Seri_No;
    property Dekont_No: Integer read Get_Dekont_No write Set_Dekont_No;
    property Sira_No: Integer read Get_Sira_No write Set_Sira_No;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property ValorTrh: TDateTime read Get_ValorTrh write Set_ValorTrh;
    property ValorGun: Integer read Get_ValorGun write Set_ValorGun;
    property C_M: WideString read Get_C_M write Set_C_M;
    property Kod: WideString read Get_Kod write Set_Kod;
    property Referans: WideString read Get_Referans write Set_Referans;
    property CRapKod: WideString read Get_CRapKod write Set_CRapKod;
    property Plasiyer: WideString read Get_Plasiyer write Set_Plasiyer;
    property Aciklama1: WideString read Get_Aciklama1 write Set_Aciklama1;
    property Aciklama2: WideString read Get_Aciklama2 write Set_Aciklama2;
    property Aciklama3: WideString read Get_Aciklama3 write Set_Aciklama3;
    property Aciklama4: WideString read Get_Aciklama4 write Set_Aciklama4;
    property B_A: WideString read Get_B_A write Set_B_A;
    property Tutar: Double read Get_Tutar write Set_Tutar;
    property Kdv_Oran: Double read Get_Kdv_Oran write Set_Kdv_Oran;
    property Kdv_Dahil: WideString read Get_Kdv_Dahil write Set_Kdv_Dahil;
    property Genel_KDV: WideString read Get_Genel_KDV write Set_Genel_KDV;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property DovTL: WideString read Get_DovTL write Set_DovTL;
    property DOVTIP: Integer read Get_DOVTIP write Set_DOVTIP;
    property DOVTUT: Double read Get_DOVTUT write Set_DOVTUT;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: Double read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property Yedek10: TDateTime read Get_Yedek10 write Set_Yedek10;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property EXPORTREFNO: WideString read Get_EXPORTREFNO write Set_EXPORTREFNO;
    property EXEXPENSETYPE: Integer read Get_EXEXPENSETYPE write Set_EXEXPENSETYPE;
    property CMISLENECEK: WideString read Get_CMISLENECEK write Set_CMISLENECEK;
    property SubeGirilecek: WideString read Get_SubeGirilecek write Set_SubeGirilecek;
    property KDVDOVIZ: Double read Get_KDVDOVIZ write Set_KDVDOVIZ;
    property Entegrefkey: WideString read Get_Entegrefkey write Set_Entegrefkey;
    property RAPOR_KODU2: WideString read Get_RAPOR_KODU2 write Set_RAPOR_KODU2;
    property OtoVadeGunuGetir: WordBool read Get_OtoVadeGunuGetir write Set_OtoVadeGunuGetir;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDekCekSen provides a Create and CreateRemote method to          
// create instances of the default interface IDekCekSen exposed by              
// the CoClass DekCekSen. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDekCekSen = class
    class function Create: IDekCekSen;
    class function CreateRemote(const MachineName: string): IDekCekSen;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDekCekSen
// Help String      : DekCekSen Object
// Default Interface: IDekCekSen
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDekCekSenProperties= class;
{$ENDIF}
  TDekCekSen = class(TOleServer)
  private
    FIntf:        IDekCekSen;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDekCekSenProperties;
    function      GetServerProperties: TDekCekSenProperties;
{$ENDIF}
    function      GetDefaultInterface: IDekCekSen;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_SC_NO: WideString;
    procedure Set_SC_NO(const Value: WideString);
    function Get_Seri: WideString;
    procedure Set_Seri(const Value: WideString);
    function Get_Dekont_Tarihi: TDateTime;
    procedure Set_Dekont_Tarihi(Value: TDateTime);
    function Get_TTHesap_Kodu: WideString;
    procedure Set_TTHesap_Kodu(const Value: WideString);
    function Get_DovizKuru: Double;
    procedure Set_DovizKuru(Value: Double);
    function Get_TahsilMasraf: Double;
    procedure Set_TahsilMasraf(Value: Double);
    function Get_Tutar: Double;
    procedure Set_Tutar(Value: Double);
    function Get_GiderHesapKodu: WideString;
    procedure Set_GiderHesapKodu(const Value: WideString);
    function Get_BankaBorcBedel: Double;
    procedure Set_BankaBorcBedel(Value: Double);
    function Get_VirmanHesapKodu: WideString;
    procedure Set_VirmanHesapKodu(const Value: WideString);
    function Get_AlacakCari: WideString;
    procedure Set_AlacakCari(const Value: WideString);
    function Get_BorcCari: WideString;
    procedure Set_BorcCari(const Value: WideString);
    function Get_Plasiyer_Kodu: WideString;
    procedure Set_Plasiyer_Kodu(const Value: WideString);
    function Get_Aciklama: WideString;
    procedure Set_Aciklama(const Value: WideString);
    function Get_Fisno: WideString;
    procedure Set_Fisno(const Value: WideString);
    function Get_CariRaporKodu: WideString;
    procedure Set_CariRaporKodu(const Value: WideString);
    function Get_Islem_Tarihi: TDateTime;
    procedure Set_Islem_Tarihi(Value: TDateTime);
    function Get_C_M: WideString;
    procedure Set_C_M(const Value: WideString);
    function Get_Banka_Kodu: WideString;
    procedure Set_Banka_Kodu(const Value: WideString);
    function Get_KURFARKI: Double;
    procedure Set_KURFARKI(Value: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDekCekSen);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    function CSDOdeme(Tablo: TCekSenType): WordBool;
    function BCSDOdeme(Tablo: TCekSenType): WordBool;
    property DefaultInterface: IDekCekSen read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property SC_NO: WideString read Get_SC_NO write Set_SC_NO;
    property Seri: WideString read Get_Seri write Set_Seri;
    property Dekont_Tarihi: TDateTime read Get_Dekont_Tarihi write Set_Dekont_Tarihi;
    property TTHesap_Kodu: WideString read Get_TTHesap_Kodu write Set_TTHesap_Kodu;
    property DovizKuru: Double read Get_DovizKuru write Set_DovizKuru;
    property TahsilMasraf: Double read Get_TahsilMasraf write Set_TahsilMasraf;
    property Tutar: Double read Get_Tutar write Set_Tutar;
    property GiderHesapKodu: WideString read Get_GiderHesapKodu write Set_GiderHesapKodu;
    property BankaBorcBedel: Double read Get_BankaBorcBedel write Set_BankaBorcBedel;
    property VirmanHesapKodu: WideString read Get_VirmanHesapKodu write Set_VirmanHesapKodu;
    property AlacakCari: WideString read Get_AlacakCari write Set_AlacakCari;
    property BorcCari: WideString read Get_BorcCari write Set_BorcCari;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property CariRaporKodu: WideString read Get_CariRaporKodu write Set_CariRaporKodu;
    property Islem_Tarihi: TDateTime read Get_Islem_Tarihi write Set_Islem_Tarihi;
    property C_M: WideString read Get_C_M write Set_C_M;
    property Banka_Kodu: WideString read Get_Banka_Kodu write Set_Banka_Kodu;
    property KURFARKI: Double read Get_KURFARKI write Set_KURFARKI;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDekCekSenProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDekCekSen
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDekCekSenProperties = class(TPersistent)
  private
    FServer:    TDekCekSen;
    function    GetDefaultInterface: IDekCekSen;
    constructor Create(AServer: TDekCekSen);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_SC_NO: WideString;
    procedure Set_SC_NO(const Value: WideString);
    function Get_Seri: WideString;
    procedure Set_Seri(const Value: WideString);
    function Get_Dekont_Tarihi: TDateTime;
    procedure Set_Dekont_Tarihi(Value: TDateTime);
    function Get_TTHesap_Kodu: WideString;
    procedure Set_TTHesap_Kodu(const Value: WideString);
    function Get_DovizKuru: Double;
    procedure Set_DovizKuru(Value: Double);
    function Get_TahsilMasraf: Double;
    procedure Set_TahsilMasraf(Value: Double);
    function Get_Tutar: Double;
    procedure Set_Tutar(Value: Double);
    function Get_GiderHesapKodu: WideString;
    procedure Set_GiderHesapKodu(const Value: WideString);
    function Get_BankaBorcBedel: Double;
    procedure Set_BankaBorcBedel(Value: Double);
    function Get_VirmanHesapKodu: WideString;
    procedure Set_VirmanHesapKodu(const Value: WideString);
    function Get_AlacakCari: WideString;
    procedure Set_AlacakCari(const Value: WideString);
    function Get_BorcCari: WideString;
    procedure Set_BorcCari(const Value: WideString);
    function Get_Plasiyer_Kodu: WideString;
    procedure Set_Plasiyer_Kodu(const Value: WideString);
    function Get_Aciklama: WideString;
    procedure Set_Aciklama(const Value: WideString);
    function Get_Fisno: WideString;
    procedure Set_Fisno(const Value: WideString);
    function Get_CariRaporKodu: WideString;
    procedure Set_CariRaporKodu(const Value: WideString);
    function Get_Islem_Tarihi: TDateTime;
    procedure Set_Islem_Tarihi(Value: TDateTime);
    function Get_C_M: WideString;
    procedure Set_C_M(const Value: WideString);
    function Get_Banka_Kodu: WideString;
    procedure Set_Banka_Kodu(const Value: WideString);
    function Get_KURFARKI: Double;
    procedure Set_KURFARKI(Value: Double);
  public
    property DefaultInterface: IDekCekSen read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property SC_NO: WideString read Get_SC_NO write Set_SC_NO;
    property Seri: WideString read Get_Seri write Set_Seri;
    property Dekont_Tarihi: TDateTime read Get_Dekont_Tarihi write Set_Dekont_Tarihi;
    property TTHesap_Kodu: WideString read Get_TTHesap_Kodu write Set_TTHesap_Kodu;
    property DovizKuru: Double read Get_DovizKuru write Set_DovizKuru;
    property TahsilMasraf: Double read Get_TahsilMasraf write Set_TahsilMasraf;
    property Tutar: Double read Get_Tutar write Set_Tutar;
    property GiderHesapKodu: WideString read Get_GiderHesapKodu write Set_GiderHesapKodu;
    property BankaBorcBedel: Double read Get_BankaBorcBedel write Set_BankaBorcBedel;
    property VirmanHesapKodu: WideString read Get_VirmanHesapKodu write Set_VirmanHesapKodu;
    property AlacakCari: WideString read Get_AlacakCari write Set_AlacakCari;
    property BorcCari: WideString read Get_BorcCari write Set_BorcCari;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property CariRaporKodu: WideString read Get_CariRaporKodu write Set_CariRaporKodu;
    property Islem_Tarihi: TDateTime read Get_Islem_Tarihi write Set_Islem_Tarihi;
    property C_M: WideString read Get_C_M write Set_C_M;
    property Banka_Kodu: WideString read Get_Banka_Kodu write Set_Banka_Kodu;
    property KURFARKI: Double read Get_KURFARKI write Set_KURFARKI;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoProje provides a Create and CreateRemote method to          
// create instances of the default interface IProje exposed by              
// the CoClass Proje. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoProje = class
    class function Create: IProje;
    class function CreateRemote(const MachineName: string): IProje;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TProje
// Help String      : Proje Object
// Default Interface: IProje
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TProjeProperties= class;
{$ENDIF}
  TProje = class(TOleServer)
  private
    FIntf:        IProje;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TProjeProperties;
    function      GetServerProperties: TProjeProperties;
{$ENDIF}
    function      GetDefaultInterface: IProje;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_ISLETME_KODU: Integer;
    procedure Set_ISLETME_KODU(Value: Integer);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_Tur: WideString;
    procedure Set_Tur(const Value: WideString);
    function Get_Proje_Aciklama: WideString;
    procedure Set_Proje_Aciklama(const Value: WideString);
    function Get_Rapor_Kod1: WideString;
    procedure Set_Rapor_Kod1(const Value: WideString);
    function Get_Rapor_Kod2: WideString;
    procedure Set_Rapor_Kod2(const Value: WideString);
    function Get_Ref_Kod: WideString;
    procedure Set_Ref_Kod(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IProje);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    property DefaultInterface: IProje read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property ISLETME_KODU: Integer read Get_ISLETME_KODU write Set_ISLETME_KODU;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property Tur: WideString read Get_Tur write Set_Tur;
    property Proje_Aciklama: WideString read Get_Proje_Aciklama write Set_Proje_Aciklama;
    property Rapor_Kod1: WideString read Get_Rapor_Kod1 write Set_Rapor_Kod1;
    property Rapor_Kod2: WideString read Get_Rapor_Kod2 write Set_Rapor_Kod2;
    property Ref_Kod: WideString read Get_Ref_Kod write Set_Ref_Kod;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TProjeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TProje
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TProjeProperties = class(TPersistent)
  private
    FServer:    TProje;
    function    GetDefaultInterface: IProje;
    constructor Create(AServer: TProje);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_ISLETME_KODU: Integer;
    procedure Set_ISLETME_KODU(Value: Integer);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_Tur: WideString;
    procedure Set_Tur(const Value: WideString);
    function Get_Proje_Aciklama: WideString;
    procedure Set_Proje_Aciklama(const Value: WideString);
    function Get_Rapor_Kod1: WideString;
    procedure Set_Rapor_Kod1(const Value: WideString);
    function Get_Rapor_Kod2: WideString;
    procedure Set_Rapor_Kod2(const Value: WideString);
    function Get_Ref_Kod: WideString;
    procedure Set_Ref_Kod(const Value: WideString);
  public
    property DefaultInterface: IProje read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property ISLETME_KODU: Integer read Get_ISLETME_KODU write Set_ISLETME_KODU;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property Tur: WideString read Get_Tur write Set_Tur;
    property Proje_Aciklama: WideString read Get_Proje_Aciklama write Set_Proje_Aciklama;
    property Rapor_Kod1: WideString read Get_Rapor_Kod1 write Set_Rapor_Kod1;
    property Rapor_Kod2: WideString read Get_Rapor_Kod2 write Set_Rapor_Kod2;
    property Ref_Kod: WideString read Get_Ref_Kod write Set_Ref_Kod;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMuplanTemelBilgi provides a Create and CreateRemote method to          
// create instances of the default interface IMuplanTemelBilgi exposed by              
// the CoClass MuplanTemelBilgi. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMuplanTemelBilgi = class
    class function Create: IMuplanTemelBilgi;
    class function CreateRemote(const MachineName: string): IMuplanTemelBilgi;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMuplanTemelBilgi
// Help String      : MuplanTemelBilgi Object
// Default Interface: IMuplanTemelBilgi
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMuplanTemelBilgiProperties= class;
{$ENDIF}
  TMuplanTemelBilgi = class(TOleServer)
  private
    FIntf:        IMuplanTemelBilgi;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMuplanTemelBilgiProperties;
    function      GetServerProperties: TMuplanTemelBilgiProperties;
{$ENDIF}
    function      GetDefaultInterface: IMuplanTemelBilgi;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_ISLETME_KODU: Integer;
    procedure Set_ISLETME_KODU(Value: Integer);
    function Get_Hesap_Kodu: WideString;
    procedure Set_Hesap_Kodu(const Value: WideString);
    function Get_Agm: WideString;
    procedure Set_Agm(const Value: WideString);
    function Get_Hs_Adi: WideString;
    procedure Set_Hs_Adi(const Value: WideString);
    function Get_Hs_Yd_Adi: WideString;
    procedure Set_Hs_Yd_Adi(const Value: WideString);
    function Get_Hs_Grkod: WideString;
    procedure Set_Hs_Grkod(const Value: WideString);
    function Get_Olcu_Birim: WideString;
    procedure Set_Olcu_Birim(const Value: WideString);
    function Get_Hs_Blkz: WideString;
    procedure Set_Hs_Blkz(const Value: WideString);
    function Get_Calis_Tip: WideString;
    procedure Set_Calis_Tip(const Value: WideString);
    function Get_Calis_Bag: WideString;
    procedure Set_Calis_Bag(const Value: WideString);
    function Get_DOVIZLIMI: WideString;
    procedure Set_DOVIZLIMI(const Value: WideString);
    function Get_DOVIZ_TIPI: Integer;
    procedure Set_DOVIZ_TIPI(Value: Integer);
    function Get_Hesaplamaturu: WideString;
    procedure Set_Hesaplamaturu(const Value: WideString);
    function Get_Dovizkontrol: WideString;
    procedure Set_Dovizkontrol(const Value: WideString);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_RefKodlu_Calis: WideString;
    procedure Set_RefKodlu_Calis(const Value: WideString);
    function Get_Yedek1: WideString;
    procedure Set_Yedek1(const Value: WideString);
    function Get_Yedek2: WideString;
    procedure Set_Yedek2(const Value: WideString);
    function Get_Yedek3: Double;
    procedure Set_Yedek3(Value: Double);
    function Get_Yedek4: Double;
    procedure Set_Yedek4(Value: Double);
    function Get_Yedek5: WideString;
    procedure Set_Yedek5(const Value: WideString);
    function Get_Yedek6: WideString;
    procedure Set_Yedek6(const Value: WideString);
    function Get_Yedek7: Integer;
    procedure Set_Yedek7(Value: Integer);
    function Get_Yedek8: Integer;
    procedure Set_Yedek8(Value: Integer);
    function Get_Yedek9: Integer;
    procedure Set_Yedek9(Value: Integer);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
    function Get_Enf_Fark_HesKod: WideString;
    procedure Set_Enf_Fark_HesKod(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IMuplanTemelBilgi);
    procedure Disconnect; override;
    property DefaultInterface: IMuplanTemelBilgi read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property ISLETME_KODU: Integer read Get_ISLETME_KODU write Set_ISLETME_KODU;
    property Hesap_Kodu: WideString read Get_Hesap_Kodu write Set_Hesap_Kodu;
    property Agm: WideString read Get_Agm write Set_Agm;
    property Hs_Adi: WideString read Get_Hs_Adi write Set_Hs_Adi;
    property Hs_Yd_Adi: WideString read Get_Hs_Yd_Adi write Set_Hs_Yd_Adi;
    property Hs_Grkod: WideString read Get_Hs_Grkod write Set_Hs_Grkod;
    property Olcu_Birim: WideString read Get_Olcu_Birim write Set_Olcu_Birim;
    property Hs_Blkz: WideString read Get_Hs_Blkz write Set_Hs_Blkz;
    property Calis_Tip: WideString read Get_Calis_Tip write Set_Calis_Tip;
    property Calis_Bag: WideString read Get_Calis_Bag write Set_Calis_Bag;
    property DOVIZLIMI: WideString read Get_DOVIZLIMI write Set_DOVIZLIMI;
    property DOVIZ_TIPI: Integer read Get_DOVIZ_TIPI write Set_DOVIZ_TIPI;
    property Hesaplamaturu: WideString read Get_Hesaplamaturu write Set_Hesaplamaturu;
    property Dovizkontrol: WideString read Get_Dovizkontrol write Set_Dovizkontrol;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property RefKodlu_Calis: WideString read Get_RefKodlu_Calis write Set_RefKodlu_Calis;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: WideString read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property Enf_Fark_HesKod: WideString read Get_Enf_Fark_HesKod write Set_Enf_Fark_HesKod;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMuplanTemelBilgiProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMuplanTemelBilgi
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMuplanTemelBilgiProperties = class(TPersistent)
  private
    FServer:    TMuplanTemelBilgi;
    function    GetDefaultInterface: IMuplanTemelBilgi;
    constructor Create(AServer: TMuplanTemelBilgi);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_ISLETME_KODU: Integer;
    procedure Set_ISLETME_KODU(Value: Integer);
    function Get_Hesap_Kodu: WideString;
    procedure Set_Hesap_Kodu(const Value: WideString);
    function Get_Agm: WideString;
    procedure Set_Agm(const Value: WideString);
    function Get_Hs_Adi: WideString;
    procedure Set_Hs_Adi(const Value: WideString);
    function Get_Hs_Yd_Adi: WideString;
    procedure Set_Hs_Yd_Adi(const Value: WideString);
    function Get_Hs_Grkod: WideString;
    procedure Set_Hs_Grkod(const Value: WideString);
    function Get_Olcu_Birim: WideString;
    procedure Set_Olcu_Birim(const Value: WideString);
    function Get_Hs_Blkz: WideString;
    procedure Set_Hs_Blkz(const Value: WideString);
    function Get_Calis_Tip: WideString;
    procedure Set_Calis_Tip(const Value: WideString);
    function Get_Calis_Bag: WideString;
    procedure Set_Calis_Bag(const Value: WideString);
    function Get_DOVIZLIMI: WideString;
    procedure Set_DOVIZLIMI(const Value: WideString);
    function Get_DOVIZ_TIPI: Integer;
    procedure Set_DOVIZ_TIPI(Value: Integer);
    function Get_Hesaplamaturu: WideString;
    procedure Set_Hesaplamaturu(const Value: WideString);
    function Get_Dovizkontrol: WideString;
    procedure Set_Dovizkontrol(const Value: WideString);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_RefKodlu_Calis: WideString;
    procedure Set_RefKodlu_Calis(const Value: WideString);
    function Get_Yedek1: WideString;
    procedure Set_Yedek1(const Value: WideString);
    function Get_Yedek2: WideString;
    procedure Set_Yedek2(const Value: WideString);
    function Get_Yedek3: Double;
    procedure Set_Yedek3(Value: Double);
    function Get_Yedek4: Double;
    procedure Set_Yedek4(Value: Double);
    function Get_Yedek5: WideString;
    procedure Set_Yedek5(const Value: WideString);
    function Get_Yedek6: WideString;
    procedure Set_Yedek6(const Value: WideString);
    function Get_Yedek7: Integer;
    procedure Set_Yedek7(Value: Integer);
    function Get_Yedek8: Integer;
    procedure Set_Yedek8(Value: Integer);
    function Get_Yedek9: Integer;
    procedure Set_Yedek9(Value: Integer);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
    function Get_Enf_Fark_HesKod: WideString;
    procedure Set_Enf_Fark_HesKod(const Value: WideString);
  public
    property DefaultInterface: IMuplanTemelBilgi read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property ISLETME_KODU: Integer read Get_ISLETME_KODU write Set_ISLETME_KODU;
    property Hesap_Kodu: WideString read Get_Hesap_Kodu write Set_Hesap_Kodu;
    property Agm: WideString read Get_Agm write Set_Agm;
    property Hs_Adi: WideString read Get_Hs_Adi write Set_Hs_Adi;
    property Hs_Yd_Adi: WideString read Get_Hs_Yd_Adi write Set_Hs_Yd_Adi;
    property Hs_Grkod: WideString read Get_Hs_Grkod write Set_Hs_Grkod;
    property Olcu_Birim: WideString read Get_Olcu_Birim write Set_Olcu_Birim;
    property Hs_Blkz: WideString read Get_Hs_Blkz write Set_Hs_Blkz;
    property Calis_Tip: WideString read Get_Calis_Tip write Set_Calis_Tip;
    property Calis_Bag: WideString read Get_Calis_Bag write Set_Calis_Bag;
    property DOVIZLIMI: WideString read Get_DOVIZLIMI write Set_DOVIZLIMI;
    property DOVIZ_TIPI: Integer read Get_DOVIZ_TIPI write Set_DOVIZ_TIPI;
    property Hesaplamaturu: WideString read Get_Hesaplamaturu write Set_Hesaplamaturu;
    property Dovizkontrol: WideString read Get_Dovizkontrol write Set_Dovizkontrol;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property RefKodlu_Calis: WideString read Get_RefKodlu_Calis write Set_RefKodlu_Calis;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: WideString read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property Enf_Fark_HesKod: WideString read Get_Enf_Fark_HesKod write Set_Enf_Fark_HesKod;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMuplanEkBilgi provides a Create and CreateRemote method to          
// create instances of the default interface IMuplanEkBilgi exposed by              
// the CoClass MuplanEkBilgi. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMuplanEkBilgi = class
    class function Create: IMuplanEkBilgi;
    class function CreateRemote(const MachineName: string): IMuplanEkBilgi;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMuplanEkBilgi
// Help String      : MuplanEkBilgi Object
// Default Interface: IMuplanEkBilgi
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMuplanEkBilgiProperties= class;
{$ENDIF}
  TMuplanEkBilgi = class(TOleServer)
  private
    FIntf:        IMuplanEkBilgi;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMuplanEkBilgiProperties;
    function      GetServerProperties: TMuplanEkBilgiProperties;
{$ENDIF}
    function      GetDefaultInterface: IMuplanEkBilgi;
  protected
    procedure InitServerData; override;
    function Get_Kod: WideString;
    procedure Set_Kod(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_Kull1N: Double;
    procedure Set_Kull1N(Value: Double);
    function Get_Kull2N: Double;
    procedure Set_Kull2N(Value: Double);
    function Get_Kull3N: Double;
    procedure Set_Kull3N(Value: Double);
    function Get_Kull4N: Double;
    procedure Set_Kull4N(Value: Double);
    function Get_Kull5N: Double;
    procedure Set_Kull5N(Value: Double);
    function Get_Kull6N: Double;
    procedure Set_Kull6N(Value: Double);
    function Get_Kull7N: Double;
    procedure Set_Kull7N(Value: Double);
    function Get_Kull8N: Double;
    procedure Set_Kull8N(Value: Double);
    function Get_Kull1S: WideString;
    procedure Set_Kull1S(const Value: WideString);
    function Get_Kull2S: WideString;
    procedure Set_Kull2S(const Value: WideString);
    function Get_Kull3S: WideString;
    procedure Set_Kull3S(const Value: WideString);
    function Get_Kull4S: WideString;
    procedure Set_Kull4S(const Value: WideString);
    function Get_Kull5S: WideString;
    procedure Set_Kull5S(const Value: WideString);
    function Get_Kull6S: WideString;
    procedure Set_Kull6S(const Value: WideString);
    function Get_Kull7S: WideString;
    procedure Set_Kull7S(const Value: WideString);
    function Get_Kull8S: WideString;
    procedure Set_Kull8S(const Value: WideString);
    function Get_Yedek1: WideString;
    procedure Set_Yedek1(const Value: WideString);
    function Get_Yedek2: WideString;
    procedure Set_Yedek2(const Value: WideString);
    function Get_Yedek3: Double;
    procedure Set_Yedek3(Value: Double);
    function Get_Yedek4: Double;
    procedure Set_Yedek4(Value: Double);
    function Get_Yedek5: WideString;
    procedure Set_Yedek5(const Value: WideString);
    function Get_Yedek6: WideString;
    procedure Set_Yedek6(const Value: WideString);
    function Get_Yedek7: Integer;
    procedure Set_Yedek7(Value: Integer);
    function Get_Yedek8: Integer;
    procedure Set_Yedek8(Value: Integer);
    function Get_Yedek9: Integer;
    procedure Set_Yedek9(Value: Integer);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IMuplanEkBilgi);
    procedure Disconnect; override;
    property DefaultInterface: IMuplanEkBilgi read GetDefaultInterface;
    property Kod: WideString read Get_Kod write Set_Kod;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property Kull1N: Double read Get_Kull1N write Set_Kull1N;
    property Kull2N: Double read Get_Kull2N write Set_Kull2N;
    property Kull3N: Double read Get_Kull3N write Set_Kull3N;
    property Kull4N: Double read Get_Kull4N write Set_Kull4N;
    property Kull5N: Double read Get_Kull5N write Set_Kull5N;
    property Kull6N: Double read Get_Kull6N write Set_Kull6N;
    property Kull7N: Double read Get_Kull7N write Set_Kull7N;
    property Kull8N: Double read Get_Kull8N write Set_Kull8N;
    property Kull1S: WideString read Get_Kull1S write Set_Kull1S;
    property Kull2S: WideString read Get_Kull2S write Set_Kull2S;
    property Kull3S: WideString read Get_Kull3S write Set_Kull3S;
    property Kull4S: WideString read Get_Kull4S write Set_Kull4S;
    property Kull5S: WideString read Get_Kull5S write Set_Kull5S;
    property Kull6S: WideString read Get_Kull6S write Set_Kull6S;
    property Kull7S: WideString read Get_Kull7S write Set_Kull7S;
    property Kull8S: WideString read Get_Kull8S write Set_Kull8S;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: WideString read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMuplanEkBilgiProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMuplanEkBilgi
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMuplanEkBilgiProperties = class(TPersistent)
  private
    FServer:    TMuplanEkBilgi;
    function    GetDefaultInterface: IMuplanEkBilgi;
    constructor Create(AServer: TMuplanEkBilgi);
  protected
    function Get_Kod: WideString;
    procedure Set_Kod(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_Kull1N: Double;
    procedure Set_Kull1N(Value: Double);
    function Get_Kull2N: Double;
    procedure Set_Kull2N(Value: Double);
    function Get_Kull3N: Double;
    procedure Set_Kull3N(Value: Double);
    function Get_Kull4N: Double;
    procedure Set_Kull4N(Value: Double);
    function Get_Kull5N: Double;
    procedure Set_Kull5N(Value: Double);
    function Get_Kull6N: Double;
    procedure Set_Kull6N(Value: Double);
    function Get_Kull7N: Double;
    procedure Set_Kull7N(Value: Double);
    function Get_Kull8N: Double;
    procedure Set_Kull8N(Value: Double);
    function Get_Kull1S: WideString;
    procedure Set_Kull1S(const Value: WideString);
    function Get_Kull2S: WideString;
    procedure Set_Kull2S(const Value: WideString);
    function Get_Kull3S: WideString;
    procedure Set_Kull3S(const Value: WideString);
    function Get_Kull4S: WideString;
    procedure Set_Kull4S(const Value: WideString);
    function Get_Kull5S: WideString;
    procedure Set_Kull5S(const Value: WideString);
    function Get_Kull6S: WideString;
    procedure Set_Kull6S(const Value: WideString);
    function Get_Kull7S: WideString;
    procedure Set_Kull7S(const Value: WideString);
    function Get_Kull8S: WideString;
    procedure Set_Kull8S(const Value: WideString);
    function Get_Yedek1: WideString;
    procedure Set_Yedek1(const Value: WideString);
    function Get_Yedek2: WideString;
    procedure Set_Yedek2(const Value: WideString);
    function Get_Yedek3: Double;
    procedure Set_Yedek3(Value: Double);
    function Get_Yedek4: Double;
    procedure Set_Yedek4(Value: Double);
    function Get_Yedek5: WideString;
    procedure Set_Yedek5(const Value: WideString);
    function Get_Yedek6: WideString;
    procedure Set_Yedek6(const Value: WideString);
    function Get_Yedek7: Integer;
    procedure Set_Yedek7(Value: Integer);
    function Get_Yedek8: Integer;
    procedure Set_Yedek8(Value: Integer);
    function Get_Yedek9: Integer;
    procedure Set_Yedek9(Value: Integer);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
  public
    property DefaultInterface: IMuplanEkBilgi read GetDefaultInterface;
  published
    property Kod: WideString read Get_Kod write Set_Kod;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property Kull1N: Double read Get_Kull1N write Set_Kull1N;
    property Kull2N: Double read Get_Kull2N write Set_Kull2N;
    property Kull3N: Double read Get_Kull3N write Set_Kull3N;
    property Kull4N: Double read Get_Kull4N write Set_Kull4N;
    property Kull5N: Double read Get_Kull5N write Set_Kull5N;
    property Kull6N: Double read Get_Kull6N write Set_Kull6N;
    property Kull7N: Double read Get_Kull7N write Set_Kull7N;
    property Kull8N: Double read Get_Kull8N write Set_Kull8N;
    property Kull1S: WideString read Get_Kull1S write Set_Kull1S;
    property Kull2S: WideString read Get_Kull2S write Set_Kull2S;
    property Kull3S: WideString read Get_Kull3S write Set_Kull3S;
    property Kull4S: WideString read Get_Kull4S write Set_Kull4S;
    property Kull5S: WideString read Get_Kull5S write Set_Kull5S;
    property Kull6S: WideString read Get_Kull6S write Set_Kull6S;
    property Kull7S: WideString read Get_Kull7S write Set_Kull7S;
    property Kull8S: WideString read Get_Kull8S write Set_Kull8S;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: Double read Get_Yedek3 write Set_Yedek3;
    property Yedek4: Double read Get_Yedek4 write Set_Yedek4;
    property Yedek5: WideString read Get_Yedek5 write Set_Yedek5;
    property Yedek6: WideString read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Integer read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Integer read Get_Yedek8 write Set_Yedek8;
    property Yedek9: Integer read Get_Yedek9 write Set_Yedek9;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMuPlan provides a Create and CreateRemote method to          
// create instances of the default interface IMuPlan exposed by              
// the CoClass MuPlan. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMuPlan = class
    class function Create: IMuPlan;
    class function CreateRemote(const MachineName: string): IMuPlan;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMuPlan
// Help String      : MuPlan Object
// Default Interface: IMuPlan
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMuPlanProperties= class;
{$ENDIF}
  TMuPlan = class(TOleServer)
  private
    FIntf:        IMuPlan;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMuPlanProperties;
    function      GetServerProperties: TMuPlanProperties;
{$ENDIF}
    function      GetDefaultInterface: IMuPlan;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IMuPlan);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    function TemelBilgi: IMuplanTemelBilgi;
    function EkBilgi: IMuplanEkBilgi;
    property DefaultInterface: IMuPlan read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMuPlanProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMuPlan
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMuPlanProperties = class(TPersistent)
  private
    FServer:    TMuPlan;
    function    GetDefaultInterface: IMuPlan;
    constructor Create(AServer: TMuPlan);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
  public
    property DefaultInterface: IMuPlan read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNetRS provides a Create and CreateRemote method to          
// create instances of the default interface INetRS exposed by              
// the CoClass NetRS. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNetRS = class
    class function Create: INetRS;
    class function CreateRemote(const MachineName: string): INetRS;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNetRS
// Help String      : NetRS Object
// Default Interface: INetRS
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNetRSProperties= class;
{$ENDIF}
  TNetRS = class(TOleServer)
  private
    FIntf:        INetRS;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNetRSProperties;
    function      GetServerProperties: TNetRSProperties;
{$ENDIF}
    function      GetDefaultInterface: INetRS;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_EOF: WordBool;
    function Get_BOF: WordBool;
    function Get_FieldCount: Integer;
    function Get_IUXQueryAdr: Integer;
    function Get_ReportQuery: WordBool;
    procedure Set_ReportQuery(Value: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: INetRS);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    function Ac(const SQL: WideString): WordBool;
    procedure IlkK;
    procedure OncekiK;
    procedure SonK;
    procedure SonrakiK;
    procedure Kapat;
    procedure Calistir(const SQL: WideString);
    function FieldByName(const Name: WideString): INetField;
    function OpenByUniDirectional(const SQL: WideString): WordBool;
    function Fields(Index: Integer): INetField;
    property DefaultInterface: INetRS read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property EOF: WordBool read Get_EOF;
    property BOF: WordBool read Get_BOF;
    property FieldCount: Integer read Get_FieldCount;
    property IUXQueryAdr: Integer read Get_IUXQueryAdr;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property ReportQuery: WordBool read Get_ReportQuery write Set_ReportQuery;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNetRSProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNetRS
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNetRSProperties = class(TPersistent)
  private
    FServer:    TNetRS;
    function    GetDefaultInterface: INetRS;
    constructor Create(AServer: TNetRS);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_EOF: WordBool;
    function Get_BOF: WordBool;
    function Get_FieldCount: Integer;
    function Get_IUXQueryAdr: Integer;
    function Get_ReportQuery: WordBool;
    procedure Set_ReportQuery(Value: WordBool);
  public
    property DefaultInterface: INetRS read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property ReportQuery: WordBool read Get_ReportQuery write Set_ReportQuery;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoDagFisOlus provides a Create and CreateRemote method to          
// create instances of the default interface IDagFisOlus exposed by              
// the CoClass DagFisOlus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDagFisOlus = class
    class function Create: IDagFisOlus;
    class function CreateRemote(const MachineName: string): IDagFisOlus;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDagFisOlus
// Help String      : DagFisOlus Object
// Default Interface: IDagFisOlus
// Def. Intf. DISP? : No
// Event   Interface: IDagFisOlusEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDagFisOlusProperties= class;
{$ENDIF}
  TDagFisOlus = class(TOleServer)
  private
    FIntf:        IDagFisOlus;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TDagFisOlusProperties;
    function      GetServerProperties: TDagFisOlusProperties;
{$ENDIF}
    function      GetDefaultInterface: IDagFisOlus;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_FisTarih: TDateTime;
    procedure Set_FisTarih(Value: TDateTime);
    function Get_Fisno: WideString;
    procedure Set_Fisno(const Value: WideString);
    function Get_BasIslemSiraNo: WideString;
    procedure Set_BasIslemSiraNo(const Value: WideString);
    function Get_BitIslemSiraNo: WideString;
    procedure Set_BitIslemSiraNo(const Value: WideString);
    function Get_BasDagFisNo: WideString;
    procedure Set_BasDagFisNo(const Value: WideString);
    function Get_BitDagFisNo: WideString;
    procedure Set_BitDagFisNo(const Value: WideString);
    function Get_FisAciklama: WideString;
    procedure Set_FisAciklama(const Value: WideString);
    function Get_DagitimTuru: TDagFisTip;
    procedure Set_DagitimTuru(Value: TDagFisTip);
    function Get_ProjeKoduKontYapilsin: WordBool;
    procedure Set_ProjeKoduKontYapilsin(Value: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDagFisOlus);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    procedure Calistir;
    property DefaultInterface: IDagFisOlus read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property FisTarih: TDateTime read Get_FisTarih write Set_FisTarih;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property BasIslemSiraNo: WideString read Get_BasIslemSiraNo write Set_BasIslemSiraNo;
    property BitIslemSiraNo: WideString read Get_BitIslemSiraNo write Set_BitIslemSiraNo;
    property BasDagFisNo: WideString read Get_BasDagFisNo write Set_BasDagFisNo;
    property BitDagFisNo: WideString read Get_BitDagFisNo write Set_BitDagFisNo;
    property FisAciklama: WideString read Get_FisAciklama write Set_FisAciklama;
    property DagitimTuru: TDagFisTip read Get_DagitimTuru write Set_DagitimTuru;
    property ProjeKoduKontYapilsin: WordBool read Get_ProjeKoduKontYapilsin write Set_ProjeKoduKontYapilsin;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDagFisOlusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDagFisOlus
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDagFisOlusProperties = class(TPersistent)
  private
    FServer:    TDagFisOlus;
    function    GetDefaultInterface: IDagFisOlus;
    constructor Create(AServer: TDagFisOlus);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_FisTarih: TDateTime;
    procedure Set_FisTarih(Value: TDateTime);
    function Get_Fisno: WideString;
    procedure Set_Fisno(const Value: WideString);
    function Get_BasIslemSiraNo: WideString;
    procedure Set_BasIslemSiraNo(const Value: WideString);
    function Get_BitIslemSiraNo: WideString;
    procedure Set_BitIslemSiraNo(const Value: WideString);
    function Get_BasDagFisNo: WideString;
    procedure Set_BasDagFisNo(const Value: WideString);
    function Get_BitDagFisNo: WideString;
    procedure Set_BitDagFisNo(const Value: WideString);
    function Get_FisAciklama: WideString;
    procedure Set_FisAciklama(const Value: WideString);
    function Get_DagitimTuru: TDagFisTip;
    procedure Set_DagitimTuru(Value: TDagFisTip);
    function Get_ProjeKoduKontYapilsin: WordBool;
    procedure Set_ProjeKoduKontYapilsin(Value: WordBool);
  public
    property DefaultInterface: IDagFisOlus read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property FisTarih: TDateTime read Get_FisTarih write Set_FisTarih;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property BasIslemSiraNo: WideString read Get_BasIslemSiraNo write Set_BasIslemSiraNo;
    property BitIslemSiraNo: WideString read Get_BitIslemSiraNo write Set_BitIslemSiraNo;
    property BasDagFisNo: WideString read Get_BasDagFisNo write Set_BasDagFisNo;
    property BitDagFisNo: WideString read Get_BitDagFisNo write Set_BitDagFisNo;
    property FisAciklama: WideString read Get_FisAciklama write Set_FisAciklama;
    property DagitimTuru: TDagFisTip read Get_DagitimTuru write Set_DagitimTuru;
    property ProjeKoduKontYapilsin: WordBool read Get_ProjeKoduKontYapilsin write Set_ProjeKoduKontYapilsin;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoStokPH provides a Create and CreateRemote method to          
// create instances of the default interface IStokPH exposed by              
// the CoClass StokPH. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStokPH = class
    class function Create: IStokPH;
    class function CreateRemote(const MachineName: string): IStokPH;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStokPH
// Help String      : StokPH Object
// Default Interface: IStokPH
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TStokPHProperties= class;
{$ENDIF}
  TStokPH = class(TOleServer)
  private
    FIntf:        IStokPH;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TStokPHProperties;
    function      GetServerProperties: TStokPHProperties;
{$ENDIF}
    function      GetDefaultInterface: IStokPH;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_Stok_Kodu: WideString;
    procedure Set_Stok_Kodu(const Value: WideString);
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_DEPO_KODU: Integer;
    procedure Set_DEPO_KODU(Value: Integer);
    function Get_Top_Giris_Mik: Double;
    procedure Set_Top_Giris_Mik(Value: Double);
    function Get_Top_Giris_Tut: Double;
    procedure Set_Top_Giris_Tut(Value: Double);
    function Get_Top_Cikis_Mik: Double;
    procedure Set_Top_Cikis_Mik(Value: Double);
    function Get_Top_Cikis_Tut: Double;
    procedure Set_Top_Cikis_Tut(Value: Double);
    function Get_Son_Gir_Br_Fiat: Double;
    procedure Set_Son_Gir_Br_Fiat(Value: Double);
    function Get_Son_Gir_Net_Fiat: Double;
    procedure Set_Son_Gir_Net_Fiat(Value: Double);
    function Get_Stok_Dagitim: Double;
    procedure Set_Stok_Dagitim(Value: Double);
    function Get_Mus_Top_Siparis: Double;
    procedure Set_Mus_Top_Siparis(Value: Double);
    function Get_Mus_Top_Teslim: Double;
    procedure Set_Mus_Top_Teslim(Value: Double);
    function Get_Sat_Top_Teslim: Double;
    procedure Set_Sat_Top_Teslim(Value: Double);
    function Get_Sat_Top_Siparis: Double;
    procedure Set_Sat_Top_Siparis(Value: Double);
    function Get_YOLMIK: Double;
    procedure Set_YOLMIK(Value: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IStokPH);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    property DefaultInterface: IStokPH read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property Stok_Kodu: WideString read Get_Stok_Kodu write Set_Stok_Kodu;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property Top_Giris_Mik: Double read Get_Top_Giris_Mik write Set_Top_Giris_Mik;
    property Top_Giris_Tut: Double read Get_Top_Giris_Tut write Set_Top_Giris_Tut;
    property Top_Cikis_Mik: Double read Get_Top_Cikis_Mik write Set_Top_Cikis_Mik;
    property Top_Cikis_Tut: Double read Get_Top_Cikis_Tut write Set_Top_Cikis_Tut;
    property Son_Gir_Br_Fiat: Double read Get_Son_Gir_Br_Fiat write Set_Son_Gir_Br_Fiat;
    property Son_Gir_Net_Fiat: Double read Get_Son_Gir_Net_Fiat write Set_Son_Gir_Net_Fiat;
    property Stok_Dagitim: Double read Get_Stok_Dagitim write Set_Stok_Dagitim;
    property Mus_Top_Siparis: Double read Get_Mus_Top_Siparis write Set_Mus_Top_Siparis;
    property Mus_Top_Teslim: Double read Get_Mus_Top_Teslim write Set_Mus_Top_Teslim;
    property Sat_Top_Teslim: Double read Get_Sat_Top_Teslim write Set_Sat_Top_Teslim;
    property Sat_Top_Siparis: Double read Get_Sat_Top_Siparis write Set_Sat_Top_Siparis;
    property YOLMIK: Double read Get_YOLMIK write Set_YOLMIK;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TStokPHProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TStokPH
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TStokPHProperties = class(TPersistent)
  private
    FServer:    TStokPH;
    function    GetDefaultInterface: IStokPH;
    constructor Create(AServer: TStokPH);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_Stok_Kodu: WideString;
    procedure Set_Stok_Kodu(const Value: WideString);
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_DEPO_KODU: Integer;
    procedure Set_DEPO_KODU(Value: Integer);
    function Get_Top_Giris_Mik: Double;
    procedure Set_Top_Giris_Mik(Value: Double);
    function Get_Top_Giris_Tut: Double;
    procedure Set_Top_Giris_Tut(Value: Double);
    function Get_Top_Cikis_Mik: Double;
    procedure Set_Top_Cikis_Mik(Value: Double);
    function Get_Top_Cikis_Tut: Double;
    procedure Set_Top_Cikis_Tut(Value: Double);
    function Get_Son_Gir_Br_Fiat: Double;
    procedure Set_Son_Gir_Br_Fiat(Value: Double);
    function Get_Son_Gir_Net_Fiat: Double;
    procedure Set_Son_Gir_Net_Fiat(Value: Double);
    function Get_Stok_Dagitim: Double;
    procedure Set_Stok_Dagitim(Value: Double);
    function Get_Mus_Top_Siparis: Double;
    procedure Set_Mus_Top_Siparis(Value: Double);
    function Get_Mus_Top_Teslim: Double;
    procedure Set_Mus_Top_Teslim(Value: Double);
    function Get_Sat_Top_Teslim: Double;
    procedure Set_Sat_Top_Teslim(Value: Double);
    function Get_Sat_Top_Siparis: Double;
    procedure Set_Sat_Top_Siparis(Value: Double);
    function Get_YOLMIK: Double;
    procedure Set_YOLMIK(Value: Double);
  public
    property DefaultInterface: IStokPH read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property Stok_Kodu: WideString read Get_Stok_Kodu write Set_Stok_Kodu;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property Top_Giris_Mik: Double read Get_Top_Giris_Mik write Set_Top_Giris_Mik;
    property Top_Giris_Tut: Double read Get_Top_Giris_Tut write Set_Top_Giris_Tut;
    property Top_Cikis_Mik: Double read Get_Top_Cikis_Mik write Set_Top_Cikis_Mik;
    property Top_Cikis_Tut: Double read Get_Top_Cikis_Tut write Set_Top_Cikis_Tut;
    property Son_Gir_Br_Fiat: Double read Get_Son_Gir_Br_Fiat write Set_Son_Gir_Br_Fiat;
    property Son_Gir_Net_Fiat: Double read Get_Son_Gir_Net_Fiat write Set_Son_Gir_Net_Fiat;
    property Stok_Dagitim: Double read Get_Stok_Dagitim write Set_Stok_Dagitim;
    property Mus_Top_Siparis: Double read Get_Mus_Top_Siparis write Set_Mus_Top_Siparis;
    property Mus_Top_Teslim: Double read Get_Mus_Top_Teslim write Set_Mus_Top_Teslim;
    property Sat_Top_Teslim: Double read Get_Sat_Top_Teslim write Set_Sat_Top_Teslim;
    property Sat_Top_Siparis: Double read Get_Sat_Top_Siparis write Set_Sat_Top_Siparis;
    property YOLMIK: Double read Get_YOLMIK write Set_YOLMIK;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoStDovEnfCevir provides a Create and CreateRemote method to          
// create instances of the default interface IStDovEnfCevir exposed by              
// the CoClass StDovEnfCevir. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStDovEnfCevir = class
    class function Create: IStDovEnfCevir;
    class function CreateRemote(const MachineName: string): IStDovEnfCevir;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStDovEnfCevir
// Help String      : StDovEnfCevir Object
// Default Interface: IStDovEnfCevir
// Def. Intf. DISP? : No
// Event   Interface: IStDovEnfCevirEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TStDovEnfCevirProperties= class;
{$ENDIF}
  TStDovEnfCevir = class(TOleServer)
  private
    FOnInfo: TNotifyEvent;
    FIntf:        IStDovEnfCevir;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TStDovEnfCevirProperties;
    function      GetServerProperties: TStDovEnfCevirProperties;
{$ENDIF}
    function      GetDefaultInterface: IStDovEnfCevir;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_StokKodu: WideString;
    procedure Set_StokKodu(const Value: WideString);
    function Get_GrupKodu: WideString;
    procedure Set_GrupKodu(const Value: WideString);
    function Get_KOD1: WideString;
    procedure Set_KOD1(const Value: WideString);
    function Get_KOD2: WideString;
    procedure Set_KOD2(const Value: WideString);
    function Get_Tarih1: TDateTime;
    procedure Set_Tarih1(Value: TDateTime);
    function Get_Tarih2: TDateTime;
    procedure Set_Tarih2(Value: TDateTime);
    function Get_Message: WideString;
    procedure Set_Message(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IStDovEnfCevir);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    procedure Calistir;
    property DefaultInterface: IStDovEnfCevir read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property StokKodu: WideString read Get_StokKodu write Set_StokKodu;
    property GrupKodu: WideString read Get_GrupKodu write Set_GrupKodu;
    property KOD1: WideString read Get_KOD1 write Set_KOD1;
    property KOD2: WideString read Get_KOD2 write Set_KOD2;
    property Tarih1: TDateTime read Get_Tarih1 write Set_Tarih1;
    property Tarih2: TDateTime read Get_Tarih2 write Set_Tarih2;
    property Message: WideString read Get_Message write Set_Message;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TStDovEnfCevirProperties read GetServerProperties;
{$ENDIF}
    property OnInfo: TNotifyEvent read FOnInfo write FOnInfo;
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TStDovEnfCevir
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TStDovEnfCevirProperties = class(TPersistent)
  private
    FServer:    TStDovEnfCevir;
    function    GetDefaultInterface: IStDovEnfCevir;
    constructor Create(AServer: TStDovEnfCevir);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_StokKodu: WideString;
    procedure Set_StokKodu(const Value: WideString);
    function Get_GrupKodu: WideString;
    procedure Set_GrupKodu(const Value: WideString);
    function Get_KOD1: WideString;
    procedure Set_KOD1(const Value: WideString);
    function Get_KOD2: WideString;
    procedure Set_KOD2(const Value: WideString);
    function Get_Tarih1: TDateTime;
    procedure Set_Tarih1(Value: TDateTime);
    function Get_Tarih2: TDateTime;
    procedure Set_Tarih2(Value: TDateTime);
    function Get_Message: WideString;
    procedure Set_Message(const Value: WideString);
  public
    property DefaultInterface: IStDovEnfCevir read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property StokKodu: WideString read Get_StokKodu write Set_StokKodu;
    property GrupKodu: WideString read Get_GrupKodu write Set_GrupKodu;
    property KOD1: WideString read Get_KOD1 write Set_KOD1;
    property KOD2: WideString read Get_KOD2 write Set_KOD2;
    property Tarih1: TDateTime read Get_Tarih1 write Set_Tarih1;
    property Tarih2: TDateTime read Get_Tarih2 write Set_Tarih2;
    property Message: WideString read Get_Message write Set_Message;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNetGuvenlik provides a Create and CreateRemote method to          
// create instances of the default interface INetGuvenlik exposed by              
// the CoClass NetGuvenlik. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNetGuvenlik = class
    class function Create: INetGuvenlik;
    class function CreateRemote(const MachineName: string): INetGuvenlik;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNetGuvenlik
// Help String      : NetGuvenlik Object
// Default Interface: INetGuvenlik
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNetGuvenlikProperties= class;
{$ENDIF}
  TNetGuvenlik = class(TOleServer)
  private
    FIntf:        INetGuvenlik;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNetGuvenlikProperties;
    function      GetServerProperties: TNetGuvenlikProperties;
{$ENDIF}
    function      GetDefaultInterface: INetGuvenlik;
  protected
    procedure InitServerData; override;
    function Get_UrunSurumu: TNetProductVersion;
    function Get_LisansSayisi: Integer;
    function Get_GuvenlikSunucusu: WideString;
    function Get_MusteriKodu: WideString;
    function Get_KurulumTipi: TNetKurulumTip;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: INetGuvenlik);
    procedure Disconnect; override;
    function ProgramListe(ProgramIndex: Integer): WordBool;
    property DefaultInterface: INetGuvenlik read GetDefaultInterface;
    property UrunSurumu: TNetProductVersion read Get_UrunSurumu;
    property LisansSayisi: Integer read Get_LisansSayisi;
    property GuvenlikSunucusu: WideString read Get_GuvenlikSunucusu;
    property MusteriKodu: WideString read Get_MusteriKodu;
    property KurulumTipi: TNetKurulumTip read Get_KurulumTipi;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNetGuvenlikProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNetGuvenlik
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNetGuvenlikProperties = class(TPersistent)
  private
    FServer:    TNetGuvenlik;
    function    GetDefaultInterface: INetGuvenlik;
    constructor Create(AServer: TNetGuvenlik);
  protected
    function Get_UrunSurumu: TNetProductVersion;
    function Get_LisansSayisi: Integer;
    function Get_GuvenlikSunucusu: WideString;
    function Get_MusteriKodu: WideString;
    function Get_KurulumTipi: TNetKurulumTip;
  public
    property DefaultInterface: INetGuvenlik read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoStokHareket provides a Create and CreateRemote method to          
// create instances of the default interface IStokHareket exposed by              
// the CoClass StokHareket. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStokHareket = class
    class function Create: IStokHareket;
    class function CreateRemote(const MachineName: string): IStokHareket;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStokHareket
// Help String      : StokHareket Object
// Default Interface: IStokHareket
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TStokHareketProperties= class;
{$ENDIF}
  TStokHareket = class(TOleServer)
  private
    FIntf:        IStokHareket;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TStokHareketProperties;
    function      GetServerProperties: TStokHareketProperties;
{$ENDIF}
    function      GetDefaultInterface: IStokHareket;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_SilmeIcinGerekliSahalar: WideString;
    function Get_SonKayitNoAl: WordBool;
    procedure Set_SonKayitNoAl(Value: WordBool);
    function Get_Stok_Kodu: WideString;
    procedure Set_Stok_Kodu(const Value: WideString);
    function Get_Fisno: WideString;
    procedure Set_Fisno(const Value: WideString);
    function Get_Sthar_Gcmik: Double;
    procedure Set_Sthar_Gcmik(Value: Double);
    function Get_Sthar_Gcmik2: Double;
    procedure Set_Sthar_Gcmik2(Value: Double);
    function Get_CEVRIM: Double;
    procedure Set_CEVRIM(Value: Double);
    function Get_Sthar_Gckod: WideString;
    procedure Set_Sthar_Gckod(const Value: WideString);
    function Get_Sthar_Tarih: TDateTime;
    procedure Set_Sthar_Tarih(Value: TDateTime);
    function Get_Sthar_Nf: Double;
    procedure Set_Sthar_Nf(Value: Double);
    function Get_Sthar_Bf: Double;
    procedure Set_Sthar_Bf(Value: Double);
    function Get_Sthar_Iaf: Double;
    procedure Set_Sthar_Iaf(Value: Double);
    function Get_Sthar_Kdv: Double;
    procedure Set_Sthar_Kdv(Value: Double);
    function Get_DEPO_KODU: Integer;
    procedure Set_DEPO_KODU(Value: Integer);
    function Get_Sthar_Aciklama: WideString;
    procedure Set_Sthar_Aciklama(const Value: WideString);
    function Get_Sthar_Satisk: Double;
    procedure Set_Sthar_Satisk(Value: Double);
    function Get_Sthar_Malfisk: Double;
    procedure Set_Sthar_Malfisk(Value: Double);
    function Get_Sthar_Ftirsip: WideString;
    procedure Set_Sthar_Ftirsip(const Value: WideString);
    function Get_Sthar_Satisk2: Double;
    procedure Set_Sthar_Satisk2(Value: Double);
    function Get_Liste_Fiat: Integer;
    procedure Set_Liste_Fiat(Value: Integer);
    function Get_Sthar_Htur: WideString;
    procedure Set_Sthar_Htur(const Value: WideString);
    function Get_Sthar_Dovtip: Integer;
    procedure Set_Sthar_Dovtip(Value: Integer);
    function Get_PROMASYON_KODU: Integer;
    procedure Set_PROMASYON_KODU(Value: Integer);
    function Get_Sthar_Dovfiat: Double;
    procedure Set_Sthar_Dovfiat(Value: Double);
    function Get_Sthar_Odegun: Integer;
    procedure Set_Sthar_Odegun(Value: Integer);
    function Get_STra_SatIsk3: Double;
    procedure Set_STra_SatIsk3(Value: Double);
    function Get_STra_SatIsk4: Double;
    procedure Set_STra_SatIsk4(Value: Double);
    function Get_STra_SatIsk5: Double;
    procedure Set_STra_SatIsk5(Value: Double);
    function Get_STra_SatIsk6: Double;
    procedure Set_STra_SatIsk6(Value: Double);
    function Get_Sthar_Bgtip: WideString;
    procedure Set_Sthar_Bgtip(const Value: WideString);
    function Get_Sthar_Kod1: WideString;
    procedure Set_Sthar_Kod1(const Value: WideString);
    function Get_Sthar_Kod2: WideString;
    procedure Set_Sthar_Kod2(const Value: WideString);
    function Get_Sthar_Sipnum: WideString;
    procedure Set_Sthar_Sipnum(const Value: WideString);
    function Get_Sthar_Carikod: WideString;
    procedure Set_Sthar_Carikod(const Value: WideString);
    function Get_Sthar_Sip_Turu: WideString;
    procedure Set_Sthar_Sip_Turu(const Value: WideString);
    function Get_Plasiyer_Kodu: WideString;
    procedure Set_Plasiyer_Kodu(const Value: WideString);
    function Get_Ekalan_Neden: WideString;
    procedure Set_Ekalan_Neden(const Value: WideString);
    function Get_Ekalan: WideString;
    procedure Set_Ekalan(const Value: WideString);
    function Get_Ekalan1: WideString;
    procedure Set_Ekalan1(const Value: WideString);
    function Get_Redmik: Double;
    procedure Set_Redmik(Value: Double);
    function Get_Redneden: Integer;
    procedure Set_Redneden(Value: Integer);
    function Get_Sira: Integer;
    procedure Set_Sira(Value: Integer);
    function Get_STra_SIPKONT: Integer;
    procedure Set_STra_SIPKONT(Value: Integer);
    function Get_Ambar_Kabulno: WideString;
    procedure Set_Ambar_Kabulno(const Value: WideString);
    function Get_Firma_Dovtip: Integer;
    procedure Set_Firma_Dovtip(Value: Integer);
    function Get_Firma_Dovtut: Double;
    procedure Set_Firma_Dovtut(Value: Double);
    function Get_Firma_Dovmal: Double;
    procedure Set_Firma_Dovmal(Value: Double);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_Irsaliye_No: WideString;
    procedure Set_Irsaliye_No(const Value: WideString);
    function Get_Irsaliye_Tarih: TDateTime;
    procedure Set_Irsaliye_Tarih(Value: TDateTime);
    function Get_KOSULKODU: WideString;
    procedure Set_KOSULKODU(const Value: WideString);
    function Get_Ecza_fat_tip: Integer;
    procedure Set_Ecza_fat_tip(Value: Integer);
    function Get_Sthar_Testar: TDateTime;
    procedure Set_Sthar_Testar(Value: TDateTime);
    function Get_Olcubr: Integer;
    procedure Set_Olcubr(Value: Integer);
    function Get_IncKeyNo: Integer;
    procedure Set_IncKeyNo(Value: Integer);
    function Get_Vade_Tarihi: TDateTime;
    procedure Set_Vade_Tarihi(Value: TDateTime);
    function Get_Liste_No: WideString;
    procedure Set_Liste_No(const Value: WideString);
    function Get_Baglanti_No: Integer;
    procedure Set_Baglanti_No(Value: Integer);
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_Muh_Kodu: WideString;
    procedure Set_Muh_Kodu(const Value: WideString);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_F_Yedek3: Double;
    procedure Set_F_Yedek3(Value: Double);
    function Get_F_Yedek4: Double;
    procedure Set_F_Yedek4(Value: Double);
    function Get_F_Yedek5: Double;
    procedure Set_F_Yedek5(Value: Double);
    function Get_C_Yedek6: WideString;
    procedure Set_C_Yedek6(const Value: WideString);
    function Get_B_Yedek7: Integer;
    procedure Set_B_Yedek7(Value: Integer);
    function Get_I_Yedek8: Integer;
    procedure Set_I_Yedek8(Value: Integer);
    function Get_L_Yedek9: Integer;
    procedure Set_L_Yedek9(Value: Integer);
    function Get_D_YEDEK10: TDateTime;
    procedure Set_D_YEDEK10(Value: TDateTime);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_FIYATTARIHI: TDateTime;
    procedure Set_FIYATTARIHI(Value: TDateTime);
    function Get_KOSULTARIHI: TDateTime;
    procedure Set_KOSULTARIHI(Value: TDateTime);
    function Get_Satisk1tip: Integer;
    procedure Set_Satisk1tip(Value: Integer);
    function Get_Satisk2tip: Integer;
    procedure Set_Satisk2tip(Value: Integer);
    function Get_Satisk3tip: Integer;
    procedure Set_Satisk3tip(Value: Integer);
    function Get_Satisk4tip: Integer;
    procedure Set_Satisk4tip(Value: Integer);
    function Get_Satisk5tip: Integer;
    procedure Set_Satisk5tip(Value: Integer);
    function Get_Satisk6tip: Integer;
    procedure Set_Satisk6tip(Value: Integer);
    function Get_EXPORTTYPE: Integer;
    procedure Set_EXPORTTYPE(Value: Integer);
    function Get_Exportmik: Double;
    procedure Set_Exportmik(Value: Double);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
    function Get_KKMalF: Double;
    procedure Set_KKMalF(Value: Double);
    function Get_Stra_IrsKont: Integer;
    procedure Set_Stra_IrsKont(Value: Integer);
    function Get_YapKod: WideString;
    procedure Set_YapKod(const Value: WideString);
    function Get_GirisDepoKodu: SYSINT;
    procedure Set_GirisDepoKodu(Value: SYSINT);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IStokHareket);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    procedure SahalariTemizle;
    procedure ReceteliKayit(UretSonDepo: TUretSonDepo; YariMamuldeStokKullan: WordBool; 
                            MaliyetlerCarpilsin: WordBool);
    property DefaultInterface: IStokHareket read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property SilmeIcinGerekliSahalar: WideString read Get_SilmeIcinGerekliSahalar;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property SonKayitNoAl: WordBool read Get_SonKayitNoAl write Set_SonKayitNoAl;
    property Stok_Kodu: WideString read Get_Stok_Kodu write Set_Stok_Kodu;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property Sthar_Gcmik: Double read Get_Sthar_Gcmik write Set_Sthar_Gcmik;
    property Sthar_Gcmik2: Double read Get_Sthar_Gcmik2 write Set_Sthar_Gcmik2;
    property CEVRIM: Double read Get_CEVRIM write Set_CEVRIM;
    property Sthar_Gckod: WideString read Get_Sthar_Gckod write Set_Sthar_Gckod;
    property Sthar_Tarih: TDateTime read Get_Sthar_Tarih write Set_Sthar_Tarih;
    property Sthar_Nf: Double read Get_Sthar_Nf write Set_Sthar_Nf;
    property Sthar_Bf: Double read Get_Sthar_Bf write Set_Sthar_Bf;
    property Sthar_Iaf: Double read Get_Sthar_Iaf write Set_Sthar_Iaf;
    property Sthar_Kdv: Double read Get_Sthar_Kdv write Set_Sthar_Kdv;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property Sthar_Aciklama: WideString read Get_Sthar_Aciklama write Set_Sthar_Aciklama;
    property Sthar_Satisk: Double read Get_Sthar_Satisk write Set_Sthar_Satisk;
    property Sthar_Malfisk: Double read Get_Sthar_Malfisk write Set_Sthar_Malfisk;
    property Sthar_Ftirsip: WideString read Get_Sthar_Ftirsip write Set_Sthar_Ftirsip;
    property Sthar_Satisk2: Double read Get_Sthar_Satisk2 write Set_Sthar_Satisk2;
    property Liste_Fiat: Integer read Get_Liste_Fiat write Set_Liste_Fiat;
    property Sthar_Htur: WideString read Get_Sthar_Htur write Set_Sthar_Htur;
    property Sthar_Dovtip: Integer read Get_Sthar_Dovtip write Set_Sthar_Dovtip;
    property PROMASYON_KODU: Integer read Get_PROMASYON_KODU write Set_PROMASYON_KODU;
    property Sthar_Dovfiat: Double read Get_Sthar_Dovfiat write Set_Sthar_Dovfiat;
    property Sthar_Odegun: Integer read Get_Sthar_Odegun write Set_Sthar_Odegun;
    property STra_SatIsk3: Double read Get_STra_SatIsk3 write Set_STra_SatIsk3;
    property STra_SatIsk4: Double read Get_STra_SatIsk4 write Set_STra_SatIsk4;
    property STra_SatIsk5: Double read Get_STra_SatIsk5 write Set_STra_SatIsk5;
    property STra_SatIsk6: Double read Get_STra_SatIsk6 write Set_STra_SatIsk6;
    property Sthar_Bgtip: WideString read Get_Sthar_Bgtip write Set_Sthar_Bgtip;
    property Sthar_Kod1: WideString read Get_Sthar_Kod1 write Set_Sthar_Kod1;
    property Sthar_Kod2: WideString read Get_Sthar_Kod2 write Set_Sthar_Kod2;
    property Sthar_Sipnum: WideString read Get_Sthar_Sipnum write Set_Sthar_Sipnum;
    property Sthar_Carikod: WideString read Get_Sthar_Carikod write Set_Sthar_Carikod;
    property Sthar_Sip_Turu: WideString read Get_Sthar_Sip_Turu write Set_Sthar_Sip_Turu;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property Ekalan_Neden: WideString read Get_Ekalan_Neden write Set_Ekalan_Neden;
    property Ekalan: WideString read Get_Ekalan write Set_Ekalan;
    property Ekalan1: WideString read Get_Ekalan1 write Set_Ekalan1;
    property Redmik: Double read Get_Redmik write Set_Redmik;
    property Redneden: Integer read Get_Redneden write Set_Redneden;
    property Sira: Integer read Get_Sira write Set_Sira;
    property STra_SIPKONT: Integer read Get_STra_SIPKONT write Set_STra_SIPKONT;
    property Ambar_Kabulno: WideString read Get_Ambar_Kabulno write Set_Ambar_Kabulno;
    property Firma_Dovtip: Integer read Get_Firma_Dovtip write Set_Firma_Dovtip;
    property Firma_Dovtut: Double read Get_Firma_Dovtut write Set_Firma_Dovtut;
    property Firma_Dovmal: Double read Get_Firma_Dovmal write Set_Firma_Dovmal;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Irsaliye_No: WideString read Get_Irsaliye_No write Set_Irsaliye_No;
    property Irsaliye_Tarih: TDateTime read Get_Irsaliye_Tarih write Set_Irsaliye_Tarih;
    property KOSULKODU: WideString read Get_KOSULKODU write Set_KOSULKODU;
    property Ecza_fat_tip: Integer read Get_Ecza_fat_tip write Set_Ecza_fat_tip;
    property Sthar_Testar: TDateTime read Get_Sthar_Testar write Set_Sthar_Testar;
    property Olcubr: Integer read Get_Olcubr write Set_Olcubr;
    property IncKeyNo: Integer read Get_IncKeyNo write Set_IncKeyNo;
    property Vade_Tarihi: TDateTime read Get_Vade_Tarihi write Set_Vade_Tarihi;
    property Liste_No: WideString read Get_Liste_No write Set_Liste_No;
    property Baglanti_No: Integer read Get_Baglanti_No write Set_Baglanti_No;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property Muh_Kodu: WideString read Get_Muh_Kodu write Set_Muh_Kodu;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek3: Double read Get_F_Yedek3 write Set_F_Yedek3;
    property F_Yedek4: Double read Get_F_Yedek4 write Set_F_Yedek4;
    property F_Yedek5: Double read Get_F_Yedek5 write Set_F_Yedek5;
    property C_Yedek6: WideString read Get_C_Yedek6 write Set_C_Yedek6;
    property B_Yedek7: Integer read Get_B_Yedek7 write Set_B_Yedek7;
    property I_Yedek8: Integer read Get_I_Yedek8 write Set_I_Yedek8;
    property L_Yedek9: Integer read Get_L_Yedek9 write Set_L_Yedek9;
    property D_YEDEK10: TDateTime read Get_D_YEDEK10 write Set_D_YEDEK10;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property FIYATTARIHI: TDateTime read Get_FIYATTARIHI write Set_FIYATTARIHI;
    property KOSULTARIHI: TDateTime read Get_KOSULTARIHI write Set_KOSULTARIHI;
    property Satisk1tip: Integer read Get_Satisk1tip write Set_Satisk1tip;
    property Satisk2tip: Integer read Get_Satisk2tip write Set_Satisk2tip;
    property Satisk3tip: Integer read Get_Satisk3tip write Set_Satisk3tip;
    property Satisk4tip: Integer read Get_Satisk4tip write Set_Satisk4tip;
    property Satisk5tip: Integer read Get_Satisk5tip write Set_Satisk5tip;
    property Satisk6tip: Integer read Get_Satisk6tip write Set_Satisk6tip;
    property EXPORTTYPE: Integer read Get_EXPORTTYPE write Set_EXPORTTYPE;
    property Exportmik: Double read Get_Exportmik write Set_Exportmik;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property KKMalF: Double read Get_KKMalF write Set_KKMalF;
    property Stra_IrsKont: Integer read Get_Stra_IrsKont write Set_Stra_IrsKont;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
    property GirisDepoKodu: SYSINT read Get_GirisDepoKodu write Set_GirisDepoKodu;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TStokHareketProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TStokHareket
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TStokHareketProperties = class(TPersistent)
  private
    FServer:    TStokHareket;
    function    GetDefaultInterface: IStokHareket;
    constructor Create(AServer: TStokHareket);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_SilmeIcinGerekliSahalar: WideString;
    function Get_SonKayitNoAl: WordBool;
    procedure Set_SonKayitNoAl(Value: WordBool);
    function Get_Stok_Kodu: WideString;
    procedure Set_Stok_Kodu(const Value: WideString);
    function Get_Fisno: WideString;
    procedure Set_Fisno(const Value: WideString);
    function Get_Sthar_Gcmik: Double;
    procedure Set_Sthar_Gcmik(Value: Double);
    function Get_Sthar_Gcmik2: Double;
    procedure Set_Sthar_Gcmik2(Value: Double);
    function Get_CEVRIM: Double;
    procedure Set_CEVRIM(Value: Double);
    function Get_Sthar_Gckod: WideString;
    procedure Set_Sthar_Gckod(const Value: WideString);
    function Get_Sthar_Tarih: TDateTime;
    procedure Set_Sthar_Tarih(Value: TDateTime);
    function Get_Sthar_Nf: Double;
    procedure Set_Sthar_Nf(Value: Double);
    function Get_Sthar_Bf: Double;
    procedure Set_Sthar_Bf(Value: Double);
    function Get_Sthar_Iaf: Double;
    procedure Set_Sthar_Iaf(Value: Double);
    function Get_Sthar_Kdv: Double;
    procedure Set_Sthar_Kdv(Value: Double);
    function Get_DEPO_KODU: Integer;
    procedure Set_DEPO_KODU(Value: Integer);
    function Get_Sthar_Aciklama: WideString;
    procedure Set_Sthar_Aciklama(const Value: WideString);
    function Get_Sthar_Satisk: Double;
    procedure Set_Sthar_Satisk(Value: Double);
    function Get_Sthar_Malfisk: Double;
    procedure Set_Sthar_Malfisk(Value: Double);
    function Get_Sthar_Ftirsip: WideString;
    procedure Set_Sthar_Ftirsip(const Value: WideString);
    function Get_Sthar_Satisk2: Double;
    procedure Set_Sthar_Satisk2(Value: Double);
    function Get_Liste_Fiat: Integer;
    procedure Set_Liste_Fiat(Value: Integer);
    function Get_Sthar_Htur: WideString;
    procedure Set_Sthar_Htur(const Value: WideString);
    function Get_Sthar_Dovtip: Integer;
    procedure Set_Sthar_Dovtip(Value: Integer);
    function Get_PROMASYON_KODU: Integer;
    procedure Set_PROMASYON_KODU(Value: Integer);
    function Get_Sthar_Dovfiat: Double;
    procedure Set_Sthar_Dovfiat(Value: Double);
    function Get_Sthar_Odegun: Integer;
    procedure Set_Sthar_Odegun(Value: Integer);
    function Get_STra_SatIsk3: Double;
    procedure Set_STra_SatIsk3(Value: Double);
    function Get_STra_SatIsk4: Double;
    procedure Set_STra_SatIsk4(Value: Double);
    function Get_STra_SatIsk5: Double;
    procedure Set_STra_SatIsk5(Value: Double);
    function Get_STra_SatIsk6: Double;
    procedure Set_STra_SatIsk6(Value: Double);
    function Get_Sthar_Bgtip: WideString;
    procedure Set_Sthar_Bgtip(const Value: WideString);
    function Get_Sthar_Kod1: WideString;
    procedure Set_Sthar_Kod1(const Value: WideString);
    function Get_Sthar_Kod2: WideString;
    procedure Set_Sthar_Kod2(const Value: WideString);
    function Get_Sthar_Sipnum: WideString;
    procedure Set_Sthar_Sipnum(const Value: WideString);
    function Get_Sthar_Carikod: WideString;
    procedure Set_Sthar_Carikod(const Value: WideString);
    function Get_Sthar_Sip_Turu: WideString;
    procedure Set_Sthar_Sip_Turu(const Value: WideString);
    function Get_Plasiyer_Kodu: WideString;
    procedure Set_Plasiyer_Kodu(const Value: WideString);
    function Get_Ekalan_Neden: WideString;
    procedure Set_Ekalan_Neden(const Value: WideString);
    function Get_Ekalan: WideString;
    procedure Set_Ekalan(const Value: WideString);
    function Get_Ekalan1: WideString;
    procedure Set_Ekalan1(const Value: WideString);
    function Get_Redmik: Double;
    procedure Set_Redmik(Value: Double);
    function Get_Redneden: Integer;
    procedure Set_Redneden(Value: Integer);
    function Get_Sira: Integer;
    procedure Set_Sira(Value: Integer);
    function Get_STra_SIPKONT: Integer;
    procedure Set_STra_SIPKONT(Value: Integer);
    function Get_Ambar_Kabulno: WideString;
    procedure Set_Ambar_Kabulno(const Value: WideString);
    function Get_Firma_Dovtip: Integer;
    procedure Set_Firma_Dovtip(Value: Integer);
    function Get_Firma_Dovtut: Double;
    procedure Set_Firma_Dovtut(Value: Double);
    function Get_Firma_Dovmal: Double;
    procedure Set_Firma_Dovmal(Value: Double);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_Irsaliye_No: WideString;
    procedure Set_Irsaliye_No(const Value: WideString);
    function Get_Irsaliye_Tarih: TDateTime;
    procedure Set_Irsaliye_Tarih(Value: TDateTime);
    function Get_KOSULKODU: WideString;
    procedure Set_KOSULKODU(const Value: WideString);
    function Get_Ecza_fat_tip: Integer;
    procedure Set_Ecza_fat_tip(Value: Integer);
    function Get_Sthar_Testar: TDateTime;
    procedure Set_Sthar_Testar(Value: TDateTime);
    function Get_Olcubr: Integer;
    procedure Set_Olcubr(Value: Integer);
    function Get_IncKeyNo: Integer;
    procedure Set_IncKeyNo(Value: Integer);
    function Get_Vade_Tarihi: TDateTime;
    procedure Set_Vade_Tarihi(Value: TDateTime);
    function Get_Liste_No: WideString;
    procedure Set_Liste_No(const Value: WideString);
    function Get_Baglanti_No: Integer;
    procedure Set_Baglanti_No(Value: Integer);
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_Muh_Kodu: WideString;
    procedure Set_Muh_Kodu(const Value: WideString);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_F_Yedek3: Double;
    procedure Set_F_Yedek3(Value: Double);
    function Get_F_Yedek4: Double;
    procedure Set_F_Yedek4(Value: Double);
    function Get_F_Yedek5: Double;
    procedure Set_F_Yedek5(Value: Double);
    function Get_C_Yedek6: WideString;
    procedure Set_C_Yedek6(const Value: WideString);
    function Get_B_Yedek7: Integer;
    procedure Set_B_Yedek7(Value: Integer);
    function Get_I_Yedek8: Integer;
    procedure Set_I_Yedek8(Value: Integer);
    function Get_L_Yedek9: Integer;
    procedure Set_L_Yedek9(Value: Integer);
    function Get_D_YEDEK10: TDateTime;
    procedure Set_D_YEDEK10(Value: TDateTime);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_FIYATTARIHI: TDateTime;
    procedure Set_FIYATTARIHI(Value: TDateTime);
    function Get_KOSULTARIHI: TDateTime;
    procedure Set_KOSULTARIHI(Value: TDateTime);
    function Get_Satisk1tip: Integer;
    procedure Set_Satisk1tip(Value: Integer);
    function Get_Satisk2tip: Integer;
    procedure Set_Satisk2tip(Value: Integer);
    function Get_Satisk3tip: Integer;
    procedure Set_Satisk3tip(Value: Integer);
    function Get_Satisk4tip: Integer;
    procedure Set_Satisk4tip(Value: Integer);
    function Get_Satisk5tip: Integer;
    procedure Set_Satisk5tip(Value: Integer);
    function Get_Satisk6tip: Integer;
    procedure Set_Satisk6tip(Value: Integer);
    function Get_EXPORTTYPE: Integer;
    procedure Set_EXPORTTYPE(Value: Integer);
    function Get_Exportmik: Double;
    procedure Set_Exportmik(Value: Double);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
    function Get_KKMalF: Double;
    procedure Set_KKMalF(Value: Double);
    function Get_Stra_IrsKont: Integer;
    procedure Set_Stra_IrsKont(Value: Integer);
    function Get_YapKod: WideString;
    procedure Set_YapKod(const Value: WideString);
    function Get_GirisDepoKodu: SYSINT;
    procedure Set_GirisDepoKodu(Value: SYSINT);
  public
    property DefaultInterface: IStokHareket read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property SonKayitNoAl: WordBool read Get_SonKayitNoAl write Set_SonKayitNoAl;
    property Stok_Kodu: WideString read Get_Stok_Kodu write Set_Stok_Kodu;
    property Fisno: WideString read Get_Fisno write Set_Fisno;
    property Sthar_Gcmik: Double read Get_Sthar_Gcmik write Set_Sthar_Gcmik;
    property Sthar_Gcmik2: Double read Get_Sthar_Gcmik2 write Set_Sthar_Gcmik2;
    property CEVRIM: Double read Get_CEVRIM write Set_CEVRIM;
    property Sthar_Gckod: WideString read Get_Sthar_Gckod write Set_Sthar_Gckod;
    property Sthar_Tarih: TDateTime read Get_Sthar_Tarih write Set_Sthar_Tarih;
    property Sthar_Nf: Double read Get_Sthar_Nf write Set_Sthar_Nf;
    property Sthar_Bf: Double read Get_Sthar_Bf write Set_Sthar_Bf;
    property Sthar_Iaf: Double read Get_Sthar_Iaf write Set_Sthar_Iaf;
    property Sthar_Kdv: Double read Get_Sthar_Kdv write Set_Sthar_Kdv;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property Sthar_Aciklama: WideString read Get_Sthar_Aciklama write Set_Sthar_Aciklama;
    property Sthar_Satisk: Double read Get_Sthar_Satisk write Set_Sthar_Satisk;
    property Sthar_Malfisk: Double read Get_Sthar_Malfisk write Set_Sthar_Malfisk;
    property Sthar_Ftirsip: WideString read Get_Sthar_Ftirsip write Set_Sthar_Ftirsip;
    property Sthar_Satisk2: Double read Get_Sthar_Satisk2 write Set_Sthar_Satisk2;
    property Liste_Fiat: Integer read Get_Liste_Fiat write Set_Liste_Fiat;
    property Sthar_Htur: WideString read Get_Sthar_Htur write Set_Sthar_Htur;
    property Sthar_Dovtip: Integer read Get_Sthar_Dovtip write Set_Sthar_Dovtip;
    property PROMASYON_KODU: Integer read Get_PROMASYON_KODU write Set_PROMASYON_KODU;
    property Sthar_Dovfiat: Double read Get_Sthar_Dovfiat write Set_Sthar_Dovfiat;
    property Sthar_Odegun: Integer read Get_Sthar_Odegun write Set_Sthar_Odegun;
    property STra_SatIsk3: Double read Get_STra_SatIsk3 write Set_STra_SatIsk3;
    property STra_SatIsk4: Double read Get_STra_SatIsk4 write Set_STra_SatIsk4;
    property STra_SatIsk5: Double read Get_STra_SatIsk5 write Set_STra_SatIsk5;
    property STra_SatIsk6: Double read Get_STra_SatIsk6 write Set_STra_SatIsk6;
    property Sthar_Bgtip: WideString read Get_Sthar_Bgtip write Set_Sthar_Bgtip;
    property Sthar_Kod1: WideString read Get_Sthar_Kod1 write Set_Sthar_Kod1;
    property Sthar_Kod2: WideString read Get_Sthar_Kod2 write Set_Sthar_Kod2;
    property Sthar_Sipnum: WideString read Get_Sthar_Sipnum write Set_Sthar_Sipnum;
    property Sthar_Carikod: WideString read Get_Sthar_Carikod write Set_Sthar_Carikod;
    property Sthar_Sip_Turu: WideString read Get_Sthar_Sip_Turu write Set_Sthar_Sip_Turu;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property Ekalan_Neden: WideString read Get_Ekalan_Neden write Set_Ekalan_Neden;
    property Ekalan: WideString read Get_Ekalan write Set_Ekalan;
    property Ekalan1: WideString read Get_Ekalan1 write Set_Ekalan1;
    property Redmik: Double read Get_Redmik write Set_Redmik;
    property Redneden: Integer read Get_Redneden write Set_Redneden;
    property Sira: Integer read Get_Sira write Set_Sira;
    property STra_SIPKONT: Integer read Get_STra_SIPKONT write Set_STra_SIPKONT;
    property Ambar_Kabulno: WideString read Get_Ambar_Kabulno write Set_Ambar_Kabulno;
    property Firma_Dovtip: Integer read Get_Firma_Dovtip write Set_Firma_Dovtip;
    property Firma_Dovtut: Double read Get_Firma_Dovtut write Set_Firma_Dovtut;
    property Firma_Dovmal: Double read Get_Firma_Dovmal write Set_Firma_Dovmal;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Irsaliye_No: WideString read Get_Irsaliye_No write Set_Irsaliye_No;
    property Irsaliye_Tarih: TDateTime read Get_Irsaliye_Tarih write Set_Irsaliye_Tarih;
    property KOSULKODU: WideString read Get_KOSULKODU write Set_KOSULKODU;
    property Ecza_fat_tip: Integer read Get_Ecza_fat_tip write Set_Ecza_fat_tip;
    property Sthar_Testar: TDateTime read Get_Sthar_Testar write Set_Sthar_Testar;
    property Olcubr: Integer read Get_Olcubr write Set_Olcubr;
    property IncKeyNo: Integer read Get_IncKeyNo write Set_IncKeyNo;
    property Vade_Tarihi: TDateTime read Get_Vade_Tarihi write Set_Vade_Tarihi;
    property Liste_No: WideString read Get_Liste_No write Set_Liste_No;
    property Baglanti_No: Integer read Get_Baglanti_No write Set_Baglanti_No;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property Muh_Kodu: WideString read Get_Muh_Kodu write Set_Muh_Kodu;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek3: Double read Get_F_Yedek3 write Set_F_Yedek3;
    property F_Yedek4: Double read Get_F_Yedek4 write Set_F_Yedek4;
    property F_Yedek5: Double read Get_F_Yedek5 write Set_F_Yedek5;
    property C_Yedek6: WideString read Get_C_Yedek6 write Set_C_Yedek6;
    property B_Yedek7: Integer read Get_B_Yedek7 write Set_B_Yedek7;
    property I_Yedek8: Integer read Get_I_Yedek8 write Set_I_Yedek8;
    property L_Yedek9: Integer read Get_L_Yedek9 write Set_L_Yedek9;
    property D_YEDEK10: TDateTime read Get_D_YEDEK10 write Set_D_YEDEK10;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property FIYATTARIHI: TDateTime read Get_FIYATTARIHI write Set_FIYATTARIHI;
    property KOSULTARIHI: TDateTime read Get_KOSULTARIHI write Set_KOSULTARIHI;
    property Satisk1tip: Integer read Get_Satisk1tip write Set_Satisk1tip;
    property Satisk2tip: Integer read Get_Satisk2tip write Set_Satisk2tip;
    property Satisk3tip: Integer read Get_Satisk3tip write Set_Satisk3tip;
    property Satisk4tip: Integer read Get_Satisk4tip write Set_Satisk4tip;
    property Satisk5tip: Integer read Get_Satisk5tip write Set_Satisk5tip;
    property Satisk6tip: Integer read Get_Satisk6tip write Set_Satisk6tip;
    property EXPORTTYPE: Integer read Get_EXPORTTYPE write Set_EXPORTTYPE;
    property Exportmik: Double read Get_Exportmik write Set_Exportmik;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
    property KKMalF: Double read Get_KKMalF write Set_KKMalF;
    property Stra_IrsKont: Integer read Get_Stra_IrsKont write Set_Stra_IrsKont;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
    property GirisDepoKodu: SYSINT read Get_GirisDepoKodu write Set_GirisDepoKodu;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoBasim provides a Create and CreateRemote method to          
// create instances of the default interface IBasim exposed by              
// the CoClass Basim. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBasim = class
    class function Create: IBasim;
    class function CreateRemote(const MachineName: string): IBasim;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBasim
// Help String      : Basim Object
// Default Interface: IBasim
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TBasimProperties= class;
{$ENDIF}
  TBasim = class(TOleServer)
  private
    FIntf:        IBasim;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TBasimProperties;
    function      GetServerProperties: TBasimProperties;
{$ENDIF}
    function      GetDefaultInterface: IBasim;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IBasim);
    procedure Disconnect; override;
    function FaturaBasim(FaturaTipi: TFaturaTip; const FatNo: WideString; const CariKodu: WideString): WordBool;
    function FaturaBasimDizaynNo(FaturaTipi: TFaturaTip; const FaturaNo: WideString; 
                                 const CariKodu: WideString; DizaynNo: Integer): WordBool;
    function KantarBasim(TartimNumarasi: Integer): WordBool;
    procedure MustahsilBasim(const BelgeNo: WideString);
    function NetBasimDizaynNo(FaturaTipi: TFaturaTip; const FaturaNo: WideString; 
                              const CariKodu: WideString; DizaynNo: Integer; 
                              out ResStream: WideString): WordBool;
    procedure CekSenetBasim(BelgeTipi: TCekSenType; const BelgeNo: WideString);
    procedure BordroBasim(BelgeTipi: TCekSenType; const BelgeNo: WideString);
    procedure CekSenetBasimDizaynNo(BelgeTipi: TCekSenType; const BelgeNo: WideString; 
                                    DizaynNo: Integer);
    procedure IrsFatBarkodBas(const Fatura: IFatura; const DizaynKodu: WideString; 
                              BasimAdeti: Integer);
    procedure StokBarkodBas(const EtiketBilgi: IBarkodBilgi);
    property DefaultInterface: IBasim read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property Name: WideString read Get_Name write Set_Name;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TBasimProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TBasim
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TBasimProperties = class(TPersistent)
  private
    FServer:    TBasim;
    function    GetDefaultInterface: IBasim;
    constructor Create(AServer: TBasim);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
  public
    property DefaultInterface: IBasim read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCariHareket provides a Create and CreateRemote method to          
// create instances of the default interface ICariHareket exposed by              
// the CoClass CariHareket. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCariHareket = class
    class function Create: ICariHareket;
    class function CreateRemote(const MachineName: string): ICariHareket;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCariHareket
// Help String      : CariHareket Object
// Default Interface: ICariHareket
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCariHareketProperties= class;
{$ENDIF}
  TCariHareket = class(TOleServer)
  private
    FIntf:        ICariHareket;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TCariHareketProperties;
    function      GetServerProperties: TCariHareketProperties;
{$ENDIF}
    function      GetDefaultInterface: ICariHareket;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_SilmeIcinGerekliSahalar: WideString;
    function Get_SonKayitNoAl: WordBool;
    procedure Set_SonKayitNoAl(Value: WordBool);
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_CARI_KOD: WideString;
    procedure Set_CARI_KOD(const Value: WideString);
    function Get_Tarih: TDateTime;
    procedure Set_Tarih(Value: TDateTime);
    function Get_Vade_Tarihi: TDateTime;
    procedure Set_Vade_Tarihi(Value: TDateTime);
    function Get_Belge_No: WideString;
    procedure Set_Belge_No(const Value: WideString);
    function Get_Aciklama: WideString;
    procedure Set_Aciklama(const Value: WideString);
    function Get_Hka: WideString;
    procedure Set_Hka(const Value: WideString);
    function Get_Borc: Double;
    procedure Set_Borc(Value: Double);
    function Get_Alacak: Double;
    procedure Set_Alacak(Value: Double);
    function Get_Bakiye: Double;
    procedure Set_Bakiye(Value: Double);
    function Get_DOVIZ_TURU: Integer;
    procedure Set_DOVIZ_TURU(Value: Integer);
    function Get_Doviz_Tutar: Double;
    procedure Set_Doviz_Tutar(Value: Double);
    function Get_RAPOR_KODU: WideString;
    procedure Set_RAPOR_KODU(const Value: WideString);
    function Get_F9sc: WideString;
    procedure Set_F9sc(const Value: WideString);
    function Get_Hareket_Turu: WideString;
    procedure Set_Hareket_Turu(const Value: WideString);
    function Get_Miktar: Double;
    procedure Set_Miktar(Value: Double);
    function Get_Ilave_Rapor_Kodu: WideString;
    procedure Set_Ilave_Rapor_Kodu(const Value: WideString);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_Kapatilmis_Tutar: Double;
    procedure Set_Kapatilmis_Tutar(Value: Double);
    function Get_Odeme_Gunu: Integer;
    procedure Set_Odeme_Gunu(Value: Integer);
    function Get_Firma_Doviz_Tipi: Integer;
    procedure Set_Firma_Doviz_Tipi(Value: Integer);
    function Get_Firma_Doviz_Tutari: Double;
    procedure Set_Firma_Doviz_Tutari(Value: Double);
    function Get_Plasiyer_Kodu: WideString;
    procedure Set_Plasiyer_Kodu(const Value: WideString);
    function Get_Ent_Ref_Key: WideString;
    procedure Set_Ent_Ref_Key(const Value: WideString);
    function Get_Inc_Key_Number: Integer;
    procedure Set_Inc_Key_Number(Value: Integer);
    function Get_RAPOR_KODU2: WideString;
    procedure Set_RAPOR_KODU2(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_F_Yedek1: Double;
    procedure Set_F_Yedek1(Value: Double);
    function Get_F_Yedek2: Double;
    procedure Set_F_Yedek2(Value: Double);
    function Get_C_Yedek1: WideString;
    procedure Set_C_Yedek1(const Value: WideString);
    function Get_C_Yedek2: WideString;
    procedure Set_C_Yedek2(const Value: WideString);
    function Get_B_Yedek1: Integer;
    procedure Set_B_Yedek1(Value: Integer);
    function Get_I_Yedek1: Integer;
    procedure Set_I_Yedek1(Value: Integer);
    function Get_L_Yedek1: Integer;
    procedure Set_L_Yedek1(Value: Integer);
    function Get_D_Yedek1: TDateTime;
    procedure Set_D_Yedek1(Value: TDateTime);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICariHareket);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    procedure SahalariTemizle;
    property DefaultInterface: ICariHareket read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property SilmeIcinGerekliSahalar: WideString read Get_SilmeIcinGerekliSahalar;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property SonKayitNoAl: WordBool read Get_SonKayitNoAl write Set_SonKayitNoAl;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property CARI_KOD: WideString read Get_CARI_KOD write Set_CARI_KOD;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property Vade_Tarihi: TDateTime read Get_Vade_Tarihi write Set_Vade_Tarihi;
    property Belge_No: WideString read Get_Belge_No write Set_Belge_No;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property Hka: WideString read Get_Hka write Set_Hka;
    property Borc: Double read Get_Borc write Set_Borc;
    property Alacak: Double read Get_Alacak write Set_Alacak;
    property Bakiye: Double read Get_Bakiye write Set_Bakiye;
    property DOVIZ_TURU: Integer read Get_DOVIZ_TURU write Set_DOVIZ_TURU;
    property Doviz_Tutar: Double read Get_Doviz_Tutar write Set_Doviz_Tutar;
    property RAPOR_KODU: WideString read Get_RAPOR_KODU write Set_RAPOR_KODU;
    property F9sc: WideString read Get_F9sc write Set_F9sc;
    property Hareket_Turu: WideString read Get_Hareket_Turu write Set_Hareket_Turu;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property Ilave_Rapor_Kodu: WideString read Get_Ilave_Rapor_Kodu write Set_Ilave_Rapor_Kodu;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Kapatilmis_Tutar: Double read Get_Kapatilmis_Tutar write Set_Kapatilmis_Tutar;
    property Odeme_Gunu: Integer read Get_Odeme_Gunu write Set_Odeme_Gunu;
    property Firma_Doviz_Tipi: Integer read Get_Firma_Doviz_Tipi write Set_Firma_Doviz_Tipi;
    property Firma_Doviz_Tutari: Double read Get_Firma_Doviz_Tutari write Set_Firma_Doviz_Tutari;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property Ent_Ref_Key: WideString read Get_Ent_Ref_Key write Set_Ent_Ref_Key;
    property Inc_Key_Number: Integer read Get_Inc_Key_Number write Set_Inc_Key_Number;
    property RAPOR_KODU2: WideString read Get_RAPOR_KODU2 write Set_RAPOR_KODU2;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property B_Yedek1: Integer read Get_B_Yedek1 write Set_B_Yedek1;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property L_Yedek1: Integer read Get_L_Yedek1 write Set_L_Yedek1;
    property D_Yedek1: TDateTime read Get_D_Yedek1 write Set_D_Yedek1;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCariHareketProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCariHareket
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCariHareketProperties = class(TPersistent)
  private
    FServer:    TCariHareket;
    function    GetDefaultInterface: ICariHareket;
    constructor Create(AServer: TCariHareket);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_SilmeIcinGerekliSahalar: WideString;
    function Get_SonKayitNoAl: WordBool;
    procedure Set_SonKayitNoAl(Value: WordBool);
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_CARI_KOD: WideString;
    procedure Set_CARI_KOD(const Value: WideString);
    function Get_Tarih: TDateTime;
    procedure Set_Tarih(Value: TDateTime);
    function Get_Vade_Tarihi: TDateTime;
    procedure Set_Vade_Tarihi(Value: TDateTime);
    function Get_Belge_No: WideString;
    procedure Set_Belge_No(const Value: WideString);
    function Get_Aciklama: WideString;
    procedure Set_Aciklama(const Value: WideString);
    function Get_Hka: WideString;
    procedure Set_Hka(const Value: WideString);
    function Get_Borc: Double;
    procedure Set_Borc(Value: Double);
    function Get_Alacak: Double;
    procedure Set_Alacak(Value: Double);
    function Get_Bakiye: Double;
    procedure Set_Bakiye(Value: Double);
    function Get_DOVIZ_TURU: Integer;
    procedure Set_DOVIZ_TURU(Value: Integer);
    function Get_Doviz_Tutar: Double;
    procedure Set_Doviz_Tutar(Value: Double);
    function Get_RAPOR_KODU: WideString;
    procedure Set_RAPOR_KODU(const Value: WideString);
    function Get_F9sc: WideString;
    procedure Set_F9sc(const Value: WideString);
    function Get_Hareket_Turu: WideString;
    procedure Set_Hareket_Turu(const Value: WideString);
    function Get_Miktar: Double;
    procedure Set_Miktar(Value: Double);
    function Get_Ilave_Rapor_Kodu: WideString;
    procedure Set_Ilave_Rapor_Kodu(const Value: WideString);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_Kapatilmis_Tutar: Double;
    procedure Set_Kapatilmis_Tutar(Value: Double);
    function Get_Odeme_Gunu: Integer;
    procedure Set_Odeme_Gunu(Value: Integer);
    function Get_Firma_Doviz_Tipi: Integer;
    procedure Set_Firma_Doviz_Tipi(Value: Integer);
    function Get_Firma_Doviz_Tutari: Double;
    procedure Set_Firma_Doviz_Tutari(Value: Double);
    function Get_Plasiyer_Kodu: WideString;
    procedure Set_Plasiyer_Kodu(const Value: WideString);
    function Get_Ent_Ref_Key: WideString;
    procedure Set_Ent_Ref_Key(const Value: WideString);
    function Get_Inc_Key_Number: Integer;
    procedure Set_Inc_Key_Number(Value: Integer);
    function Get_RAPOR_KODU2: WideString;
    procedure Set_RAPOR_KODU2(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_F_Yedek1: Double;
    procedure Set_F_Yedek1(Value: Double);
    function Get_F_Yedek2: Double;
    procedure Set_F_Yedek2(Value: Double);
    function Get_C_Yedek1: WideString;
    procedure Set_C_Yedek1(const Value: WideString);
    function Get_C_Yedek2: WideString;
    procedure Set_C_Yedek2(const Value: WideString);
    function Get_B_Yedek1: Integer;
    procedure Set_B_Yedek1(Value: Integer);
    function Get_I_Yedek1: Integer;
    procedure Set_I_Yedek1(Value: Integer);
    function Get_L_Yedek1: Integer;
    procedure Set_L_Yedek1(Value: Integer);
    function Get_D_Yedek1: TDateTime;
    procedure Set_D_Yedek1(Value: TDateTime);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_OnayTipi: WideString;
    procedure Set_OnayTipi(const Value: WideString);
    function Get_OnayNum: Integer;
    procedure Set_OnayNum(Value: Integer);
  public
    property DefaultInterface: ICariHareket read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property SonKayitNoAl: WordBool read Get_SonKayitNoAl write Set_SonKayitNoAl;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property CARI_KOD: WideString read Get_CARI_KOD write Set_CARI_KOD;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property Vade_Tarihi: TDateTime read Get_Vade_Tarihi write Set_Vade_Tarihi;
    property Belge_No: WideString read Get_Belge_No write Set_Belge_No;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property Hka: WideString read Get_Hka write Set_Hka;
    property Borc: Double read Get_Borc write Set_Borc;
    property Alacak: Double read Get_Alacak write Set_Alacak;
    property Bakiye: Double read Get_Bakiye write Set_Bakiye;
    property DOVIZ_TURU: Integer read Get_DOVIZ_TURU write Set_DOVIZ_TURU;
    property Doviz_Tutar: Double read Get_Doviz_Tutar write Set_Doviz_Tutar;
    property RAPOR_KODU: WideString read Get_RAPOR_KODU write Set_RAPOR_KODU;
    property F9sc: WideString read Get_F9sc write Set_F9sc;
    property Hareket_Turu: WideString read Get_Hareket_Turu write Set_Hareket_Turu;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property Ilave_Rapor_Kodu: WideString read Get_Ilave_Rapor_Kodu write Set_Ilave_Rapor_Kodu;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Kapatilmis_Tutar: Double read Get_Kapatilmis_Tutar write Set_Kapatilmis_Tutar;
    property Odeme_Gunu: Integer read Get_Odeme_Gunu write Set_Odeme_Gunu;
    property Firma_Doviz_Tipi: Integer read Get_Firma_Doviz_Tipi write Set_Firma_Doviz_Tipi;
    property Firma_Doviz_Tutari: Double read Get_Firma_Doviz_Tutari write Set_Firma_Doviz_Tutari;
    property Plasiyer_Kodu: WideString read Get_Plasiyer_Kodu write Set_Plasiyer_Kodu;
    property Ent_Ref_Key: WideString read Get_Ent_Ref_Key write Set_Ent_Ref_Key;
    property Inc_Key_Number: Integer read Get_Inc_Key_Number write Set_Inc_Key_Number;
    property RAPOR_KODU2: WideString read Get_RAPOR_KODU2 write Set_RAPOR_KODU2;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property B_Yedek1: Integer read Get_B_Yedek1 write Set_B_Yedek1;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property L_Yedek1: Integer read Get_L_Yedek1 write Set_L_Yedek1;
    property D_Yedek1: TDateTime read Get_D_Yedek1 write Set_D_Yedek1;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property OnayTipi: WideString read Get_OnayTipi write Set_OnayTipi;
    property OnayNum: Integer read Get_OnayNum write Set_OnayNum;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMaliGrup provides a Create and CreateRemote method to          
// create instances of the default interface IMaliGrup exposed by              
// the CoClass MaliGrup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMaliGrup = class
    class function Create: IMaliGrup;
    class function CreateRemote(const MachineName: string): IMaliGrup;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMaliGrup
// Help String      : MaliGrup Object
// Default Interface: IMaliGrup
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMaliGrupProperties= class;
{$ENDIF}
  TMaliGrup = class(TOleServer)
  private
    FIntf:        IMaliGrup;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMaliGrupProperties;
    function      GetServerProperties: TMaliGrupProperties;
{$ENDIF}
    function      GetDefaultInterface: IMaliGrup;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_SilmeIcinGerekliSahalar: WideString;
    function Get_SonKayitNoAl: WordBool;
    procedure Set_SonKayitNoAl(Value: WordBool);
    function Get_GrupKod: WideString;
    procedure Set_GrupKod(const Value: WideString);
    function Get_ISIM: WideString;
    procedure Set_ISIM(const Value: WideString);
    function Get_AnaKod: WideString;
    procedure Set_AnaKod(const Value: WideString);
    function Get_Tur: WideString;
    procedure Set_Tur(const Value: WideString);
    function Get_HangiOlcuBirimi: Shortint;
    procedure Set_HangiOlcuBirimi(Value: Shortint);
    function Get_HamOrtSatFi: WideString;
    procedure Set_HamOrtSatFi(const Value: WideString);
    function Get_BRHamMadde: Double;
    procedure Set_BRHamMadde(Value: Double);
    function Get_BRAmbalaj: Double;
    procedure Set_BRAmbalaj(Value: Double);
    function Get_BrIscSur: Double;
    procedure Set_BrIscSur(Value: Double);
    function Get_BREnerji: Double;
    procedure Set_BREnerji(Value: Double);
    function Get_BRAmort: Double;
    procedure Set_BRAmort(Value: Double);
    function Get_BRYard: Double;
    procedure Set_BRYard(Value: Double);
    function Get_BRYedek: Double;
    procedure Set_BRYedek(Value: Double);
    function Get_BRMalGider_1: Double;
    procedure Set_BRMalGider_1(Value: Double);
    function Get_BRMalGider_2: Double;
    procedure Set_BRMalGider_2(Value: Double);
    function Get_BrMalGider_3: Double;
    procedure Set_BrMalGider_3(Value: Double);
    function Get_BRMalGider_4: Double;
    procedure Set_BRMalGider_4(Value: Double);
    function Get_BRMalGider_5: Double;
    procedure Set_BRMalGider_5(Value: Double);
    function Get_YariMamulHesKod: WideString;
    procedure Set_YariMamulHesKod(const Value: WideString);
    function Get_MamulHesKod: WideString;
    procedure Set_MamulHesKod(const Value: WideString);
    function Get_HamMadSarfHes: WideString;
    procedure Set_HamMadSarfHes(const Value: WideString);
    function Get_AmbalajHes: WideString;
    procedure Set_AmbalajHes(const Value: WideString);
    function Get_SatMalMaliyet: WideString;
    procedure Set_SatMalMaliyet(const Value: WideString);
    function Get_IlkMadMalzYans: WideString;
    procedure Set_IlkMadMalzYans(const Value: WideString);
    function Get_AmbalajYans: WideString;
    procedure Set_AmbalajYans(const Value: WideString);
    function Get_IsciYans1: WideString;
    procedure Set_IsciYans1(const Value: WideString);
    function Get_IsciYans2: WideString;
    procedure Set_IsciYans2(const Value: WideString);
    function Get_EnerjiYans: WideString;
    procedure Set_EnerjiYans(const Value: WideString);
    function Get_AmortYans: WideString;
    procedure Set_AmortYans(const Value: WideString);
    function Get_YardSerYans: WideString;
    procedure Set_YardSerYans(const Value: WideString);
    function Get_YedParcaYans: WideString;
    procedure Set_YedParcaYans(const Value: WideString);
    function Get_MalGider1_Yans: WideString;
    procedure Set_MalGider1_Yans(const Value: WideString);
    function Get_MalGider2_Yans: WideString;
    procedure Set_MalGider2_Yans(const Value: WideString);
    function Get_MalGider3_Yans: WideString;
    procedure Set_MalGider3_Yans(const Value: WideString);
    function Get_MalGider4_Yans: WideString;
    procedure Set_MalGider4_Yans(const Value: WideString);
    function Get_MalGider5_Yans: WideString;
    procedure Set_MalGider5_Yans(const Value: WideString);
    function Get_AyBasiStok: Double;
    procedure Set_AyBasiStok(Value: Double);
    function Get_AySonuStok: Double;
    procedure Set_AySonuStok(Value: Double);
    function Get_Yedek1: WideString;
    procedure Set_Yedek1(const Value: WideString);
    function Get_Yedek2: WideString;
    procedure Set_Yedek2(const Value: WideString);
    function Get_Yedek3: WideString;
    procedure Set_Yedek3(const Value: WideString);
    function Get_Yedek4: WideString;
    procedure Set_Yedek4(const Value: WideString);
    function Get_Yedek5: Double;
    procedure Set_Yedek5(Value: Double);
    function Get_Yedek6: Double;
    procedure Set_Yedek6(Value: Double);
    function Get_Yedek7: Double;
    procedure Set_Yedek7(Value: Double);
    function Get_Yedek8: Double;
    procedure Set_Yedek8(Value: Double);
    function Get_Yedek9: WideString;
    procedure Set_Yedek9(const Value: WideString);
    function Get_Yedek10: WideString;
    procedure Set_Yedek10(const Value: WideString);
    function Get_Yedek11: WideString;
    procedure Set_Yedek11(const Value: WideString);
    function Get_Yedek12: WideString;
    procedure Set_Yedek12(const Value: WideString);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_MamulTransHesap: WideString;
    procedure Set_MamulTransHesap(const Value: WideString);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_ExpSatMalMaliyet: WideString;
    procedure Set_ExpSatMalMaliyet(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IMaliGrup);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    procedure SahalariTemizle;
    property DefaultInterface: IMaliGrup read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property SilmeIcinGerekliSahalar: WideString read Get_SilmeIcinGerekliSahalar;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property SonKayitNoAl: WordBool read Get_SonKayitNoAl write Set_SonKayitNoAl;
    property GrupKod: WideString read Get_GrupKod write Set_GrupKod;
    property ISIM: WideString read Get_ISIM write Set_ISIM;
    property AnaKod: WideString read Get_AnaKod write Set_AnaKod;
    property Tur: WideString read Get_Tur write Set_Tur;
    property HangiOlcuBirimi: Shortint read Get_HangiOlcuBirimi write Set_HangiOlcuBirimi;
    property HamOrtSatFi: WideString read Get_HamOrtSatFi write Set_HamOrtSatFi;
    property BRHamMadde: Double read Get_BRHamMadde write Set_BRHamMadde;
    property BRAmbalaj: Double read Get_BRAmbalaj write Set_BRAmbalaj;
    property BrIscSur: Double read Get_BrIscSur write Set_BrIscSur;
    property BREnerji: Double read Get_BREnerji write Set_BREnerji;
    property BRAmort: Double read Get_BRAmort write Set_BRAmort;
    property BRYard: Double read Get_BRYard write Set_BRYard;
    property BRYedek: Double read Get_BRYedek write Set_BRYedek;
    property BRMalGider_1: Double read Get_BRMalGider_1 write Set_BRMalGider_1;
    property BRMalGider_2: Double read Get_BRMalGider_2 write Set_BRMalGider_2;
    property BrMalGider_3: Double read Get_BrMalGider_3 write Set_BrMalGider_3;
    property BRMalGider_4: Double read Get_BRMalGider_4 write Set_BRMalGider_4;
    property BRMalGider_5: Double read Get_BRMalGider_5 write Set_BRMalGider_5;
    property YariMamulHesKod: WideString read Get_YariMamulHesKod write Set_YariMamulHesKod;
    property MamulHesKod: WideString read Get_MamulHesKod write Set_MamulHesKod;
    property HamMadSarfHes: WideString read Get_HamMadSarfHes write Set_HamMadSarfHes;
    property AmbalajHes: WideString read Get_AmbalajHes write Set_AmbalajHes;
    property SatMalMaliyet: WideString read Get_SatMalMaliyet write Set_SatMalMaliyet;
    property IlkMadMalzYans: WideString read Get_IlkMadMalzYans write Set_IlkMadMalzYans;
    property AmbalajYans: WideString read Get_AmbalajYans write Set_AmbalajYans;
    property IsciYans1: WideString read Get_IsciYans1 write Set_IsciYans1;
    property IsciYans2: WideString read Get_IsciYans2 write Set_IsciYans2;
    property EnerjiYans: WideString read Get_EnerjiYans write Set_EnerjiYans;
    property AmortYans: WideString read Get_AmortYans write Set_AmortYans;
    property YardSerYans: WideString read Get_YardSerYans write Set_YardSerYans;
    property YedParcaYans: WideString read Get_YedParcaYans write Set_YedParcaYans;
    property MalGider1_Yans: WideString read Get_MalGider1_Yans write Set_MalGider1_Yans;
    property MalGider2_Yans: WideString read Get_MalGider2_Yans write Set_MalGider2_Yans;
    property MalGider3_Yans: WideString read Get_MalGider3_Yans write Set_MalGider3_Yans;
    property MalGider4_Yans: WideString read Get_MalGider4_Yans write Set_MalGider4_Yans;
    property MalGider5_Yans: WideString read Get_MalGider5_Yans write Set_MalGider5_Yans;
    property AyBasiStok: Double read Get_AyBasiStok write Set_AyBasiStok;
    property AySonuStok: Double read Get_AySonuStok write Set_AySonuStok;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: WideString read Get_Yedek3 write Set_Yedek3;
    property Yedek4: WideString read Get_Yedek4 write Set_Yedek4;
    property Yedek5: Double read Get_Yedek5 write Set_Yedek5;
    property Yedek6: Double read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Double read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Double read Get_Yedek8 write Set_Yedek8;
    property Yedek9: WideString read Get_Yedek9 write Set_Yedek9;
    property Yedek10: WideString read Get_Yedek10 write Set_Yedek10;
    property Yedek11: WideString read Get_Yedek11 write Set_Yedek11;
    property Yedek12: WideString read Get_Yedek12 write Set_Yedek12;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property MamulTransHesap: WideString read Get_MamulTransHesap write Set_MamulTransHesap;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property ExpSatMalMaliyet: WideString read Get_ExpSatMalMaliyet write Set_ExpSatMalMaliyet;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMaliGrupProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMaliGrup
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMaliGrupProperties = class(TPersistent)
  private
    FServer:    TMaliGrup;
    function    GetDefaultInterface: IMaliGrup;
    constructor Create(AServer: TMaliGrup);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_SilmeIcinGerekliSahalar: WideString;
    function Get_SonKayitNoAl: WordBool;
    procedure Set_SonKayitNoAl(Value: WordBool);
    function Get_GrupKod: WideString;
    procedure Set_GrupKod(const Value: WideString);
    function Get_ISIM: WideString;
    procedure Set_ISIM(const Value: WideString);
    function Get_AnaKod: WideString;
    procedure Set_AnaKod(const Value: WideString);
    function Get_Tur: WideString;
    procedure Set_Tur(const Value: WideString);
    function Get_HangiOlcuBirimi: Shortint;
    procedure Set_HangiOlcuBirimi(Value: Shortint);
    function Get_HamOrtSatFi: WideString;
    procedure Set_HamOrtSatFi(const Value: WideString);
    function Get_BRHamMadde: Double;
    procedure Set_BRHamMadde(Value: Double);
    function Get_BRAmbalaj: Double;
    procedure Set_BRAmbalaj(Value: Double);
    function Get_BrIscSur: Double;
    procedure Set_BrIscSur(Value: Double);
    function Get_BREnerji: Double;
    procedure Set_BREnerji(Value: Double);
    function Get_BRAmort: Double;
    procedure Set_BRAmort(Value: Double);
    function Get_BRYard: Double;
    procedure Set_BRYard(Value: Double);
    function Get_BRYedek: Double;
    procedure Set_BRYedek(Value: Double);
    function Get_BRMalGider_1: Double;
    procedure Set_BRMalGider_1(Value: Double);
    function Get_BRMalGider_2: Double;
    procedure Set_BRMalGider_2(Value: Double);
    function Get_BrMalGider_3: Double;
    procedure Set_BrMalGider_3(Value: Double);
    function Get_BRMalGider_4: Double;
    procedure Set_BRMalGider_4(Value: Double);
    function Get_BRMalGider_5: Double;
    procedure Set_BRMalGider_5(Value: Double);
    function Get_YariMamulHesKod: WideString;
    procedure Set_YariMamulHesKod(const Value: WideString);
    function Get_MamulHesKod: WideString;
    procedure Set_MamulHesKod(const Value: WideString);
    function Get_HamMadSarfHes: WideString;
    procedure Set_HamMadSarfHes(const Value: WideString);
    function Get_AmbalajHes: WideString;
    procedure Set_AmbalajHes(const Value: WideString);
    function Get_SatMalMaliyet: WideString;
    procedure Set_SatMalMaliyet(const Value: WideString);
    function Get_IlkMadMalzYans: WideString;
    procedure Set_IlkMadMalzYans(const Value: WideString);
    function Get_AmbalajYans: WideString;
    procedure Set_AmbalajYans(const Value: WideString);
    function Get_IsciYans1: WideString;
    procedure Set_IsciYans1(const Value: WideString);
    function Get_IsciYans2: WideString;
    procedure Set_IsciYans2(const Value: WideString);
    function Get_EnerjiYans: WideString;
    procedure Set_EnerjiYans(const Value: WideString);
    function Get_AmortYans: WideString;
    procedure Set_AmortYans(const Value: WideString);
    function Get_YardSerYans: WideString;
    procedure Set_YardSerYans(const Value: WideString);
    function Get_YedParcaYans: WideString;
    procedure Set_YedParcaYans(const Value: WideString);
    function Get_MalGider1_Yans: WideString;
    procedure Set_MalGider1_Yans(const Value: WideString);
    function Get_MalGider2_Yans: WideString;
    procedure Set_MalGider2_Yans(const Value: WideString);
    function Get_MalGider3_Yans: WideString;
    procedure Set_MalGider3_Yans(const Value: WideString);
    function Get_MalGider4_Yans: WideString;
    procedure Set_MalGider4_Yans(const Value: WideString);
    function Get_MalGider5_Yans: WideString;
    procedure Set_MalGider5_Yans(const Value: WideString);
    function Get_AyBasiStok: Double;
    procedure Set_AyBasiStok(Value: Double);
    function Get_AySonuStok: Double;
    procedure Set_AySonuStok(Value: Double);
    function Get_Yedek1: WideString;
    procedure Set_Yedek1(const Value: WideString);
    function Get_Yedek2: WideString;
    procedure Set_Yedek2(const Value: WideString);
    function Get_Yedek3: WideString;
    procedure Set_Yedek3(const Value: WideString);
    function Get_Yedek4: WideString;
    procedure Set_Yedek4(const Value: WideString);
    function Get_Yedek5: Double;
    procedure Set_Yedek5(Value: Double);
    function Get_Yedek6: Double;
    procedure Set_Yedek6(Value: Double);
    function Get_Yedek7: Double;
    procedure Set_Yedek7(Value: Double);
    function Get_Yedek8: Double;
    procedure Set_Yedek8(Value: Double);
    function Get_Yedek9: WideString;
    procedure Set_Yedek9(const Value: WideString);
    function Get_Yedek10: WideString;
    procedure Set_Yedek10(const Value: WideString);
    function Get_Yedek11: WideString;
    procedure Set_Yedek11(const Value: WideString);
    function Get_Yedek12: WideString;
    procedure Set_Yedek12(const Value: WideString);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_MamulTransHesap: WideString;
    procedure Set_MamulTransHesap(const Value: WideString);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_ExpSatMalMaliyet: WideString;
    procedure Set_ExpSatMalMaliyet(const Value: WideString);
  public
    property DefaultInterface: IMaliGrup read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property SonKayitNoAl: WordBool read Get_SonKayitNoAl write Set_SonKayitNoAl;
    property GrupKod: WideString read Get_GrupKod write Set_GrupKod;
    property ISIM: WideString read Get_ISIM write Set_ISIM;
    property AnaKod: WideString read Get_AnaKod write Set_AnaKod;
    property Tur: WideString read Get_Tur write Set_Tur;
    property HangiOlcuBirimi: Shortint read Get_HangiOlcuBirimi write Set_HangiOlcuBirimi;
    property HamOrtSatFi: WideString read Get_HamOrtSatFi write Set_HamOrtSatFi;
    property BRHamMadde: Double read Get_BRHamMadde write Set_BRHamMadde;
    property BRAmbalaj: Double read Get_BRAmbalaj write Set_BRAmbalaj;
    property BrIscSur: Double read Get_BrIscSur write Set_BrIscSur;
    property BREnerji: Double read Get_BREnerji write Set_BREnerji;
    property BRAmort: Double read Get_BRAmort write Set_BRAmort;
    property BRYard: Double read Get_BRYard write Set_BRYard;
    property BRYedek: Double read Get_BRYedek write Set_BRYedek;
    property BRMalGider_1: Double read Get_BRMalGider_1 write Set_BRMalGider_1;
    property BRMalGider_2: Double read Get_BRMalGider_2 write Set_BRMalGider_2;
    property BrMalGider_3: Double read Get_BrMalGider_3 write Set_BrMalGider_3;
    property BRMalGider_4: Double read Get_BRMalGider_4 write Set_BRMalGider_4;
    property BRMalGider_5: Double read Get_BRMalGider_5 write Set_BRMalGider_5;
    property YariMamulHesKod: WideString read Get_YariMamulHesKod write Set_YariMamulHesKod;
    property MamulHesKod: WideString read Get_MamulHesKod write Set_MamulHesKod;
    property HamMadSarfHes: WideString read Get_HamMadSarfHes write Set_HamMadSarfHes;
    property AmbalajHes: WideString read Get_AmbalajHes write Set_AmbalajHes;
    property SatMalMaliyet: WideString read Get_SatMalMaliyet write Set_SatMalMaliyet;
    property IlkMadMalzYans: WideString read Get_IlkMadMalzYans write Set_IlkMadMalzYans;
    property AmbalajYans: WideString read Get_AmbalajYans write Set_AmbalajYans;
    property IsciYans1: WideString read Get_IsciYans1 write Set_IsciYans1;
    property IsciYans2: WideString read Get_IsciYans2 write Set_IsciYans2;
    property EnerjiYans: WideString read Get_EnerjiYans write Set_EnerjiYans;
    property AmortYans: WideString read Get_AmortYans write Set_AmortYans;
    property YardSerYans: WideString read Get_YardSerYans write Set_YardSerYans;
    property YedParcaYans: WideString read Get_YedParcaYans write Set_YedParcaYans;
    property MalGider1_Yans: WideString read Get_MalGider1_Yans write Set_MalGider1_Yans;
    property MalGider2_Yans: WideString read Get_MalGider2_Yans write Set_MalGider2_Yans;
    property MalGider3_Yans: WideString read Get_MalGider3_Yans write Set_MalGider3_Yans;
    property MalGider4_Yans: WideString read Get_MalGider4_Yans write Set_MalGider4_Yans;
    property MalGider5_Yans: WideString read Get_MalGider5_Yans write Set_MalGider5_Yans;
    property AyBasiStok: Double read Get_AyBasiStok write Set_AyBasiStok;
    property AySonuStok: Double read Get_AySonuStok write Set_AySonuStok;
    property Yedek1: WideString read Get_Yedek1 write Set_Yedek1;
    property Yedek2: WideString read Get_Yedek2 write Set_Yedek2;
    property Yedek3: WideString read Get_Yedek3 write Set_Yedek3;
    property Yedek4: WideString read Get_Yedek4 write Set_Yedek4;
    property Yedek5: Double read Get_Yedek5 write Set_Yedek5;
    property Yedek6: Double read Get_Yedek6 write Set_Yedek6;
    property Yedek7: Double read Get_Yedek7 write Set_Yedek7;
    property Yedek8: Double read Get_Yedek8 write Set_Yedek8;
    property Yedek9: WideString read Get_Yedek9 write Set_Yedek9;
    property Yedek10: WideString read Get_Yedek10 write Set_Yedek10;
    property Yedek11: WideString read Get_Yedek11 write Set_Yedek11;
    property Yedek12: WideString read Get_Yedek12 write Set_Yedek12;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property MamulTransHesap: WideString read Get_MamulTransHesap write Set_MamulTransHesap;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property ExpSatMalMaliyet: WideString read Get_ExpSatMalMaliyet write Set_ExpSatMalMaliyet;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoData2 provides a Create and CreateRemote method to          
// create instances of the default interface IData2 exposed by              
// the CoClass Data2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoData2 = class
    class function Create: IData2;
    class function CreateRemote(const MachineName: string): IData2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TData2
// Help String      : Data2 Object
// Default Interface: IData2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TData2Properties= class;
{$ENDIF}
  TData2 = class(TOleServer)
  private
    FIntf:        IData2;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TData2Properties;
    function      GetServerProperties: TData2Properties;
{$ENDIF}
    function      GetDefaultInterface: IData2;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_SilmeIcinGerekliSahalar: WideString;
    function Get_SonKayitNoAl: WordBool;
    procedure Set_SonKayitNoAl(Value: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IData2);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    procedure SahalariTemizle;
    property DefaultInterface: IData2 read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property SilmeIcinGerekliSahalar: WideString read Get_SilmeIcinGerekliSahalar;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property SonKayitNoAl: WordBool read Get_SonKayitNoAl write Set_SonKayitNoAl;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TData2Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TData2
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TData2Properties = class(TPersistent)
  private
    FServer:    TData2;
    function    GetDefaultInterface: IData2;
    constructor Create(AServer: TData2);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_SilmeIcinGerekliSahalar: WideString;
    function Get_SonKayitNoAl: WordBool;
    procedure Set_SonKayitNoAl(Value: WordBool);
  public
    property DefaultInterface: IData2 read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property SonKayitNoAl: WordBool read Get_SonKayitNoAl write Set_SonKayitNoAl;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoUretim provides a Create and CreateRemote method to          
// create instances of the default interface IUretim exposed by              
// the CoClass Uretim. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUretim = class
    class function Create: IUretim;
    class function CreateRemote(const MachineName: string): IUretim;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUretim
// Help String      : Uretim Object
// Default Interface: IUretim
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TUretimProperties= class;
{$ENDIF}
  TUretim = class(TOleServer)
  private
    FIntf:        IUretim;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TUretimProperties;
    function      GetServerProperties: TUretimProperties;
{$ENDIF}
    function      GetDefaultInterface: IUretim;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_SilmeIcinGerekliSahalar: WideString;
    function Get_SonKayitNoAl: WordBool;
    procedure Set_SonKayitNoAl(Value: WordBool);
    function Get_UretSon_FisNo: WideString;
    procedure Set_UretSon_FisNo(const Value: WideString);
    function Get_UretSon_Tarih: TDateTime;
    procedure Set_UretSon_Tarih(Value: TDateTime);
    function Get_UretSon_SipNo: WideString;
    procedure Set_UretSon_SipNo(const Value: WideString);
    function Get_UretSon_Depo: Integer;
    procedure Set_UretSon_Depo(Value: Integer);
    function Get_UretSon_Mamul: WideString;
    procedure Set_UretSon_Mamul(const Value: WideString);
    function Get_UretSon_Miktar: Double;
    procedure Set_UretSon_Miktar(Value: Double);
    function Get_UretSon_MalY1: Double;
    procedure Set_UretSon_MalY1(Value: Double);
    function Get_UretSon_Maly2: Double;
    procedure Set_UretSon_Maly2(Value: Double);
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_IncKeyNo: Integer;
    procedure Set_IncKeyNo(Value: Integer);
    function Get_D_Yedek1: TDateTime;
    procedure Set_D_Yedek1(Value: TDateTime);
    function Get_D_Yedek2: TDateTime;
    procedure Set_D_Yedek2(Value: TDateTime);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_S_Yedek3: WideString;
    procedure Set_S_Yedek3(const Value: WideString);
    function Get_S_Yedek4: WideString;
    procedure Set_S_Yedek4(const Value: WideString);
    function Get_F_Yedek1: Double;
    procedure Set_F_Yedek1(Value: Double);
    function Get_F_Yedek2: Double;
    procedure Set_F_Yedek2(Value: Double);
    function Get_I_Yedek1: Integer;
    procedure Set_I_Yedek1(Value: Integer);
    function Get_I_Yedek2: Integer;
    procedure Set_I_Yedek2(Value: Integer);
    function Get_B_Yedek1: Shortint;
    procedure Set_B_Yedek1(Value: Shortint);
    function Get_B_Yedek2: Shortint;
    procedure Set_B_Yedek2(Value: Shortint);
    function Get_C_Yedek1: WideString;
    procedure Set_C_Yedek1(const Value: WideString);
    function Get_C_Yedek2: WideString;
    procedure Set_C_Yedek2(const Value: WideString);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_Aciklama: WideString;
    procedure Set_Aciklama(const Value: WideString);
    function Get_Recete_Tarih: TDateTime;
    procedure Set_Recete_Tarih(Value: TDateTime);
    function Get_SetNo: WideString;
    procedure Set_SetNo(const Value: WideString);
    function Get_Oncelik: Integer;
    procedure Set_Oncelik(Value: Integer);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_YapKod: WideString;
    procedure Set_YapKod(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IUretim);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    procedure SahalariTemizle;
    procedure kayitUretimSonu(UretSonDepo: TUretSonDepo; YariMamuldeStokKullan: WordBool; 
                              MaliyetlerCarpilsin: WordBool);
    procedure kayitFisNoIleUretimSonu(const Fisno: WideString; UretSonDepo: TUretSonDepo; 
                                      YariMamuldeStokKullan: WordBool; MaliyetlerCarpilsin: WordBool);
    function SonFisNumarasi(const Seri: WideString): WideString;
    procedure IsEmrindenGetir(const IsEmriNo: WideString);
    procedure UretimSonuEntegre(const UretSonEntegParam: IUretSonEnteg);
    property DefaultInterface: IUretim read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property SilmeIcinGerekliSahalar: WideString read Get_SilmeIcinGerekliSahalar;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property SonKayitNoAl: WordBool read Get_SonKayitNoAl write Set_SonKayitNoAl;
    property UretSon_FisNo: WideString read Get_UretSon_FisNo write Set_UretSon_FisNo;
    property UretSon_Tarih: TDateTime read Get_UretSon_Tarih write Set_UretSon_Tarih;
    property UretSon_SipNo: WideString read Get_UretSon_SipNo write Set_UretSon_SipNo;
    property UretSon_Depo: Integer read Get_UretSon_Depo write Set_UretSon_Depo;
    property UretSon_Mamul: WideString read Get_UretSon_Mamul write Set_UretSon_Mamul;
    property UretSon_Miktar: Double read Get_UretSon_Miktar write Set_UretSon_Miktar;
    property UretSon_MalY1: Double read Get_UretSon_MalY1 write Set_UretSon_MalY1;
    property UretSon_Maly2: Double read Get_UretSon_Maly2 write Set_UretSon_Maly2;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property IncKeyNo: Integer read Get_IncKeyNo write Set_IncKeyNo;
    property D_Yedek1: TDateTime read Get_D_Yedek1 write Set_D_Yedek1;
    property D_Yedek2: TDateTime read Get_D_Yedek2 write Set_D_Yedek2;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property S_Yedek3: WideString read Get_S_Yedek3 write Set_S_Yedek3;
    property S_Yedek4: WideString read Get_S_Yedek4 write Set_S_Yedek4;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property I_Yedek2: Integer read Get_I_Yedek2 write Set_I_Yedek2;
    property B_Yedek1: Shortint read Get_B_Yedek1 write Set_B_Yedek1;
    property B_Yedek2: Shortint read Get_B_Yedek2 write Set_B_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property Recete_Tarih: TDateTime read Get_Recete_Tarih write Set_Recete_Tarih;
    property SetNo: WideString read Get_SetNo write Set_SetNo;
    property Oncelik: Integer read Get_Oncelik write Set_Oncelik;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TUretimProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TUretim
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TUretimProperties = class(TPersistent)
  private
    FServer:    TUretim;
    function    GetDefaultInterface: IUretim;
    constructor Create(AServer: TUretim);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_SilmeIcinGerekliSahalar: WideString;
    function Get_SonKayitNoAl: WordBool;
    procedure Set_SonKayitNoAl(Value: WordBool);
    function Get_UretSon_FisNo: WideString;
    procedure Set_UretSon_FisNo(const Value: WideString);
    function Get_UretSon_Tarih: TDateTime;
    procedure Set_UretSon_Tarih(Value: TDateTime);
    function Get_UretSon_SipNo: WideString;
    procedure Set_UretSon_SipNo(const Value: WideString);
    function Get_UretSon_Depo: Integer;
    procedure Set_UretSon_Depo(Value: Integer);
    function Get_UretSon_Mamul: WideString;
    procedure Set_UretSon_Mamul(const Value: WideString);
    function Get_UretSon_Miktar: Double;
    procedure Set_UretSon_Miktar(Value: Double);
    function Get_UretSon_MalY1: Double;
    procedure Set_UretSon_MalY1(Value: Double);
    function Get_UretSon_Maly2: Double;
    procedure Set_UretSon_Maly2(Value: Double);
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_IncKeyNo: Integer;
    procedure Set_IncKeyNo(Value: Integer);
    function Get_D_Yedek1: TDateTime;
    procedure Set_D_Yedek1(Value: TDateTime);
    function Get_D_Yedek2: TDateTime;
    procedure Set_D_Yedek2(Value: TDateTime);
    function Get_S_Yedek1: WideString;
    procedure Set_S_Yedek1(const Value: WideString);
    function Get_S_Yedek2: WideString;
    procedure Set_S_Yedek2(const Value: WideString);
    function Get_S_Yedek3: WideString;
    procedure Set_S_Yedek3(const Value: WideString);
    function Get_S_Yedek4: WideString;
    procedure Set_S_Yedek4(const Value: WideString);
    function Get_F_Yedek1: Double;
    procedure Set_F_Yedek1(Value: Double);
    function Get_F_Yedek2: Double;
    procedure Set_F_Yedek2(Value: Double);
    function Get_I_Yedek1: Integer;
    procedure Set_I_Yedek1(Value: Integer);
    function Get_I_Yedek2: Integer;
    procedure Set_I_Yedek2(Value: Integer);
    function Get_B_Yedek1: Shortint;
    procedure Set_B_Yedek1(Value: Shortint);
    function Get_B_Yedek2: Shortint;
    procedure Set_B_Yedek2(Value: Shortint);
    function Get_C_Yedek1: WideString;
    procedure Set_C_Yedek1(const Value: WideString);
    function Get_C_Yedek2: WideString;
    procedure Set_C_Yedek2(const Value: WideString);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
    function Get_Aciklama: WideString;
    procedure Set_Aciklama(const Value: WideString);
    function Get_Recete_Tarih: TDateTime;
    procedure Set_Recete_Tarih(Value: TDateTime);
    function Get_SetNo: WideString;
    procedure Set_SetNo(const Value: WideString);
    function Get_Oncelik: Integer;
    procedure Set_Oncelik(Value: Integer);
    function Get_KayitYapanKul: WideString;
    procedure Set_KayitYapanKul(const Value: WideString);
    function Get_KayitTarihi: TDateTime;
    procedure Set_KayitTarihi(Value: TDateTime);
    function Get_DuzeltmeYapanKul: WideString;
    procedure Set_DuzeltmeYapanKul(const Value: WideString);
    function Get_DuzeltmeTarihi: TDateTime;
    procedure Set_DuzeltmeTarihi(Value: TDateTime);
    function Get_YapKod: WideString;
    procedure Set_YapKod(const Value: WideString);
  public
    property DefaultInterface: IUretim read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
    property SonKayitNoAl: WordBool read Get_SonKayitNoAl write Set_SonKayitNoAl;
    property UretSon_FisNo: WideString read Get_UretSon_FisNo write Set_UretSon_FisNo;
    property UretSon_Tarih: TDateTime read Get_UretSon_Tarih write Set_UretSon_Tarih;
    property UretSon_SipNo: WideString read Get_UretSon_SipNo write Set_UretSon_SipNo;
    property UretSon_Depo: Integer read Get_UretSon_Depo write Set_UretSon_Depo;
    property UretSon_Mamul: WideString read Get_UretSon_Mamul write Set_UretSon_Mamul;
    property UretSon_Miktar: Double read Get_UretSon_Miktar write Set_UretSon_Miktar;
    property UretSon_MalY1: Double read Get_UretSon_MalY1 write Set_UretSon_MalY1;
    property UretSon_Maly2: Double read Get_UretSon_Maly2 write Set_UretSon_Maly2;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property IncKeyNo: Integer read Get_IncKeyNo write Set_IncKeyNo;
    property D_Yedek1: TDateTime read Get_D_Yedek1 write Set_D_Yedek1;
    property D_Yedek2: TDateTime read Get_D_Yedek2 write Set_D_Yedek2;
    property S_Yedek1: WideString read Get_S_Yedek1 write Set_S_Yedek1;
    property S_Yedek2: WideString read Get_S_Yedek2 write Set_S_Yedek2;
    property S_Yedek3: WideString read Get_S_Yedek3 write Set_S_Yedek3;
    property S_Yedek4: WideString read Get_S_Yedek4 write Set_S_Yedek4;
    property F_Yedek1: Double read Get_F_Yedek1 write Set_F_Yedek1;
    property F_Yedek2: Double read Get_F_Yedek2 write Set_F_Yedek2;
    property I_Yedek1: Integer read Get_I_Yedek1 write Set_I_Yedek1;
    property I_Yedek2: Integer read Get_I_Yedek2 write Set_I_Yedek2;
    property B_Yedek1: Shortint read Get_B_Yedek1 write Set_B_Yedek1;
    property B_Yedek2: Shortint read Get_B_Yedek2 write Set_B_Yedek2;
    property C_Yedek1: WideString read Get_C_Yedek1 write Set_C_Yedek1;
    property C_Yedek2: WideString read Get_C_Yedek2 write Set_C_Yedek2;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
    property Aciklama: WideString read Get_Aciklama write Set_Aciklama;
    property Recete_Tarih: TDateTime read Get_Recete_Tarih write Set_Recete_Tarih;
    property SetNo: WideString read Get_SetNo write Set_SetNo;
    property Oncelik: Integer read Get_Oncelik write Set_Oncelik;
    property KayitYapanKul: WideString read Get_KayitYapanKul write Set_KayitYapanKul;
    property KayitTarihi: TDateTime read Get_KayitTarihi write Set_KayitTarihi;
    property DuzeltmeYapanKul: WideString read Get_DuzeltmeYapanKul write Set_DuzeltmeYapanKul;
    property DuzeltmeTarihi: TDateTime read Get_DuzeltmeTarihi write Set_DuzeltmeTarihi;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFatKosulDetay provides a Create and CreateRemote method to          
// create instances of the default interface IFatKosulDetay exposed by              
// the CoClass FatKosulDetay. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFatKosulDetay = class
    class function Create: IFatKosulDetay;
    class function CreateRemote(const MachineName: string): IFatKosulDetay;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFatKosulDetay
// Help String      : FatKosulDetay Object
// Default Interface: IFatKosulDetay
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFatKosulDetayProperties= class;
{$ENDIF}
  TFatKosulDetay = class(TOleServer)
  private
    FIntf:        IFatKosulDetay;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFatKosulDetayProperties;
    function      GetServerProperties: TFatKosulDetayProperties;
{$ENDIF}
    function      GetDefaultInterface: IFatKosulDetay;
  protected
    procedure InitServerData; override;
    function Get_KOSULKODU: WideString;
    function Get_BaslangicTarihi: TDateTime;
    function Get_BitisTarihi: TDateTime;
    function Get_StokKodu: WideString;
    function Get_RaporKodu: WideString;
    function Get_Vade: Integer;
    function Get_TutarMi: WordBool;
    function Get_IskOranlari(Index: Integer): Double;
    function Get_FIYATTARIHI: TDateTime;
    function Get_ListeFiyati: Smallint;
    function Get_MalFazlasi: IFatKosMalFazlasi;
    function Get_DetayRangeIskonto: IFatKosulRangeIsk;
    function Get_EkKosulDetayRangeIsk: IFatKosulRangeIsk;
    function Get_KalemDovTip: Integer;
    function Get_KalemBrutFiyat: Double;
    function Get_KalemMFBrutFiyat: Double;
    function Get_IlaveSekli: TFatKosIlaveSekli;
    function Get_IskToplamSekli: TFatIskToplamSekli;
    function Get_SabitVadeTar: TDateTime;
    function Get_CMHesapDahil: WordBool;
    function Get_CiroIskDahil: WordBool;
    function Get_PesinIskOran: TDateTime;
    function Get_GecikmeKatSayisi: Double;
    function Get_VadeKodu: WideString;
    function Get_VadeHangiIsk: Smallint;
    function Get_VadeIskontoTipi: Integer;
    function Get_Olcubr: Integer;
    function Get_MalFiskIliski: WideString;
    function Get_MalFiskGrupMu: WordBool;
    function Get_StokIliski: WideString;
    function Get_FireHangiIsk: Smallint;
    function Get_FireIskontoTipi: Integer;
    function Get_FIYATGRUBU: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IFatKosulDetay);
    procedure Disconnect; override;
    property DefaultInterface: IFatKosulDetay read GetDefaultInterface;
    property KOSULKODU: WideString read Get_KOSULKODU;
    property BaslangicTarihi: TDateTime read Get_BaslangicTarihi;
    property BitisTarihi: TDateTime read Get_BitisTarihi;
    property StokKodu: WideString read Get_StokKodu;
    property RaporKodu: WideString read Get_RaporKodu;
    property Vade: Integer read Get_Vade;
    property TutarMi: WordBool read Get_TutarMi;
    property IskOranlari[Index: Integer]: Double read Get_IskOranlari;
    property FIYATTARIHI: TDateTime read Get_FIYATTARIHI;
    property ListeFiyati: Smallint read Get_ListeFiyati;
    property MalFazlasi: IFatKosMalFazlasi read Get_MalFazlasi;
    property DetayRangeIskonto: IFatKosulRangeIsk read Get_DetayRangeIskonto;
    property EkKosulDetayRangeIsk: IFatKosulRangeIsk read Get_EkKosulDetayRangeIsk;
    property KalemDovTip: Integer read Get_KalemDovTip;
    property KalemBrutFiyat: Double read Get_KalemBrutFiyat;
    property KalemMFBrutFiyat: Double read Get_KalemMFBrutFiyat;
    property IlaveSekli: TFatKosIlaveSekli read Get_IlaveSekli;
    property IskToplamSekli: TFatIskToplamSekli read Get_IskToplamSekli;
    property SabitVadeTar: TDateTime read Get_SabitVadeTar;
    property CMHesapDahil: WordBool read Get_CMHesapDahil;
    property CiroIskDahil: WordBool read Get_CiroIskDahil;
    property PesinIskOran: TDateTime read Get_PesinIskOran;
    property GecikmeKatSayisi: Double read Get_GecikmeKatSayisi;
    property VadeKodu: WideString read Get_VadeKodu;
    property VadeHangiIsk: Smallint read Get_VadeHangiIsk;
    property VadeIskontoTipi: Integer read Get_VadeIskontoTipi;
    property Olcubr: Integer read Get_Olcubr;
    property MalFiskIliski: WideString read Get_MalFiskIliski;
    property MalFiskGrupMu: WordBool read Get_MalFiskGrupMu;
    property StokIliski: WideString read Get_StokIliski;
    property FireHangiIsk: Smallint read Get_FireHangiIsk;
    property FireIskontoTipi: Integer read Get_FireIskontoTipi;
    property FIYATGRUBU: WideString read Get_FIYATGRUBU;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFatKosulDetayProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFatKosulDetay
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFatKosulDetayProperties = class(TPersistent)
  private
    FServer:    TFatKosulDetay;
    function    GetDefaultInterface: IFatKosulDetay;
    constructor Create(AServer: TFatKosulDetay);
  protected
    function Get_KOSULKODU: WideString;
    function Get_BaslangicTarihi: TDateTime;
    function Get_BitisTarihi: TDateTime;
    function Get_StokKodu: WideString;
    function Get_RaporKodu: WideString;
    function Get_Vade: Integer;
    function Get_TutarMi: WordBool;
    function Get_IskOranlari(Index: Integer): Double;
    function Get_FIYATTARIHI: TDateTime;
    function Get_ListeFiyati: Smallint;
    function Get_MalFazlasi: IFatKosMalFazlasi;
    function Get_DetayRangeIskonto: IFatKosulRangeIsk;
    function Get_EkKosulDetayRangeIsk: IFatKosulRangeIsk;
    function Get_KalemDovTip: Integer;
    function Get_KalemBrutFiyat: Double;
    function Get_KalemMFBrutFiyat: Double;
    function Get_IlaveSekli: TFatKosIlaveSekli;
    function Get_IskToplamSekli: TFatIskToplamSekli;
    function Get_SabitVadeTar: TDateTime;
    function Get_CMHesapDahil: WordBool;
    function Get_CiroIskDahil: WordBool;
    function Get_PesinIskOran: TDateTime;
    function Get_GecikmeKatSayisi: Double;
    function Get_VadeKodu: WideString;
    function Get_VadeHangiIsk: Smallint;
    function Get_VadeIskontoTipi: Integer;
    function Get_Olcubr: Integer;
    function Get_MalFiskIliski: WideString;
    function Get_MalFiskGrupMu: WordBool;
    function Get_StokIliski: WideString;
    function Get_FireHangiIsk: Smallint;
    function Get_FireIskontoTipi: Integer;
    function Get_FIYATGRUBU: WideString;
  public
    property DefaultInterface: IFatKosulDetay read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFatKosMalFazlasi provides a Create and CreateRemote method to          
// create instances of the default interface IFatKosMalFazlasi exposed by              
// the CoClass FatKosMalFazlasi. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFatKosMalFazlasi = class
    class function Create: IFatKosMalFazlasi;
    class function CreateRemote(const MachineName: string): IFatKosMalFazlasi;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFatKosMalFazlasi
// Help String      : 
// Default Interface: IFatKosMalFazlasi
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFatKosMalFazlasiProperties= class;
{$ENDIF}
  TFatKosMalFazlasi = class(TOleServer)
  private
    FIntf:        IFatKosMalFazlasi;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFatKosMalFazlasiProperties;
    function      GetServerProperties: TFatKosMalFazlasiProperties;
{$ENDIF}
    function      GetDefaultInterface: IFatKosMalFazlasi;
  protected
    procedure InitServerData; override;
    function Get_StokKodu: WideString;
    function Get_Miktarlar(Index: Integer): Double;
    function Get_Fazlalar(Index: Integer): Double;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IFatKosMalFazlasi);
    procedure Disconnect; override;
    property DefaultInterface: IFatKosMalFazlasi read GetDefaultInterface;
    property StokKodu: WideString read Get_StokKodu;
    property Miktarlar[Index: Integer]: Double read Get_Miktarlar;
    property Fazlalar[Index: Integer]: Double read Get_Fazlalar;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFatKosMalFazlasiProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFatKosMalFazlasi
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFatKosMalFazlasiProperties = class(TPersistent)
  private
    FServer:    TFatKosMalFazlasi;
    function    GetDefaultInterface: IFatKosMalFazlasi;
    constructor Create(AServer: TFatKosMalFazlasi);
  protected
    function Get_StokKodu: WideString;
    function Get_Miktarlar(Index: Integer): Double;
    function Get_Fazlalar(Index: Integer): Double;
  public
    property DefaultInterface: IFatKosMalFazlasi read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFatKosulRangeIsk provides a Create and CreateRemote method to          
// create instances of the default interface IFatKosulRangeIsk exposed by              
// the CoClass FatKosulRangeIsk. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFatKosulRangeIsk = class
    class function Create: IFatKosulRangeIsk;
    class function CreateRemote(const MachineName: string): IFatKosulRangeIsk;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFatKosulRangeIsk
// Help String      : 
// Default Interface: IFatKosulRangeIsk
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFatKosulRangeIskProperties= class;
{$ENDIF}
  TFatKosulRangeIsk = class(TOleServer)
  private
    FIntf:        IFatKosulRangeIsk;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFatKosulRangeIskProperties;
    function      GetServerProperties: TFatKosulRangeIskProperties;
{$ENDIF}
    function      GetDefaultInterface: IFatKosulRangeIsk;
  protected
    procedure InitServerData; override;
    function Get_VarMi: WordBool;
    function Get_MiktarMiTutarMi: WideString;
    function Get_Degerler(Index: Integer): Double;
    function Get_Iskler(Index: Integer): Double;
    function Get_HangiIsk: Smallint;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IFatKosulRangeIsk);
    procedure Disconnect; override;
    property DefaultInterface: IFatKosulRangeIsk read GetDefaultInterface;
    property VarMi: WordBool read Get_VarMi;
    property MiktarMiTutarMi: WideString read Get_MiktarMiTutarMi;
    property Degerler[Index: Integer]: Double read Get_Degerler;
    property Iskler[Index: Integer]: Double read Get_Iskler;
    property HangiIsk: Smallint read Get_HangiIsk;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFatKosulRangeIskProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFatKosulRangeIsk
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFatKosulRangeIskProperties = class(TPersistent)
  private
    FServer:    TFatKosulRangeIsk;
    function    GetDefaultInterface: IFatKosulRangeIsk;
    constructor Create(AServer: TFatKosulRangeIsk);
  protected
    function Get_VarMi: WordBool;
    function Get_MiktarMiTutarMi: WideString;
    function Get_Degerler(Index: Integer): Double;
    function Get_Iskler(Index: Integer): Double;
    function Get_HangiIsk: Smallint;
  public
    property DefaultInterface: IFatKosulRangeIsk read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMustahsil provides a Create and CreateRemote method to          
// create instances of the default interface IMustahsil exposed by              
// the CoClass Mustahsil. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMustahsil = class
    class function Create: IMustahsil;
    class function CreateRemote(const MachineName: string): IMustahsil;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMustahsil
// Help String      : Mustahsil Object
// Default Interface: IMustahsil
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMustahsilProperties= class;
{$ENDIF}
  TMustahsil = class(TOleServer)
  private
    FIntf:        IMustahsil;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMustahsilProperties;
    function      GetServerProperties: TMustahsilProperties;
{$ENDIF}
    function      GetDefaultInterface: IMustahsil;
  protected
    procedure InitServerData; override;
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_KalemAdedi: Integer;
    function Get_Ust: IMustahsilUst;
    function Get_Kalem(Index: Integer): IMustahsilKalem;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IMustahsil);
    procedure Disconnect; override;
    procedure kayitYeni;
    procedure kayitDuzelt;
    procedure kayitSil;
    function kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
    procedure NetsisTransaction(TransactionTipi: TTransactionTipi);
    procedure NetsisLog(const Aciklama: WideString);
    function getirAktifNDS(NDSTip: TNDSTip): Integer;
    procedure SonNumaraYaz(const MustahsilNo: WideString);
    function SonNumaraOku: WideString;
    procedure Init(const CariKod: WideString);
    procedure Sakla;
    function KalemEkle(const StokKodu: WideString): IMustahsilKalem;
    property DefaultInterface: IMustahsil read GetDefaultInterface;
    property Handle: Integer read Get_Handle;
    property Kernel: IKernel read Get_Kernel;
    property KalemAdedi: Integer read Get_KalemAdedi;
    property Ust: IMustahsilUst read Get_Ust;
    property Kalem[Index: Integer]: IMustahsilKalem read Get_Kalem;
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMustahsilProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMustahsil
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMustahsilProperties = class(TPersistent)
  private
    FServer:    TMustahsil;
    function    GetDefaultInterface: IMustahsil;
    constructor Create(AServer: TMustahsil);
  protected
    function Get_Handle: Integer;
    function Get_Name: WideString;
    procedure Set_Name(const Value: WideString);
    function Get_Kernel: IKernel;
    function Get_TransactSupport: WordBool;
    procedure Set_TransactSupport(Value: WordBool);
    function Get_KalemAdedi: Integer;
    function Get_Ust: IMustahsilUst;
    function Get_Kalem(Index: Integer): IMustahsilKalem;
  public
    property DefaultInterface: IMustahsil read GetDefaultInterface;
  published
    property Name: WideString read Get_Name write Set_Name;
    property TransactSupport: WordBool read Get_TransactSupport write Set_TransactSupport;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMustahsilUst provides a Create and CreateRemote method to          
// create instances of the default interface IMustahsilUst exposed by              
// the CoClass MustahsilUst. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMustahsilUst = class
    class function Create: IMustahsilUst;
    class function CreateRemote(const MachineName: string): IMustahsilUst;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMustahsilUst
// Help String      : 
// Default Interface: IMustahsilUst
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMustahsilUstProperties= class;
{$ENDIF}
  TMustahsilUst = class(TOleServer)
  private
    FIntf:        IMustahsilUst;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMustahsilUstProperties;
    function      GetServerProperties: TMustahsilUstProperties;
{$ENDIF}
    function      GetDefaultInterface: IMustahsilUst;
  protected
    procedure InitServerData; override;
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_FATIRS_NO: WideString;
    procedure Set_FATIRS_NO(const Value: WideString);
    function Get_TIPI: Integer;
    procedure Set_TIPI(Value: Integer);
    function Get_CARI_ISIM: WideString;
    procedure Set_CARI_ISIM(const Value: WideString);
    function Get_CARI_ADRES: WideString;
    procedure Set_CARI_ADRES(const Value: WideString);
    function Get_CARI_IL: WideString;
    procedure Set_CARI_IL(const Value: WideString);
    function Get_CARI_ILCE: WideString;
    procedure Set_CARI_ILCE(const Value: WideString);
    function Get_Cari_Vergi_Daire: WideString;
    procedure Set_Cari_Vergi_Daire(const Value: WideString);
    function Get_Cari_Vergi_No: WideString;
    procedure Set_Cari_Vergi_No(const Value: WideString);
    function Get_Tarih: TDateTime;
    procedure Set_Tarih(Value: TDateTime);
    function Get_Cari_Kodu: WideString;
    procedure Set_Cari_Kodu(const Value: WideString);
    function Get_BRUTTUTAR: Double;
    procedure Set_BRUTTUTAR(Value: Double);
    function Get_Fon: Double;
    procedure Set_Fon(Value: Double);
    function Get_Stopaj: Double;
    procedure Set_Stopaj(Value: Double);
    function Get_Borsa: Double;
    procedure Set_Borsa(Value: Double);
    function Get_Avans: Double;
    procedure Set_Avans(Value: Double);
    function Get_Cek_No: WideString;
    procedure Set_Cek_No(const Value: WideString);
    function Get_Banka: WideString;
    procedure Set_Banka(const Value: WideString);
    function Get_Cek_Tarih: TDateTime;
    procedure Set_Cek_Tarih(Value: TDateTime);
    function Get_Cek_Tutar: Double;
    procedure Set_Cek_Tutar(Value: Double);
    function Get_BagkurNo: Double;
    procedure Set_BagkurNo(Value: Double);
    function Get_Mera: Double;
    procedure Set_Mera(Value: Double);
    function Get_ODEMEGUNU: Smallint;
    procedure Set_ODEMEGUNU(Value: Smallint);
    function Get_Son_Islem_Tar: TDateTime;
    procedure Set_Son_Islem_Tar(Value: TDateTime);
    function Get_Bagkur: WideString;
    procedure Set_Bagkur(const Value: WideString);
    function Get_Baba_Adi: WideString;
    procedure Set_Baba_Adi(const Value: WideString);
    function Get_DogumYT: WideString;
    procedure Set_DogumYT(const Value: WideString);
    function Get_Miktar: Double;
    procedure Set_Miktar(Value: Double);
    function Get_Urun_Kodu: WideString;
    procedure Set_Urun_Kodu(const Value: WideString);
    function Get_Urun_Ismi: WideString;
    procedure Set_Urun_Ismi(const Value: WideString);
    function Get_Urun_Fiati: Double;
    procedure Set_Urun_Fiati(Value: Double);
    function Get_TesmNo: WideString;
    procedure Set_TesmNo(const Value: WideString);
    function Get_Kasa_Kodu: WideString;
    procedure Set_Kasa_Kodu(const Value: WideString);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_Genel_Toplam: Double;
    procedure Set_Genel_Toplam(Value: Double);
    function Get_Pesinat: Double;
    procedure Set_Pesinat(Value: Double);
    function Get_MurFiat: Double;
    procedure Set_MurFiat(Value: Double);
    function Get_GirDepo: Integer;
    procedure Set_GirDepo(Value: Integer);
    function Get_CikDepo: Integer;
    procedure Set_CikDepo(Value: Integer);
    function Get_Pesin_Satis: WordBool;
    procedure Set_Pesin_Satis(Value: WordBool);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IMustahsilUst);
    procedure Disconnect; override;
    property DefaultInterface: IMustahsilUst read GetDefaultInterface;
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property FATIRS_NO: WideString read Get_FATIRS_NO write Set_FATIRS_NO;
    property TIPI: Integer read Get_TIPI write Set_TIPI;
    property CARI_ISIM: WideString read Get_CARI_ISIM write Set_CARI_ISIM;
    property CARI_ADRES: WideString read Get_CARI_ADRES write Set_CARI_ADRES;
    property CARI_IL: WideString read Get_CARI_IL write Set_CARI_IL;
    property CARI_ILCE: WideString read Get_CARI_ILCE write Set_CARI_ILCE;
    property Cari_Vergi_Daire: WideString read Get_Cari_Vergi_Daire write Set_Cari_Vergi_Daire;
    property Cari_Vergi_No: WideString read Get_Cari_Vergi_No write Set_Cari_Vergi_No;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property Cari_Kodu: WideString read Get_Cari_Kodu write Set_Cari_Kodu;
    property BRUTTUTAR: Double read Get_BRUTTUTAR write Set_BRUTTUTAR;
    property Fon: Double read Get_Fon write Set_Fon;
    property Stopaj: Double read Get_Stopaj write Set_Stopaj;
    property Borsa: Double read Get_Borsa write Set_Borsa;
    property Avans: Double read Get_Avans write Set_Avans;
    property Cek_No: WideString read Get_Cek_No write Set_Cek_No;
    property Banka: WideString read Get_Banka write Set_Banka;
    property Cek_Tarih: TDateTime read Get_Cek_Tarih write Set_Cek_Tarih;
    property Cek_Tutar: Double read Get_Cek_Tutar write Set_Cek_Tutar;
    property BagkurNo: Double read Get_BagkurNo write Set_BagkurNo;
    property Mera: Double read Get_Mera write Set_Mera;
    property ODEMEGUNU: Smallint read Get_ODEMEGUNU write Set_ODEMEGUNU;
    property Son_Islem_Tar: TDateTime read Get_Son_Islem_Tar write Set_Son_Islem_Tar;
    property Bagkur: WideString read Get_Bagkur write Set_Bagkur;
    property Baba_Adi: WideString read Get_Baba_Adi write Set_Baba_Adi;
    property DogumYT: WideString read Get_DogumYT write Set_DogumYT;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property Urun_Kodu: WideString read Get_Urun_Kodu write Set_Urun_Kodu;
    property Urun_Ismi: WideString read Get_Urun_Ismi write Set_Urun_Ismi;
    property Urun_Fiati: Double read Get_Urun_Fiati write Set_Urun_Fiati;
    property TesmNo: WideString read Get_TesmNo write Set_TesmNo;
    property Kasa_Kodu: WideString read Get_Kasa_Kodu write Set_Kasa_Kodu;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Genel_Toplam: Double read Get_Genel_Toplam write Set_Genel_Toplam;
    property Pesinat: Double read Get_Pesinat write Set_Pesinat;
    property MurFiat: Double read Get_MurFiat write Set_MurFiat;
    property GirDepo: Integer read Get_GirDepo write Set_GirDepo;
    property CikDepo: Integer read Get_CikDepo write Set_CikDepo;
    property Pesin_Satis: WordBool read Get_Pesin_Satis write Set_Pesin_Satis;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMustahsilUstProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMustahsilUst
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMustahsilUstProperties = class(TPersistent)
  private
    FServer:    TMustahsilUst;
    function    GetDefaultInterface: IMustahsilUst;
    constructor Create(AServer: TMustahsilUst);
  protected
    function Get_Sube_Kodu: Integer;
    procedure Set_Sube_Kodu(Value: Integer);
    function Get_FATIRS_NO: WideString;
    procedure Set_FATIRS_NO(const Value: WideString);
    function Get_TIPI: Integer;
    procedure Set_TIPI(Value: Integer);
    function Get_CARI_ISIM: WideString;
    procedure Set_CARI_ISIM(const Value: WideString);
    function Get_CARI_ADRES: WideString;
    procedure Set_CARI_ADRES(const Value: WideString);
    function Get_CARI_IL: WideString;
    procedure Set_CARI_IL(const Value: WideString);
    function Get_CARI_ILCE: WideString;
    procedure Set_CARI_ILCE(const Value: WideString);
    function Get_Cari_Vergi_Daire: WideString;
    procedure Set_Cari_Vergi_Daire(const Value: WideString);
    function Get_Cari_Vergi_No: WideString;
    procedure Set_Cari_Vergi_No(const Value: WideString);
    function Get_Tarih: TDateTime;
    procedure Set_Tarih(Value: TDateTime);
    function Get_Cari_Kodu: WideString;
    procedure Set_Cari_Kodu(const Value: WideString);
    function Get_BRUTTUTAR: Double;
    procedure Set_BRUTTUTAR(Value: Double);
    function Get_Fon: Double;
    procedure Set_Fon(Value: Double);
    function Get_Stopaj: Double;
    procedure Set_Stopaj(Value: Double);
    function Get_Borsa: Double;
    procedure Set_Borsa(Value: Double);
    function Get_Avans: Double;
    procedure Set_Avans(Value: Double);
    function Get_Cek_No: WideString;
    procedure Set_Cek_No(const Value: WideString);
    function Get_Banka: WideString;
    procedure Set_Banka(const Value: WideString);
    function Get_Cek_Tarih: TDateTime;
    procedure Set_Cek_Tarih(Value: TDateTime);
    function Get_Cek_Tutar: Double;
    procedure Set_Cek_Tutar(Value: Double);
    function Get_BagkurNo: Double;
    procedure Set_BagkurNo(Value: Double);
    function Get_Mera: Double;
    procedure Set_Mera(Value: Double);
    function Get_ODEMEGUNU: Smallint;
    procedure Set_ODEMEGUNU(Value: Smallint);
    function Get_Son_Islem_Tar: TDateTime;
    procedure Set_Son_Islem_Tar(Value: TDateTime);
    function Get_Bagkur: WideString;
    procedure Set_Bagkur(const Value: WideString);
    function Get_Baba_Adi: WideString;
    procedure Set_Baba_Adi(const Value: WideString);
    function Get_DogumYT: WideString;
    procedure Set_DogumYT(const Value: WideString);
    function Get_Miktar: Double;
    procedure Set_Miktar(Value: Double);
    function Get_Urun_Kodu: WideString;
    procedure Set_Urun_Kodu(const Value: WideString);
    function Get_Urun_Ismi: WideString;
    procedure Set_Urun_Ismi(const Value: WideString);
    function Get_Urun_Fiati: Double;
    procedure Set_Urun_Fiati(Value: Double);
    function Get_TesmNo: WideString;
    procedure Set_TesmNo(const Value: WideString);
    function Get_Kasa_Kodu: WideString;
    procedure Set_Kasa_Kodu(const Value: WideString);
    function Get_Update_Kodu: WideString;
    procedure Set_Update_Kodu(const Value: WideString);
    function Get_Genel_Toplam: Double;
    procedure Set_Genel_Toplam(Value: Double);
    function Get_Pesinat: Double;
    procedure Set_Pesinat(Value: Double);
    function Get_MurFiat: Double;
    procedure Set_MurFiat(Value: Double);
    function Get_GirDepo: Integer;
    procedure Set_GirDepo(Value: Integer);
    function Get_CikDepo: Integer;
    procedure Set_CikDepo(Value: Integer);
    function Get_Pesin_Satis: WordBool;
    procedure Set_Pesin_Satis(Value: WordBool);
    function Get_Proje_Kodu: WideString;
    procedure Set_Proje_Kodu(const Value: WideString);
  public
    property DefaultInterface: IMustahsilUst read GetDefaultInterface;
  published
    property Sube_Kodu: Integer read Get_Sube_Kodu write Set_Sube_Kodu;
    property FATIRS_NO: WideString read Get_FATIRS_NO write Set_FATIRS_NO;
    property TIPI: Integer read Get_TIPI write Set_TIPI;
    property CARI_ISIM: WideString read Get_CARI_ISIM write Set_CARI_ISIM;
    property CARI_ADRES: WideString read Get_CARI_ADRES write Set_CARI_ADRES;
    property CARI_IL: WideString read Get_CARI_IL write Set_CARI_IL;
    property CARI_ILCE: WideString read Get_CARI_ILCE write Set_CARI_ILCE;
    property Cari_Vergi_Daire: WideString read Get_Cari_Vergi_Daire write Set_Cari_Vergi_Daire;
    property Cari_Vergi_No: WideString read Get_Cari_Vergi_No write Set_Cari_Vergi_No;
    property Tarih: TDateTime read Get_Tarih write Set_Tarih;
    property Cari_Kodu: WideString read Get_Cari_Kodu write Set_Cari_Kodu;
    property BRUTTUTAR: Double read Get_BRUTTUTAR write Set_BRUTTUTAR;
    property Fon: Double read Get_Fon write Set_Fon;
    property Stopaj: Double read Get_Stopaj write Set_Stopaj;
    property Borsa: Double read Get_Borsa write Set_Borsa;
    property Avans: Double read Get_Avans write Set_Avans;
    property Cek_No: WideString read Get_Cek_No write Set_Cek_No;
    property Banka: WideString read Get_Banka write Set_Banka;
    property Cek_Tarih: TDateTime read Get_Cek_Tarih write Set_Cek_Tarih;
    property Cek_Tutar: Double read Get_Cek_Tutar write Set_Cek_Tutar;
    property BagkurNo: Double read Get_BagkurNo write Set_BagkurNo;
    property Mera: Double read Get_Mera write Set_Mera;
    property ODEMEGUNU: Smallint read Get_ODEMEGUNU write Set_ODEMEGUNU;
    property Son_Islem_Tar: TDateTime read Get_Son_Islem_Tar write Set_Son_Islem_Tar;
    property Bagkur: WideString read Get_Bagkur write Set_Bagkur;
    property Baba_Adi: WideString read Get_Baba_Adi write Set_Baba_Adi;
    property DogumYT: WideString read Get_DogumYT write Set_DogumYT;
    property Miktar: Double read Get_Miktar write Set_Miktar;
    property Urun_Kodu: WideString read Get_Urun_Kodu write Set_Urun_Kodu;
    property Urun_Ismi: WideString read Get_Urun_Ismi write Set_Urun_Ismi;
    property Urun_Fiati: Double read Get_Urun_Fiati write Set_Urun_Fiati;
    property TesmNo: WideString read Get_TesmNo write Set_TesmNo;
    property Kasa_Kodu: WideString read Get_Kasa_Kodu write Set_Kasa_Kodu;
    property Update_Kodu: WideString read Get_Update_Kodu write Set_Update_Kodu;
    property Genel_Toplam: Double read Get_Genel_Toplam write Set_Genel_Toplam;
    property Pesinat: Double read Get_Pesinat write Set_Pesinat;
    property MurFiat: Double read Get_MurFiat write Set_MurFiat;
    property GirDepo: Integer read Get_GirDepo write Set_GirDepo;
    property CikDepo: Integer read Get_CikDepo write Set_CikDepo;
    property Pesin_Satis: WordBool read Get_Pesin_Satis write Set_Pesin_Satis;
    property Proje_Kodu: WideString read Get_Proje_Kodu write Set_Proje_Kodu;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMustahsilKalem provides a Create and CreateRemote method to          
// create instances of the default interface IMustahsilKalem exposed by              
// the CoClass MustahsilKalem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMustahsilKalem = class
    class function Create: IMustahsilKalem;
    class function CreateRemote(const MachineName: string): IMustahsilKalem;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMustahsilKalem
// Help String      : 
// Default Interface: IMustahsilKalem
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMustahsilKalemProperties= class;
{$ENDIF}
  TMustahsilKalem = class(TOleServer)
  private
    FIntf:        IMustahsilKalem;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMustahsilKalemProperties;
    function      GetServerProperties: TMustahsilKalemProperties;
{$ENDIF}
    function      GetDefaultInterface: IMustahsilKalem;
  protected
    procedure InitServerData; override;
    function Get_Stra_Kod: WideString;
    procedure Set_Stra_Kod(const Value: WideString);
    function Get_STra_FATIRSNO: WideString;
    procedure Set_STra_FATIRSNO(const Value: WideString);
    function Get_STra_GCMIK: Double;
    procedure Set_STra_GCMIK(Value: Double);
    function Get_STra_GCMIK2: Double;
    procedure Set_STra_GCMIK2(Value: Double);
    function Get_CEVRIM: Double;
    procedure Set_CEVRIM(Value: Double);
    function Get_STra_GC: WideString;
    procedure Set_STra_GC(const Value: WideString);
    function Get_STra_TAR: TDateTime;
    procedure Set_STra_TAR(Value: TDateTime);
    function Get_STra_NF: Double;
    procedure Set_STra_NF(Value: Double);
    function Get_STra_BF: Double;
    procedure Set_STra_BF(Value: Double);
    function Get_STra_IAF: Double;
    procedure Set_STra_IAF(Value: Double);
    function Get_STra_KDV: Integer;
    procedure Set_STra_KDV(Value: Integer);
    function Get_DEPO_KODU: Integer;
    procedure Set_DEPO_KODU(Value: Integer);
    function Get_STra_ACIK: WideString;
    procedure Set_STra_ACIK(const Value: WideString);
    function Get_STra_MALFISK: Double;
    procedure Set_STra_MALFISK(Value: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IMustahsilKalem);
    procedure Disconnect; override;
    property DefaultInterface: IMustahsilKalem read GetDefaultInterface;
    property Stra_Kod: WideString read Get_Stra_Kod write Set_Stra_Kod;
    property STra_FATIRSNO: WideString read Get_STra_FATIRSNO write Set_STra_FATIRSNO;
    property STra_GCMIK: Double read Get_STra_GCMIK write Set_STra_GCMIK;
    property STra_GCMIK2: Double read Get_STra_GCMIK2 write Set_STra_GCMIK2;
    property CEVRIM: Double read Get_CEVRIM write Set_CEVRIM;
    property STra_GC: WideString read Get_STra_GC write Set_STra_GC;
    property STra_TAR: TDateTime read Get_STra_TAR write Set_STra_TAR;
    property STra_NF: Double read Get_STra_NF write Set_STra_NF;
    property STra_BF: Double read Get_STra_BF write Set_STra_BF;
    property STra_IAF: Double read Get_STra_IAF write Set_STra_IAF;
    property STra_KDV: Integer read Get_STra_KDV write Set_STra_KDV;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property STra_ACIK: WideString read Get_STra_ACIK write Set_STra_ACIK;
    property STra_MALFISK: Double read Get_STra_MALFISK write Set_STra_MALFISK;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMustahsilKalemProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMustahsilKalem
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMustahsilKalemProperties = class(TPersistent)
  private
    FServer:    TMustahsilKalem;
    function    GetDefaultInterface: IMustahsilKalem;
    constructor Create(AServer: TMustahsilKalem);
  protected
    function Get_Stra_Kod: WideString;
    procedure Set_Stra_Kod(const Value: WideString);
    function Get_STra_FATIRSNO: WideString;
    procedure Set_STra_FATIRSNO(const Value: WideString);
    function Get_STra_GCMIK: Double;
    procedure Set_STra_GCMIK(Value: Double);
    function Get_STra_GCMIK2: Double;
    procedure Set_STra_GCMIK2(Value: Double);
    function Get_CEVRIM: Double;
    procedure Set_CEVRIM(Value: Double);
    function Get_STra_GC: WideString;
    procedure Set_STra_GC(const Value: WideString);
    function Get_STra_TAR: TDateTime;
    procedure Set_STra_TAR(Value: TDateTime);
    function Get_STra_NF: Double;
    procedure Set_STra_NF(Value: Double);
    function Get_STra_BF: Double;
    procedure Set_STra_BF(Value: Double);
    function Get_STra_IAF: Double;
    procedure Set_STra_IAF(Value: Double);
    function Get_STra_KDV: Integer;
    procedure Set_STra_KDV(Value: Integer);
    function Get_DEPO_KODU: Integer;
    procedure Set_DEPO_KODU(Value: Integer);
    function Get_STra_ACIK: WideString;
    procedure Set_STra_ACIK(const Value: WideString);
    function Get_STra_MALFISK: Double;
    procedure Set_STra_MALFISK(Value: Double);
  public
    property DefaultInterface: IMustahsilKalem read GetDefaultInterface;
  published
    property Stra_Kod: WideString read Get_Stra_Kod write Set_Stra_Kod;
    property STra_FATIRSNO: WideString read Get_STra_FATIRSNO write Set_STra_FATIRSNO;
    property STra_GCMIK: Double read Get_STra_GCMIK write Set_STra_GCMIK;
    property STra_GCMIK2: Double read Get_STra_GCMIK2 write Set_STra_GCMIK2;
    property CEVRIM: Double read Get_CEVRIM write Set_CEVRIM;
    property STra_GC: WideString read Get_STra_GC write Set_STra_GC;
    property STra_TAR: TDateTime read Get_STra_TAR write Set_STra_TAR;
    property STra_NF: Double read Get_STra_NF write Set_STra_NF;
    property STra_BF: Double read Get_STra_BF write Set_STra_BF;
    property STra_IAF: Double read Get_STra_IAF write Set_STra_IAF;
    property STra_KDV: Integer read Get_STra_KDV write Set_STra_KDV;
    property DEPO_KODU: Integer read Get_DEPO_KODU write Set_DEPO_KODU;
    property STra_ACIK: WideString read Get_STra_ACIK write Set_STra_ACIK;
    property STra_MALFISK: Double read Get_STra_MALFISK write Set_STra_MALFISK;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoKalemSeri provides a Create and CreateRemote method to          
// create instances of the default interface IKalemSeri exposed by              
// the CoClass KalemSeri. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoKalemSeri = class
    class function Create: IKalemSeri;
    class function CreateRemote(const MachineName: string): IKalemSeri;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TKalemSeri
// Help String      : KalemSeri Object
// Default Interface: IKalemSeri
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TKalemSeriProperties= class;
{$ENDIF}
  TKalemSeri = class(TOleServer)
  private
    FIntf:        IKalemSeri;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TKalemSeriProperties;
    function      GetServerProperties: TKalemSeriProperties;
{$ENDIF}
    function      GetDefaultInterface: IKalemSeri;
  protected
    procedure InitServerData; override;
    function Get_Seri1: WideString;
    procedure Set_Seri1(const Value: WideString);
    function Get_Seri2: WideString;
    procedure Set_Seri2(const Value: WideString);
    function Get_Aciklama1: WideString;
    procedure Set_Aciklama1(const Value: WideString);
    function Get_Aciklama2: WideString;
    procedure Set_Aciklama2(const Value: WideString);
    function Get_Miktar: Double;
    procedure Set_Miktar(Value: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IKalemSeri);
    procedure Disconnect; override;
    property DefaultInterface: IKalemSeri read GetDefaultInterface;
    property Seri1: WideString read Get_Seri1 write Set_Seri1;
    property Seri2: WideString read Get_Seri2 write Set_Seri2;
    property Aciklama1: WideString read Get_Aciklama1 write Set_Aciklama1;
    property Aciklama2: WideString read Get_Aciklama2 write Set_Aciklama2;
    property Miktar: Double read Get_Miktar write Set_Miktar;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TKalemSeriProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TKalemSeri
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TKalemSeriProperties = class(TPersistent)
  private
    FServer:    TKalemSeri;
    function    GetDefaultInterface: IKalemSeri;
    constructor Create(AServer: TKalemSeri);
  protected
    function Get_Seri1: WideString;
    procedure Set_Seri1(const Value: WideString);
    function Get_Seri2: WideString;
    procedure Set_Seri2(const Value: WideString);
    function Get_Aciklama1: WideString;
    procedure Set_Aciklama1(const Value: WideString);
    function Get_Aciklama2: WideString;
    procedure Set_Aciklama2(const Value: WideString);
    function Get_Miktar: Double;
    procedure Set_Miktar(Value: Double);
  public
    property DefaultInterface: IKalemSeri read GetDefaultInterface;
  published
    property Seri1: WideString read Get_Seri1 write Set_Seri1;
    property Seri2: WideString read Get_Seri2 write Set_Seri2;
    property Aciklama1: WideString read Get_Aciklama1 write Set_Aciklama1;
    property Aciklama2: WideString read Get_Aciklama2 write Set_Aciklama2;
    property Miktar: Double read Get_Miktar write Set_Miktar;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoUretSonEnteg provides a Create and CreateRemote method to          
// create instances of the default interface IUretSonEnteg exposed by              
// the CoClass UretSonEnteg. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUretSonEnteg = class
    class function Create: IUretSonEnteg;
    class function CreateRemote(const MachineName: string): IUretSonEnteg;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUretSonEnteg
// Help String      : UretSonEnteg Object
// Default Interface: IUretSonEnteg
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TUretSonEntegProperties= class;
{$ENDIF}
  TUretSonEnteg = class(TOleServer)
  private
    FIntf:        IUretSonEnteg;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TUretSonEntegProperties;
    function      GetServerProperties: TUretSonEntegProperties;
{$ENDIF}
    function      GetDefaultInterface: IUretSonEnteg;
  protected
    procedure InitServerData; override;
    function Get_BasMamKod: WideString;
    procedure Set_BasMamKod(const Value: WideString);
    function Get_BitMamKod: WideString;
    procedure Set_BitMamKod(const Value: WideString);
    function Get_BasFisNo: WideString;
    procedure Set_BasFisNo(const Value: WideString);
    function Get_BitFisNo: WideString;
    procedure Set_BitFisNo(const Value: WideString);
    function Get_FisNoKirilimli: WordBool;
    procedure Set_FisNoKirilimli(Value: WordBool);
    function Get_ReferansKod: WideString;
    procedure Set_ReferansKod(const Value: WideString);
    function Get_BasTar: TDateTime;
    procedure Set_BasTar(Value: TDateTime);
    function Get_BitTar: TDateTime;
    procedure Set_BitTar(Value: TDateTime);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IUretSonEnteg);
    procedure Disconnect; override;
    property DefaultInterface: IUretSonEnteg read GetDefaultInterface;
    property BasMamKod: WideString read Get_BasMamKod write Set_BasMamKod;
    property BitMamKod: WideString read Get_BitMamKod write Set_BitMamKod;
    property BasFisNo: WideString read Get_BasFisNo write Set_BasFisNo;
    property BitFisNo: WideString read Get_BitFisNo write Set_BitFisNo;
    property FisNoKirilimli: WordBool read Get_FisNoKirilimli write Set_FisNoKirilimli;
    property ReferansKod: WideString read Get_ReferansKod write Set_ReferansKod;
    property BasTar: TDateTime read Get_BasTar write Set_BasTar;
    property BitTar: TDateTime read Get_BitTar write Set_BitTar;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TUretSonEntegProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TUretSonEnteg
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TUretSonEntegProperties = class(TPersistent)
  private
    FServer:    TUretSonEnteg;
    function    GetDefaultInterface: IUretSonEnteg;
    constructor Create(AServer: TUretSonEnteg);
  protected
    function Get_BasMamKod: WideString;
    procedure Set_BasMamKod(const Value: WideString);
    function Get_BitMamKod: WideString;
    procedure Set_BitMamKod(const Value: WideString);
    function Get_BasFisNo: WideString;
    procedure Set_BasFisNo(const Value: WideString);
    function Get_BitFisNo: WideString;
    procedure Set_BitFisNo(const Value: WideString);
    function Get_FisNoKirilimli: WordBool;
    procedure Set_FisNoKirilimli(Value: WordBool);
    function Get_ReferansKod: WideString;
    procedure Set_ReferansKod(const Value: WideString);
    function Get_BasTar: TDateTime;
    procedure Set_BasTar(Value: TDateTime);
    function Get_BitTar: TDateTime;
    procedure Set_BitTar(Value: TDateTime);
  public
    property DefaultInterface: IUretSonEnteg read GetDefaultInterface;
  published
    property BasMamKod: WideString read Get_BasMamKod write Set_BasMamKod;
    property BitMamKod: WideString read Get_BitMamKod write Set_BitMamKod;
    property BasFisNo: WideString read Get_BasFisNo write Set_BasFisNo;
    property BitFisNo: WideString read Get_BitFisNo write Set_BitFisNo;
    property FisNoKirilimli: WordBool read Get_FisNoKirilimli write Set_FisNoKirilimli;
    property ReferansKod: WideString read Get_ReferansKod write Set_ReferansKod;
    property BasTar: TDateTime read Get_BasTar write Set_BasTar;
    property BitTar: TDateTime read Get_BitTar write Set_BitTar;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSirketList provides a Create and CreateRemote method to          
// create instances of the default interface ISirketList exposed by              
// the CoClass SirketList. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSirketList = class
    class function Create: ISirketList;
    class function CreateRemote(const MachineName: string): ISirketList;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSirketList
// Help String      : SirketList Object
// Default Interface: ISirketList
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSirketListProperties= class;
{$ENDIF}
  TSirketList = class(TOleServer)
  private
    FIntf:        ISirketList;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSirketListProperties;
    function      GetServerProperties: TSirketListProperties;
{$ENDIF}
    function      GetDefaultInterface: ISirketList;
  protected
    procedure InitServerData; override;
    function Get_SirketSayisi: Integer;
    function Get_SirketInfo(Index: Integer): ISirketInfo;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISirketList);
    procedure Disconnect; override;
    property DefaultInterface: ISirketList read GetDefaultInterface;
    property SirketSayisi: Integer read Get_SirketSayisi;
    property SirketInfo[Index: Integer]: ISirketInfo read Get_SirketInfo;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSirketListProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSirketList
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSirketListProperties = class(TPersistent)
  private
    FServer:    TSirketList;
    function    GetDefaultInterface: ISirketList;
    constructor Create(AServer: TSirketList);
  protected
    function Get_SirketSayisi: Integer;
    function Get_SirketInfo(Index: Integer): ISirketInfo;
  public
    property DefaultInterface: ISirketList read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSirketInfo provides a Create and CreateRemote method to          
// create instances of the default interface ISirketInfo exposed by              
// the CoClass SirketInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSirketInfo = class
    class function Create: ISirketInfo;
    class function CreateRemote(const MachineName: string): ISirketInfo;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSirketInfo
// Help String      : SirketInfo Object
// Default Interface: ISirketInfo
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSirketInfoProperties= class;
{$ENDIF}
  TSirketInfo = class(TOleServer)
  private
    FIntf:        ISirketInfo;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSirketInfoProperties;
    function      GetServerProperties: TSirketInfoProperties;
{$ENDIF}
    function      GetDefaultInterface: ISirketInfo;
  protected
    procedure InitServerData; override;
    function Get_SirketAdi: WideString;
    function Get_SirketYili: Integer;
    function Get_DevirSirket: WideString;
    function Get_DevirYili: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISirketInfo);
    procedure Disconnect; override;
    property DefaultInterface: ISirketInfo read GetDefaultInterface;
    property SirketAdi: WideString read Get_SirketAdi;
    property SirketYili: Integer read Get_SirketYili;
    property DevirSirket: WideString read Get_DevirSirket;
    property DevirYili: Integer read Get_DevirYili;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSirketInfoProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSirketInfo
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSirketInfoProperties = class(TPersistent)
  private
    FServer:    TSirketInfo;
    function    GetDefaultInterface: ISirketInfo;
    constructor Create(AServer: TSirketInfo);
  protected
    function Get_SirketAdi: WideString;
    function Get_SirketYili: Integer;
    function Get_DevirSirket: WideString;
    function Get_DevirYili: Integer;
  public
    property DefaultInterface: ISirketInfo read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoFatParametre provides a Create and CreateRemote method to          
// create instances of the default interface IFatParametre exposed by              
// the CoClass FatParametre. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFatParametre = class
    class function Create: IFatParametre;
    class function CreateRemote(const MachineName: string): IFatParametre;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TFatParametre
// Help String      : FatParametre Object
// Default Interface: IFatParametre
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TFatParametreProperties= class;
{$ENDIF}
  TFatParametre = class(TOleServer)
  private
    FIntf:        IFatParametre;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TFatParametreProperties;
    function      GetServerProperties: TFatParametreProperties;
{$ENDIF}
    function      GetDefaultInterface: IFatParametre;
  protected
    procedure InitServerData; override;
    function Get_OzelKod1: WordBool;
    function Get_OzelKod2: WordBool;
    function Get_Aciklama: WordBool;
    function Get_StoktanAyir: WordBool;
    function Get_SiparisOnay: WordBool;
    function Get_OzelNakliye: WordBool;
    function Get_Ekalan: WordBool;
    function Get_SatirBazindaTeslimCari: WordBool;
    function Get_SatirBazindaTeslimTarihi: WordBool;
    function Get_SatisEkSorgu: WordBool;
    function Get_Referans: WordBool;
    function Get_FarkliTeslimYeri: WordBool;
    function Get_SeriNo: WordBool;
    function Get_Kosul: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IFatParametre);
    procedure Disconnect; override;
    property DefaultInterface: IFatParametre read GetDefaultInterface;
    property OzelKod1: WordBool read Get_OzelKod1;
    property OzelKod2: WordBool read Get_OzelKod2;
    property Aciklama: WordBool read Get_Aciklama;
    property StoktanAyir: WordBool read Get_StoktanAyir;
    property SiparisOnay: WordBool read Get_SiparisOnay;
    property OzelNakliye: WordBool read Get_OzelNakliye;
    property Ekalan: WordBool read Get_Ekalan;
    property SatirBazindaTeslimCari: WordBool read Get_SatirBazindaTeslimCari;
    property SatirBazindaTeslimTarihi: WordBool read Get_SatirBazindaTeslimTarihi;
    property SatisEkSorgu: WordBool read Get_SatisEkSorgu;
    property Referans: WordBool read Get_Referans;
    property FarkliTeslimYeri: WordBool read Get_FarkliTeslimYeri;
    property SeriNo: WordBool read Get_SeriNo;
    property Kosul: WordBool read Get_Kosul;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TFatParametreProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TFatParametre
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TFatParametreProperties = class(TPersistent)
  private
    FServer:    TFatParametre;
    function    GetDefaultInterface: IFatParametre;
    constructor Create(AServer: TFatParametre);
  protected
    function Get_OzelKod1: WordBool;
    function Get_OzelKod2: WordBool;
    function Get_Aciklama: WordBool;
    function Get_StoktanAyir: WordBool;
    function Get_SiparisOnay: WordBool;
    function Get_OzelNakliye: WordBool;
    function Get_Ekalan: WordBool;
    function Get_SatirBazindaTeslimCari: WordBool;
    function Get_SatirBazindaTeslimTarihi: WordBool;
    function Get_SatisEkSorgu: WordBool;
    function Get_Referans: WordBool;
    function Get_FarkliTeslimYeri: WordBool;
    function Get_SeriNo: WordBool;
    function Get_Kosul: WordBool;
  public
    property DefaultInterface: IFatParametre read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoSirketParametreler provides a Create and CreateRemote method to          
// create instances of the default interface ISirketParametreler exposed by              
// the CoClass SirketParametreler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSirketParametreler = class
    class function Create: ISirketParametreler;
    class function CreateRemote(const MachineName: string): ISirketParametreler;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TSirketParametreler
// Help String      : SirketParametreler Object
// Default Interface: ISirketParametreler
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TSirketParametrelerProperties= class;
{$ENDIF}
  TSirketParametreler = class(TOleServer)
  private
    FIntf:        ISirketParametreler;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TSirketParametrelerProperties;
    function      GetServerProperties: TSirketParametrelerProperties;
{$ENDIF}
    function      GetDefaultInterface: ISirketParametreler;
  protected
    procedure InitServerData; override;
    function Get_Proje: WordBool;
    function Get_Plasiyer: WordBool;
    function Get_LOKALDEPO: WordBool;
    function Get_EsnekYapilandirma: WordBool;
    function Get_KarmaKoli: WordBool;
    function Get_Referans: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ISirketParametreler);
    procedure Disconnect; override;
    property DefaultInterface: ISirketParametreler read GetDefaultInterface;
    property Proje: WordBool read Get_Proje;
    property Plasiyer: WordBool read Get_Plasiyer;
    property LOKALDEPO: WordBool read Get_LOKALDEPO;
    property EsnekYapilandirma: WordBool read Get_EsnekYapilandirma;
    property KarmaKoli: WordBool read Get_KarmaKoli;
    property Referans: WordBool read Get_Referans;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TSirketParametrelerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TSirketParametreler
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TSirketParametrelerProperties = class(TPersistent)
  private
    FServer:    TSirketParametreler;
    function    GetDefaultInterface: ISirketParametreler;
    constructor Create(AServer: TSirketParametreler);
  protected
    function Get_Proje: WordBool;
    function Get_Plasiyer: WordBool;
    function Get_LOKALDEPO: WordBool;
    function Get_EsnekYapilandirma: WordBool;
    function Get_KarmaKoli: WordBool;
    function Get_Referans: WordBool;
  public
    property DefaultInterface: ISirketParametreler read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoTRHarita provides a Create and CreateRemote method to          
// create instances of the default interface ITRHarita exposed by              
// the CoClass TRHarita. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTRHarita = class
    class function Create: ITRHarita;
    class function CreateRemote(const MachineName: string): ITRHarita;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TTRHarita
// Help String      : Türkiye haritasý üzerinde rakamlarýn grafiksel gösterimi için kullanýlýr
// Default Interface: ITRHarita
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TTRHaritaProperties= class;
{$ENDIF}
  TTRHarita = class(TOleServer)
  private
    FIntf:        ITRHarita;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TTRHaritaProperties;
    function      GetServerProperties: TTRHaritaProperties;
{$ENDIF}
    function      GetDefaultInterface: ITRHarita;
  protected
    procedure InitServerData; override;
    function Get_FormBaslik: WideString;
    procedure Set_FormBaslik(const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ITRHarita);
    procedure Disconnect; override;
    procedure SayiEkle(const TRSehirAdi: WideString; Deger: Double);
    procedure Goster;
    function GetBitMap: OleVariant;
    property DefaultInterface: ITRHarita read GetDefaultInterface;
    property FormBaslik: WideString read Get_FormBaslik write Set_FormBaslik;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TTRHaritaProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TTRHarita
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TTRHaritaProperties = class(TPersistent)
  private
    FServer:    TTRHarita;
    function    GetDefaultInterface: ITRHarita;
    constructor Create(AServer: TTRHarita);
  protected
    function Get_FormBaslik: WideString;
    procedure Set_FormBaslik(const Value: WideString);
  public
    property DefaultInterface: ITRHarita read GetDefaultInterface;
  published
    property FormBaslik: WideString read Get_FormBaslik write Set_FormBaslik;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoMrp provides a Create and CreateRemote method to          
// create instances of the default interface IMrp exposed by              
// the CoClass Mrp. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMrp = class
    class function Create: IMrp;
    class function CreateRemote(const MachineName: string): IMrp;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TMrp
// Help String      : Mrp Object
// Default Interface: IMrp
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TMrpProperties= class;
{$ENDIF}
  TMrp = class(TOleServer)
  private
    FIntf:        IMrp;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TMrpProperties;
    function      GetServerProperties: TMrpProperties;
{$ENDIF}
    function      GetDefaultInterface: IMrp;
  protected
    procedure InitServerData; override;
    function Get_BasTar: TDateTime;
    procedure Set_BasTar(Value: TDateTime);
    function Get_BitTar: TDateTime;
    procedure Set_BitTar(Value: TDateTime);
    function Get_SirketListesi: INetStrList;
    procedure Set_SirketListesi(const Value: INetStrList);
    function Get_MinStokBak: WordBool;
    procedure Set_MinStokBak(Value: WordBool);
    function Get_BakKont: WordBool;
    procedure Set_BakKont(Value: WordBool);
    function Get_MamKont: WordBool;
    procedure Set_MamKont(Value: WordBool);
    function Get_SipKont: WordBool;
    procedure Set_SipKont(Value: WordBool);
    function Get_IsEmriKont: WordBool;
    procedure Set_IsEmriKont(Value: WordBool);
    function Get_IsEmriNoBas: WideString;
    procedure Set_IsEmriNoBas(const Value: WideString);
    function Get_IsEmriNoBit: WideString;
    procedure Set_IsEmriNoBit(const Value: WideString);
    function Get_IsEmrHaricNoBas: WideString;
    procedure Set_IsEmrHaricNoBas(const Value: WideString);
    function Get_IsEmrHaricNoBit: WideString;
    procedure Set_IsEmrHaricNoBit(const Value: WideString);
    function Get_GnlYapKodDestek: WordBool;
    procedure Set_GnlYapKodDestek(Value: WordBool);
    function Get_YapKodKontrol: WordBool;
    procedure Set_YapKodKontrol(Value: WordBool);
    function Get_Detayli: WordBool;
    procedure Set_Detayli(Value: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IMrp);
    procedure Disconnect; override;
    procedure MGPCalistir;
    property DefaultInterface: IMrp read GetDefaultInterface;
    property BasTar: TDateTime read Get_BasTar write Set_BasTar;
    property BitTar: TDateTime read Get_BitTar write Set_BitTar;
    property SirketListesi: INetStrList read Get_SirketListesi write Set_SirketListesi;
    property MinStokBak: WordBool read Get_MinStokBak write Set_MinStokBak;
    property BakKont: WordBool read Get_BakKont write Set_BakKont;
    property MamKont: WordBool read Get_MamKont write Set_MamKont;
    property SipKont: WordBool read Get_SipKont write Set_SipKont;
    property IsEmriKont: WordBool read Get_IsEmriKont write Set_IsEmriKont;
    property IsEmriNoBas: WideString read Get_IsEmriNoBas write Set_IsEmriNoBas;
    property IsEmriNoBit: WideString read Get_IsEmriNoBit write Set_IsEmriNoBit;
    property IsEmrHaricNoBas: WideString read Get_IsEmrHaricNoBas write Set_IsEmrHaricNoBas;
    property IsEmrHaricNoBit: WideString read Get_IsEmrHaricNoBit write Set_IsEmrHaricNoBit;
    property GnlYapKodDestek: WordBool read Get_GnlYapKodDestek write Set_GnlYapKodDestek;
    property YapKodKontrol: WordBool read Get_YapKodKontrol write Set_YapKodKontrol;
    property Detayli: WordBool read Get_Detayli write Set_Detayli;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TMrpProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TMrp
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TMrpProperties = class(TPersistent)
  private
    FServer:    TMrp;
    function    GetDefaultInterface: IMrp;
    constructor Create(AServer: TMrp);
  protected
    function Get_BasTar: TDateTime;
    procedure Set_BasTar(Value: TDateTime);
    function Get_BitTar: TDateTime;
    procedure Set_BitTar(Value: TDateTime);
    function Get_SirketListesi: INetStrList;
    procedure Set_SirketListesi(const Value: INetStrList);
    function Get_MinStokBak: WordBool;
    procedure Set_MinStokBak(Value: WordBool);
    function Get_BakKont: WordBool;
    procedure Set_BakKont(Value: WordBool);
    function Get_MamKont: WordBool;
    procedure Set_MamKont(Value: WordBool);
    function Get_SipKont: WordBool;
    procedure Set_SipKont(Value: WordBool);
    function Get_IsEmriKont: WordBool;
    procedure Set_IsEmriKont(Value: WordBool);
    function Get_IsEmriNoBas: WideString;
    procedure Set_IsEmriNoBas(const Value: WideString);
    function Get_IsEmriNoBit: WideString;
    procedure Set_IsEmriNoBit(const Value: WideString);
    function Get_IsEmrHaricNoBas: WideString;
    procedure Set_IsEmrHaricNoBas(const Value: WideString);
    function Get_IsEmrHaricNoBit: WideString;
    procedure Set_IsEmrHaricNoBit(const Value: WideString);
    function Get_GnlYapKodDestek: WordBool;
    procedure Set_GnlYapKodDestek(Value: WordBool);
    function Get_YapKodKontrol: WordBool;
    procedure Set_YapKodKontrol(Value: WordBool);
    function Get_Detayli: WordBool;
    procedure Set_Detayli(Value: WordBool);
  public
    property DefaultInterface: IMrp read GetDefaultInterface;
  published
    property BasTar: TDateTime read Get_BasTar write Set_BasTar;
    property BitTar: TDateTime read Get_BitTar write Set_BitTar;
    property SirketListesi: INetStrList read Get_SirketListesi write Set_SirketListesi;
    property MinStokBak: WordBool read Get_MinStokBak write Set_MinStokBak;
    property BakKont: WordBool read Get_BakKont write Set_BakKont;
    property MamKont: WordBool read Get_MamKont write Set_MamKont;
    property SipKont: WordBool read Get_SipKont write Set_SipKont;
    property IsEmriKont: WordBool read Get_IsEmriKont write Set_IsEmriKont;
    property IsEmriNoBas: WideString read Get_IsEmriNoBas write Set_IsEmriNoBas;
    property IsEmriNoBit: WideString read Get_IsEmriNoBit write Set_IsEmriNoBit;
    property IsEmrHaricNoBas: WideString read Get_IsEmrHaricNoBas write Set_IsEmrHaricNoBas;
    property IsEmrHaricNoBit: WideString read Get_IsEmrHaricNoBit write Set_IsEmrHaricNoBit;
    property GnlYapKodDestek: WordBool read Get_GnlYapKodDestek write Set_GnlYapKodDestek;
    property YapKodKontrol: WordBool read Get_YapKodKontrol write Set_YapKodKontrol;
    property Detayli: WordBool read Get_Detayli write Set_Detayli;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoNetStrList provides a Create and CreateRemote method to          
// create instances of the default interface INetStrList exposed by              
// the CoClass NetStrList. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNetStrList = class
    class function Create: INetStrList;
    class function CreateRemote(const MachineName: string): INetStrList;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNetStrList
// Help String      : NetStrList Object
// Default Interface: INetStrList
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TNetStrListProperties= class;
{$ENDIF}
  TNetStrList = class(TOleServer)
  private
    FIntf:        INetStrList;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TNetStrListProperties;
    function      GetServerProperties: TNetStrListProperties;
{$ENDIF}
    function      GetDefaultInterface: INetStrList;
  protected
    procedure InitServerData; override;
    function Get_Text: WideString;
    procedure Set_Text(const Value: WideString);
    function Get_Count: Integer;
    function Get_Strings(Index: Integer): WideString;
    procedure Set_Strings(Index: Integer; const Value: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: INetStrList);
    procedure Disconnect; override;
    function Add(const Str: WideString): Integer;
    property DefaultInterface: INetStrList read GetDefaultInterface;
    property Count: Integer read Get_Count;
    property Strings[Index: Integer]: WideString read Get_Strings write Set_Strings;
    property Text: WideString read Get_Text write Set_Text;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TNetStrListProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TNetStrList
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TNetStrListProperties = class(TPersistent)
  private
    FServer:    TNetStrList;
    function    GetDefaultInterface: INetStrList;
    constructor Create(AServer: TNetStrList);
  protected
    function Get_Text: WideString;
    procedure Set_Text(const Value: WideString);
    function Get_Count: Integer;
    function Get_Strings(Index: Integer): WideString;
    procedure Set_Strings(Index: Integer; const Value: WideString);
  public
    property DefaultInterface: INetStrList read GetDefaultInterface;
  published
    property Text: WideString read Get_Text write Set_Text;
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoBarkodBilgi provides a Create and CreateRemote method to          
// create instances of the default interface IBarkodBilgi exposed by              
// the CoClass BarkodBilgi. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBarkodBilgi = class
    class function Create: IBarkodBilgi;
    class function CreateRemote(const MachineName: string): IBarkodBilgi;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TBarkodBilgi
// Help String      : BarkodBilgi Object
// Default Interface: IBarkodBilgi
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TBarkodBilgiProperties= class;
{$ENDIF}
  TBarkodBilgi = class(TOleServer)
  private
    FIntf:        IBarkodBilgi;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps:       TBarkodBilgiProperties;
    function      GetServerProperties: TBarkodBilgiProperties;
{$ENDIF}
    function      GetDefaultInterface: IBarkodBilgi;
  protected
    procedure InitServerData; override;
    function Get_StokKodu: WideString;
    procedure Set_StokKodu(const Value: WideString);
    function Get_GrupKodu: WideString;
    procedure Set_GrupKodu(const Value: WideString);
    function Get_KOD1: WideString;
    procedure Set_KOD1(const Value: WideString);
    function Get_KOD2: WideString;
    procedure Set_KOD2(const Value: WideString);
    function Get_Kod3: WideString;
    procedure Set_Kod3(const Value: WideString);
    function Get_Kod4: WideString;
    procedure Set_Kod4(const Value: WideString);
    function Get_Kod5: WideString;
    procedure Set_Kod5(const Value: WideString);
    function Get_DepoKoduAlt: Integer;
    procedure Set_DepoKoduAlt(Value: Integer);
    function Get_DepoKoduUst: Integer;
    procedure Set_DepoKoduUst(Value: Integer);
    function Get_DizaynKodu: WideString;
    procedure Set_DizaynKodu(const Value: WideString);
    function Get_FiyatListesi: TFiyatListesi;
    procedure Set_FiyatListesi(Value: TFiyatListesi);
    function Get_SqlKisit: WideString;
    procedure Set_SqlKisit(const Value: WideString);
    function Get_SiralamaKisit: WideString;
    procedure Set_SiralamaKisit(const Value: WideString);
    function Get_YapKod: WideString;
    procedure Set_YapKod(const Value: WideString);
    function Get_Adet: Integer;
    procedure Set_Adet(Value: Integer);
    function Get_UpdateKodu: TUpdateKodu;
    procedure Set_UpdateKodu(Value: TUpdateKodu);
    function Get_BakiyeMiktarBas: WordBool;
    procedure Set_BakiyeMiktarBas(Value: WordBool);
    function Get_UpdateKoduSifirlansin: WordBool;
    procedure Set_UpdateKoduSifirlansin(Value: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IBarkodBilgi);
    procedure Disconnect; override;
    property DefaultInterface: IBarkodBilgi read GetDefaultInterface;
    property StokKodu: WideString read Get_StokKodu write Set_StokKodu;
    property GrupKodu: WideString read Get_GrupKodu write Set_GrupKodu;
    property KOD1: WideString read Get_KOD1 write Set_KOD1;
    property KOD2: WideString read Get_KOD2 write Set_KOD2;
    property Kod3: WideString read Get_Kod3 write Set_Kod3;
    property Kod4: WideString read Get_Kod4 write Set_Kod4;
    property Kod5: WideString read Get_Kod5 write Set_Kod5;
    property DepoKoduAlt: Integer read Get_DepoKoduAlt write Set_DepoKoduAlt;
    property DepoKoduUst: Integer read Get_DepoKoduUst write Set_DepoKoduUst;
    property DizaynKodu: WideString read Get_DizaynKodu write Set_DizaynKodu;
    property FiyatListesi: TFiyatListesi read Get_FiyatListesi write Set_FiyatListesi;
    property SqlKisit: WideString read Get_SqlKisit write Set_SqlKisit;
    property SiralamaKisit: WideString read Get_SiralamaKisit write Set_SiralamaKisit;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
    property Adet: Integer read Get_Adet write Set_Adet;
    property UpdateKodu: TUpdateKodu read Get_UpdateKodu write Set_UpdateKodu;
    property BakiyeMiktarBas: WordBool read Get_BakiyeMiktarBas write Set_BakiyeMiktarBas;
    property UpdateKoduSifirlansin: WordBool read Get_UpdateKoduSifirlansin write Set_UpdateKoduSifirlansin;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TBarkodBilgiProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TBarkodBilgi
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TBarkodBilgiProperties = class(TPersistent)
  private
    FServer:    TBarkodBilgi;
    function    GetDefaultInterface: IBarkodBilgi;
    constructor Create(AServer: TBarkodBilgi);
  protected
    function Get_StokKodu: WideString;
    procedure Set_StokKodu(const Value: WideString);
    function Get_GrupKodu: WideString;
    procedure Set_GrupKodu(const Value: WideString);
    function Get_KOD1: WideString;
    procedure Set_KOD1(const Value: WideString);
    function Get_KOD2: WideString;
    procedure Set_KOD2(const Value: WideString);
    function Get_Kod3: WideString;
    procedure Set_Kod3(const Value: WideString);
    function Get_Kod4: WideString;
    procedure Set_Kod4(const Value: WideString);
    function Get_Kod5: WideString;
    procedure Set_Kod5(const Value: WideString);
    function Get_DepoKoduAlt: Integer;
    procedure Set_DepoKoduAlt(Value: Integer);
    function Get_DepoKoduUst: Integer;
    procedure Set_DepoKoduUst(Value: Integer);
    function Get_DizaynKodu: WideString;
    procedure Set_DizaynKodu(const Value: WideString);
    function Get_FiyatListesi: TFiyatListesi;
    procedure Set_FiyatListesi(Value: TFiyatListesi);
    function Get_SqlKisit: WideString;
    procedure Set_SqlKisit(const Value: WideString);
    function Get_SiralamaKisit: WideString;
    procedure Set_SiralamaKisit(const Value: WideString);
    function Get_YapKod: WideString;
    procedure Set_YapKod(const Value: WideString);
    function Get_Adet: Integer;
    procedure Set_Adet(Value: Integer);
    function Get_UpdateKodu: TUpdateKodu;
    procedure Set_UpdateKodu(Value: TUpdateKodu);
    function Get_BakiyeMiktarBas: WordBool;
    procedure Set_BakiyeMiktarBas(Value: WordBool);
    function Get_UpdateKoduSifirlansin: WordBool;
    procedure Set_UpdateKoduSifirlansin(Value: WordBool);
  public
    property DefaultInterface: IBarkodBilgi read GetDefaultInterface;
  published
    property StokKodu: WideString read Get_StokKodu write Set_StokKodu;
    property GrupKodu: WideString read Get_GrupKodu write Set_GrupKodu;
    property KOD1: WideString read Get_KOD1 write Set_KOD1;
    property KOD2: WideString read Get_KOD2 write Set_KOD2;
    property Kod3: WideString read Get_Kod3 write Set_Kod3;
    property Kod4: WideString read Get_Kod4 write Set_Kod4;
    property Kod5: WideString read Get_Kod5 write Set_Kod5;
    property DepoKoduAlt: Integer read Get_DepoKoduAlt write Set_DepoKoduAlt;
    property DepoKoduUst: Integer read Get_DepoKoduUst write Set_DepoKoduUst;
    property DizaynKodu: WideString read Get_DizaynKodu write Set_DizaynKodu;
    property FiyatListesi: TFiyatListesi read Get_FiyatListesi write Set_FiyatListesi;
    property SqlKisit: WideString read Get_SqlKisit write Set_SqlKisit;
    property SiralamaKisit: WideString read Get_SiralamaKisit write Set_SiralamaKisit;
    property YapKod: WideString read Get_YapKod write Set_YapKod;
    property Adet: Integer read Get_Adet write Set_Adet;
    property UpdateKodu: TUpdateKodu read Get_UpdateKodu write Set_UpdateKodu;
    property BakiyeMiktarBas: WordBool read Get_BakiyeMiktarBas write Set_BakiyeMiktarBas;
    property UpdateKoduSifirlansin: WordBool read Get_UpdateKoduSifirlansin write Set_UpdateKoduSifirlansin;
  end;
{$ENDIF}


procedure Register;

resourcestring
  dtlServerPage = 'ActiveX';

  dtlOcxPage = 'ActiveX';

implementation

uses ComObj;

class function CoKernel.Create: IKernel;
begin
  Result := CreateComObject(CLASS_Kernel) as IKernel;
end;

class function CoKernel.CreateRemote(const MachineName: string): IKernel;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Kernel) as IKernel;
end;

procedure TKernel.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DF2805FE-D522-4BB0-8F6F-00F26172F4BC}';
    IntfIID:   '{8A587408-5359-412D-8365-644CF0DA5D72}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TKernel.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IKernel;
  end;
end;

procedure TKernel.ConnectTo(svrIntf: IKernel);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TKernel.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TKernel.GetDefaultInterface: IKernel;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TKernel.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TKernelProperties.Create(Self);
{$ENDIF}
end;

destructor TKernel.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TKernel.GetServerProperties: TKernelProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TKernel.Get_SonNetsisHata: INetsisHata;
begin
    Result := DefaultInterface.SonNetsisHata;
end;

function TKernel.Get_Version: WideString;
begin
    Result := DefaultInterface.Version;
end;

function TKernel.Get_SirketListesi: ISirketList;
begin
    Result := DefaultInterface.SirketListesi;
end;

function TKernel.Get_EkModulVar(Index: Integer): WordBool;
begin
    Result := DefaultInterface.EkModulVar[Index];
end;

function TKernel.Get_ENetsisKulSay: Integer;
begin
    Result := DefaultInterface.ENetsisKulSay;
end;

function TKernel.Get_NetsisAnaSurum: TNetsisAnaSurum;
begin
    Result := DefaultInterface.NetsisAnaSurum;
end;

function TKernel.Get_NetsisAltSurum: TNetsisAltSurum;
begin
    Result := DefaultInterface.NetsisAltSurum;
end;

procedure TKernel.FreeNetsisLibrary;
begin
  DefaultInterface.FreeNetsisLibrary;
end;

function TKernel.yeniSirket(vtTipi: TVTTipi; const vtAdi: WideString; const vtKulAdi: WideString; 
                            const vtKulSifre: WideString; const NetKul: WideString; 
                            const NetSifre: WideString; Sube_Kodu: Integer): ISirket;
begin
  Result := DefaultInterface.yeniSirket(vtTipi, vtAdi, vtKulAdi, vtKulSifre, NetKul, NetSifre, 
                                        Sube_Kodu);
end;

function TKernel.yeniKasa(const Sirket: ISirket): IKasa;
begin
  Result := DefaultInterface.yeniKasa(Sirket);
end;

function TKernel.yeniFatura(const Sirket: ISirket; FaturaTipi: TFaturaTip): IFatura;
begin
  Result := DefaultInterface.yeniFatura(Sirket, FaturaTipi);
end;

function TKernel.Sifrele(const Deger: WideString; SifrelemeTipi: TSifrelemeTipi): WideString;
begin
  Result := DefaultInterface.Sifrele(Deger, SifrelemeTipi);
end;

function TKernel.yeniCari(const Sirket: ISirket): ICari;
begin
  Result := DefaultInterface.yeniCari(Sirket);
end;

function TKernel.yeniStok(const Sirket: ISirket): IStok;
begin
  Result := DefaultInterface.yeniStok(Sirket);
end;

function TKernel.yeniKur(const Sirket: ISirket): IKur;
begin
  Result := DefaultInterface.yeniKur(Sirket);
end;

function TKernel.yeniDoviz(const Sirket: ISirket): IDoviz;
begin
  Result := DefaultInterface.yeniDoviz(Sirket);
end;

function TKernel.yeniCekSenAna(const Sirket: ISirket; Tip: TCekSenType): ICekSenetAna;
begin
  Result := DefaultInterface.yeniCekSenAna(Sirket, Tip);
end;

function TKernel.sayiYuvarla(Sayi: Double; Ondalik: Integer): Double;
begin
  Result := DefaultInterface.sayiYuvarla(Sayi, Ondalik);
end;

function TKernel.yeniReceteAna(const Sirket: ISirket): IReceteAna;
begin
  Result := DefaultInterface.yeniReceteAna(Sirket);
end;

function TKernel.yeniMaliyet(const Sirket: ISirket; MaliyetTipi: TMaliyetTipi): IDispatch;
begin
  Result := DefaultInterface.yeniMaliyet(Sirket, MaliyetTipi);
end;

function TKernel.yeniDekont(const Sirket: ISirket): IDekont;
begin
  Result := DefaultInterface.yeniDekont(Sirket);
end;

function TKernel.yeniCSDekont(const Sirket: ISirket; Tip: TDekCSTip): IDekCekSen;
begin
  Result := DefaultInterface.yeniCSDekont(Sirket, Tip);
end;

function TKernel.yeniProje(const Sirket: ISirket): IProje;
begin
  Result := DefaultInterface.yeniProje(Sirket);
end;

function TKernel.yeniNetRS(const Sirket: ISirket): INetRS;
begin
  Result := DefaultInterface.yeniNetRS(Sirket);
end;

function TKernel.yeniNetGuvenlik: INetGuvenlik;
begin
  Result := DefaultInterface.yeniNetGuvenlik;
end;

function TKernel.yeniCariHareket(const Sirket: ISirket): ICariHareket;
begin
  Result := DefaultInterface.yeniCariHareket(Sirket);
end;

function TKernel.yeniStokHareket(const Sirket: ISirket): IStokHareket;
begin
  Result := DefaultInterface.yeniStokHareket(Sirket);
end;

function TKernel.yeniBasim(const Sirket: ISirket): IBasim;
begin
  Result := DefaultInterface.yeniBasim(Sirket);
end;

function TKernel.yeniMaliGrup(const Sirket: ISirket): IMaliGrup;
begin
  Result := DefaultInterface.yeniMaliGrup(Sirket);
end;

function TKernel.yeniUretim(const Sirket: ISirket): IUretim;
begin
  Result := DefaultInterface.yeniUretim(Sirket);
end;

function TKernel.yeniStokBakiye(const Sirket: ISirket; const StokKodu: WideString; 
                                DepoKodu: Integer; const YapKod: WideString): IStokPH;
begin
  Result := DefaultInterface.yeniStokBakiye(Sirket, StokKodu, DepoKodu, YapKod);
end;

function TKernel.yeniMustahsil(const Sirket: ISirket; const CariKod: WideString): IMustahsil;
begin
  Result := DefaultInterface.yeniMustahsil(Sirket, CariKod);
end;

function TKernel.yeniParametre(const Sirket: ISirket): ISirketParametreler;
begin
  Result := DefaultInterface.yeniParametre(Sirket);
end;

function TKernel.NOXIKS(const Deger: WideString; Code: WordBool): WideString;
begin
  Result := DefaultInterface.NOXIKS(Deger, Code);
end;

function TKernel.yeniTRHarita(const Sirket: ISirket): ITRHarita;
begin
  Result := DefaultInterface.yeniTRHarita(Sirket);
end;

function TKernel.SifreYap(Anahtar: Integer; const Deger: WideString): WideString;
begin
  Result := DefaultInterface.SifreYap(Anahtar, Deger);
end;

function TKernel.SifreAc(Anahtar: Integer; const Deger: WideString): WideString;
begin
  Result := DefaultInterface.SifreAc(Anahtar, Deger);
end;

procedure TKernel.KilitYap(KilitNo: Integer);
begin
  DefaultInterface.KilitYap(KilitNo);
end;

procedure TKernel.KilitAc(KilitNo: Integer);
begin
  DefaultInterface.KilitAc(KilitNo);
end;

function TKernel.yeniMrp(const Sirket: ISirket): IMrp;
begin
  Result := DefaultInterface.yeniMrp(Sirket);
end;

function TKernel.DBSessionId: Integer;
begin
  Result := DefaultInterface.DBSessionId;
end;

function TKernel.OnayliVersion: WideString;
begin
  Result := DefaultInterface.OnayliVersion;
end;

function TKernel.yeniMuPlan(const Sirket: ISirket): IMuPlan;
begin
  Result := DefaultInterface.yeniMuPlan(Sirket);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TKernelProperties.Create(AServer: TKernel);
begin
  inherited Create;
  FServer := AServer;
end;

function TKernelProperties.GetDefaultInterface: IKernel;
begin
  Result := FServer.DefaultInterface;
end;

function TKernelProperties.Get_SonNetsisHata: INetsisHata;
begin
    Result := DefaultInterface.SonNetsisHata;
end;

function TKernelProperties.Get_Version: WideString;
begin
    Result := DefaultInterface.Version;
end;

function TKernelProperties.Get_SirketListesi: ISirketList;
begin
    Result := DefaultInterface.SirketListesi;
end;

function TKernelProperties.Get_EkModulVar(Index: Integer): WordBool;
begin
    Result := DefaultInterface.EkModulVar[Index];
end;

function TKernelProperties.Get_ENetsisKulSay: Integer;
begin
    Result := DefaultInterface.ENetsisKulSay;
end;

function TKernelProperties.Get_NetsisAnaSurum: TNetsisAnaSurum;
begin
    Result := DefaultInterface.NetsisAnaSurum;
end;

function TKernelProperties.Get_NetsisAltSurum: TNetsisAltSurum;
begin
    Result := DefaultInterface.NetsisAltSurum;
end;

{$ENDIF}

class function CoMerkez.Create: IMerkez;
begin
  Result := CreateComObject(CLASS_Merkez) as IMerkez;
end;

class function CoMerkez.CreateRemote(const MachineName: string): IMerkez;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Merkez) as IMerkez;
end;

class function CoNetsisHata.Create: INetsisHata;
begin
  Result := CreateComObject(CLASS_NetsisHata) as INetsisHata;
end;

class function CoNetsisHata.CreateRemote(const MachineName: string): INetsisHata;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NetsisHata) as INetsisHata;
end;

class function CoSirket.Create: ISirket;
begin
  Result := CreateComObject(CLASS_Sirket) as ISirket;
end;

class function CoSirket.CreateRemote(const MachineName: string): ISirket;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Sirket) as ISirket;
end;

procedure TSirket.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E3001DF1-CAD8-486C-AD5E-BD2D18F81A1E}';
    IntfIID:   '{8C4708EA-A7EA-488B-AC4C-4D720136825F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSirket.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISirket;
  end;
end;

procedure TSirket.ConnectTo(svrIntf: ISirket);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSirket.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSirket.GetDefaultInterface: ISirket;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSirket.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSirketProperties.Create(Self);
{$ENDIF}
end;

destructor TSirket.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSirket.GetServerProperties: TSirketProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSirket.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TSirket.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TSirket.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TSirket.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TSirket.Get_Log: WordBool;
begin
    Result := DefaultInterface.Log;
end;

function TSirket.Get_IntSubeKodu: Integer;
begin
    Result := DefaultInterface.IntSubeKodu;
end;

procedure TSirket.Set_IntSubeKodu(Value: Integer);
begin
  DefaultInterface.Set_IntSubeKodu(Value);
end;

function TSirket.Get_IntIsletmeKodu: Integer;
begin
    Result := DefaultInterface.IntIsletmeKodu;
end;

procedure TSirket.Set_IntIsletmeKodu(Value: Integer);
begin
  DefaultInterface.Set_IntIsletmeKodu(Value);
end;

function TSirket.Get_SirketYili: Integer;
begin
    Result := DefaultInterface.SirketYili;
end;

function TSirket.Get_YTLSirket: WordBool;
begin
    Result := DefaultInterface.YTLSirket;
end;

function TSirket.Get_DBConnectionParams: WideString;
begin
    Result := DefaultInterface.DBConnectionParams;
end;

function TSirket.Get_TemelsetCommonQuery: INetCommonQueryDispatcher;
begin
    Result := DefaultInterface.TemelsetCommonQuery;
end;

procedure TSirket.AktifYap(ModulNo: Integer; ProgNo: Integer);
begin
  DefaultInterface.AktifYap(ModulNo, ProgNo);
end;

function TSirket.getirNDS(KulNo: Integer; ModNo: Integer; ProgNo: Integer; NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirNDS(KulNo, ModNo, ProgNo, NDSTip);
end;

function TSirket.Bakiye_Getir(const Yapi: IStokPH): Integer;
begin
  Result := DefaultInterface.Bakiye_Getir(Yapi);
end;

function TSirket.SonFaturaNo(FatTip: TFaturaTip): WideString;
begin
  Result := DefaultInterface.SonFaturaNo(FatTip);
end;

function TSirket.KantardanSayiOku(GUIDestek: WordBool; const KantarKodu: WideString; 
                                  TestAmacli: WordBool; BeklemeSuresi: Integer): WideString;
begin
  Result := DefaultInterface.KantardanSayiOku(GUIDestek, KantarKodu, TestAmacli, BeklemeSuresi);
end;

function TSirket.F2Rehber: WideString;
begin
  Result := DefaultInterface.F2Rehber;
end;

function TSirket.OzelRehber(TusNumarasi: Integer): WideString;
begin
  Result := DefaultInterface.OzelRehber(TusNumarasi);
end;

function TSirket.MesajGetir(ModulNumarasi: Integer; DilNum: Integer): WideString;
begin
  Result := DefaultInterface.MesajGetir(ModulNumarasi, DilNum);
end;

function TSirket.GenelRehber(const TabloAdi: WideString; const SahaAdi1: WideString; 
                             const SahaAcik1: WideString; SahaTipi1: Integer; 
                             const SahaAdi2: WideString; const SahaAcik2: WideString; 
                             SahaTipi2: Integer; const SahaAdi3: WideString; 
                             const SahaAcik3: WideString; SahaTipi3: Integer; 
                             const SahaAdi4: WideString; const SahaAcik4: WideString; 
                             SahaTipi4: Integer; const SahaAdi5: WideString; 
                             const SahaAcik5: WideString; SahaTipi5: Integer; 
                             const RehberBaslik: WideString; const WhereSQL: WideString; 
                             GeriDonus: Integer; const KeySaha: WideString): WideString;
begin
  Result := DefaultInterface.GenelRehber(TabloAdi, SahaAdi1, SahaAcik1, SahaTipi1, SahaAdi2, 
                                         SahaAcik2, SahaTipi2, SahaAdi3, SahaAcik3, SahaTipi3, 
                                         SahaAdi4, SahaAcik4, SahaTipi4, SahaAdi5, SahaAcik5, 
                                         SahaTipi5, RehberBaslik, WhereSQL, GeriDonus, KeySaha);
end;

procedure TSirket.EntegrasyonEskiKayitlar(InTransaction: WordBool; const EntRefKey: WideString; 
                                          const MuhEntegreMi: WideString; 
                                          ExactSearchForEntRef: WordBool; LogSupport: WordBool);
begin
  DefaultInterface.EntegrasyonEskiKayitlar(InTransaction, EntRefKey, MuhEntegreMi, 
                                           ExactSearchForEntRef, LogSupport);
end;

function TSirket.DateToDBStr(prmDate: TDateTime): WideString;
begin
  Result := DefaultInterface.DateToDBStr(prmDate);
end;

function TSirket.FloatToDBStr(prmFloat: Double): WideString;
begin
  Result := DefaultInterface.FloatToDBStr(prmFloat);
end;

function TSirket.NetsisTamSayi(Sayi: Double; Ondalik: Integer): Double;
begin
  Result := DefaultInterface.NetsisTamSayi(Sayi, Ondalik);
end;

function TSirket.NetsisFloatToStr(Sayi: Double; Ondalik: Integer; 
                                  NXNDSOndalikTipi: TNXNDSOndalikTipi): WideString;
begin
  Result := DefaultInterface.NetsisFloatToStr(Sayi, Ondalik, NXNDSOndalikTipi);
end;

procedure TSirket.NNRSihirbaziniAc;
begin
  DefaultInterface.NNRSihirbaziniAc;
end;

procedure TSirket.NNRRaporCalistir(const DosyaAdi: WideString);
begin
  DefaultInterface.NNRRaporCalistir(DosyaAdi);
end;

function TSirket.KullaniciKontrol(const KullaniciAdi: WideString; const KullaniciSifresi: WideString): TNXLoginResult;
begin
  Result := DefaultInterface.KullaniciKontrol(KullaniciAdi, KullaniciSifresi);
end;

function TSirket.EPostaGonder(const EMailTO: WideString; const EMailCC: WideString; 
                              const EMailKonu: WideString; const DosyaListesi: WideString; 
                              const EMailBody: WideString): WordBool;
begin
  Result := DefaultInterface.EPostaGonder(EMailTO, EMailCC, EMailKonu, DosyaListesi, EMailBody);
end;

function TSirket.HakKontrol(ModulNo: Integer; ProgramNo: Integer; HakTipi: TNXHakTipi): WordBool;
begin
  Result := DefaultInterface.HakKontrol(ModulNo, ProgramNo, HakTipi);
end;

function TSirket.NRPRaporGetir(const NRPFileName: WideString; const CariKod: WideString): OleVariant;
begin
  Result := DefaultInterface.NRPRaporGetir(NRPFileName, CariKod);
end;

function TSirket.ResimGetir(TabloTipi: SYSINT; const Kod: WideString): OleVariant;
begin
  Result := DefaultInterface.ResimGetir(TabloTipi, Kod);
end;

function TSirket.SifreDegistir(const Eskisifre: WideString; const YeniSifre: WideString; 
                               const Onaysifre: WideString; var MinSifreUzunlugu: Integer): TSifreDegisimSonuc;
begin
  Result := DefaultInterface.SifreDegistir(Eskisifre, YeniSifre, Onaysifre, MinSifreUzunlugu);
end;

function TSirket.OnayliSurumKontrol(Major1: Integer; Minor1: Integer; Rel1: Integer; 
                                    Major2: Integer; Minor2: Integer; Rel2: Integer): WordBool;
begin
  Result := DefaultInterface.OnayliSurumKontrol(Major1, Minor1, Rel1, Major2, Minor2, Rel2);
end;

procedure TSirket.NNROnSorgu(const FormBaslik: WideString; const SabitFiltreler: WideString; 
                             const SahaDilleri: WideString; const RaporDosyasi: WideString; 
                             const FiltreDegerleri: WideString);
begin
  DefaultInterface.NNROnSorgu(FormBaslik, SabitFiltreler, SahaDilleri, RaporDosyasi, FiltreDegerleri);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSirketProperties.Create(AServer: TSirket);
begin
  inherited Create;
  FServer := AServer;
end;

function TSirketProperties.GetDefaultInterface: ISirket;
begin
  Result := FServer.DefaultInterface;
end;

function TSirketProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TSirketProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TSirketProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TSirketProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TSirketProperties.Get_Log: WordBool;
begin
    Result := DefaultInterface.Log;
end;

function TSirketProperties.Get_IntSubeKodu: Integer;
begin
    Result := DefaultInterface.IntSubeKodu;
end;

procedure TSirketProperties.Set_IntSubeKodu(Value: Integer);
begin
  DefaultInterface.Set_IntSubeKodu(Value);
end;

function TSirketProperties.Get_IntIsletmeKodu: Integer;
begin
    Result := DefaultInterface.IntIsletmeKodu;
end;

procedure TSirketProperties.Set_IntIsletmeKodu(Value: Integer);
begin
  DefaultInterface.Set_IntIsletmeKodu(Value);
end;

function TSirketProperties.Get_SirketYili: Integer;
begin
    Result := DefaultInterface.SirketYili;
end;

function TSirketProperties.Get_YTLSirket: WordBool;
begin
    Result := DefaultInterface.YTLSirket;
end;

function TSirketProperties.Get_DBConnectionParams: WideString;
begin
    Result := DefaultInterface.DBConnectionParams;
end;

function TSirketProperties.Get_TemelsetCommonQuery: INetCommonQueryDispatcher;
begin
    Result := DefaultInterface.TemelsetCommonQuery;
end;

{$ENDIF}

class function CoData.Create: IData;
begin
  Result := CreateComObject(CLASS_Data) as IData;
end;

class function CoData.CreateRemote(const MachineName: string): IData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Data) as IData;
end;

class function CoKasa.Create: IKasa;
begin
  Result := CreateComObject(CLASS_Kasa) as IKasa;
end;

class function CoKasa.CreateRemote(const MachineName: string): IKasa;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Kasa) as IKasa;
end;

procedure TKasa.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7357488C-4157-452E-982E-53F7865869C0}';
    IntfIID:   '{9FFEB746-DFEC-4005-B7AA-5625EC8EA7B9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TKasa.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IKasa;
  end;
end;

procedure TKasa.ConnectTo(svrIntf: IKasa);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TKasa.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TKasa.GetDefaultInterface: IKasa;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TKasa.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TKasaProperties.Create(Self);
{$ENDIF}
end;

destructor TKasa.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TKasa.GetServerProperties: TKasaProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TKasa.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TKasa.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TKasa.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TKasa.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TKasa.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TKasa.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TKasa.Get_KsMas_Kod: WideString;
begin
    Result := DefaultInterface.KsMas_Kod;
end;

procedure TKasa.Set_KsMas_Kod(const Value: WideString);
  { Warning: The property KsMas_Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KsMas_Kod := Value;
end;

function TKasa.Get_Tarih: TDateTime;
begin
    Result := DefaultInterface.Tarih;
end;

procedure TKasa.Set_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih(Value);
end;

function TKasa.Get_Fisno: WideString;
begin
    Result := DefaultInterface.Fisno;
end;

procedure TKasa.Set_Fisno(const Value: WideString);
  { Warning: The property Fisno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Fisno := Value;
end;

function TKasa.Get_IO: WideString;
begin
    Result := DefaultInterface.IO;
end;

procedure TKasa.Set_IO(const Value: WideString);
  { Warning: The property IO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IO := Value;
end;

function TKasa.Get_Aciklama: WideString;
begin
    Result := DefaultInterface.Aciklama;
end;

procedure TKasa.Set_Aciklama(const Value: WideString);
  { Warning: The property Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama := Value;
end;

function TKasa.Get_Tip: WideString;
begin
    Result := DefaultInterface.Tip;
end;

procedure TKasa.Set_Tip(const Value: WideString);
  { Warning: The property Tip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tip := Value;
end;

function TKasa.Get_Tutar: Double;
begin
    Result := DefaultInterface.Tutar;
end;

procedure TKasa.Set_Tutar(Value: Double);
begin
  DefaultInterface.Set_Tutar(Value);
end;

function TKasa.Get_Cari_Muh: WideString;
begin
    Result := DefaultInterface.Cari_Muh;
end;

procedure TKasa.Set_Cari_Muh(const Value: WideString);
  { Warning: The property Cari_Muh has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Cari_Muh := Value;
end;

function TKasa.Get_Kod: WideString;
begin
    Result := DefaultInterface.Kod;
end;

procedure TKasa.Set_Kod(const Value: WideString);
  { Warning: The property Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod := Value;
end;

function TKasa.Get_DovizTut: Double;
begin
    Result := DefaultInterface.DovizTut;
end;

procedure TKasa.Set_DovizTut(Value: Double);
begin
  DefaultInterface.Set_DovizTut(Value);
end;

function TKasa.Get_Kur: Double;
begin
    Result := DefaultInterface.Kur;
end;

procedure TKasa.Set_Kur(Value: Double);
begin
  DefaultInterface.Set_Kur(Value);
end;

function TKasa.Get_Plasiyer_Kodu: WideString;
begin
    Result := DefaultInterface.Plasiyer_Kodu;
end;

procedure TKasa.Set_Plasiyer_Kodu(const Value: WideString);
  { Warning: The property Plasiyer_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer_Kodu := Value;
end;

function TKasa.Get_OdemeTuru: Integer;
begin
    Result := DefaultInterface.OdemeTuru;
end;

procedure TKasa.Set_OdemeTuru(Value: Integer);
begin
  DefaultInterface.Set_OdemeTuru(Value);
end;

function TKasa.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TKasa.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TKasa.Get_Zaman: WideString;
begin
    Result := DefaultInterface.Zaman;
end;

procedure TKasa.Set_Zaman(const Value: WideString);
  { Warning: The property Zaman has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Zaman := Value;
end;

function TKasa.Get_Kull_ID: Integer;
begin
    Result := DefaultInterface.Kull_ID;
end;

procedure TKasa.Set_Kull_ID(Value: Integer);
begin
  DefaultInterface.Set_Kull_ID(Value);
end;

function TKasa.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TKasa.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TKasa.Get_Kredi_Kart_No: WideString;
begin
    Result := DefaultInterface.Kredi_Kart_No;
end;

procedure TKasa.Set_Kredi_Kart_No(const Value: WideString);
  { Warning: The property Kredi_Kart_No has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kredi_Kart_No := Value;
end;

function TKasa.Get_Kdv_Oran: Double;
begin
    Result := DefaultInterface.Kdv_Oran;
end;

procedure TKasa.Set_Kdv_Oran(Value: Double);
begin
  DefaultInterface.Set_Kdv_Oran(Value);
end;

function TKasa.Get_Kdv_Dahil: WideString;
begin
    Result := DefaultInterface.Kdv_Dahil;
end;

procedure TKasa.Set_Kdv_Dahil(const Value: WideString);
  { Warning: The property Kdv_Dahil has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kdv_Dahil := Value;
end;

function TKasa.Get_Yedek1: WideString;
begin
    Result := DefaultInterface.Yedek1;
end;

procedure TKasa.Set_Yedek1(const Value: WideString);
  { Warning: The property Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek1 := Value;
end;

function TKasa.Get_Yedek2: WideString;
begin
    Result := DefaultInterface.Yedek2;
end;

procedure TKasa.Set_Yedek2(const Value: WideString);
  { Warning: The property Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek2 := Value;
end;

function TKasa.Get_Yedek3: Double;
begin
    Result := DefaultInterface.Yedek3;
end;

procedure TKasa.Set_Yedek3(Value: Double);
begin
  DefaultInterface.Set_Yedek3(Value);
end;

function TKasa.Get_Yedek4: Double;
begin
    Result := DefaultInterface.Yedek4;
end;

procedure TKasa.Set_Yedek4(Value: Double);
begin
  DefaultInterface.Set_Yedek4(Value);
end;

function TKasa.Get_Yedek5: Double;
begin
    Result := DefaultInterface.Yedek5;
end;

procedure TKasa.Set_Yedek5(Value: Double);
begin
  DefaultInterface.Set_Yedek5(Value);
end;

function TKasa.Get_Yedek6: WideString;
begin
    Result := DefaultInterface.Yedek6;
end;

procedure TKasa.Set_Yedek6(const Value: WideString);
  { Warning: The property Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek6 := Value;
end;

function TKasa.Get_Yedek7: Integer;
begin
    Result := DefaultInterface.Yedek7;
end;

procedure TKasa.Set_Yedek7(Value: Integer);
begin
  DefaultInterface.Set_Yedek7(Value);
end;

function TKasa.Get_Yedek8: Integer;
begin
    Result := DefaultInterface.Yedek8;
end;

procedure TKasa.Set_Yedek8(Value: Integer);
begin
  DefaultInterface.Set_Yedek8(Value);
end;

function TKasa.Get_Yedek9: Integer;
begin
    Result := DefaultInterface.Yedek9;
end;

procedure TKasa.Set_Yedek9(Value: Integer);
begin
  DefaultInterface.Set_Yedek9(Value);
end;

function TKasa.Get_Yedek10: TDateTime;
begin
    Result := DefaultInterface.Yedek10;
end;

procedure TKasa.Set_Yedek10(Value: TDateTime);
begin
  DefaultInterface.Set_Yedek10(Value);
end;

function TKasa.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TKasa.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TKasa.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TKasa.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TKasa.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TKasa.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TKasa.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TKasa.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TKasa.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TKasa.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TKasa.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TKasa.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TKasa.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TKasa.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

function TKasa.Get_Sira: Integer;
begin
    Result := DefaultInterface.Sira;
end;

procedure TKasa.Set_Sira(Value: Integer);
begin
  DefaultInterface.Set_Sira(Value);
end;

procedure TKasa.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TKasa.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TKasa.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TKasa.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TKasa.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TKasa.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TKasa.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

function TKasa.KasaIslem(IslemTipi: TKasaIslem): WordBool;
begin
  Result := DefaultInterface.KasaIslem(IslemTipi);
end;

function TKasa.Islem(IslemTipi: TKasaIslem): WordBool;
begin
  Result := DefaultInterface.Islem(IslemTipi);
end;

function TKasa.KasaSonBakiye: IKasaBakiye;
begin
  Result := DefaultInterface.KasaSonBakiye;
end;

function TKasa.CSKOdeme(Tip: TCekSenType): WordBool;
begin
  Result := DefaultInterface.CSKOdeme(Tip);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TKasaProperties.Create(AServer: TKasa);
begin
  inherited Create;
  FServer := AServer;
end;

function TKasaProperties.GetDefaultInterface: IKasa;
begin
  Result := FServer.DefaultInterface;
end;

function TKasaProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TKasaProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TKasaProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TKasaProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TKasaProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TKasaProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TKasaProperties.Get_KsMas_Kod: WideString;
begin
    Result := DefaultInterface.KsMas_Kod;
end;

procedure TKasaProperties.Set_KsMas_Kod(const Value: WideString);
  { Warning: The property KsMas_Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KsMas_Kod := Value;
end;

function TKasaProperties.Get_Tarih: TDateTime;
begin
    Result := DefaultInterface.Tarih;
end;

procedure TKasaProperties.Set_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih(Value);
end;

function TKasaProperties.Get_Fisno: WideString;
begin
    Result := DefaultInterface.Fisno;
end;

procedure TKasaProperties.Set_Fisno(const Value: WideString);
  { Warning: The property Fisno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Fisno := Value;
end;

function TKasaProperties.Get_IO: WideString;
begin
    Result := DefaultInterface.IO;
end;

procedure TKasaProperties.Set_IO(const Value: WideString);
  { Warning: The property IO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IO := Value;
end;

function TKasaProperties.Get_Aciklama: WideString;
begin
    Result := DefaultInterface.Aciklama;
end;

procedure TKasaProperties.Set_Aciklama(const Value: WideString);
  { Warning: The property Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama := Value;
end;

function TKasaProperties.Get_Tip: WideString;
begin
    Result := DefaultInterface.Tip;
end;

procedure TKasaProperties.Set_Tip(const Value: WideString);
  { Warning: The property Tip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tip := Value;
end;

function TKasaProperties.Get_Tutar: Double;
begin
    Result := DefaultInterface.Tutar;
end;

procedure TKasaProperties.Set_Tutar(Value: Double);
begin
  DefaultInterface.Set_Tutar(Value);
end;

function TKasaProperties.Get_Cari_Muh: WideString;
begin
    Result := DefaultInterface.Cari_Muh;
end;

procedure TKasaProperties.Set_Cari_Muh(const Value: WideString);
  { Warning: The property Cari_Muh has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Cari_Muh := Value;
end;

function TKasaProperties.Get_Kod: WideString;
begin
    Result := DefaultInterface.Kod;
end;

procedure TKasaProperties.Set_Kod(const Value: WideString);
  { Warning: The property Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod := Value;
end;

function TKasaProperties.Get_DovizTut: Double;
begin
    Result := DefaultInterface.DovizTut;
end;

procedure TKasaProperties.Set_DovizTut(Value: Double);
begin
  DefaultInterface.Set_DovizTut(Value);
end;

function TKasaProperties.Get_Kur: Double;
begin
    Result := DefaultInterface.Kur;
end;

procedure TKasaProperties.Set_Kur(Value: Double);
begin
  DefaultInterface.Set_Kur(Value);
end;

function TKasaProperties.Get_Plasiyer_Kodu: WideString;
begin
    Result := DefaultInterface.Plasiyer_Kodu;
end;

procedure TKasaProperties.Set_Plasiyer_Kodu(const Value: WideString);
  { Warning: The property Plasiyer_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer_Kodu := Value;
end;

function TKasaProperties.Get_OdemeTuru: Integer;
begin
    Result := DefaultInterface.OdemeTuru;
end;

procedure TKasaProperties.Set_OdemeTuru(Value: Integer);
begin
  DefaultInterface.Set_OdemeTuru(Value);
end;

function TKasaProperties.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TKasaProperties.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TKasaProperties.Get_Zaman: WideString;
begin
    Result := DefaultInterface.Zaman;
end;

procedure TKasaProperties.Set_Zaman(const Value: WideString);
  { Warning: The property Zaman has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Zaman := Value;
end;

function TKasaProperties.Get_Kull_ID: Integer;
begin
    Result := DefaultInterface.Kull_ID;
end;

procedure TKasaProperties.Set_Kull_ID(Value: Integer);
begin
  DefaultInterface.Set_Kull_ID(Value);
end;

function TKasaProperties.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TKasaProperties.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TKasaProperties.Get_Kredi_Kart_No: WideString;
begin
    Result := DefaultInterface.Kredi_Kart_No;
end;

procedure TKasaProperties.Set_Kredi_Kart_No(const Value: WideString);
  { Warning: The property Kredi_Kart_No has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kredi_Kart_No := Value;
end;

function TKasaProperties.Get_Kdv_Oran: Double;
begin
    Result := DefaultInterface.Kdv_Oran;
end;

procedure TKasaProperties.Set_Kdv_Oran(Value: Double);
begin
  DefaultInterface.Set_Kdv_Oran(Value);
end;

function TKasaProperties.Get_Kdv_Dahil: WideString;
begin
    Result := DefaultInterface.Kdv_Dahil;
end;

procedure TKasaProperties.Set_Kdv_Dahil(const Value: WideString);
  { Warning: The property Kdv_Dahil has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kdv_Dahil := Value;
end;

function TKasaProperties.Get_Yedek1: WideString;
begin
    Result := DefaultInterface.Yedek1;
end;

procedure TKasaProperties.Set_Yedek1(const Value: WideString);
  { Warning: The property Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek1 := Value;
end;

function TKasaProperties.Get_Yedek2: WideString;
begin
    Result := DefaultInterface.Yedek2;
end;

procedure TKasaProperties.Set_Yedek2(const Value: WideString);
  { Warning: The property Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek2 := Value;
end;

function TKasaProperties.Get_Yedek3: Double;
begin
    Result := DefaultInterface.Yedek3;
end;

procedure TKasaProperties.Set_Yedek3(Value: Double);
begin
  DefaultInterface.Set_Yedek3(Value);
end;

function TKasaProperties.Get_Yedek4: Double;
begin
    Result := DefaultInterface.Yedek4;
end;

procedure TKasaProperties.Set_Yedek4(Value: Double);
begin
  DefaultInterface.Set_Yedek4(Value);
end;

function TKasaProperties.Get_Yedek5: Double;
begin
    Result := DefaultInterface.Yedek5;
end;

procedure TKasaProperties.Set_Yedek5(Value: Double);
begin
  DefaultInterface.Set_Yedek5(Value);
end;

function TKasaProperties.Get_Yedek6: WideString;
begin
    Result := DefaultInterface.Yedek6;
end;

procedure TKasaProperties.Set_Yedek6(const Value: WideString);
  { Warning: The property Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek6 := Value;
end;

function TKasaProperties.Get_Yedek7: Integer;
begin
    Result := DefaultInterface.Yedek7;
end;

procedure TKasaProperties.Set_Yedek7(Value: Integer);
begin
  DefaultInterface.Set_Yedek7(Value);
end;

function TKasaProperties.Get_Yedek8: Integer;
begin
    Result := DefaultInterface.Yedek8;
end;

procedure TKasaProperties.Set_Yedek8(Value: Integer);
begin
  DefaultInterface.Set_Yedek8(Value);
end;

function TKasaProperties.Get_Yedek9: Integer;
begin
    Result := DefaultInterface.Yedek9;
end;

procedure TKasaProperties.Set_Yedek9(Value: Integer);
begin
  DefaultInterface.Set_Yedek9(Value);
end;

function TKasaProperties.Get_Yedek10: TDateTime;
begin
    Result := DefaultInterface.Yedek10;
end;

procedure TKasaProperties.Set_Yedek10(Value: TDateTime);
begin
  DefaultInterface.Set_Yedek10(Value);
end;

function TKasaProperties.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TKasaProperties.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TKasaProperties.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TKasaProperties.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TKasaProperties.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TKasaProperties.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TKasaProperties.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TKasaProperties.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TKasaProperties.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TKasaProperties.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TKasaProperties.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TKasaProperties.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TKasaProperties.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TKasaProperties.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

function TKasaProperties.Get_Sira: Integer;
begin
    Result := DefaultInterface.Sira;
end;

procedure TKasaProperties.Set_Sira(Value: Integer);
begin
  DefaultInterface.Set_Sira(Value);
end;

{$ENDIF}

class function CoFatura.Create: IFatura;
begin
  Result := CreateComObject(CLASS_Fatura) as IFatura;
end;

class function CoFatura.CreateRemote(const MachineName: string): IFatura;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Fatura) as IFatura;
end;

procedure TFatura.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2010A64E-B42C-4DDA-A276-DF5615F5E684}';
    IntfIID:   '{0160C6D3-D73E-4504-94F7-87550E3A2474}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFatura.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IFatura;
  end;
end;

procedure TFatura.ConnectTo(svrIntf: IFatura);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFatura.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFatura.GetDefaultInterface: IFatura;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFatura.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFaturaProperties.Create(Self);
{$ENDIF}
end;

destructor TFatura.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFatura.GetServerProperties: TFaturaProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFatura.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TFatura.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TFatura.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TFatura.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TFatura.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TFatura.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TFatura.Get_KalemAdedi: Integer;
begin
    Result := DefaultInterface.KalemAdedi;
end;

function TFatura.Get_Kalem(Index: Integer): IFatKalem;
begin
    Result := DefaultInterface.Kalem[Index];
end;

function TFatura.Get_FaturaTip: TFaturaTip;
begin
    Result := DefaultInterface.FaturaTip;
end;

procedure TFatura.Set_FaturaTip(Value: TFaturaTip);
begin
  DefaultInterface.Set_FaturaTip(Value);
end;

function TFatura.Get_KasayaIslenmesin: WordBool;
begin
    Result := DefaultInterface.KasayaIslenmesin;
end;

procedure TFatura.Set_KasayaIslenmesin(Value: WordBool);
begin
  DefaultInterface.Set_KasayaIslenmesin(Value);
end;

function TFatura.Get_SonNumaraYazilsin: WordBool;
begin
    Result := DefaultInterface.SonNumaraYazilsin;
end;

procedure TFatura.Set_SonNumaraYazilsin(Value: WordBool);
begin
  DefaultInterface.Set_SonNumaraYazilsin(Value);
end;

function TFatura.Get_OtoIskontoGetir: WordBool;
begin
    Result := DefaultInterface.OtoIskontoGetir;
end;

procedure TFatura.Set_OtoIskontoGetir(Value: WordBool);
begin
  DefaultInterface.Set_OtoIskontoGetir(Value);
end;

function TFatura.Get_KosulluHesapla: WordBool;
begin
    Result := DefaultInterface.KosulluHesapla;
end;

procedure TFatura.Set_KosulluHesapla(Value: WordBool);
begin
  DefaultInterface.Set_KosulluHesapla(Value);
end;

function TFatura.Get_InternalObjectAddress: Integer;
begin
    Result := DefaultInterface.InternalObjectAddress;
end;

function TFatura.Get_SeriliHesapla: WordBool;
begin
    Result := DefaultInterface.SeriliHesapla;
end;

procedure TFatura.Set_SeriliHesapla(Value: WordBool);
begin
  DefaultInterface.Set_SeriliHesapla(Value);
end;

function TFatura.Get_YedekKalem(Index: Integer): IFatKalem;
begin
    Result := DefaultInterface.YedekKalem[Index];
end;

function TFatura.Get_FiyatSistemineGoreHesapla: WordBool;
begin
    Result := DefaultInterface.FiyatSistemineGoreHesapla;
end;

procedure TFatura.Set_FiyatSistemineGoreHesapla(Value: WordBool);
begin
  DefaultInterface.Set_FiyatSistemineGoreHesapla(Value);
end;

procedure TFatura.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TFatura.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TFatura.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TFatura.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TFatura.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TFatura.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TFatura.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

function TFatura.Ust: IFatUst;
begin
  Result := DefaultInterface.Ust;
end;

function TFatura.kalemYeni(const StokKodu: WideString): IFatKalem;
begin
  Result := DefaultInterface.kalemYeni(StokKodu);
end;

procedure TFatura.OkuUst(const FatIrsNo: WideString; const CariKod: WideString);
begin
  DefaultInterface.OkuUst(FatIrsNo, CariKod);
end;

procedure TFatura.OkuKalem;
begin
  DefaultInterface.OkuKalem;
end;

function TFatura.YeniNumara(const Seri: WideString): WideString;
begin
  Result := DefaultInterface.YeniNumara(Seri);
end;

procedure TFatura.VadeEkle(Gunler: Integer; Boloran: Double);
begin
  DefaultInterface.VadeEkle(Gunler, Boloran);
end;

procedure TFatura.VadeleriTemizle;
begin
  DefaultInterface.VadeleriTemizle;
end;

procedure TFatura.SatirBaziAcikTemizle;
begin
  DefaultInterface.SatirBaziAcikTemizle;
end;

procedure TFatura.SiparisRevizyon(const RevizyonSipNo: WideString; BaslangicTarihi: TDateTime);
begin
  DefaultInterface.SiparisRevizyon(RevizyonSipNo, BaslangicTarihi);
end;

procedure TFatura.Irsaliye2Fatura(const objFatura: IFatura);
begin
  DefaultInterface.Irsaliye2Fatura(objFatura);
end;

procedure TFatura.Siparis2IrsFat(const objYeniBelge: IFatura);
begin
  DefaultInterface.Siparis2IrsFat(objYeniBelge);
end;

procedure TFatura.KosullariHazirla;
begin
  DefaultInterface.KosullariHazirla;
end;

function TFatura.getirKosulDetay(KalemSiraNo: Integer): IFatKosulDetay;
begin
  Result := DefaultInterface.getirKosulDetay(KalemSiraNo);
end;

procedure TFatura.KosulUstHesapla;
begin
  DefaultInterface.KosulUstHesapla;
end;

procedure TFatura.KosulKalemHesapla(KalemSiraNo: Integer);
begin
  DefaultInterface.KosulKalemHesapla(KalemSiraNo);
end;

function TFatura.KosulUstGetir: IFatUst;
begin
  Result := DefaultInterface.KosulUstGetir;
end;

function TFatura.KosulKalemGetir(KalemSiraNo: Integer): IFatKalem;
begin
  Result := DefaultInterface.KosulKalemGetir(KalemSiraNo);
end;

procedure TFatura.HesaplamalariYap;
begin
  DefaultInterface.HesaplamalariYap;
end;

function TFatura.Parametreler: IFatParametre;
begin
  Result := DefaultInterface.Parametreler;
end;

procedure TFatura.kalemSil(KalemSiraNo: Integer);
begin
  DefaultInterface.kalemSil(KalemSiraNo);
end;

procedure TFatura.SonNumaraKaydet;
begin
  DefaultInterface.SonNumaraKaydet;
end;

function TFatura.NoArtiBir(const FatNo: WideString): WideString;
begin
  Result := DefaultInterface.NoArtiBir(FatNo);
end;

procedure TFatura.FiyatKalemHesapla(KalemSiraNo: Integer);
begin
  DefaultInterface.FiyatKalemHesapla(KalemSiraNo);
end;

function TFatura.FiyatKalemGetir(KalemSiraNo: Integer): IFatKalem;
begin
  Result := DefaultInterface.FiyatKalemGetir(KalemSiraNo);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFaturaProperties.Create(AServer: TFatura);
begin
  inherited Create;
  FServer := AServer;
end;

function TFaturaProperties.GetDefaultInterface: IFatura;
begin
  Result := FServer.DefaultInterface;
end;

function TFaturaProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TFaturaProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TFaturaProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TFaturaProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TFaturaProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TFaturaProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TFaturaProperties.Get_KalemAdedi: Integer;
begin
    Result := DefaultInterface.KalemAdedi;
end;

function TFaturaProperties.Get_Kalem(Index: Integer): IFatKalem;
begin
    Result := DefaultInterface.Kalem[Index];
end;

function TFaturaProperties.Get_FaturaTip: TFaturaTip;
begin
    Result := DefaultInterface.FaturaTip;
end;

procedure TFaturaProperties.Set_FaturaTip(Value: TFaturaTip);
begin
  DefaultInterface.Set_FaturaTip(Value);
end;

function TFaturaProperties.Get_KasayaIslenmesin: WordBool;
begin
    Result := DefaultInterface.KasayaIslenmesin;
end;

procedure TFaturaProperties.Set_KasayaIslenmesin(Value: WordBool);
begin
  DefaultInterface.Set_KasayaIslenmesin(Value);
end;

function TFaturaProperties.Get_SonNumaraYazilsin: WordBool;
begin
    Result := DefaultInterface.SonNumaraYazilsin;
end;

procedure TFaturaProperties.Set_SonNumaraYazilsin(Value: WordBool);
begin
  DefaultInterface.Set_SonNumaraYazilsin(Value);
end;

function TFaturaProperties.Get_OtoIskontoGetir: WordBool;
begin
    Result := DefaultInterface.OtoIskontoGetir;
end;

procedure TFaturaProperties.Set_OtoIskontoGetir(Value: WordBool);
begin
  DefaultInterface.Set_OtoIskontoGetir(Value);
end;

function TFaturaProperties.Get_KosulluHesapla: WordBool;
begin
    Result := DefaultInterface.KosulluHesapla;
end;

procedure TFaturaProperties.Set_KosulluHesapla(Value: WordBool);
begin
  DefaultInterface.Set_KosulluHesapla(Value);
end;

function TFaturaProperties.Get_InternalObjectAddress: Integer;
begin
    Result := DefaultInterface.InternalObjectAddress;
end;

function TFaturaProperties.Get_SeriliHesapla: WordBool;
begin
    Result := DefaultInterface.SeriliHesapla;
end;

procedure TFaturaProperties.Set_SeriliHesapla(Value: WordBool);
begin
  DefaultInterface.Set_SeriliHesapla(Value);
end;

function TFaturaProperties.Get_YedekKalem(Index: Integer): IFatKalem;
begin
    Result := DefaultInterface.YedekKalem[Index];
end;

function TFaturaProperties.Get_FiyatSistemineGoreHesapla: WordBool;
begin
    Result := DefaultInterface.FiyatSistemineGoreHesapla;
end;

procedure TFaturaProperties.Set_FiyatSistemineGoreHesapla(Value: WordBool);
begin
  DefaultInterface.Set_FiyatSistemineGoreHesapla(Value);
end;

{$ENDIF}

class function CoFatUst.Create: IFatUst;
begin
  Result := CreateComObject(CLASS_FatUst) as IFatUst;
end;

class function CoFatUst.CreateRemote(const MachineName: string): IFatUst;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FatUst) as IFatUst;
end;

procedure TFatUst.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5E500203-9B04-4290-A7E5-8B7AB383E753}';
    IntfIID:   '{E84B245B-7707-4DBE-A173-F1CF107CE176}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFatUst.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IFatUst;
  end;
end;

procedure TFatUst.ConnectTo(svrIntf: IFatUst);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFatUst.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFatUst.GetDefaultInterface: IFatUst;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFatUst.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFatUstProperties.Create(Self);
{$ENDIF}
end;

destructor TFatUst.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFatUst.GetServerProperties: TFatUstProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFatUst.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TFatUst.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TFatUst.Get_CariKod: WideString;
begin
    Result := DefaultInterface.CariKod;
end;

procedure TFatUst.Set_CariKod(const Value: WideString);
  { Warning: The property CariKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CariKod := Value;
end;

function TFatUst.Get_FATIRS_NO: WideString;
begin
    Result := DefaultInterface.FATIRS_NO;
end;

procedure TFatUst.Set_FATIRS_NO(const Value: WideString);
  { Warning: The property FATIRS_NO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FATIRS_NO := Value;
end;

function TFatUst.Get_Tarih: TDateTime;
begin
    Result := DefaultInterface.Tarih;
end;

procedure TFatUst.Set_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih(Value);
end;

function TFatUst.Get_Tip: TFaturaTip;
begin
    Result := DefaultInterface.Tip;
end;

procedure TFatUst.Set_Tip(Value: TFaturaTip);
begin
  DefaultInterface.Set_Tip(Value);
end;

function TFatUst.Get_KOD1: WideString;
begin
    Result := DefaultInterface.KOD1;
end;

procedure TFatUst.Set_KOD1(const Value: WideString);
  { Warning: The property KOD1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOD1 := Value;
end;

function TFatUst.Get_YEDEK: WideString;
begin
    Result := DefaultInterface.YEDEK;
end;

procedure TFatUst.Set_YEDEK(const Value: WideString);
  { Warning: The property YEDEK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YEDEK := Value;
end;

function TFatUst.Get_KOD2: WideString;
begin
    Result := DefaultInterface.KOD2;
end;

procedure TFatUst.Set_KOD2(const Value: WideString);
  { Warning: The property KOD2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOD2 := Value;
end;

function TFatUst.Get_TIPI: TFaturaTipi;
begin
    Result := DefaultInterface.TIPI;
end;

procedure TFatUst.Set_TIPI(Value: TFaturaTipi);
begin
  DefaultInterface.Set_TIPI(Value);
end;

function TFatUst.Get_Aciklama: WideString;
begin
    Result := DefaultInterface.Aciklama;
end;

procedure TFatUst.Set_Aciklama(const Value: WideString);
  { Warning: The property Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama := Value;
end;

function TFatUst.Get_BRUTTUTAR: Double;
begin
    Result := DefaultInterface.BRUTTUTAR;
end;

procedure TFatUst.Set_BRUTTUTAR(Value: Double);
begin
  DefaultInterface.Set_BRUTTUTAR(Value);
end;

function TFatUst.Get_KDV: Double;
begin
    Result := DefaultInterface.KDV;
end;

procedure TFatUst.Set_KDV(Value: Double);
begin
  DefaultInterface.Set_KDV(Value);
end;

function TFatUst.Get_DovizTut: Double;
begin
    Result := DefaultInterface.DovizTut;
end;

procedure TFatUst.Set_DovizTut(Value: Double);
begin
  DefaultInterface.Set_DovizTut(Value);
end;

function TFatUst.Get_SAT_ISKT: Double;
begin
    Result := DefaultInterface.SAT_ISKT;
end;

procedure TFatUst.Set_SAT_ISKT(Value: Double);
begin
  DefaultInterface.Set_SAT_ISKT(Value);
end;

function TFatUst.Get_GENELTOPLAM: Double;
begin
    Result := DefaultInterface.GENELTOPLAM;
end;

procedure TFatUst.Set_GENELTOPLAM(Value: Double);
begin
  DefaultInterface.Set_GENELTOPLAM(Value);
end;

function TFatUst.Get_YUVARLAMA: Double;
begin
    Result := DefaultInterface.YUVARLAMA;
end;

procedure TFatUst.Set_YUVARLAMA(Value: Double);
begin
  DefaultInterface.Set_YUVARLAMA(Value);
end;

function TFatUst.Get_MFAZ_ISKT: Double;
begin
    Result := DefaultInterface.MFAZ_ISKT;
end;

procedure TFatUst.Set_MFAZ_ISKT(Value: Double);
begin
  DefaultInterface.Set_MFAZ_ISKT(Value);
end;

function TFatUst.Get_GEN_ISK1O: Double;
begin
    Result := DefaultInterface.GEN_ISK1O;
end;

procedure TFatUst.Set_GEN_ISK1O(Value: Double);
begin
  DefaultInterface.Set_GEN_ISK1O(Value);
end;

function TFatUst.Get_GEN_ISK2O: Double;
begin
    Result := DefaultInterface.GEN_ISK2O;
end;

procedure TFatUst.Set_GEN_ISK2O(Value: Double);
begin
  DefaultInterface.Set_GEN_ISK2O(Value);
end;

function TFatUst.Get_GEN_ISK3O: Double;
begin
    Result := DefaultInterface.GEN_ISK3O;
end;

procedure TFatUst.Set_GEN_ISK3O(Value: Double);
begin
  DefaultInterface.Set_GEN_ISK3O(Value);
end;

function TFatUst.Get_FAT_ALTM1: Double;
begin
    Result := DefaultInterface.FAT_ALTM1;
end;

procedure TFatUst.Set_FAT_ALTM1(Value: Double);
begin
  DefaultInterface.Set_FAT_ALTM1(Value);
end;

function TFatUst.Get_FAT_ALTM2: Double;
begin
    Result := DefaultInterface.FAT_ALTM2;
end;

procedure TFatUst.Set_FAT_ALTM2(Value: Double);
begin
  DefaultInterface.Set_FAT_ALTM2(Value);
end;

function TFatUst.Get_KS_KODU: WideString;
begin
    Result := DefaultInterface.KS_KODU;
end;

procedure TFatUst.Set_KS_KODU(const Value: WideString);
  { Warning: The property KS_KODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KS_KODU := Value;
end;

function TFatUst.Get_SIPARIS_NUMARASI: WideString;
begin
    Result := DefaultInterface.SIPARIS_NUMARASI;
end;

procedure TFatUst.Set_SIPARIS_NUMARASI(const Value: WideString);
  { Warning: The property SIPARIS_NUMARASI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SIPARIS_NUMARASI := Value;
end;

function TFatUst.Get_ODEMEGUNU: Integer;
begin
    Result := DefaultInterface.ODEMEGUNU;
end;

procedure TFatUst.Set_ODEMEGUNU(Value: Integer);
begin
  DefaultInterface.Set_ODEMEGUNU(Value);
end;

function TFatUst.Get_ODEMETARIHI: TDateTime;
begin
    Result := DefaultInterface.ODEMETARIHI;
end;

procedure TFatUst.Set_ODEMETARIHI(Value: TDateTime);
begin
  DefaultInterface.Set_ODEMETARIHI(Value);
end;

function TFatUst.Get_ENTEGRE_TRH: TDateTime;
begin
    Result := DefaultInterface.ENTEGRE_TRH;
end;

procedure TFatUst.Set_ENTEGRE_TRH(Value: TDateTime);
begin
  DefaultInterface.Set_ENTEGRE_TRH(Value);
end;

function TFatUst.Get_KDV_DAHILMI: WordBool;
begin
    Result := DefaultInterface.KDV_DAHILMI;
end;

procedure TFatUst.Set_KDV_DAHILMI(Value: WordBool);
begin
  DefaultInterface.Set_KDV_DAHILMI(Value);
end;

function TFatUst.Get_SIPARIS_TEST: TDateTime;
begin
    Result := DefaultInterface.SIPARIS_TEST;
end;

procedure TFatUst.Set_SIPARIS_TEST(Value: TDateTime);
begin
  DefaultInterface.Set_SIPARIS_TEST(Value);
end;

function TFatUst.Get_CARI_KOD2: WideString;
begin
    Result := DefaultInterface.CARI_KOD2;
end;

procedure TFatUst.Set_CARI_KOD2(const Value: WideString);
  { Warning: The property CARI_KOD2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_KOD2 := Value;
end;

function TFatUst.Get_PLA_KODU: WideString;
begin
    Result := DefaultInterface.PLA_KODU;
end;

procedure TFatUst.Set_PLA_KODU(const Value: WideString);
  { Warning: The property PLA_KODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PLA_KODU := Value;
end;

function TFatUst.Get_SIRANO: Integer;
begin
    Result := DefaultInterface.SIRANO;
end;

procedure TFatUst.Set_SIRANO(Value: Integer);
begin
  DefaultInterface.Set_SIRANO(Value);
end;

function TFatUst.Get_DOVIZTIP: Integer;
begin
    Result := DefaultInterface.DOVIZTIP;
end;

procedure TFatUst.Set_DOVIZTIP(Value: Integer);
begin
  DefaultInterface.Set_DOVIZTIP(Value);
end;

function TFatUst.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TFatUst.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TFatUst.Get_KOSULKODU: WideString;
begin
    Result := DefaultInterface.KOSULKODU;
end;

procedure TFatUst.Set_KOSULKODU(const Value: WideString);
  { Warning: The property KOSULKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOSULKODU := Value;
end;

function TFatUst.Get_FIYATTARIHI: TDateTime;
begin
    Result := DefaultInterface.FIYATTARIHI;
end;

procedure TFatUst.Set_FIYATTARIHI(Value: TDateTime);
begin
  DefaultInterface.Set_FIYATTARIHI(Value);
end;

function TFatUst.Get_KOSULTARIHI: TDateTime;
begin
    Result := DefaultInterface.KOSULTARIHI;
end;

procedure TFatUst.Set_KOSULTARIHI(Value: TDateTime);
begin
  DefaultInterface.Set_KOSULTARIHI(Value);
end;

function TFatUst.Get_GENISK1TIP: Integer;
begin
    Result := DefaultInterface.GENISK1TIP;
end;

procedure TFatUst.Set_GENISK1TIP(Value: Integer);
begin
  DefaultInterface.Set_GENISK1TIP(Value);
end;

function TFatUst.Get_GENISK2TIP: Integer;
begin
    Result := DefaultInterface.GENISK2TIP;
end;

procedure TFatUst.Set_GENISK2TIP(Value: Integer);
begin
  DefaultInterface.Set_GENISK2TIP(Value);
end;

function TFatUst.Get_GENISK3TIP: Integer;
begin
    Result := DefaultInterface.GENISK3TIP;
end;

procedure TFatUst.Set_GENISK3TIP(Value: Integer);
begin
  DefaultInterface.Set_GENISK3TIP(Value);
end;

function TFatUst.Get_EXPORTTYPE: Integer;
begin
    Result := DefaultInterface.EXPORTTYPE;
end;

procedure TFatUst.Set_EXPORTTYPE(Value: Integer);
begin
  DefaultInterface.Set_EXPORTTYPE(Value);
end;

function TFatUst.Get_EXGUMRUKNO: WideString;
begin
    Result := DefaultInterface.EXGUMRUKNO;
end;

procedure TFatUst.Set_EXGUMRUKNO(const Value: WideString);
  { Warning: The property EXGUMRUKNO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EXGUMRUKNO := Value;
end;

function TFatUst.Get_EXGUMTARIH: TDateTime;
begin
    Result := DefaultInterface.EXGUMTARIH;
end;

procedure TFatUst.Set_EXGUMTARIH(Value: TDateTime);
begin
  DefaultInterface.Set_EXGUMTARIH(Value);
end;

function TFatUst.Get_EXFIILITARIH: TDateTime;
begin
    Result := DefaultInterface.EXFIILITARIH;
end;

procedure TFatUst.Set_EXFIILITARIH(Value: TDateTime);
begin
  DefaultInterface.Set_EXFIILITARIH(Value);
end;

function TFatUst.Get_EXPORTREFNO: WideString;
begin
    Result := DefaultInterface.EXPORTREFNO;
end;

procedure TFatUst.Set_EXPORTREFNO(const Value: WideString);
  { Warning: The property EXPORTREFNO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EXPORTREFNO := Value;
end;

function TFatUst.Get_AMBHARTUR: TAmbarHarTur;
begin
    Result := DefaultInterface.AMBHARTUR;
end;

procedure TFatUst.Set_AMBHARTUR(Value: TAmbarHarTur);
begin
  DefaultInterface.Set_AMBHARTUR(Value);
end;

function TFatUst.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TFatUst.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TFatUst.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TFatUst.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

function TFatUst.Get_GCKOD_GIRIS: Integer;
begin
    Result := DefaultInterface.GCKOD_GIRIS;
end;

procedure TFatUst.Set_GCKOD_GIRIS(Value: Integer);
begin
  DefaultInterface.Set_GCKOD_GIRIS(Value);
end;

function TFatUst.Get_GCKOD_CIKIS: Integer;
begin
    Result := DefaultInterface.GCKOD_CIKIS;
end;

procedure TFatUst.Set_GCKOD_CIKIS(Value: Integer);
begin
  DefaultInterface.Set_GCKOD_CIKIS(Value);
end;

function TFatUst.Get_EKACK1: WideString;
begin
    Result := DefaultInterface.EKACK1;
end;

procedure TFatUst.Set_EKACK1(const Value: WideString);
  { Warning: The property EKACK1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK1 := Value;
end;

function TFatUst.Get_EKACK2: WideString;
begin
    Result := DefaultInterface.EKACK2;
end;

procedure TFatUst.Set_EKACK2(const Value: WideString);
  { Warning: The property EKACK2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK2 := Value;
end;

function TFatUst.Get_EKACK3: WideString;
begin
    Result := DefaultInterface.EKACK3;
end;

procedure TFatUst.Set_EKACK3(const Value: WideString);
  { Warning: The property EKACK3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK3 := Value;
end;

function TFatUst.Get_EKACK4: WideString;
begin
    Result := DefaultInterface.EKACK4;
end;

procedure TFatUst.Set_EKACK4(const Value: WideString);
  { Warning: The property EKACK4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK4 := Value;
end;

function TFatUst.Get_EKACK5: WideString;
begin
    Result := DefaultInterface.EKACK5;
end;

procedure TFatUst.Set_EKACK5(const Value: WideString);
  { Warning: The property EKACK5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK5 := Value;
end;

function TFatUst.Get_EKACK6: WideString;
begin
    Result := DefaultInterface.EKACK6;
end;

procedure TFatUst.Set_EKACK6(const Value: WideString);
  { Warning: The property EKACK6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK6 := Value;
end;

function TFatUst.Get_EKACK7: WideString;
begin
    Result := DefaultInterface.EKACK7;
end;

procedure TFatUst.Set_EKACK7(const Value: WideString);
  { Warning: The property EKACK7 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK7 := Value;
end;

function TFatUst.Get_EKACK8: WideString;
begin
    Result := DefaultInterface.EKACK8;
end;

procedure TFatUst.Set_EKACK8(const Value: WideString);
  { Warning: The property EKACK8 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK8 := Value;
end;

function TFatUst.Get_EKACK9: WideString;
begin
    Result := DefaultInterface.EKACK9;
end;

procedure TFatUst.Set_EKACK9(const Value: WideString);
  { Warning: The property EKACK9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK9 := Value;
end;

function TFatUst.Get_EKACK10: WideString;
begin
    Result := DefaultInterface.EKACK10;
end;

procedure TFatUst.Set_EKACK10(const Value: WideString);
  { Warning: The property EKACK10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK10 := Value;
end;

function TFatUst.Get_EKACK11: WideString;
begin
    Result := DefaultInterface.EKACK11;
end;

procedure TFatUst.Set_EKACK11(const Value: WideString);
  { Warning: The property EKACK11 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK11 := Value;
end;

function TFatUst.Get_EKACK12: WideString;
begin
    Result := DefaultInterface.EKACK12;
end;

procedure TFatUst.Set_EKACK12(const Value: WideString);
  { Warning: The property EKACK12 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK12 := Value;
end;

function TFatUst.Get_EKACK13: WideString;
begin
    Result := DefaultInterface.EKACK13;
end;

procedure TFatUst.Set_EKACK13(const Value: WideString);
  { Warning: The property EKACK13 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK13 := Value;
end;

function TFatUst.Get_EKACK14: WideString;
begin
    Result := DefaultInterface.EKACK14;
end;

procedure TFatUst.Set_EKACK14(const Value: WideString);
  { Warning: The property EKACK14 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK14 := Value;
end;

function TFatUst.Get_EKACK15: WideString;
begin
    Result := DefaultInterface.EKACK15;
end;

procedure TFatUst.Set_EKACK15(const Value: WideString);
  { Warning: The property EKACK15 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK15 := Value;
end;

function TFatUst.Get_EKACK16: WideString;
begin
    Result := DefaultInterface.EKACK16;
end;

procedure TFatUst.Set_EKACK16(const Value: WideString);
  { Warning: The property EKACK16 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK16 := Value;
end;

function TFatUst.Get_GEN_ISK1T: Double;
begin
    Result := DefaultInterface.GEN_ISK1T;
end;

procedure TFatUst.Set_GEN_ISK1T(Value: Double);
begin
  DefaultInterface.Set_GEN_ISK1T(Value);
end;

function TFatUst.Get_GEN_ISK2T: Double;
begin
    Result := DefaultInterface.GEN_ISK2T;
end;

procedure TFatUst.Set_GEN_ISK2T(Value: Double);
begin
  DefaultInterface.Set_GEN_ISK2T(Value);
end;

function TFatUst.Get_GEN_ISK3T: Double;
begin
    Result := DefaultInterface.GEN_ISK3T;
end;

procedure TFatUst.Set_GEN_ISK3T(Value: Double);
begin
  DefaultInterface.Set_GEN_ISK3T(Value);
end;

function TFatUst.Get_CikisYeri: TCikisYeri;
begin
    Result := DefaultInterface.CikisYeri;
end;

procedure TFatUst.Set_CikisYeri(Value: TCikisYeri);
begin
  DefaultInterface.Set_CikisYeri(Value);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFatUstProperties.Create(AServer: TFatUst);
begin
  inherited Create;
  FServer := AServer;
end;

function TFatUstProperties.GetDefaultInterface: IFatUst;
begin
  Result := FServer.DefaultInterface;
end;

function TFatUstProperties.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TFatUstProperties.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TFatUstProperties.Get_CariKod: WideString;
begin
    Result := DefaultInterface.CariKod;
end;

procedure TFatUstProperties.Set_CariKod(const Value: WideString);
  { Warning: The property CariKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CariKod := Value;
end;

function TFatUstProperties.Get_FATIRS_NO: WideString;
begin
    Result := DefaultInterface.FATIRS_NO;
end;

procedure TFatUstProperties.Set_FATIRS_NO(const Value: WideString);
  { Warning: The property FATIRS_NO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FATIRS_NO := Value;
end;

function TFatUstProperties.Get_Tarih: TDateTime;
begin
    Result := DefaultInterface.Tarih;
end;

procedure TFatUstProperties.Set_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih(Value);
end;

function TFatUstProperties.Get_Tip: TFaturaTip;
begin
    Result := DefaultInterface.Tip;
end;

procedure TFatUstProperties.Set_Tip(Value: TFaturaTip);
begin
  DefaultInterface.Set_Tip(Value);
end;

function TFatUstProperties.Get_KOD1: WideString;
begin
    Result := DefaultInterface.KOD1;
end;

procedure TFatUstProperties.Set_KOD1(const Value: WideString);
  { Warning: The property KOD1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOD1 := Value;
end;

function TFatUstProperties.Get_YEDEK: WideString;
begin
    Result := DefaultInterface.YEDEK;
end;

procedure TFatUstProperties.Set_YEDEK(const Value: WideString);
  { Warning: The property YEDEK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YEDEK := Value;
end;

function TFatUstProperties.Get_KOD2: WideString;
begin
    Result := DefaultInterface.KOD2;
end;

procedure TFatUstProperties.Set_KOD2(const Value: WideString);
  { Warning: The property KOD2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOD2 := Value;
end;

function TFatUstProperties.Get_TIPI: TFaturaTipi;
begin
    Result := DefaultInterface.TIPI;
end;

procedure TFatUstProperties.Set_TIPI(Value: TFaturaTipi);
begin
  DefaultInterface.Set_TIPI(Value);
end;

function TFatUstProperties.Get_Aciklama: WideString;
begin
    Result := DefaultInterface.Aciklama;
end;

procedure TFatUstProperties.Set_Aciklama(const Value: WideString);
  { Warning: The property Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama := Value;
end;

function TFatUstProperties.Get_BRUTTUTAR: Double;
begin
    Result := DefaultInterface.BRUTTUTAR;
end;

procedure TFatUstProperties.Set_BRUTTUTAR(Value: Double);
begin
  DefaultInterface.Set_BRUTTUTAR(Value);
end;

function TFatUstProperties.Get_KDV: Double;
begin
    Result := DefaultInterface.KDV;
end;

procedure TFatUstProperties.Set_KDV(Value: Double);
begin
  DefaultInterface.Set_KDV(Value);
end;

function TFatUstProperties.Get_DovizTut: Double;
begin
    Result := DefaultInterface.DovizTut;
end;

procedure TFatUstProperties.Set_DovizTut(Value: Double);
begin
  DefaultInterface.Set_DovizTut(Value);
end;

function TFatUstProperties.Get_SAT_ISKT: Double;
begin
    Result := DefaultInterface.SAT_ISKT;
end;

procedure TFatUstProperties.Set_SAT_ISKT(Value: Double);
begin
  DefaultInterface.Set_SAT_ISKT(Value);
end;

function TFatUstProperties.Get_GENELTOPLAM: Double;
begin
    Result := DefaultInterface.GENELTOPLAM;
end;

procedure TFatUstProperties.Set_GENELTOPLAM(Value: Double);
begin
  DefaultInterface.Set_GENELTOPLAM(Value);
end;

function TFatUstProperties.Get_YUVARLAMA: Double;
begin
    Result := DefaultInterface.YUVARLAMA;
end;

procedure TFatUstProperties.Set_YUVARLAMA(Value: Double);
begin
  DefaultInterface.Set_YUVARLAMA(Value);
end;

function TFatUstProperties.Get_MFAZ_ISKT: Double;
begin
    Result := DefaultInterface.MFAZ_ISKT;
end;

procedure TFatUstProperties.Set_MFAZ_ISKT(Value: Double);
begin
  DefaultInterface.Set_MFAZ_ISKT(Value);
end;

function TFatUstProperties.Get_GEN_ISK1O: Double;
begin
    Result := DefaultInterface.GEN_ISK1O;
end;

procedure TFatUstProperties.Set_GEN_ISK1O(Value: Double);
begin
  DefaultInterface.Set_GEN_ISK1O(Value);
end;

function TFatUstProperties.Get_GEN_ISK2O: Double;
begin
    Result := DefaultInterface.GEN_ISK2O;
end;

procedure TFatUstProperties.Set_GEN_ISK2O(Value: Double);
begin
  DefaultInterface.Set_GEN_ISK2O(Value);
end;

function TFatUstProperties.Get_GEN_ISK3O: Double;
begin
    Result := DefaultInterface.GEN_ISK3O;
end;

procedure TFatUstProperties.Set_GEN_ISK3O(Value: Double);
begin
  DefaultInterface.Set_GEN_ISK3O(Value);
end;

function TFatUstProperties.Get_FAT_ALTM1: Double;
begin
    Result := DefaultInterface.FAT_ALTM1;
end;

procedure TFatUstProperties.Set_FAT_ALTM1(Value: Double);
begin
  DefaultInterface.Set_FAT_ALTM1(Value);
end;

function TFatUstProperties.Get_FAT_ALTM2: Double;
begin
    Result := DefaultInterface.FAT_ALTM2;
end;

procedure TFatUstProperties.Set_FAT_ALTM2(Value: Double);
begin
  DefaultInterface.Set_FAT_ALTM2(Value);
end;

function TFatUstProperties.Get_KS_KODU: WideString;
begin
    Result := DefaultInterface.KS_KODU;
end;

procedure TFatUstProperties.Set_KS_KODU(const Value: WideString);
  { Warning: The property KS_KODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KS_KODU := Value;
end;

function TFatUstProperties.Get_SIPARIS_NUMARASI: WideString;
begin
    Result := DefaultInterface.SIPARIS_NUMARASI;
end;

procedure TFatUstProperties.Set_SIPARIS_NUMARASI(const Value: WideString);
  { Warning: The property SIPARIS_NUMARASI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SIPARIS_NUMARASI := Value;
end;

function TFatUstProperties.Get_ODEMEGUNU: Integer;
begin
    Result := DefaultInterface.ODEMEGUNU;
end;

procedure TFatUstProperties.Set_ODEMEGUNU(Value: Integer);
begin
  DefaultInterface.Set_ODEMEGUNU(Value);
end;

function TFatUstProperties.Get_ODEMETARIHI: TDateTime;
begin
    Result := DefaultInterface.ODEMETARIHI;
end;

procedure TFatUstProperties.Set_ODEMETARIHI(Value: TDateTime);
begin
  DefaultInterface.Set_ODEMETARIHI(Value);
end;

function TFatUstProperties.Get_ENTEGRE_TRH: TDateTime;
begin
    Result := DefaultInterface.ENTEGRE_TRH;
end;

procedure TFatUstProperties.Set_ENTEGRE_TRH(Value: TDateTime);
begin
  DefaultInterface.Set_ENTEGRE_TRH(Value);
end;

function TFatUstProperties.Get_KDV_DAHILMI: WordBool;
begin
    Result := DefaultInterface.KDV_DAHILMI;
end;

procedure TFatUstProperties.Set_KDV_DAHILMI(Value: WordBool);
begin
  DefaultInterface.Set_KDV_DAHILMI(Value);
end;

function TFatUstProperties.Get_SIPARIS_TEST: TDateTime;
begin
    Result := DefaultInterface.SIPARIS_TEST;
end;

procedure TFatUstProperties.Set_SIPARIS_TEST(Value: TDateTime);
begin
  DefaultInterface.Set_SIPARIS_TEST(Value);
end;

function TFatUstProperties.Get_CARI_KOD2: WideString;
begin
    Result := DefaultInterface.CARI_KOD2;
end;

procedure TFatUstProperties.Set_CARI_KOD2(const Value: WideString);
  { Warning: The property CARI_KOD2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_KOD2 := Value;
end;

function TFatUstProperties.Get_PLA_KODU: WideString;
begin
    Result := DefaultInterface.PLA_KODU;
end;

procedure TFatUstProperties.Set_PLA_KODU(const Value: WideString);
  { Warning: The property PLA_KODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PLA_KODU := Value;
end;

function TFatUstProperties.Get_SIRANO: Integer;
begin
    Result := DefaultInterface.SIRANO;
end;

procedure TFatUstProperties.Set_SIRANO(Value: Integer);
begin
  DefaultInterface.Set_SIRANO(Value);
end;

function TFatUstProperties.Get_DOVIZTIP: Integer;
begin
    Result := DefaultInterface.DOVIZTIP;
end;

procedure TFatUstProperties.Set_DOVIZTIP(Value: Integer);
begin
  DefaultInterface.Set_DOVIZTIP(Value);
end;

function TFatUstProperties.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TFatUstProperties.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TFatUstProperties.Get_KOSULKODU: WideString;
begin
    Result := DefaultInterface.KOSULKODU;
end;

procedure TFatUstProperties.Set_KOSULKODU(const Value: WideString);
  { Warning: The property KOSULKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOSULKODU := Value;
end;

function TFatUstProperties.Get_FIYATTARIHI: TDateTime;
begin
    Result := DefaultInterface.FIYATTARIHI;
end;

procedure TFatUstProperties.Set_FIYATTARIHI(Value: TDateTime);
begin
  DefaultInterface.Set_FIYATTARIHI(Value);
end;

function TFatUstProperties.Get_KOSULTARIHI: TDateTime;
begin
    Result := DefaultInterface.KOSULTARIHI;
end;

procedure TFatUstProperties.Set_KOSULTARIHI(Value: TDateTime);
begin
  DefaultInterface.Set_KOSULTARIHI(Value);
end;

function TFatUstProperties.Get_GENISK1TIP: Integer;
begin
    Result := DefaultInterface.GENISK1TIP;
end;

procedure TFatUstProperties.Set_GENISK1TIP(Value: Integer);
begin
  DefaultInterface.Set_GENISK1TIP(Value);
end;

function TFatUstProperties.Get_GENISK2TIP: Integer;
begin
    Result := DefaultInterface.GENISK2TIP;
end;

procedure TFatUstProperties.Set_GENISK2TIP(Value: Integer);
begin
  DefaultInterface.Set_GENISK2TIP(Value);
end;

function TFatUstProperties.Get_GENISK3TIP: Integer;
begin
    Result := DefaultInterface.GENISK3TIP;
end;

procedure TFatUstProperties.Set_GENISK3TIP(Value: Integer);
begin
  DefaultInterface.Set_GENISK3TIP(Value);
end;

function TFatUstProperties.Get_EXPORTTYPE: Integer;
begin
    Result := DefaultInterface.EXPORTTYPE;
end;

procedure TFatUstProperties.Set_EXPORTTYPE(Value: Integer);
begin
  DefaultInterface.Set_EXPORTTYPE(Value);
end;

function TFatUstProperties.Get_EXGUMRUKNO: WideString;
begin
    Result := DefaultInterface.EXGUMRUKNO;
end;

procedure TFatUstProperties.Set_EXGUMRUKNO(const Value: WideString);
  { Warning: The property EXGUMRUKNO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EXGUMRUKNO := Value;
end;

function TFatUstProperties.Get_EXGUMTARIH: TDateTime;
begin
    Result := DefaultInterface.EXGUMTARIH;
end;

procedure TFatUstProperties.Set_EXGUMTARIH(Value: TDateTime);
begin
  DefaultInterface.Set_EXGUMTARIH(Value);
end;

function TFatUstProperties.Get_EXFIILITARIH: TDateTime;
begin
    Result := DefaultInterface.EXFIILITARIH;
end;

procedure TFatUstProperties.Set_EXFIILITARIH(Value: TDateTime);
begin
  DefaultInterface.Set_EXFIILITARIH(Value);
end;

function TFatUstProperties.Get_EXPORTREFNO: WideString;
begin
    Result := DefaultInterface.EXPORTREFNO;
end;

procedure TFatUstProperties.Set_EXPORTREFNO(const Value: WideString);
  { Warning: The property EXPORTREFNO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EXPORTREFNO := Value;
end;

function TFatUstProperties.Get_AMBHARTUR: TAmbarHarTur;
begin
    Result := DefaultInterface.AMBHARTUR;
end;

procedure TFatUstProperties.Set_AMBHARTUR(Value: TAmbarHarTur);
begin
  DefaultInterface.Set_AMBHARTUR(Value);
end;

function TFatUstProperties.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TFatUstProperties.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TFatUstProperties.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TFatUstProperties.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

function TFatUstProperties.Get_GCKOD_GIRIS: Integer;
begin
    Result := DefaultInterface.GCKOD_GIRIS;
end;

procedure TFatUstProperties.Set_GCKOD_GIRIS(Value: Integer);
begin
  DefaultInterface.Set_GCKOD_GIRIS(Value);
end;

function TFatUstProperties.Get_GCKOD_CIKIS: Integer;
begin
    Result := DefaultInterface.GCKOD_CIKIS;
end;

procedure TFatUstProperties.Set_GCKOD_CIKIS(Value: Integer);
begin
  DefaultInterface.Set_GCKOD_CIKIS(Value);
end;

function TFatUstProperties.Get_EKACK1: WideString;
begin
    Result := DefaultInterface.EKACK1;
end;

procedure TFatUstProperties.Set_EKACK1(const Value: WideString);
  { Warning: The property EKACK1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK1 := Value;
end;

function TFatUstProperties.Get_EKACK2: WideString;
begin
    Result := DefaultInterface.EKACK2;
end;

procedure TFatUstProperties.Set_EKACK2(const Value: WideString);
  { Warning: The property EKACK2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK2 := Value;
end;

function TFatUstProperties.Get_EKACK3: WideString;
begin
    Result := DefaultInterface.EKACK3;
end;

procedure TFatUstProperties.Set_EKACK3(const Value: WideString);
  { Warning: The property EKACK3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK3 := Value;
end;

function TFatUstProperties.Get_EKACK4: WideString;
begin
    Result := DefaultInterface.EKACK4;
end;

procedure TFatUstProperties.Set_EKACK4(const Value: WideString);
  { Warning: The property EKACK4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK4 := Value;
end;

function TFatUstProperties.Get_EKACK5: WideString;
begin
    Result := DefaultInterface.EKACK5;
end;

procedure TFatUstProperties.Set_EKACK5(const Value: WideString);
  { Warning: The property EKACK5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK5 := Value;
end;

function TFatUstProperties.Get_EKACK6: WideString;
begin
    Result := DefaultInterface.EKACK6;
end;

procedure TFatUstProperties.Set_EKACK6(const Value: WideString);
  { Warning: The property EKACK6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK6 := Value;
end;

function TFatUstProperties.Get_EKACK7: WideString;
begin
    Result := DefaultInterface.EKACK7;
end;

procedure TFatUstProperties.Set_EKACK7(const Value: WideString);
  { Warning: The property EKACK7 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK7 := Value;
end;

function TFatUstProperties.Get_EKACK8: WideString;
begin
    Result := DefaultInterface.EKACK8;
end;

procedure TFatUstProperties.Set_EKACK8(const Value: WideString);
  { Warning: The property EKACK8 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK8 := Value;
end;

function TFatUstProperties.Get_EKACK9: WideString;
begin
    Result := DefaultInterface.EKACK9;
end;

procedure TFatUstProperties.Set_EKACK9(const Value: WideString);
  { Warning: The property EKACK9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK9 := Value;
end;

function TFatUstProperties.Get_EKACK10: WideString;
begin
    Result := DefaultInterface.EKACK10;
end;

procedure TFatUstProperties.Set_EKACK10(const Value: WideString);
  { Warning: The property EKACK10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK10 := Value;
end;

function TFatUstProperties.Get_EKACK11: WideString;
begin
    Result := DefaultInterface.EKACK11;
end;

procedure TFatUstProperties.Set_EKACK11(const Value: WideString);
  { Warning: The property EKACK11 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK11 := Value;
end;

function TFatUstProperties.Get_EKACK12: WideString;
begin
    Result := DefaultInterface.EKACK12;
end;

procedure TFatUstProperties.Set_EKACK12(const Value: WideString);
  { Warning: The property EKACK12 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK12 := Value;
end;

function TFatUstProperties.Get_EKACK13: WideString;
begin
    Result := DefaultInterface.EKACK13;
end;

procedure TFatUstProperties.Set_EKACK13(const Value: WideString);
  { Warning: The property EKACK13 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK13 := Value;
end;

function TFatUstProperties.Get_EKACK14: WideString;
begin
    Result := DefaultInterface.EKACK14;
end;

procedure TFatUstProperties.Set_EKACK14(const Value: WideString);
  { Warning: The property EKACK14 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK14 := Value;
end;

function TFatUstProperties.Get_EKACK15: WideString;
begin
    Result := DefaultInterface.EKACK15;
end;

procedure TFatUstProperties.Set_EKACK15(const Value: WideString);
  { Warning: The property EKACK15 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK15 := Value;
end;

function TFatUstProperties.Get_EKACK16: WideString;
begin
    Result := DefaultInterface.EKACK16;
end;

procedure TFatUstProperties.Set_EKACK16(const Value: WideString);
  { Warning: The property EKACK16 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EKACK16 := Value;
end;

function TFatUstProperties.Get_GEN_ISK1T: Double;
begin
    Result := DefaultInterface.GEN_ISK1T;
end;

procedure TFatUstProperties.Set_GEN_ISK1T(Value: Double);
begin
  DefaultInterface.Set_GEN_ISK1T(Value);
end;

function TFatUstProperties.Get_GEN_ISK2T: Double;
begin
    Result := DefaultInterface.GEN_ISK2T;
end;

procedure TFatUstProperties.Set_GEN_ISK2T(Value: Double);
begin
  DefaultInterface.Set_GEN_ISK2T(Value);
end;

function TFatUstProperties.Get_GEN_ISK3T: Double;
begin
    Result := DefaultInterface.GEN_ISK3T;
end;

procedure TFatUstProperties.Set_GEN_ISK3T(Value: Double);
begin
  DefaultInterface.Set_GEN_ISK3T(Value);
end;

function TFatUstProperties.Get_CikisYeri: TCikisYeri;
begin
    Result := DefaultInterface.CikisYeri;
end;

procedure TFatUstProperties.Set_CikisYeri(Value: TCikisYeri);
begin
  DefaultInterface.Set_CikisYeri(Value);
end;

{$ENDIF}

class function CoFatKalem.Create: IFatKalem;
begin
  Result := CreateComObject(CLASS_FatKalem) as IFatKalem;
end;

class function CoFatKalem.CreateRemote(const MachineName: string): IFatKalem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FatKalem) as IFatKalem;
end;

procedure TFatKalem.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{646C9DBF-BE9D-4132-82B1-40924E52F308}';
    IntfIID:   '{01DDD87B-B7EE-48A8-9ACB-591D129D21F0}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFatKalem.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IFatKalem;
  end;
end;

procedure TFatKalem.ConnectTo(svrIntf: IFatKalem);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFatKalem.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFatKalem.GetDefaultInterface: IFatKalem;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFatKalem.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFatKalemProperties.Create(Self);
{$ENDIF}
end;

destructor TFatKalem.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFatKalem.GetServerProperties: TFatKalemProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFatKalem.Get_StokKodu: WideString;
begin
    Result := DefaultInterface.StokKodu;
end;

procedure TFatKalem.Set_StokKodu(const Value: WideString);
  { Warning: The property StokKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StokKodu := Value;
end;

function TFatKalem.Get_Sira: Integer;
begin
    Result := DefaultInterface.Sira;
end;

procedure TFatKalem.Set_Sira(Value: Integer);
begin
  DefaultInterface.Set_Sira(Value);
end;

function TFatKalem.Get_STra_FATIRSNO: WideString;
begin
    Result := DefaultInterface.STra_FATIRSNO;
end;

procedure TFatKalem.Set_STra_FATIRSNO(const Value: WideString);
  { Warning: The property STra_FATIRSNO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_FATIRSNO := Value;
end;

function TFatKalem.Get_STra_GCMIK: Double;
begin
    Result := DefaultInterface.STra_GCMIK;
end;

procedure TFatKalem.Set_STra_GCMIK(Value: Double);
begin
  DefaultInterface.Set_STra_GCMIK(Value);
end;

function TFatKalem.Get_STra_GCMIK2: Double;
begin
    Result := DefaultInterface.STra_GCMIK2;
end;

procedure TFatKalem.Set_STra_GCMIK2(Value: Double);
begin
  DefaultInterface.Set_STra_GCMIK2(Value);
end;

function TFatKalem.Get_CEVRIM: Double;
begin
    Result := DefaultInterface.CEVRIM;
end;

procedure TFatKalem.Set_CEVRIM(Value: Double);
begin
  DefaultInterface.Set_CEVRIM(Value);
end;

function TFatKalem.Get_STra_TAR: TDateTime;
begin
    Result := DefaultInterface.STra_TAR;
end;

procedure TFatKalem.Set_STra_TAR(Value: TDateTime);
begin
  DefaultInterface.Set_STra_TAR(Value);
end;

function TFatKalem.Get_STra_NF: Double;
begin
    Result := DefaultInterface.STra_NF;
end;

procedure TFatKalem.Set_STra_NF(Value: Double);
begin
  DefaultInterface.Set_STra_NF(Value);
end;

function TFatKalem.Get_STra_BF: Double;
begin
    Result := DefaultInterface.STra_BF;
end;

procedure TFatKalem.Set_STra_BF(Value: Double);
begin
  DefaultInterface.Set_STra_BF(Value);
end;

function TFatKalem.Get_STra_IAF: Double;
begin
    Result := DefaultInterface.STra_IAF;
end;

procedure TFatKalem.Set_STra_IAF(Value: Double);
begin
  DefaultInterface.Set_STra_IAF(Value);
end;

function TFatKalem.Get_STra_KDV: Double;
begin
    Result := DefaultInterface.STra_KDV;
end;

procedure TFatKalem.Set_STra_KDV(Value: Double);
begin
  DefaultInterface.Set_STra_KDV(Value);
end;

function TFatKalem.Get_STra_SatIsk: Double;
begin
    Result := DefaultInterface.STra_SatIsk;
end;

procedure TFatKalem.Set_STra_SatIsk(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk(Value);
end;

function TFatKalem.Get_STra_SatIsk2: Double;
begin
    Result := DefaultInterface.STra_SatIsk2;
end;

procedure TFatKalem.Set_STra_SatIsk2(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk2(Value);
end;

function TFatKalem.Get_STra_MALFISK: Double;
begin
    Result := DefaultInterface.STra_MALFISK;
end;

procedure TFatKalem.Set_STra_MALFISK(Value: Double);
begin
  DefaultInterface.Set_STra_MALFISK(Value);
end;

function TFatKalem.Get_STra_HTUR: WideString;
begin
    Result := DefaultInterface.STra_HTUR;
end;

procedure TFatKalem.Set_STra_HTUR(const Value: WideString);
  { Warning: The property STra_HTUR has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_HTUR := Value;
end;

function TFatKalem.Get_STra_DOVTIP: Integer;
begin
    Result := DefaultInterface.STra_DOVTIP;
end;

procedure TFatKalem.Set_STra_DOVTIP(Value: Integer);
begin
  DefaultInterface.Set_STra_DOVTIP(Value);
end;

function TFatKalem.Get_PROMASYON_KODU: Integer;
begin
    Result := DefaultInterface.PROMASYON_KODU;
end;

procedure TFatKalem.Set_PROMASYON_KODU(Value: Integer);
begin
  DefaultInterface.Set_PROMASYON_KODU(Value);
end;

function TFatKalem.Get_STra_DOVFIAT: Double;
begin
    Result := DefaultInterface.STra_DOVFIAT;
end;

procedure TFatKalem.Set_STra_DOVFIAT(Value: Double);
begin
  DefaultInterface.Set_STra_DOVFIAT(Value);
end;

function TFatKalem.Get_STra_ODEGUN: Integer;
begin
    Result := DefaultInterface.STra_ODEGUN;
end;

procedure TFatKalem.Set_STra_ODEGUN(Value: Integer);
begin
  DefaultInterface.Set_STra_ODEGUN(Value);
end;

function TFatKalem.Get_STra_KOD1: WideString;
begin
    Result := DefaultInterface.STra_KOD1;
end;

procedure TFatKalem.Set_STra_KOD1(const Value: WideString);
  { Warning: The property STra_KOD1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_KOD1 := Value;
end;

function TFatKalem.Get_STra_KOD2: WideString;
begin
    Result := DefaultInterface.STra_KOD2;
end;

procedure TFatKalem.Set_STra_KOD2(const Value: WideString);
  { Warning: The property STra_KOD2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_KOD2 := Value;
end;

function TFatKalem.Get_STra_SIPNUM: WideString;
begin
    Result := DefaultInterface.STra_SIPNUM;
end;

procedure TFatKalem.Set_STra_SIPNUM(const Value: WideString);
  { Warning: The property STra_SIPNUM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_SIPNUM := Value;
end;

function TFatKalem.Get_STra_SIP_TURU: WideString;
begin
    Result := DefaultInterface.STra_SIP_TURU;
end;

procedure TFatKalem.Set_STra_SIP_TURU(const Value: WideString);
  { Warning: The property STra_SIP_TURU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_SIP_TURU := Value;
end;

function TFatKalem.Get_Plasiyer_Kodu: WideString;
begin
    Result := DefaultInterface.Plasiyer_Kodu;
end;

procedure TFatKalem.Set_Plasiyer_Kodu(const Value: WideString);
  { Warning: The property Plasiyer_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer_Kodu := Value;
end;

function TFatKalem.Get_Ekalanneden: WideString;
begin
    Result := DefaultInterface.Ekalanneden;
end;

procedure TFatKalem.Set_Ekalanneden(const Value: WideString);
  { Warning: The property Ekalanneden has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ekalanneden := Value;
end;

function TFatKalem.Get_Ekalan: WideString;
begin
    Result := DefaultInterface.Ekalan;
end;

procedure TFatKalem.Set_Ekalan(const Value: WideString);
  { Warning: The property Ekalan has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ekalan := Value;
end;

function TFatKalem.Get_Ekalan1: WideString;
begin
    Result := DefaultInterface.Ekalan1;
end;

procedure TFatKalem.Set_Ekalan1(const Value: WideString);
  { Warning: The property Ekalan1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ekalan1 := Value;
end;

function TFatKalem.Get_Stra_Otv: Double;
begin
    Result := DefaultInterface.Stra_Otv;
end;

procedure TFatKalem.Set_Stra_Otv(Value: Double);
begin
  DefaultInterface.Set_Stra_Otv(Value);
end;

function TFatKalem.Get_Redneden: Integer;
begin
    Result := DefaultInterface.Redneden;
end;

procedure TFatKalem.Set_Redneden(Value: Integer);
begin
  DefaultInterface.Set_Redneden(Value);
end;

function TFatKalem.Get_STra_SIPKONT: Integer;
begin
    Result := DefaultInterface.STra_SIPKONT;
end;

procedure TFatKalem.Set_STra_SIPKONT(Value: Integer);
begin
  DefaultInterface.Set_STra_SIPKONT(Value);
end;

function TFatKalem.Get_Ambarkabulno: WideString;
begin
    Result := DefaultInterface.Ambarkabulno;
end;

procedure TFatKalem.Set_Ambarkabulno(const Value: WideString);
  { Warning: The property Ambarkabulno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ambarkabulno := Value;
end;

function TFatKalem.Get_Firmadovtip: Integer;
begin
    Result := DefaultInterface.Firmadovtip;
end;

procedure TFatKalem.Set_Firmadovtip(Value: Integer);
begin
  DefaultInterface.Set_Firmadovtip(Value);
end;

function TFatKalem.Get_Firmadovtut: Double;
begin
    Result := DefaultInterface.Firmadovtut;
end;

procedure TFatKalem.Set_Firmadovtut(Value: Double);
begin
  DefaultInterface.Set_Firmadovtut(Value);
end;

function TFatKalem.Get_Firmadovmal: Double;
begin
    Result := DefaultInterface.Firmadovmal;
end;

procedure TFatKalem.Set_Firmadovmal(Value: Double);
begin
  DefaultInterface.Set_Firmadovmal(Value);
end;

function TFatKalem.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TFatKalem.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TFatKalem.Get_Irsaliyeno: WideString;
begin
    Result := DefaultInterface.Irsaliyeno;
end;

procedure TFatKalem.Set_Irsaliyeno(const Value: WideString);
  { Warning: The property Irsaliyeno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Irsaliyeno := Value;
end;

function TFatKalem.Get_Irsaliyetar: TDateTime;
begin
    Result := DefaultInterface.Irsaliyetar;
end;

procedure TFatKalem.Set_Irsaliyetar(Value: TDateTime);
begin
  DefaultInterface.Set_Irsaliyetar(Value);
end;

function TFatKalem.Get_Stra_KosulK: WideString;
begin
    Result := DefaultInterface.Stra_KosulK;
end;

procedure TFatKalem.Set_Stra_KosulK(const Value: WideString);
  { Warning: The property Stra_KosulK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stra_KosulK := Value;
end;

function TFatKalem.Get_Ecza_fat_tip: Integer;
begin
    Result := DefaultInterface.Ecza_fat_tip;
end;

procedure TFatKalem.Set_Ecza_fat_tip(Value: Integer);
begin
  DefaultInterface.Set_Ecza_fat_tip(Value);
end;

function TFatKalem.Get_STra_testar: TDateTime;
begin
    Result := DefaultInterface.STra_testar;
end;

procedure TFatKalem.Set_STra_testar(Value: TDateTime);
begin
  DefaultInterface.Set_STra_testar(Value);
end;

function TFatKalem.Get_Olcubr: Integer;
begin
    Result := DefaultInterface.Olcubr;
end;

procedure TFatKalem.Set_Olcubr(Value: Integer);
begin
  DefaultInterface.Set_Olcubr(Value);
end;

function TFatKalem.Get_Vadetar: TDateTime;
begin
    Result := DefaultInterface.Vadetar;
end;

procedure TFatKalem.Set_Vadetar(Value: TDateTime);
begin
  DefaultInterface.Set_Vadetar(Value);
end;

function TFatKalem.Get_Listeno: WideString;
begin
    Result := DefaultInterface.Listeno;
end;

procedure TFatKalem.Set_Listeno(const Value: WideString);
  { Warning: The property Listeno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Listeno := Value;
end;

function TFatKalem.Get_BaglantiNo: Integer;
begin
    Result := DefaultInterface.BaglantiNo;
end;

procedure TFatKalem.Set_BaglantiNo(Value: Integer);
begin
  DefaultInterface.Set_BaglantiNo(Value);
end;

function TFatKalem.Get_BrCevrim1: Double;
begin
    Result := DefaultInterface.BrCevrim1;
end;

procedure TFatKalem.Set_BrCevrim1(Value: Double);
begin
  DefaultInterface.Set_BrCevrim1(Value);
end;

function TFatKalem.Get_BrCevrim2: Double;
begin
    Result := DefaultInterface.BrCevrim2;
end;

procedure TFatKalem.Set_BrCevrim2(Value: Double);
begin
  DefaultInterface.Set_BrCevrim2(Value);
end;

function TFatKalem.Get_Yed_Bf: Double;
begin
    Result := DefaultInterface.Yed_Bf;
end;

procedure TFatKalem.Set_Yed_Bf(Value: Double);
begin
  DefaultInterface.Set_Yed_Bf(Value);
end;

function TFatKalem.Get_STra_BGTIP: WideString;
begin
    Result := DefaultInterface.STra_BGTIP;
end;

procedure TFatKalem.Set_STra_BGTIP(const Value: WideString);
  { Warning: The property STra_BGTIP has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_BGTIP := Value;
end;

function TFatKalem.Get_MuhasebeKodu: WideString;
begin
    Result := DefaultInterface.MuhasebeKodu;
end;

procedure TFatKalem.Set_MuhasebeKodu(const Value: WideString);
  { Warning: The property MuhasebeKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MuhasebeKodu := Value;
end;

function TFatKalem.Get_ReferansKodu: WideString;
begin
    Result := DefaultInterface.ReferansKodu;
end;

procedure TFatKalem.Set_ReferansKodu(const Value: WideString);
  { Warning: The property ReferansKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReferansKodu := Value;
end;

function TFatKalem.Get_C_Yedek6: WideString;
begin
    Result := DefaultInterface.C_Yedek6;
end;

procedure TFatKalem.Set_C_Yedek6(const Value: WideString);
  { Warning: The property C_Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek6 := Value;
end;

function TFatKalem.Get_ProjeKodu: WideString;
begin
    Result := DefaultInterface.ProjeKodu;
end;

procedure TFatKalem.Set_ProjeKodu(const Value: WideString);
  { Warning: The property ProjeKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProjeKodu := Value;
end;

function TFatKalem.Get_STra_FTIRSIP: WideString;
begin
    Result := DefaultInterface.STra_FTIRSIP;
end;

procedure TFatKalem.Set_STra_FTIRSIP(const Value: WideString);
  { Warning: The property STra_FTIRSIP has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_FTIRSIP := Value;
end;

function TFatKalem.Get_STra_CARI_KOD: WideString;
begin
    Result := DefaultInterface.STra_CARI_KOD;
end;

procedure TFatKalem.Set_STra_CARI_KOD(const Value: WideString);
  { Warning: The property STra_CARI_KOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_CARI_KOD := Value;
end;

function TFatKalem.Get_STra_GC: WideString;
begin
    Result := DefaultInterface.STra_GC;
end;

procedure TFatKalem.Set_STra_GC(const Value: WideString);
  { Warning: The property STra_GC has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_GC := Value;
end;

function TFatKalem.Get_DEPO_KODU: Integer;
begin
    Result := DefaultInterface.DEPO_KODU;
end;

procedure TFatKalem.Set_DEPO_KODU(Value: Integer);
begin
  DefaultInterface.Set_DEPO_KODU(Value);
end;

function TFatKalem.Get_Gir_Depo_Kodu: Integer;
begin
    Result := DefaultInterface.Gir_Depo_Kodu;
end;

procedure TFatKalem.Set_Gir_Depo_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Gir_Depo_Kodu(Value);
end;

function TFatKalem.Get_STra_ACIK: WideString;
begin
    Result := DefaultInterface.STra_ACIK;
end;

procedure TFatKalem.Set_STra_ACIK(const Value: WideString);
  { Warning: The property STra_ACIK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_ACIK := Value;
end;

function TFatKalem.Get_Stra_OnayTipi: WideString;
begin
    Result := DefaultInterface.Stra_OnayTipi;
end;

procedure TFatKalem.Set_Stra_OnayTipi(const Value: WideString);
  { Warning: The property Stra_OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stra_OnayTipi := Value;
end;

function TFatKalem.Get_Stra_OnayNum: Integer;
begin
    Result := DefaultInterface.Stra_OnayNum;
end;

procedure TFatKalem.Set_Stra_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_Stra_OnayNum(Value);
end;

function TFatKalem.Get_Stra_SubeKodu: Integer;
begin
    Result := DefaultInterface.Stra_SubeKodu;
end;

procedure TFatKalem.Set_Stra_SubeKodu(Value: Integer);
begin
  DefaultInterface.Set_Stra_SubeKodu(Value);
end;

function TFatKalem.Get_Stok_IsletmeKod: Integer;
begin
    Result := DefaultInterface.Stok_IsletmeKod;
end;

procedure TFatKalem.Set_Stok_IsletmeKod(Value: Integer);
begin
  DefaultInterface.Set_Stok_IsletmeKod(Value);
end;

function TFatKalem.Get_Stok_SubeKod: Integer;
begin
    Result := DefaultInterface.Stok_SubeKod;
end;

procedure TFatKalem.Set_Stok_SubeKod(Value: Integer);
begin
  DefaultInterface.Set_Stok_SubeKod(Value);
end;

function TFatKalem.Get_Stra_Exporttype: Integer;
begin
    Result := DefaultInterface.Stra_Exporttype;
end;

procedure TFatKalem.Set_Stra_Exporttype(Value: Integer);
begin
  DefaultInterface.Set_Stra_Exporttype(Value);
end;

function TFatKalem.Get_IncKeyNo: Integer;
begin
    Result := DefaultInterface.IncKeyNo;
end;

procedure TFatKalem.Set_IncKeyNo(Value: Integer);
begin
  DefaultInterface.Set_IncKeyNo(Value);
end;

function TFatKalem.Get_IncKeyNo2: Integer;
begin
    Result := DefaultInterface.IncKeyNo2;
end;

procedure TFatKalem.Set_IncKeyNo2(Value: Integer);
begin
  DefaultInterface.Set_IncKeyNo2(Value);
end;

function TFatKalem.Get_TesMik: Double;
begin
    Result := DefaultInterface.TesMik;
end;

procedure TFatKalem.Set_TesMik(Value: Double);
begin
  DefaultInterface.Set_TesMik(Value);
end;

function TFatKalem.Get_TesMFMik: Double;
begin
    Result := DefaultInterface.TesMFMik;
end;

procedure TFatKalem.Set_TesMFMik(Value: Double);
begin
  DefaultInterface.Set_TesMFMik(Value);
end;

function TFatKalem.Get_MALADI: WideString;
begin
    Result := DefaultInterface.MALADI;
end;

procedure TFatKalem.Set_MALADI(const Value: WideString);
  { Warning: The property MALADI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MALADI := Value;
end;

function TFatKalem.Get_SATREF_KOD: WideString;
begin
    Result := DefaultInterface.SATREF_KOD;
end;

procedure TFatKalem.Set_SATREF_KOD(const Value: WideString);
  { Warning: The property SATREF_KOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SATREF_KOD := Value;
end;

function TFatKalem.Get_STOK_GRKOD: WideString;
begin
    Result := DefaultInterface.STOK_GRKOD;
end;

procedure TFatKalem.Set_STOK_GRKOD(const Value: WideString);
  { Warning: The property STOK_GRKOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STOK_GRKOD := Value;
end;

function TFatKalem.Get_STOK_FIYATKODU: WideString;
begin
    Result := DefaultInterface.STOK_FIYATKODU;
end;

procedure TFatKalem.Set_STOK_FIYATKODU(const Value: WideString);
  { Warning: The property STOK_FIYATKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STOK_FIYATKODU := Value;
end;

function TFatKalem.Get_STMUHDKOD: Integer;
begin
    Result := DefaultInterface.STMUHDKOD;
end;

procedure TFatKalem.Set_STMUHDKOD(Value: Integer);
begin
  DefaultInterface.Set_STMUHDKOD(Value);
end;

function TFatKalem.Get_SONGIRBFIAT: Double;
begin
    Result := DefaultInterface.SONGIRBFIAT;
end;

procedure TFatKalem.Set_SONGIRBFIAT(Value: Double);
begin
  DefaultInterface.Set_SONGIRBFIAT(Value);
end;

function TFatKalem.Get_OBR1: WideString;
begin
    Result := DefaultInterface.OBR1;
end;

procedure TFatKalem.Set_OBR1(const Value: WideString);
  { Warning: The property OBR1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OBR1 := Value;
end;

function TFatKalem.Get_OBR2: WideString;
begin
    Result := DefaultInterface.OBR2;
end;

procedure TFatKalem.Set_OBR2(const Value: WideString);
  { Warning: The property OBR2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OBR2 := Value;
end;

function TFatKalem.Get_OBR3: WideString;
begin
    Result := DefaultInterface.OBR3;
end;

procedure TFatKalem.Set_OBR3(const Value: WideString);
  { Warning: The property OBR3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OBR3 := Value;
end;

function TFatKalem.Get_SabitDepKod: Integer;
begin
    Result := DefaultInterface.SabitDepKod;
end;

procedure TFatKalem.Set_SabitDepKod(Value: Integer);
begin
  DefaultInterface.Set_SabitDepKod(Value);
end;

function TFatKalem.Get_DOVTIP: Integer;
begin
    Result := DefaultInterface.DOVTIP;
end;

procedure TFatKalem.Set_DOVTIP(Value: Integer);
begin
  DefaultInterface.Set_DOVTIP(Value);
end;

function TFatKalem.Get_DOVIZ_TURU: Integer;
begin
    Result := DefaultInterface.DOVIZ_TURU;
end;

procedure TFatKalem.Set_DOVIZ_TURU(Value: Integer);
begin
  DefaultInterface.Set_DOVIZ_TURU(Value);
end;

function TFatKalem.Get_Fiyatlar1: Double;
begin
    Result := DefaultInterface.Fiyatlar1;
end;

procedure TFatKalem.Set_Fiyatlar1(Value: Double);
begin
  DefaultInterface.Set_Fiyatlar1(Value);
end;

function TFatKalem.Get_Fiyatlar2: Double;
begin
    Result := DefaultInterface.Fiyatlar2;
end;

procedure TFatKalem.Set_Fiyatlar2(Value: Double);
begin
  DefaultInterface.Set_Fiyatlar2(Value);
end;

function TFatKalem.Get_Fiyatlar3: Double;
begin
    Result := DefaultInterface.Fiyatlar3;
end;

procedure TFatKalem.Set_Fiyatlar3(Value: Double);
begin
  DefaultInterface.Set_Fiyatlar3(Value);
end;

function TFatKalem.Get_Fiyatlar4: Double;
begin
    Result := DefaultInterface.Fiyatlar4;
end;

procedure TFatKalem.Set_Fiyatlar4(Value: Double);
begin
  DefaultInterface.Set_Fiyatlar4(Value);
end;

function TFatKalem.Get_Fiyatlar5: Double;
begin
    Result := DefaultInterface.Fiyatlar5;
end;

procedure TFatKalem.Set_Fiyatlar5(Value: Double);
begin
  DefaultInterface.Set_Fiyatlar5(Value);
end;

function TFatKalem.Get_Fiyatlar6: Double;
begin
    Result := DefaultInterface.Fiyatlar6;
end;

procedure TFatKalem.Set_Fiyatlar6(Value: Double);
begin
  DefaultInterface.Set_Fiyatlar6(Value);
end;

function TFatKalem.Get_Fiyatlar7: Double;
begin
    Result := DefaultInterface.Fiyatlar7;
end;

procedure TFatKalem.Set_Fiyatlar7(Value: Double);
begin
  DefaultInterface.Set_Fiyatlar7(Value);
end;

function TFatKalem.Get_Kilit: WideString;
begin
    Result := DefaultInterface.Kilit;
end;

procedure TFatKalem.Set_Kilit(const Value: WideString);
  { Warning: The property Kilit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kilit := Value;
end;

function TFatKalem.Get_SatisKDVOran: Double;
begin
    Result := DefaultInterface.SatisKDVOran;
end;

procedure TFatKalem.Set_SatisKDVOran(Value: Double);
begin
  DefaultInterface.Set_SatisKDVOran(Value);
end;

function TFatKalem.Get_AlisKDVOran: Double;
begin
    Result := DefaultInterface.AlisKDVOran;
end;

procedure TFatKalem.Set_AlisKDVOran(Value: Double);
begin
  DefaultInterface.Set_AlisKDVOran(Value);
end;

function TFatKalem.Get_Isk_Flag: TFatKalemIskTipi;
begin
    Result := DefaultInterface.Isk_Flag;
end;

procedure TFatKalem.Set_Isk_Flag(Value: TFatKalemIskTipi);
begin
  DefaultInterface.Set_Isk_Flag(Value);
end;

function TFatKalem.Get_SipTesKont: Integer;
begin
    Result := DefaultInterface.SipTesKont;
end;

procedure TFatKalem.Set_SipTesKont(Value: Integer);
begin
  DefaultInterface.Set_SipTesKont(Value);
end;

function TFatKalem.Get_Mamulmu: WideString;
begin
    Result := DefaultInterface.Mamulmu;
end;

procedure TFatKalem.Set_Mamulmu(const Value: WideString);
  { Warning: The property Mamulmu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Mamulmu := Value;
end;

function TFatKalem.Get_SeriTakibi: WideString;
begin
    Result := DefaultInterface.SeriTakibi;
end;

procedure TFatKalem.Set_SeriTakibi(const Value: WideString);
  { Warning: The property SeriTakibi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SeriTakibi := Value;
end;

function TFatKalem.Get_Stra_Exportmik: Double;
begin
    Result := DefaultInterface.Stra_Exportmik;
end;

procedure TFatKalem.Set_Stra_Exportmik(Value: Double);
begin
  DefaultInterface.Set_Stra_Exportmik(Value);
end;

function TFatKalem.Get_STra_SatIsk3: Double;
begin
    Result := DefaultInterface.STra_SatIsk3;
end;

procedure TFatKalem.Set_STra_SatIsk3(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk3(Value);
end;

function TFatKalem.Get_Stra_KosTar: TDateTime;
begin
    Result := DefaultInterface.Stra_KosTar;
end;

procedure TFatKalem.Set_Stra_KosTar(Value: TDateTime);
begin
  DefaultInterface.Set_Stra_KosTar(Value);
end;

function TFatKalem.Get_Stra_FiyatTar: TDateTime;
begin
    Result := DefaultInterface.Stra_FiyatTar;
end;

procedure TFatKalem.Set_Stra_FiyatTar(Value: TDateTime);
begin
  DefaultInterface.Set_Stra_FiyatTar(Value);
end;

function TFatKalem.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TFatKalem.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TFatKalem.Get_Kul_Mik: Double;
begin
    Result := DefaultInterface.Kul_Mik;
end;

procedure TFatKalem.Set_Kul_Mik(Value: Double);
begin
  DefaultInterface.Set_Kul_Mik(Value);
end;

function TFatKalem.Get_Fiat_birimi: Integer;
begin
    Result := DefaultInterface.Fiat_birimi;
end;

procedure TFatKalem.Set_Fiat_birimi(Value: Integer);
begin
  DefaultInterface.Set_Fiat_birimi(Value);
end;

function TFatKalem.Get_Satici_Kodu: WideString;
begin
    Result := DefaultInterface.Satici_Kodu;
end;

procedure TFatKalem.Set_Satici_Kodu(const Value: WideString);
  { Warning: The property Satici_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Satici_Kodu := Value;
end;

function TFatKalem.Get_Sat_IskTipleri1: Integer;
begin
    Result := DefaultInterface.Sat_IskTipleri1;
end;

procedure TFatKalem.Set_Sat_IskTipleri1(Value: Integer);
begin
  DefaultInterface.Set_Sat_IskTipleri1(Value);
end;

function TFatKalem.Get_Sat_IskTipleri2: Integer;
begin
    Result := DefaultInterface.Sat_IskTipleri2;
end;

procedure TFatKalem.Set_Sat_IskTipleri2(Value: Integer);
begin
  DefaultInterface.Set_Sat_IskTipleri2(Value);
end;

function TFatKalem.Get_Sat_IskTipleri3: Integer;
begin
    Result := DefaultInterface.Sat_IskTipleri3;
end;

procedure TFatKalem.Set_Sat_IskTipleri3(Value: Integer);
begin
  DefaultInterface.Set_Sat_IskTipleri3(Value);
end;

function TFatKalem.Get_Koli_Inc: Integer;
begin
    Result := DefaultInterface.Koli_Inc;
end;

procedure TFatKalem.Set_Koli_Inc(Value: Integer);
begin
  DefaultInterface.Set_Koli_Inc(Value);
end;

function TFatKalem.Get_KoliStok: WordBool;
begin
    Result := DefaultInterface.KoliStok;
end;

procedure TFatKalem.Set_KoliStok(Value: WordBool);
begin
  DefaultInterface.Set_KoliStok(Value);
end;

function TFatKalem.Get_Tur: WideString;
begin
    Result := DefaultInterface.Tur;
end;

procedure TFatKalem.Set_Tur(const Value: WideString);
  { Warning: The property Tur has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tur := Value;
end;

function TFatKalem.Get_Stra_FiiliTar: TDateTime;
begin
    Result := DefaultInterface.Stra_FiiliTar;
end;

procedure TFatKalem.Set_Stra_FiiliTar(Value: TDateTime);
begin
  DefaultInterface.Set_Stra_FiiliTar(Value);
end;

function TFatKalem.Get_BirimPuan: Integer;
begin
    Result := DefaultInterface.BirimPuan;
end;

procedure TFatKalem.Set_BirimPuan(Value: Integer);
begin
  DefaultInterface.Set_BirimPuan(Value);
end;

function TFatKalem.Get_PuanDeger: Double;
begin
    Result := DefaultInterface.PuanDeger;
end;

procedure TFatKalem.Set_PuanDeger(Value: Double);
begin
  DefaultInterface.Set_PuanDeger(Value);
end;

function TFatKalem.Get_KalemGenIskOran1: Double;
begin
    Result := DefaultInterface.KalemGenIskOran1;
end;

procedure TFatKalem.Set_KalemGenIskOran1(Value: Double);
begin
  DefaultInterface.Set_KalemGenIskOran1(Value);
end;

function TFatKalem.Get_KalemGenIskOran2: Double;
begin
    Result := DefaultInterface.KalemGenIskOran2;
end;

procedure TFatKalem.Set_KalemGenIskOran2(Value: Double);
begin
  DefaultInterface.Set_KalemGenIskOran2(Value);
end;

function TFatKalem.Get_KalemGenIskOran3: Double;
begin
    Result := DefaultInterface.KalemGenIskOran3;
end;

procedure TFatKalem.Set_KalemGenIskOran3(Value: Double);
begin
  DefaultInterface.Set_KalemGenIskOran3(Value);
end;

function TFatKalem.Get_OtvFlag: Integer;
begin
    Result := DefaultInterface.OtvFlag;
end;

procedure TFatKalem.Set_OtvFlag(Value: Integer);
begin
  DefaultInterface.Set_OtvFlag(Value);
end;

function TFatKalem.Get_Otvtut: Double;
begin
    Result := DefaultInterface.Otvtut;
end;

procedure TFatKalem.Set_Otvtut(Value: Double);
begin
  DefaultInterface.Set_Otvtut(Value);
end;

function TFatKalem.Get_STra_SatIsk4: Double;
begin
    Result := DefaultInterface.STra_SatIsk4;
end;

procedure TFatKalem.Set_STra_SatIsk4(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk4(Value);
end;

function TFatKalem.Get_STra_SatIsk5: Double;
begin
    Result := DefaultInterface.STra_SatIsk5;
end;

procedure TFatKalem.Set_STra_SatIsk5(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk5(Value);
end;

function TFatKalem.Get_STra_SatIsk6: Double;
begin
    Result := DefaultInterface.STra_SatIsk6;
end;

procedure TFatKalem.Set_STra_SatIsk6(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk6(Value);
end;

function TFatKalem.Get_Kull1S: WideString;
begin
    Result := DefaultInterface.Kull1S;
end;

procedure TFatKalem.Set_Kull1S(const Value: WideString);
  { Warning: The property Kull1S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull1S := Value;
end;

function TFatKalem.Get_KKMalF: Double;
begin
    Result := DefaultInterface.KKMalF;
end;

procedure TFatKalem.Set_KKMalF(Value: Double);
begin
  DefaultInterface.Set_KKMalF(Value);
end;

function TFatKalem.Get_Stra_FiyatBirimi: Integer;
begin
    Result := DefaultInterface.Stra_FiyatBirimi;
end;

procedure TFatKalem.Set_Stra_FiyatBirimi(Value: Integer);
begin
  DefaultInterface.Set_Stra_FiyatBirimi(Value);
end;

function TFatKalem.Get_Stra_IrsKont: Integer;
begin
    Result := DefaultInterface.Stra_IrsKont;
end;

procedure TFatKalem.Set_Stra_IrsKont(Value: Integer);
begin
  DefaultInterface.Set_Stra_IrsKont(Value);
end;

function TFatKalem.Get_SatisKilit: WideString;
begin
    Result := DefaultInterface.SatisKilit;
end;

procedure TFatKalem.Set_SatisKilit(const Value: WideString);
  { Warning: The property SatisKilit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SatisKilit := Value;
end;

function TFatKalem.Get_Payda_1: Double;
begin
    Result := DefaultInterface.Payda_1;
end;

procedure TFatKalem.Set_Payda_1(Value: Double);
begin
  DefaultInterface.Set_Payda_1(Value);
end;

function TFatKalem.Get_SatirBaziAcik(Index: Integer): WideString;
begin
    Result := DefaultInterface.SatirBaziAcik[Index];
end;

procedure TFatKalem.Set_SatirBaziAcik(Index: Integer; const Value: WideString);
  { Warning: The property SatirBaziAcik has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SatirBaziAcik := Value;
end;

function TFatKalem.Get_D_YEDEK10: TDateTime;
begin
    Result := DefaultInterface.D_YEDEK10;
end;

procedure TFatKalem.Set_D_YEDEK10(Value: TDateTime);
begin
  DefaultInterface.Set_D_YEDEK10(Value);
end;

function TFatKalem.Get_Sat_IskTipleri4: Integer;
begin
    Result := DefaultInterface.Sat_IskTipleri4;
end;

procedure TFatKalem.Set_Sat_IskTipleri4(Value: Integer);
begin
  DefaultInterface.Set_Sat_IskTipleri4(Value);
end;

function TFatKalem.Get_Sat_IskTipleri5: Integer;
begin
    Result := DefaultInterface.Sat_IskTipleri5;
end;

procedure TFatKalem.Set_Sat_IskTipleri5(Value: Integer);
begin
  DefaultInterface.Set_Sat_IskTipleri5(Value);
end;

function TFatKalem.Get_Sat_IskTipleri6: Integer;
begin
    Result := DefaultInterface.Sat_IskTipleri6;
end;

procedure TFatKalem.Set_Sat_IskTipleri6(Value: Integer);
begin
  DefaultInterface.Set_Sat_IskTipleri6(Value);
end;

function TFatKalem.Get_YapKod: WideString;
begin
    Result := DefaultInterface.YapKod;
end;

procedure TFatKalem.Set_YapKod(const Value: WideString);
  { Warning: The property YapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YapKod := Value;
end;

function TFatKalem.Get_EsnekMi: WordBool;
begin
    Result := DefaultInterface.EsnekMi;
end;

function TFatKalem.Get_SeriSayisi: Integer;
begin
    Result := DefaultInterface.SeriSayisi;
end;

function TFatKalem.Get_BRCevrim(Index: Integer): Double;
begin
    Result := DefaultInterface.BRCevrim[Index];
end;

function TFatKalem.SeriEkle(const Seri1: WideString; const Seri2: WideString; 
                            const Aciklama1: WideString; const Aciklama2: WideString; Miktar: Double): Integer;
begin
  Result := DefaultInterface.SeriEkle(Seri1, Seri2, Aciklama1, Aciklama2, Miktar);
end;

procedure TFatKalem.SeriSil(SeriIndex: Integer);
begin
  DefaultInterface.SeriSil(SeriIndex);
end;

function TFatKalem.SeriOku(Index: Integer): IKalemSeri;
begin
  Result := DefaultInterface.SeriOku(Index);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFatKalemProperties.Create(AServer: TFatKalem);
begin
  inherited Create;
  FServer := AServer;
end;

function TFatKalemProperties.GetDefaultInterface: IFatKalem;
begin
  Result := FServer.DefaultInterface;
end;

function TFatKalemProperties.Get_StokKodu: WideString;
begin
    Result := DefaultInterface.StokKodu;
end;

procedure TFatKalemProperties.Set_StokKodu(const Value: WideString);
  { Warning: The property StokKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StokKodu := Value;
end;

function TFatKalemProperties.Get_Sira: Integer;
begin
    Result := DefaultInterface.Sira;
end;

procedure TFatKalemProperties.Set_Sira(Value: Integer);
begin
  DefaultInterface.Set_Sira(Value);
end;

function TFatKalemProperties.Get_STra_FATIRSNO: WideString;
begin
    Result := DefaultInterface.STra_FATIRSNO;
end;

procedure TFatKalemProperties.Set_STra_FATIRSNO(const Value: WideString);
  { Warning: The property STra_FATIRSNO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_FATIRSNO := Value;
end;

function TFatKalemProperties.Get_STra_GCMIK: Double;
begin
    Result := DefaultInterface.STra_GCMIK;
end;

procedure TFatKalemProperties.Set_STra_GCMIK(Value: Double);
begin
  DefaultInterface.Set_STra_GCMIK(Value);
end;

function TFatKalemProperties.Get_STra_GCMIK2: Double;
begin
    Result := DefaultInterface.STra_GCMIK2;
end;

procedure TFatKalemProperties.Set_STra_GCMIK2(Value: Double);
begin
  DefaultInterface.Set_STra_GCMIK2(Value);
end;

function TFatKalemProperties.Get_CEVRIM: Double;
begin
    Result := DefaultInterface.CEVRIM;
end;

procedure TFatKalemProperties.Set_CEVRIM(Value: Double);
begin
  DefaultInterface.Set_CEVRIM(Value);
end;

function TFatKalemProperties.Get_STra_TAR: TDateTime;
begin
    Result := DefaultInterface.STra_TAR;
end;

procedure TFatKalemProperties.Set_STra_TAR(Value: TDateTime);
begin
  DefaultInterface.Set_STra_TAR(Value);
end;

function TFatKalemProperties.Get_STra_NF: Double;
begin
    Result := DefaultInterface.STra_NF;
end;

procedure TFatKalemProperties.Set_STra_NF(Value: Double);
begin
  DefaultInterface.Set_STra_NF(Value);
end;

function TFatKalemProperties.Get_STra_BF: Double;
begin
    Result := DefaultInterface.STra_BF;
end;

procedure TFatKalemProperties.Set_STra_BF(Value: Double);
begin
  DefaultInterface.Set_STra_BF(Value);
end;

function TFatKalemProperties.Get_STra_IAF: Double;
begin
    Result := DefaultInterface.STra_IAF;
end;

procedure TFatKalemProperties.Set_STra_IAF(Value: Double);
begin
  DefaultInterface.Set_STra_IAF(Value);
end;

function TFatKalemProperties.Get_STra_KDV: Double;
begin
    Result := DefaultInterface.STra_KDV;
end;

procedure TFatKalemProperties.Set_STra_KDV(Value: Double);
begin
  DefaultInterface.Set_STra_KDV(Value);
end;

function TFatKalemProperties.Get_STra_SatIsk: Double;
begin
    Result := DefaultInterface.STra_SatIsk;
end;

procedure TFatKalemProperties.Set_STra_SatIsk(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk(Value);
end;

function TFatKalemProperties.Get_STra_SatIsk2: Double;
begin
    Result := DefaultInterface.STra_SatIsk2;
end;

procedure TFatKalemProperties.Set_STra_SatIsk2(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk2(Value);
end;

function TFatKalemProperties.Get_STra_MALFISK: Double;
begin
    Result := DefaultInterface.STra_MALFISK;
end;

procedure TFatKalemProperties.Set_STra_MALFISK(Value: Double);
begin
  DefaultInterface.Set_STra_MALFISK(Value);
end;

function TFatKalemProperties.Get_STra_HTUR: WideString;
begin
    Result := DefaultInterface.STra_HTUR;
end;

procedure TFatKalemProperties.Set_STra_HTUR(const Value: WideString);
  { Warning: The property STra_HTUR has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_HTUR := Value;
end;

function TFatKalemProperties.Get_STra_DOVTIP: Integer;
begin
    Result := DefaultInterface.STra_DOVTIP;
end;

procedure TFatKalemProperties.Set_STra_DOVTIP(Value: Integer);
begin
  DefaultInterface.Set_STra_DOVTIP(Value);
end;

function TFatKalemProperties.Get_PROMASYON_KODU: Integer;
begin
    Result := DefaultInterface.PROMASYON_KODU;
end;

procedure TFatKalemProperties.Set_PROMASYON_KODU(Value: Integer);
begin
  DefaultInterface.Set_PROMASYON_KODU(Value);
end;

function TFatKalemProperties.Get_STra_DOVFIAT: Double;
begin
    Result := DefaultInterface.STra_DOVFIAT;
end;

procedure TFatKalemProperties.Set_STra_DOVFIAT(Value: Double);
begin
  DefaultInterface.Set_STra_DOVFIAT(Value);
end;

function TFatKalemProperties.Get_STra_ODEGUN: Integer;
begin
    Result := DefaultInterface.STra_ODEGUN;
end;

procedure TFatKalemProperties.Set_STra_ODEGUN(Value: Integer);
begin
  DefaultInterface.Set_STra_ODEGUN(Value);
end;

function TFatKalemProperties.Get_STra_KOD1: WideString;
begin
    Result := DefaultInterface.STra_KOD1;
end;

procedure TFatKalemProperties.Set_STra_KOD1(const Value: WideString);
  { Warning: The property STra_KOD1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_KOD1 := Value;
end;

function TFatKalemProperties.Get_STra_KOD2: WideString;
begin
    Result := DefaultInterface.STra_KOD2;
end;

procedure TFatKalemProperties.Set_STra_KOD2(const Value: WideString);
  { Warning: The property STra_KOD2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_KOD2 := Value;
end;

function TFatKalemProperties.Get_STra_SIPNUM: WideString;
begin
    Result := DefaultInterface.STra_SIPNUM;
end;

procedure TFatKalemProperties.Set_STra_SIPNUM(const Value: WideString);
  { Warning: The property STra_SIPNUM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_SIPNUM := Value;
end;

function TFatKalemProperties.Get_STra_SIP_TURU: WideString;
begin
    Result := DefaultInterface.STra_SIP_TURU;
end;

procedure TFatKalemProperties.Set_STra_SIP_TURU(const Value: WideString);
  { Warning: The property STra_SIP_TURU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_SIP_TURU := Value;
end;

function TFatKalemProperties.Get_Plasiyer_Kodu: WideString;
begin
    Result := DefaultInterface.Plasiyer_Kodu;
end;

procedure TFatKalemProperties.Set_Plasiyer_Kodu(const Value: WideString);
  { Warning: The property Plasiyer_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer_Kodu := Value;
end;

function TFatKalemProperties.Get_Ekalanneden: WideString;
begin
    Result := DefaultInterface.Ekalanneden;
end;

procedure TFatKalemProperties.Set_Ekalanneden(const Value: WideString);
  { Warning: The property Ekalanneden has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ekalanneden := Value;
end;

function TFatKalemProperties.Get_Ekalan: WideString;
begin
    Result := DefaultInterface.Ekalan;
end;

procedure TFatKalemProperties.Set_Ekalan(const Value: WideString);
  { Warning: The property Ekalan has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ekalan := Value;
end;

function TFatKalemProperties.Get_Ekalan1: WideString;
begin
    Result := DefaultInterface.Ekalan1;
end;

procedure TFatKalemProperties.Set_Ekalan1(const Value: WideString);
  { Warning: The property Ekalan1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ekalan1 := Value;
end;

function TFatKalemProperties.Get_Stra_Otv: Double;
begin
    Result := DefaultInterface.Stra_Otv;
end;

procedure TFatKalemProperties.Set_Stra_Otv(Value: Double);
begin
  DefaultInterface.Set_Stra_Otv(Value);
end;

function TFatKalemProperties.Get_Redneden: Integer;
begin
    Result := DefaultInterface.Redneden;
end;

procedure TFatKalemProperties.Set_Redneden(Value: Integer);
begin
  DefaultInterface.Set_Redneden(Value);
end;

function TFatKalemProperties.Get_STra_SIPKONT: Integer;
begin
    Result := DefaultInterface.STra_SIPKONT;
end;

procedure TFatKalemProperties.Set_STra_SIPKONT(Value: Integer);
begin
  DefaultInterface.Set_STra_SIPKONT(Value);
end;

function TFatKalemProperties.Get_Ambarkabulno: WideString;
begin
    Result := DefaultInterface.Ambarkabulno;
end;

procedure TFatKalemProperties.Set_Ambarkabulno(const Value: WideString);
  { Warning: The property Ambarkabulno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ambarkabulno := Value;
end;

function TFatKalemProperties.Get_Firmadovtip: Integer;
begin
    Result := DefaultInterface.Firmadovtip;
end;

procedure TFatKalemProperties.Set_Firmadovtip(Value: Integer);
begin
  DefaultInterface.Set_Firmadovtip(Value);
end;

function TFatKalemProperties.Get_Firmadovtut: Double;
begin
    Result := DefaultInterface.Firmadovtut;
end;

procedure TFatKalemProperties.Set_Firmadovtut(Value: Double);
begin
  DefaultInterface.Set_Firmadovtut(Value);
end;

function TFatKalemProperties.Get_Firmadovmal: Double;
begin
    Result := DefaultInterface.Firmadovmal;
end;

procedure TFatKalemProperties.Set_Firmadovmal(Value: Double);
begin
  DefaultInterface.Set_Firmadovmal(Value);
end;

function TFatKalemProperties.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TFatKalemProperties.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TFatKalemProperties.Get_Irsaliyeno: WideString;
begin
    Result := DefaultInterface.Irsaliyeno;
end;

procedure TFatKalemProperties.Set_Irsaliyeno(const Value: WideString);
  { Warning: The property Irsaliyeno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Irsaliyeno := Value;
end;

function TFatKalemProperties.Get_Irsaliyetar: TDateTime;
begin
    Result := DefaultInterface.Irsaliyetar;
end;

procedure TFatKalemProperties.Set_Irsaliyetar(Value: TDateTime);
begin
  DefaultInterface.Set_Irsaliyetar(Value);
end;

function TFatKalemProperties.Get_Stra_KosulK: WideString;
begin
    Result := DefaultInterface.Stra_KosulK;
end;

procedure TFatKalemProperties.Set_Stra_KosulK(const Value: WideString);
  { Warning: The property Stra_KosulK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stra_KosulK := Value;
end;

function TFatKalemProperties.Get_Ecza_fat_tip: Integer;
begin
    Result := DefaultInterface.Ecza_fat_tip;
end;

procedure TFatKalemProperties.Set_Ecza_fat_tip(Value: Integer);
begin
  DefaultInterface.Set_Ecza_fat_tip(Value);
end;

function TFatKalemProperties.Get_STra_testar: TDateTime;
begin
    Result := DefaultInterface.STra_testar;
end;

procedure TFatKalemProperties.Set_STra_testar(Value: TDateTime);
begin
  DefaultInterface.Set_STra_testar(Value);
end;

function TFatKalemProperties.Get_Olcubr: Integer;
begin
    Result := DefaultInterface.Olcubr;
end;

procedure TFatKalemProperties.Set_Olcubr(Value: Integer);
begin
  DefaultInterface.Set_Olcubr(Value);
end;

function TFatKalemProperties.Get_Vadetar: TDateTime;
begin
    Result := DefaultInterface.Vadetar;
end;

procedure TFatKalemProperties.Set_Vadetar(Value: TDateTime);
begin
  DefaultInterface.Set_Vadetar(Value);
end;

function TFatKalemProperties.Get_Listeno: WideString;
begin
    Result := DefaultInterface.Listeno;
end;

procedure TFatKalemProperties.Set_Listeno(const Value: WideString);
  { Warning: The property Listeno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Listeno := Value;
end;

function TFatKalemProperties.Get_BaglantiNo: Integer;
begin
    Result := DefaultInterface.BaglantiNo;
end;

procedure TFatKalemProperties.Set_BaglantiNo(Value: Integer);
begin
  DefaultInterface.Set_BaglantiNo(Value);
end;

function TFatKalemProperties.Get_BrCevrim1: Double;
begin
    Result := DefaultInterface.BrCevrim1;
end;

procedure TFatKalemProperties.Set_BrCevrim1(Value: Double);
begin
  DefaultInterface.Set_BrCevrim1(Value);
end;

function TFatKalemProperties.Get_BrCevrim2: Double;
begin
    Result := DefaultInterface.BrCevrim2;
end;

procedure TFatKalemProperties.Set_BrCevrim2(Value: Double);
begin
  DefaultInterface.Set_BrCevrim2(Value);
end;

function TFatKalemProperties.Get_Yed_Bf: Double;
begin
    Result := DefaultInterface.Yed_Bf;
end;

procedure TFatKalemProperties.Set_Yed_Bf(Value: Double);
begin
  DefaultInterface.Set_Yed_Bf(Value);
end;

function TFatKalemProperties.Get_STra_BGTIP: WideString;
begin
    Result := DefaultInterface.STra_BGTIP;
end;

procedure TFatKalemProperties.Set_STra_BGTIP(const Value: WideString);
  { Warning: The property STra_BGTIP has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_BGTIP := Value;
end;

function TFatKalemProperties.Get_MuhasebeKodu: WideString;
begin
    Result := DefaultInterface.MuhasebeKodu;
end;

procedure TFatKalemProperties.Set_MuhasebeKodu(const Value: WideString);
  { Warning: The property MuhasebeKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MuhasebeKodu := Value;
end;

function TFatKalemProperties.Get_ReferansKodu: WideString;
begin
    Result := DefaultInterface.ReferansKodu;
end;

procedure TFatKalemProperties.Set_ReferansKodu(const Value: WideString);
  { Warning: The property ReferansKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReferansKodu := Value;
end;

function TFatKalemProperties.Get_C_Yedek6: WideString;
begin
    Result := DefaultInterface.C_Yedek6;
end;

procedure TFatKalemProperties.Set_C_Yedek6(const Value: WideString);
  { Warning: The property C_Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek6 := Value;
end;

function TFatKalemProperties.Get_ProjeKodu: WideString;
begin
    Result := DefaultInterface.ProjeKodu;
end;

procedure TFatKalemProperties.Set_ProjeKodu(const Value: WideString);
  { Warning: The property ProjeKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ProjeKodu := Value;
end;

function TFatKalemProperties.Get_STra_FTIRSIP: WideString;
begin
    Result := DefaultInterface.STra_FTIRSIP;
end;

procedure TFatKalemProperties.Set_STra_FTIRSIP(const Value: WideString);
  { Warning: The property STra_FTIRSIP has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_FTIRSIP := Value;
end;

function TFatKalemProperties.Get_STra_CARI_KOD: WideString;
begin
    Result := DefaultInterface.STra_CARI_KOD;
end;

procedure TFatKalemProperties.Set_STra_CARI_KOD(const Value: WideString);
  { Warning: The property STra_CARI_KOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_CARI_KOD := Value;
end;

function TFatKalemProperties.Get_STra_GC: WideString;
begin
    Result := DefaultInterface.STra_GC;
end;

procedure TFatKalemProperties.Set_STra_GC(const Value: WideString);
  { Warning: The property STra_GC has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_GC := Value;
end;

function TFatKalemProperties.Get_DEPO_KODU: Integer;
begin
    Result := DefaultInterface.DEPO_KODU;
end;

procedure TFatKalemProperties.Set_DEPO_KODU(Value: Integer);
begin
  DefaultInterface.Set_DEPO_KODU(Value);
end;

function TFatKalemProperties.Get_Gir_Depo_Kodu: Integer;
begin
    Result := DefaultInterface.Gir_Depo_Kodu;
end;

procedure TFatKalemProperties.Set_Gir_Depo_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Gir_Depo_Kodu(Value);
end;

function TFatKalemProperties.Get_STra_ACIK: WideString;
begin
    Result := DefaultInterface.STra_ACIK;
end;

procedure TFatKalemProperties.Set_STra_ACIK(const Value: WideString);
  { Warning: The property STra_ACIK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_ACIK := Value;
end;

function TFatKalemProperties.Get_Stra_OnayTipi: WideString;
begin
    Result := DefaultInterface.Stra_OnayTipi;
end;

procedure TFatKalemProperties.Set_Stra_OnayTipi(const Value: WideString);
  { Warning: The property Stra_OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stra_OnayTipi := Value;
end;

function TFatKalemProperties.Get_Stra_OnayNum: Integer;
begin
    Result := DefaultInterface.Stra_OnayNum;
end;

procedure TFatKalemProperties.Set_Stra_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_Stra_OnayNum(Value);
end;

function TFatKalemProperties.Get_Stra_SubeKodu: Integer;
begin
    Result := DefaultInterface.Stra_SubeKodu;
end;

procedure TFatKalemProperties.Set_Stra_SubeKodu(Value: Integer);
begin
  DefaultInterface.Set_Stra_SubeKodu(Value);
end;

function TFatKalemProperties.Get_Stok_IsletmeKod: Integer;
begin
    Result := DefaultInterface.Stok_IsletmeKod;
end;

procedure TFatKalemProperties.Set_Stok_IsletmeKod(Value: Integer);
begin
  DefaultInterface.Set_Stok_IsletmeKod(Value);
end;

function TFatKalemProperties.Get_Stok_SubeKod: Integer;
begin
    Result := DefaultInterface.Stok_SubeKod;
end;

procedure TFatKalemProperties.Set_Stok_SubeKod(Value: Integer);
begin
  DefaultInterface.Set_Stok_SubeKod(Value);
end;

function TFatKalemProperties.Get_Stra_Exporttype: Integer;
begin
    Result := DefaultInterface.Stra_Exporttype;
end;

procedure TFatKalemProperties.Set_Stra_Exporttype(Value: Integer);
begin
  DefaultInterface.Set_Stra_Exporttype(Value);
end;

function TFatKalemProperties.Get_IncKeyNo: Integer;
begin
    Result := DefaultInterface.IncKeyNo;
end;

procedure TFatKalemProperties.Set_IncKeyNo(Value: Integer);
begin
  DefaultInterface.Set_IncKeyNo(Value);
end;

function TFatKalemProperties.Get_IncKeyNo2: Integer;
begin
    Result := DefaultInterface.IncKeyNo2;
end;

procedure TFatKalemProperties.Set_IncKeyNo2(Value: Integer);
begin
  DefaultInterface.Set_IncKeyNo2(Value);
end;

function TFatKalemProperties.Get_TesMik: Double;
begin
    Result := DefaultInterface.TesMik;
end;

procedure TFatKalemProperties.Set_TesMik(Value: Double);
begin
  DefaultInterface.Set_TesMik(Value);
end;

function TFatKalemProperties.Get_TesMFMik: Double;
begin
    Result := DefaultInterface.TesMFMik;
end;

procedure TFatKalemProperties.Set_TesMFMik(Value: Double);
begin
  DefaultInterface.Set_TesMFMik(Value);
end;

function TFatKalemProperties.Get_MALADI: WideString;
begin
    Result := DefaultInterface.MALADI;
end;

procedure TFatKalemProperties.Set_MALADI(const Value: WideString);
  { Warning: The property MALADI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MALADI := Value;
end;

function TFatKalemProperties.Get_SATREF_KOD: WideString;
begin
    Result := DefaultInterface.SATREF_KOD;
end;

procedure TFatKalemProperties.Set_SATREF_KOD(const Value: WideString);
  { Warning: The property SATREF_KOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SATREF_KOD := Value;
end;

function TFatKalemProperties.Get_STOK_GRKOD: WideString;
begin
    Result := DefaultInterface.STOK_GRKOD;
end;

procedure TFatKalemProperties.Set_STOK_GRKOD(const Value: WideString);
  { Warning: The property STOK_GRKOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STOK_GRKOD := Value;
end;

function TFatKalemProperties.Get_STOK_FIYATKODU: WideString;
begin
    Result := DefaultInterface.STOK_FIYATKODU;
end;

procedure TFatKalemProperties.Set_STOK_FIYATKODU(const Value: WideString);
  { Warning: The property STOK_FIYATKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STOK_FIYATKODU := Value;
end;

function TFatKalemProperties.Get_STMUHDKOD: Integer;
begin
    Result := DefaultInterface.STMUHDKOD;
end;

procedure TFatKalemProperties.Set_STMUHDKOD(Value: Integer);
begin
  DefaultInterface.Set_STMUHDKOD(Value);
end;

function TFatKalemProperties.Get_SONGIRBFIAT: Double;
begin
    Result := DefaultInterface.SONGIRBFIAT;
end;

procedure TFatKalemProperties.Set_SONGIRBFIAT(Value: Double);
begin
  DefaultInterface.Set_SONGIRBFIAT(Value);
end;

function TFatKalemProperties.Get_OBR1: WideString;
begin
    Result := DefaultInterface.OBR1;
end;

procedure TFatKalemProperties.Set_OBR1(const Value: WideString);
  { Warning: The property OBR1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OBR1 := Value;
end;

function TFatKalemProperties.Get_OBR2: WideString;
begin
    Result := DefaultInterface.OBR2;
end;

procedure TFatKalemProperties.Set_OBR2(const Value: WideString);
  { Warning: The property OBR2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OBR2 := Value;
end;

function TFatKalemProperties.Get_OBR3: WideString;
begin
    Result := DefaultInterface.OBR3;
end;

procedure TFatKalemProperties.Set_OBR3(const Value: WideString);
  { Warning: The property OBR3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OBR3 := Value;
end;

function TFatKalemProperties.Get_SabitDepKod: Integer;
begin
    Result := DefaultInterface.SabitDepKod;
end;

procedure TFatKalemProperties.Set_SabitDepKod(Value: Integer);
begin
  DefaultInterface.Set_SabitDepKod(Value);
end;

function TFatKalemProperties.Get_DOVTIP: Integer;
begin
    Result := DefaultInterface.DOVTIP;
end;

procedure TFatKalemProperties.Set_DOVTIP(Value: Integer);
begin
  DefaultInterface.Set_DOVTIP(Value);
end;

function TFatKalemProperties.Get_DOVIZ_TURU: Integer;
begin
    Result := DefaultInterface.DOVIZ_TURU;
end;

procedure TFatKalemProperties.Set_DOVIZ_TURU(Value: Integer);
begin
  DefaultInterface.Set_DOVIZ_TURU(Value);
end;

function TFatKalemProperties.Get_Fiyatlar1: Double;
begin
    Result := DefaultInterface.Fiyatlar1;
end;

procedure TFatKalemProperties.Set_Fiyatlar1(Value: Double);
begin
  DefaultInterface.Set_Fiyatlar1(Value);
end;

function TFatKalemProperties.Get_Fiyatlar2: Double;
begin
    Result := DefaultInterface.Fiyatlar2;
end;

procedure TFatKalemProperties.Set_Fiyatlar2(Value: Double);
begin
  DefaultInterface.Set_Fiyatlar2(Value);
end;

function TFatKalemProperties.Get_Fiyatlar3: Double;
begin
    Result := DefaultInterface.Fiyatlar3;
end;

procedure TFatKalemProperties.Set_Fiyatlar3(Value: Double);
begin
  DefaultInterface.Set_Fiyatlar3(Value);
end;

function TFatKalemProperties.Get_Fiyatlar4: Double;
begin
    Result := DefaultInterface.Fiyatlar4;
end;

procedure TFatKalemProperties.Set_Fiyatlar4(Value: Double);
begin
  DefaultInterface.Set_Fiyatlar4(Value);
end;

function TFatKalemProperties.Get_Fiyatlar5: Double;
begin
    Result := DefaultInterface.Fiyatlar5;
end;

procedure TFatKalemProperties.Set_Fiyatlar5(Value: Double);
begin
  DefaultInterface.Set_Fiyatlar5(Value);
end;

function TFatKalemProperties.Get_Fiyatlar6: Double;
begin
    Result := DefaultInterface.Fiyatlar6;
end;

procedure TFatKalemProperties.Set_Fiyatlar6(Value: Double);
begin
  DefaultInterface.Set_Fiyatlar6(Value);
end;

function TFatKalemProperties.Get_Fiyatlar7: Double;
begin
    Result := DefaultInterface.Fiyatlar7;
end;

procedure TFatKalemProperties.Set_Fiyatlar7(Value: Double);
begin
  DefaultInterface.Set_Fiyatlar7(Value);
end;

function TFatKalemProperties.Get_Kilit: WideString;
begin
    Result := DefaultInterface.Kilit;
end;

procedure TFatKalemProperties.Set_Kilit(const Value: WideString);
  { Warning: The property Kilit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kilit := Value;
end;

function TFatKalemProperties.Get_SatisKDVOran: Double;
begin
    Result := DefaultInterface.SatisKDVOran;
end;

procedure TFatKalemProperties.Set_SatisKDVOran(Value: Double);
begin
  DefaultInterface.Set_SatisKDVOran(Value);
end;

function TFatKalemProperties.Get_AlisKDVOran: Double;
begin
    Result := DefaultInterface.AlisKDVOran;
end;

procedure TFatKalemProperties.Set_AlisKDVOran(Value: Double);
begin
  DefaultInterface.Set_AlisKDVOran(Value);
end;

function TFatKalemProperties.Get_Isk_Flag: TFatKalemIskTipi;
begin
    Result := DefaultInterface.Isk_Flag;
end;

procedure TFatKalemProperties.Set_Isk_Flag(Value: TFatKalemIskTipi);
begin
  DefaultInterface.Set_Isk_Flag(Value);
end;

function TFatKalemProperties.Get_SipTesKont: Integer;
begin
    Result := DefaultInterface.SipTesKont;
end;

procedure TFatKalemProperties.Set_SipTesKont(Value: Integer);
begin
  DefaultInterface.Set_SipTesKont(Value);
end;

function TFatKalemProperties.Get_Mamulmu: WideString;
begin
    Result := DefaultInterface.Mamulmu;
end;

procedure TFatKalemProperties.Set_Mamulmu(const Value: WideString);
  { Warning: The property Mamulmu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Mamulmu := Value;
end;

function TFatKalemProperties.Get_SeriTakibi: WideString;
begin
    Result := DefaultInterface.SeriTakibi;
end;

procedure TFatKalemProperties.Set_SeriTakibi(const Value: WideString);
  { Warning: The property SeriTakibi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SeriTakibi := Value;
end;

function TFatKalemProperties.Get_Stra_Exportmik: Double;
begin
    Result := DefaultInterface.Stra_Exportmik;
end;

procedure TFatKalemProperties.Set_Stra_Exportmik(Value: Double);
begin
  DefaultInterface.Set_Stra_Exportmik(Value);
end;

function TFatKalemProperties.Get_STra_SatIsk3: Double;
begin
    Result := DefaultInterface.STra_SatIsk3;
end;

procedure TFatKalemProperties.Set_STra_SatIsk3(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk3(Value);
end;

function TFatKalemProperties.Get_Stra_KosTar: TDateTime;
begin
    Result := DefaultInterface.Stra_KosTar;
end;

procedure TFatKalemProperties.Set_Stra_KosTar(Value: TDateTime);
begin
  DefaultInterface.Set_Stra_KosTar(Value);
end;

function TFatKalemProperties.Get_Stra_FiyatTar: TDateTime;
begin
    Result := DefaultInterface.Stra_FiyatTar;
end;

procedure TFatKalemProperties.Set_Stra_FiyatTar(Value: TDateTime);
begin
  DefaultInterface.Set_Stra_FiyatTar(Value);
end;

function TFatKalemProperties.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TFatKalemProperties.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TFatKalemProperties.Get_Kul_Mik: Double;
begin
    Result := DefaultInterface.Kul_Mik;
end;

procedure TFatKalemProperties.Set_Kul_Mik(Value: Double);
begin
  DefaultInterface.Set_Kul_Mik(Value);
end;

function TFatKalemProperties.Get_Fiat_birimi: Integer;
begin
    Result := DefaultInterface.Fiat_birimi;
end;

procedure TFatKalemProperties.Set_Fiat_birimi(Value: Integer);
begin
  DefaultInterface.Set_Fiat_birimi(Value);
end;

function TFatKalemProperties.Get_Satici_Kodu: WideString;
begin
    Result := DefaultInterface.Satici_Kodu;
end;

procedure TFatKalemProperties.Set_Satici_Kodu(const Value: WideString);
  { Warning: The property Satici_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Satici_Kodu := Value;
end;

function TFatKalemProperties.Get_Sat_IskTipleri1: Integer;
begin
    Result := DefaultInterface.Sat_IskTipleri1;
end;

procedure TFatKalemProperties.Set_Sat_IskTipleri1(Value: Integer);
begin
  DefaultInterface.Set_Sat_IskTipleri1(Value);
end;

function TFatKalemProperties.Get_Sat_IskTipleri2: Integer;
begin
    Result := DefaultInterface.Sat_IskTipleri2;
end;

procedure TFatKalemProperties.Set_Sat_IskTipleri2(Value: Integer);
begin
  DefaultInterface.Set_Sat_IskTipleri2(Value);
end;

function TFatKalemProperties.Get_Sat_IskTipleri3: Integer;
begin
    Result := DefaultInterface.Sat_IskTipleri3;
end;

procedure TFatKalemProperties.Set_Sat_IskTipleri3(Value: Integer);
begin
  DefaultInterface.Set_Sat_IskTipleri3(Value);
end;

function TFatKalemProperties.Get_Koli_Inc: Integer;
begin
    Result := DefaultInterface.Koli_Inc;
end;

procedure TFatKalemProperties.Set_Koli_Inc(Value: Integer);
begin
  DefaultInterface.Set_Koli_Inc(Value);
end;

function TFatKalemProperties.Get_KoliStok: WordBool;
begin
    Result := DefaultInterface.KoliStok;
end;

procedure TFatKalemProperties.Set_KoliStok(Value: WordBool);
begin
  DefaultInterface.Set_KoliStok(Value);
end;

function TFatKalemProperties.Get_Tur: WideString;
begin
    Result := DefaultInterface.Tur;
end;

procedure TFatKalemProperties.Set_Tur(const Value: WideString);
  { Warning: The property Tur has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tur := Value;
end;

function TFatKalemProperties.Get_Stra_FiiliTar: TDateTime;
begin
    Result := DefaultInterface.Stra_FiiliTar;
end;

procedure TFatKalemProperties.Set_Stra_FiiliTar(Value: TDateTime);
begin
  DefaultInterface.Set_Stra_FiiliTar(Value);
end;

function TFatKalemProperties.Get_BirimPuan: Integer;
begin
    Result := DefaultInterface.BirimPuan;
end;

procedure TFatKalemProperties.Set_BirimPuan(Value: Integer);
begin
  DefaultInterface.Set_BirimPuan(Value);
end;

function TFatKalemProperties.Get_PuanDeger: Double;
begin
    Result := DefaultInterface.PuanDeger;
end;

procedure TFatKalemProperties.Set_PuanDeger(Value: Double);
begin
  DefaultInterface.Set_PuanDeger(Value);
end;

function TFatKalemProperties.Get_KalemGenIskOran1: Double;
begin
    Result := DefaultInterface.KalemGenIskOran1;
end;

procedure TFatKalemProperties.Set_KalemGenIskOran1(Value: Double);
begin
  DefaultInterface.Set_KalemGenIskOran1(Value);
end;

function TFatKalemProperties.Get_KalemGenIskOran2: Double;
begin
    Result := DefaultInterface.KalemGenIskOran2;
end;

procedure TFatKalemProperties.Set_KalemGenIskOran2(Value: Double);
begin
  DefaultInterface.Set_KalemGenIskOran2(Value);
end;

function TFatKalemProperties.Get_KalemGenIskOran3: Double;
begin
    Result := DefaultInterface.KalemGenIskOran3;
end;

procedure TFatKalemProperties.Set_KalemGenIskOran3(Value: Double);
begin
  DefaultInterface.Set_KalemGenIskOran3(Value);
end;

function TFatKalemProperties.Get_OtvFlag: Integer;
begin
    Result := DefaultInterface.OtvFlag;
end;

procedure TFatKalemProperties.Set_OtvFlag(Value: Integer);
begin
  DefaultInterface.Set_OtvFlag(Value);
end;

function TFatKalemProperties.Get_Otvtut: Double;
begin
    Result := DefaultInterface.Otvtut;
end;

procedure TFatKalemProperties.Set_Otvtut(Value: Double);
begin
  DefaultInterface.Set_Otvtut(Value);
end;

function TFatKalemProperties.Get_STra_SatIsk4: Double;
begin
    Result := DefaultInterface.STra_SatIsk4;
end;

procedure TFatKalemProperties.Set_STra_SatIsk4(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk4(Value);
end;

function TFatKalemProperties.Get_STra_SatIsk5: Double;
begin
    Result := DefaultInterface.STra_SatIsk5;
end;

procedure TFatKalemProperties.Set_STra_SatIsk5(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk5(Value);
end;

function TFatKalemProperties.Get_STra_SatIsk6: Double;
begin
    Result := DefaultInterface.STra_SatIsk6;
end;

procedure TFatKalemProperties.Set_STra_SatIsk6(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk6(Value);
end;

function TFatKalemProperties.Get_Kull1S: WideString;
begin
    Result := DefaultInterface.Kull1S;
end;

procedure TFatKalemProperties.Set_Kull1S(const Value: WideString);
  { Warning: The property Kull1S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull1S := Value;
end;

function TFatKalemProperties.Get_KKMalF: Double;
begin
    Result := DefaultInterface.KKMalF;
end;

procedure TFatKalemProperties.Set_KKMalF(Value: Double);
begin
  DefaultInterface.Set_KKMalF(Value);
end;

function TFatKalemProperties.Get_Stra_FiyatBirimi: Integer;
begin
    Result := DefaultInterface.Stra_FiyatBirimi;
end;

procedure TFatKalemProperties.Set_Stra_FiyatBirimi(Value: Integer);
begin
  DefaultInterface.Set_Stra_FiyatBirimi(Value);
end;

function TFatKalemProperties.Get_Stra_IrsKont: Integer;
begin
    Result := DefaultInterface.Stra_IrsKont;
end;

procedure TFatKalemProperties.Set_Stra_IrsKont(Value: Integer);
begin
  DefaultInterface.Set_Stra_IrsKont(Value);
end;

function TFatKalemProperties.Get_SatisKilit: WideString;
begin
    Result := DefaultInterface.SatisKilit;
end;

procedure TFatKalemProperties.Set_SatisKilit(const Value: WideString);
  { Warning: The property SatisKilit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SatisKilit := Value;
end;

function TFatKalemProperties.Get_Payda_1: Double;
begin
    Result := DefaultInterface.Payda_1;
end;

procedure TFatKalemProperties.Set_Payda_1(Value: Double);
begin
  DefaultInterface.Set_Payda_1(Value);
end;

function TFatKalemProperties.Get_SatirBaziAcik(Index: Integer): WideString;
begin
    Result := DefaultInterface.SatirBaziAcik[Index];
end;

procedure TFatKalemProperties.Set_SatirBaziAcik(Index: Integer; const Value: WideString);
  { Warning: The property SatirBaziAcik has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SatirBaziAcik := Value;
end;

function TFatKalemProperties.Get_D_YEDEK10: TDateTime;
begin
    Result := DefaultInterface.D_YEDEK10;
end;

procedure TFatKalemProperties.Set_D_YEDEK10(Value: TDateTime);
begin
  DefaultInterface.Set_D_YEDEK10(Value);
end;

function TFatKalemProperties.Get_Sat_IskTipleri4: Integer;
begin
    Result := DefaultInterface.Sat_IskTipleri4;
end;

procedure TFatKalemProperties.Set_Sat_IskTipleri4(Value: Integer);
begin
  DefaultInterface.Set_Sat_IskTipleri4(Value);
end;

function TFatKalemProperties.Get_Sat_IskTipleri5: Integer;
begin
    Result := DefaultInterface.Sat_IskTipleri5;
end;

procedure TFatKalemProperties.Set_Sat_IskTipleri5(Value: Integer);
begin
  DefaultInterface.Set_Sat_IskTipleri5(Value);
end;

function TFatKalemProperties.Get_Sat_IskTipleri6: Integer;
begin
    Result := DefaultInterface.Sat_IskTipleri6;
end;

procedure TFatKalemProperties.Set_Sat_IskTipleri6(Value: Integer);
begin
  DefaultInterface.Set_Sat_IskTipleri6(Value);
end;

function TFatKalemProperties.Get_YapKod: WideString;
begin
    Result := DefaultInterface.YapKod;
end;

procedure TFatKalemProperties.Set_YapKod(const Value: WideString);
  { Warning: The property YapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YapKod := Value;
end;

function TFatKalemProperties.Get_EsnekMi: WordBool;
begin
    Result := DefaultInterface.EsnekMi;
end;

function TFatKalemProperties.Get_SeriSayisi: Integer;
begin
    Result := DefaultInterface.SeriSayisi;
end;

function TFatKalemProperties.Get_BRCevrim(Index: Integer): Double;
begin
    Result := DefaultInterface.BRCevrim[Index];
end;

{$ENDIF}

class function CoCari.Create: ICari;
begin
  Result := CreateComObject(CLASS_Cari) as ICari;
end;

class function CoCari.CreateRemote(const MachineName: string): ICari;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Cari) as ICari;
end;

procedure TCari.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8BC1D6CC-8715-4928-B03D-F268AA783C71}';
    IntfIID:   '{1EE7579F-7165-41F4-A61D-AF145320E444}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCari.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICari;
  end;
end;

procedure TCari.ConnectTo(svrIntf: ICari);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCari.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCari.GetDefaultInterface: ICari;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCari.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCariProperties.Create(Self);
{$ENDIF}
end;

destructor TCari.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCari.GetServerProperties: TCariProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCari.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TCari.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCari.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TCari.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TCari.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TCari.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

procedure TCari.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TCari.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TCari.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TCari.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TCari.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TCari.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TCari.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

function TCari.TemelBilgi: ICariTemelBilgi;
begin
  Result := DefaultInterface.TemelBilgi;
end;

function TCari.EkBilgi: ICariEkBilgi;
begin
  Result := DefaultInterface.EkBilgi;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCariProperties.Create(AServer: TCari);
begin
  inherited Create;
  FServer := AServer;
end;

function TCariProperties.GetDefaultInterface: ICari;
begin
  Result := FServer.DefaultInterface;
end;

function TCariProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TCariProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCariProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TCariProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TCariProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TCariProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

{$ENDIF}

class function CoCariTemelBilgi.Create: ICariTemelBilgi;
begin
  Result := CreateComObject(CLASS_CariTemelBilgi) as ICariTemelBilgi;
end;

class function CoCariTemelBilgi.CreateRemote(const MachineName: string): ICariTemelBilgi;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CariTemelBilgi) as ICariTemelBilgi;
end;

procedure TCariTemelBilgi.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6E14BA68-5C7B-4609-B419-9638FA9421C2}';
    IntfIID:   '{EB7420DC-9C87-4810-B460-767A13067212}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCariTemelBilgi.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICariTemelBilgi;
  end;
end;

procedure TCariTemelBilgi.ConnectTo(svrIntf: ICariTemelBilgi);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCariTemelBilgi.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCariTemelBilgi.GetDefaultInterface: ICariTemelBilgi;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCariTemelBilgi.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCariTemelBilgiProperties.Create(Self);
{$ENDIF}
end;

destructor TCariTemelBilgi.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCariTemelBilgi.GetServerProperties: TCariTemelBilgiProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCariTemelBilgi.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TCariTemelBilgi.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCariTemelBilgi.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TCariTemelBilgi.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TCariTemelBilgi.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TCariTemelBilgi.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TCariTemelBilgi.Get_ISLETME_KODU: Integer;
begin
    Result := DefaultInterface.ISLETME_KODU;
end;

procedure TCariTemelBilgi.Set_ISLETME_KODU(Value: Integer);
begin
  DefaultInterface.Set_ISLETME_KODU(Value);
end;

function TCariTemelBilgi.Get_CARI_KOD: WideString;
begin
    Result := DefaultInterface.CARI_KOD;
end;

procedure TCariTemelBilgi.Set_CARI_KOD(const Value: WideString);
  { Warning: The property CARI_KOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_KOD := Value;
end;

function TCariTemelBilgi.Get_CARI_TEL: WideString;
begin
    Result := DefaultInterface.CARI_TEL;
end;

procedure TCariTemelBilgi.Set_CARI_TEL(const Value: WideString);
  { Warning: The property CARI_TEL has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_TEL := Value;
end;

function TCariTemelBilgi.Get_CARI_IL: WideString;
begin
    Result := DefaultInterface.CARI_IL;
end;

procedure TCariTemelBilgi.Set_CARI_IL(const Value: WideString);
  { Warning: The property CARI_IL has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_IL := Value;
end;

function TCariTemelBilgi.Get_ULKE_KODU: WideString;
begin
    Result := DefaultInterface.ULKE_KODU;
end;

procedure TCariTemelBilgi.Set_ULKE_KODU(const Value: WideString);
  { Warning: The property ULKE_KODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ULKE_KODU := Value;
end;

function TCariTemelBilgi.Get_CARI_ISIM: WideString;
begin
    Result := DefaultInterface.CARI_ISIM;
end;

procedure TCariTemelBilgi.Set_CARI_ISIM(const Value: WideString);
  { Warning: The property CARI_ISIM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_ISIM := Value;
end;

function TCariTemelBilgi.Get_CARI_TIP: WideString;
begin
    Result := DefaultInterface.CARI_TIP;
end;

procedure TCariTemelBilgi.Set_CARI_TIP(const Value: WideString);
  { Warning: The property CARI_TIP has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_TIP := Value;
end;

function TCariTemelBilgi.Get_Grup_Kodu: WideString;
begin
    Result := DefaultInterface.Grup_Kodu;
end;

procedure TCariTemelBilgi.Set_Grup_Kodu(const Value: WideString);
  { Warning: The property Grup_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Grup_Kodu := Value;
end;

function TCariTemelBilgi.Get_RAPOR_KODU1: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU1;
end;

procedure TCariTemelBilgi.Set_RAPOR_KODU1(const Value: WideString);
  { Warning: The property RAPOR_KODU1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU1 := Value;
end;

function TCariTemelBilgi.Get_RAPOR_KODU2: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU2;
end;

procedure TCariTemelBilgi.Set_RAPOR_KODU2(const Value: WideString);
  { Warning: The property RAPOR_KODU2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU2 := Value;
end;

function TCariTemelBilgi.Get_RAPOR_KODU3: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU3;
end;

procedure TCariTemelBilgi.Set_RAPOR_KODU3(const Value: WideString);
  { Warning: The property RAPOR_KODU3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU3 := Value;
end;

function TCariTemelBilgi.Get_RAPOR_KODU4: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU4;
end;

procedure TCariTemelBilgi.Set_RAPOR_KODU4(const Value: WideString);
  { Warning: The property RAPOR_KODU4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU4 := Value;
end;

function TCariTemelBilgi.Get_RAPOR_KODU5: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU5;
end;

procedure TCariTemelBilgi.Set_RAPOR_KODU5(const Value: WideString);
  { Warning: The property RAPOR_KODU5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU5 := Value;
end;

function TCariTemelBilgi.Get_CARI_ADRES: WideString;
begin
    Result := DefaultInterface.CARI_ADRES;
end;

procedure TCariTemelBilgi.Set_CARI_ADRES(const Value: WideString);
  { Warning: The property CARI_ADRES has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_ADRES := Value;
end;

function TCariTemelBilgi.Get_CARI_ILCE: WideString;
begin
    Result := DefaultInterface.CARI_ILCE;
end;

procedure TCariTemelBilgi.Set_CARI_ILCE(const Value: WideString);
  { Warning: The property CARI_ILCE has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_ILCE := Value;
end;

function TCariTemelBilgi.Get_VERGI_DAIRESI: WideString;
begin
    Result := DefaultInterface.VERGI_DAIRESI;
end;

procedure TCariTemelBilgi.Set_VERGI_DAIRESI(const Value: WideString);
  { Warning: The property VERGI_DAIRESI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VERGI_DAIRESI := Value;
end;

function TCariTemelBilgi.Get_VERGI_NUMARASI: WideString;
begin
    Result := DefaultInterface.VERGI_NUMARASI;
end;

procedure TCariTemelBilgi.Set_VERGI_NUMARASI(const Value: WideString);
  { Warning: The property VERGI_NUMARASI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VERGI_NUMARASI := Value;
end;

function TCariTemelBilgi.Get_FAX: WideString;
begin
    Result := DefaultInterface.FAX;
end;

procedure TCariTemelBilgi.Set_FAX(const Value: WideString);
  { Warning: The property FAX has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FAX := Value;
end;

function TCariTemelBilgi.Get_POSTAKODU: WideString;
begin
    Result := DefaultInterface.POSTAKODU;
end;

procedure TCariTemelBilgi.Set_POSTAKODU(const Value: WideString);
  { Warning: The property POSTAKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.POSTAKODU := Value;
end;

function TCariTemelBilgi.Get_DETAY_KODU: Integer;
begin
    Result := DefaultInterface.DETAY_KODU;
end;

procedure TCariTemelBilgi.Set_DETAY_KODU(Value: Integer);
begin
  DefaultInterface.Set_DETAY_KODU(Value);
end;

function TCariTemelBilgi.Get_NAKLIYE_KATSAYISI: Double;
begin
    Result := DefaultInterface.NAKLIYE_KATSAYISI;
end;

procedure TCariTemelBilgi.Set_NAKLIYE_KATSAYISI(Value: Double);
begin
  DefaultInterface.Set_NAKLIYE_KATSAYISI(Value);
end;

function TCariTemelBilgi.Get_RISK_SINIRI: Double;
begin
    Result := DefaultInterface.RISK_SINIRI;
end;

procedure TCariTemelBilgi.Set_RISK_SINIRI(Value: Double);
begin
  DefaultInterface.Set_RISK_SINIRI(Value);
end;

function TCariTemelBilgi.Get_TEMINATI: Double;
begin
    Result := DefaultInterface.TEMINATI;
end;

procedure TCariTemelBilgi.Set_TEMINATI(Value: Double);
begin
  DefaultInterface.Set_TEMINATI(Value);
end;

function TCariTemelBilgi.Get_CARISK: Double;
begin
    Result := DefaultInterface.CARISK;
end;

procedure TCariTemelBilgi.Set_CARISK(Value: Double);
begin
  DefaultInterface.Set_CARISK(Value);
end;

function TCariTemelBilgi.Get_CCRISK: Double;
begin
    Result := DefaultInterface.CCRISK;
end;

procedure TCariTemelBilgi.Set_CCRISK(Value: Double);
begin
  DefaultInterface.Set_CCRISK(Value);
end;

function TCariTemelBilgi.Get_SARISK: Double;
begin
    Result := DefaultInterface.SARISK;
end;

procedure TCariTemelBilgi.Set_SARISK(Value: Double);
begin
  DefaultInterface.Set_SARISK(Value);
end;

function TCariTemelBilgi.Get_SCRISK: Double;
begin
    Result := DefaultInterface.SCRISK;
end;

procedure TCariTemelBilgi.Set_SCRISK(Value: Double);
begin
  DefaultInterface.Set_SCRISK(Value);
end;

function TCariTemelBilgi.Get_CM_BORCT: Double;
begin
    Result := DefaultInterface.CM_BORCT;
end;

procedure TCariTemelBilgi.Set_CM_BORCT(Value: Double);
begin
  DefaultInterface.Set_CM_BORCT(Value);
end;

function TCariTemelBilgi.Get_CM_ALACT: Double;
begin
    Result := DefaultInterface.CM_ALACT;
end;

procedure TCariTemelBilgi.Set_CM_ALACT(Value: Double);
begin
  DefaultInterface.Set_CM_ALACT(Value);
end;

function TCariTemelBilgi.Get_CM_RAP_TARIH: TDateTime;
begin
    Result := DefaultInterface.CM_RAP_TARIH;
end;

procedure TCariTemelBilgi.Set_CM_RAP_TARIH(Value: TDateTime);
begin
  DefaultInterface.Set_CM_RAP_TARIH(Value);
end;

function TCariTemelBilgi.Get_KOSULKODU: WideString;
begin
    Result := DefaultInterface.KOSULKODU;
end;

procedure TCariTemelBilgi.Set_KOSULKODU(const Value: WideString);
  { Warning: The property KOSULKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOSULKODU := Value;
end;

function TCariTemelBilgi.Get_ISKONTO_ORANI: Double;
begin
    Result := DefaultInterface.ISKONTO_ORANI;
end;

procedure TCariTemelBilgi.Set_ISKONTO_ORANI(Value: Double);
begin
  DefaultInterface.Set_ISKONTO_ORANI(Value);
end;

function TCariTemelBilgi.Get_VADE_GUNU: Integer;
begin
    Result := DefaultInterface.VADE_GUNU;
end;

procedure TCariTemelBilgi.Set_VADE_GUNU(Value: Integer);
begin
  DefaultInterface.Set_VADE_GUNU(Value);
end;

function TCariTemelBilgi.Get_LISTE_FIATI: Integer;
begin
    Result := DefaultInterface.LISTE_FIATI;
end;

procedure TCariTemelBilgi.Set_LISTE_FIATI(Value: Integer);
begin
  DefaultInterface.Set_LISTE_FIATI(Value);
end;

function TCariTemelBilgi.Get_ACIK1: WideString;
begin
    Result := DefaultInterface.ACIK1;
end;

procedure TCariTemelBilgi.Set_ACIK1(const Value: WideString);
  { Warning: The property ACIK1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ACIK1 := Value;
end;

function TCariTemelBilgi.Get_ACIK2: WideString;
begin
    Result := DefaultInterface.ACIK2;
end;

procedure TCariTemelBilgi.Set_ACIK2(const Value: WideString);
  { Warning: The property ACIK2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ACIK2 := Value;
end;

function TCariTemelBilgi.Get_ACIK3: WideString;
begin
    Result := DefaultInterface.ACIK3;
end;

procedure TCariTemelBilgi.Set_ACIK3(const Value: WideString);
  { Warning: The property ACIK3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ACIK3 := Value;
end;

function TCariTemelBilgi.Get_M_KOD: WideString;
begin
    Result := DefaultInterface.M_KOD;
end;

procedure TCariTemelBilgi.Set_M_KOD(const Value: WideString);
  { Warning: The property M_KOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.M_KOD := Value;
end;

function TCariTemelBilgi.Get_DOVIZ_TIPI: Integer;
begin
    Result := DefaultInterface.DOVIZ_TIPI;
end;

procedure TCariTemelBilgi.Set_DOVIZ_TIPI(Value: Integer);
begin
  DefaultInterface.Set_DOVIZ_TIPI(Value);
end;

function TCariTemelBilgi.Get_DOVIZ_TURU: Integer;
begin
    Result := DefaultInterface.DOVIZ_TURU;
end;

procedure TCariTemelBilgi.Set_DOVIZ_TURU(Value: Integer);
begin
  DefaultInterface.Set_DOVIZ_TURU(Value);
end;

function TCariTemelBilgi.Get_HESAPTUTMASEKLI: WideString;
begin
    Result := DefaultInterface.HESAPTUTMASEKLI;
end;

procedure TCariTemelBilgi.Set_HESAPTUTMASEKLI(const Value: WideString);
  { Warning: The property HESAPTUTMASEKLI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HESAPTUTMASEKLI := Value;
end;

function TCariTemelBilgi.Get_DOVIZLIMI: WideString;
begin
    Result := DefaultInterface.DOVIZLIMI;
end;

procedure TCariTemelBilgi.Set_DOVIZLIMI(const Value: WideString);
  { Warning: The property DOVIZLIMI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DOVIZLIMI := Value;
end;

function TCariTemelBilgi.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TCariTemelBilgi.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TCariTemelBilgi.Get_Plasiyer_Kodu: WideString;
begin
    Result := DefaultInterface.Plasiyer_Kodu;
end;

procedure TCariTemelBilgi.Set_Plasiyer_Kodu(const Value: WideString);
  { Warning: The property Plasiyer_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer_Kodu := Value;
end;

function TCariTemelBilgi.Get_LOKALDEPO: Integer;
begin
    Result := DefaultInterface.LOKALDEPO;
end;

procedure TCariTemelBilgi.Set_LOKALDEPO(Value: Integer);
begin
  DefaultInterface.Set_LOKALDEPO(Value);
end;

function TCariTemelBilgi.Get_EMAIL: WideString;
begin
    Result := DefaultInterface.EMAIL;
end;

procedure TCariTemelBilgi.Set_EMAIL(const Value: WideString);
  { Warning: The property EMAIL has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EMAIL := Value;
end;

function TCariTemelBilgi.Get_WEB: WideString;
begin
    Result := DefaultInterface.WEB;
end;

procedure TCariTemelBilgi.Set_WEB(const Value: WideString);
  { Warning: The property WEB has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WEB := Value;
end;

function TCariTemelBilgi.Get_KURFARKIBORC: WideString;
begin
    Result := DefaultInterface.KURFARKIBORC;
end;

procedure TCariTemelBilgi.Set_KURFARKIBORC(const Value: WideString);
  { Warning: The property KURFARKIBORC has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KURFARKIBORC := Value;
end;

function TCariTemelBilgi.Get_KURFARKIALAC: WideString;
begin
    Result := DefaultInterface.KURFARKIALAC;
end;

procedure TCariTemelBilgi.Set_KURFARKIALAC(const Value: WideString);
  { Warning: The property KURFARKIALAC has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KURFARKIALAC := Value;
end;

function TCariTemelBilgi.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TCariTemelBilgi.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TCariTemelBilgi.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TCariTemelBilgi.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TCariTemelBilgi.Get_F_Yedek1: Double;
begin
    Result := DefaultInterface.F_Yedek1;
end;

procedure TCariTemelBilgi.Set_F_Yedek1(Value: Double);
begin
  DefaultInterface.Set_F_Yedek1(Value);
end;

function TCariTemelBilgi.Get_F_Yedek2: Double;
begin
    Result := DefaultInterface.F_Yedek2;
end;

procedure TCariTemelBilgi.Set_F_Yedek2(Value: Double);
begin
  DefaultInterface.Set_F_Yedek2(Value);
end;

function TCariTemelBilgi.Get_C_Yedek1: WideString;
begin
    Result := DefaultInterface.C_Yedek1;
end;

procedure TCariTemelBilgi.Set_C_Yedek1(const Value: WideString);
  { Warning: The property C_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek1 := Value;
end;

function TCariTemelBilgi.Get_C_Yedek2: WideString;
begin
    Result := DefaultInterface.C_Yedek2;
end;

procedure TCariTemelBilgi.Set_C_Yedek2(const Value: WideString);
  { Warning: The property C_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek2 := Value;
end;

function TCariTemelBilgi.Get_B_Yedek1: Integer;
begin
    Result := DefaultInterface.B_Yedek1;
end;

procedure TCariTemelBilgi.Set_B_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_B_Yedek1(Value);
end;

function TCariTemelBilgi.Get_I_Yedek1: Integer;
begin
    Result := DefaultInterface.I_Yedek1;
end;

procedure TCariTemelBilgi.Set_I_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek1(Value);
end;

function TCariTemelBilgi.Get_L_Yedek1: Integer;
begin
    Result := DefaultInterface.L_Yedek1;
end;

procedure TCariTemelBilgi.Set_L_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_L_Yedek1(Value);
end;

function TCariTemelBilgi.Get_FIYATGRUBU: WideString;
begin
    Result := DefaultInterface.FIYATGRUBU;
end;

procedure TCariTemelBilgi.Set_FIYATGRUBU(const Value: WideString);
  { Warning: The property FIYATGRUBU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FIYATGRUBU := Value;
end;

function TCariTemelBilgi.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TCariTemelBilgi.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TCariTemelBilgi.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TCariTemelBilgi.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TCariTemelBilgi.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TCariTemelBilgi.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TCariTemelBilgi.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TCariTemelBilgi.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TCariTemelBilgi.Get_ODEMETIPI: Integer;
begin
    Result := DefaultInterface.ODEMETIPI;
end;

procedure TCariTemelBilgi.Set_ODEMETIPI(Value: Integer);
begin
  DefaultInterface.Set_ODEMETIPI(Value);
end;

function TCariTemelBilgi.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TCariTemelBilgi.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TCariTemelBilgi.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TCariTemelBilgi.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

function TCariTemelBilgi.Get_MUSTERIBAZIKDV: WideString;
begin
    Result := DefaultInterface.MUSTERIBAZIKDV;
end;

procedure TCariTemelBilgi.Set_MUSTERIBAZIKDV(const Value: WideString);
  { Warning: The property MUSTERIBAZIKDV has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MUSTERIBAZIKDV := Value;
end;

function TCariTemelBilgi.Get_AGIRLIK_ISK: Double;
begin
    Result := DefaultInterface.AGIRLIK_ISK;
end;

procedure TCariTemelBilgi.Set_AGIRLIK_ISK(Value: Double);
begin
  DefaultInterface.Set_AGIRLIK_ISK(Value);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCariTemelBilgiProperties.Create(AServer: TCariTemelBilgi);
begin
  inherited Create;
  FServer := AServer;
end;

function TCariTemelBilgiProperties.GetDefaultInterface: ICariTemelBilgi;
begin
  Result := FServer.DefaultInterface;
end;

function TCariTemelBilgiProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TCariTemelBilgiProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCariTemelBilgiProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TCariTemelBilgiProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TCariTemelBilgiProperties.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TCariTemelBilgiProperties.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TCariTemelBilgiProperties.Get_ISLETME_KODU: Integer;
begin
    Result := DefaultInterface.ISLETME_KODU;
end;

procedure TCariTemelBilgiProperties.Set_ISLETME_KODU(Value: Integer);
begin
  DefaultInterface.Set_ISLETME_KODU(Value);
end;

function TCariTemelBilgiProperties.Get_CARI_KOD: WideString;
begin
    Result := DefaultInterface.CARI_KOD;
end;

procedure TCariTemelBilgiProperties.Set_CARI_KOD(const Value: WideString);
  { Warning: The property CARI_KOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_KOD := Value;
end;

function TCariTemelBilgiProperties.Get_CARI_TEL: WideString;
begin
    Result := DefaultInterface.CARI_TEL;
end;

procedure TCariTemelBilgiProperties.Set_CARI_TEL(const Value: WideString);
  { Warning: The property CARI_TEL has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_TEL := Value;
end;

function TCariTemelBilgiProperties.Get_CARI_IL: WideString;
begin
    Result := DefaultInterface.CARI_IL;
end;

procedure TCariTemelBilgiProperties.Set_CARI_IL(const Value: WideString);
  { Warning: The property CARI_IL has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_IL := Value;
end;

function TCariTemelBilgiProperties.Get_ULKE_KODU: WideString;
begin
    Result := DefaultInterface.ULKE_KODU;
end;

procedure TCariTemelBilgiProperties.Set_ULKE_KODU(const Value: WideString);
  { Warning: The property ULKE_KODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ULKE_KODU := Value;
end;

function TCariTemelBilgiProperties.Get_CARI_ISIM: WideString;
begin
    Result := DefaultInterface.CARI_ISIM;
end;

procedure TCariTemelBilgiProperties.Set_CARI_ISIM(const Value: WideString);
  { Warning: The property CARI_ISIM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_ISIM := Value;
end;

function TCariTemelBilgiProperties.Get_CARI_TIP: WideString;
begin
    Result := DefaultInterface.CARI_TIP;
end;

procedure TCariTemelBilgiProperties.Set_CARI_TIP(const Value: WideString);
  { Warning: The property CARI_TIP has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_TIP := Value;
end;

function TCariTemelBilgiProperties.Get_Grup_Kodu: WideString;
begin
    Result := DefaultInterface.Grup_Kodu;
end;

procedure TCariTemelBilgiProperties.Set_Grup_Kodu(const Value: WideString);
  { Warning: The property Grup_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Grup_Kodu := Value;
end;

function TCariTemelBilgiProperties.Get_RAPOR_KODU1: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU1;
end;

procedure TCariTemelBilgiProperties.Set_RAPOR_KODU1(const Value: WideString);
  { Warning: The property RAPOR_KODU1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU1 := Value;
end;

function TCariTemelBilgiProperties.Get_RAPOR_KODU2: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU2;
end;

procedure TCariTemelBilgiProperties.Set_RAPOR_KODU2(const Value: WideString);
  { Warning: The property RAPOR_KODU2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU2 := Value;
end;

function TCariTemelBilgiProperties.Get_RAPOR_KODU3: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU3;
end;

procedure TCariTemelBilgiProperties.Set_RAPOR_KODU3(const Value: WideString);
  { Warning: The property RAPOR_KODU3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU3 := Value;
end;

function TCariTemelBilgiProperties.Get_RAPOR_KODU4: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU4;
end;

procedure TCariTemelBilgiProperties.Set_RAPOR_KODU4(const Value: WideString);
  { Warning: The property RAPOR_KODU4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU4 := Value;
end;

function TCariTemelBilgiProperties.Get_RAPOR_KODU5: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU5;
end;

procedure TCariTemelBilgiProperties.Set_RAPOR_KODU5(const Value: WideString);
  { Warning: The property RAPOR_KODU5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU5 := Value;
end;

function TCariTemelBilgiProperties.Get_CARI_ADRES: WideString;
begin
    Result := DefaultInterface.CARI_ADRES;
end;

procedure TCariTemelBilgiProperties.Set_CARI_ADRES(const Value: WideString);
  { Warning: The property CARI_ADRES has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_ADRES := Value;
end;

function TCariTemelBilgiProperties.Get_CARI_ILCE: WideString;
begin
    Result := DefaultInterface.CARI_ILCE;
end;

procedure TCariTemelBilgiProperties.Set_CARI_ILCE(const Value: WideString);
  { Warning: The property CARI_ILCE has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_ILCE := Value;
end;

function TCariTemelBilgiProperties.Get_VERGI_DAIRESI: WideString;
begin
    Result := DefaultInterface.VERGI_DAIRESI;
end;

procedure TCariTemelBilgiProperties.Set_VERGI_DAIRESI(const Value: WideString);
  { Warning: The property VERGI_DAIRESI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VERGI_DAIRESI := Value;
end;

function TCariTemelBilgiProperties.Get_VERGI_NUMARASI: WideString;
begin
    Result := DefaultInterface.VERGI_NUMARASI;
end;

procedure TCariTemelBilgiProperties.Set_VERGI_NUMARASI(const Value: WideString);
  { Warning: The property VERGI_NUMARASI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VERGI_NUMARASI := Value;
end;

function TCariTemelBilgiProperties.Get_FAX: WideString;
begin
    Result := DefaultInterface.FAX;
end;

procedure TCariTemelBilgiProperties.Set_FAX(const Value: WideString);
  { Warning: The property FAX has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FAX := Value;
end;

function TCariTemelBilgiProperties.Get_POSTAKODU: WideString;
begin
    Result := DefaultInterface.POSTAKODU;
end;

procedure TCariTemelBilgiProperties.Set_POSTAKODU(const Value: WideString);
  { Warning: The property POSTAKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.POSTAKODU := Value;
end;

function TCariTemelBilgiProperties.Get_DETAY_KODU: Integer;
begin
    Result := DefaultInterface.DETAY_KODU;
end;

procedure TCariTemelBilgiProperties.Set_DETAY_KODU(Value: Integer);
begin
  DefaultInterface.Set_DETAY_KODU(Value);
end;

function TCariTemelBilgiProperties.Get_NAKLIYE_KATSAYISI: Double;
begin
    Result := DefaultInterface.NAKLIYE_KATSAYISI;
end;

procedure TCariTemelBilgiProperties.Set_NAKLIYE_KATSAYISI(Value: Double);
begin
  DefaultInterface.Set_NAKLIYE_KATSAYISI(Value);
end;

function TCariTemelBilgiProperties.Get_RISK_SINIRI: Double;
begin
    Result := DefaultInterface.RISK_SINIRI;
end;

procedure TCariTemelBilgiProperties.Set_RISK_SINIRI(Value: Double);
begin
  DefaultInterface.Set_RISK_SINIRI(Value);
end;

function TCariTemelBilgiProperties.Get_TEMINATI: Double;
begin
    Result := DefaultInterface.TEMINATI;
end;

procedure TCariTemelBilgiProperties.Set_TEMINATI(Value: Double);
begin
  DefaultInterface.Set_TEMINATI(Value);
end;

function TCariTemelBilgiProperties.Get_CARISK: Double;
begin
    Result := DefaultInterface.CARISK;
end;

procedure TCariTemelBilgiProperties.Set_CARISK(Value: Double);
begin
  DefaultInterface.Set_CARISK(Value);
end;

function TCariTemelBilgiProperties.Get_CCRISK: Double;
begin
    Result := DefaultInterface.CCRISK;
end;

procedure TCariTemelBilgiProperties.Set_CCRISK(Value: Double);
begin
  DefaultInterface.Set_CCRISK(Value);
end;

function TCariTemelBilgiProperties.Get_SARISK: Double;
begin
    Result := DefaultInterface.SARISK;
end;

procedure TCariTemelBilgiProperties.Set_SARISK(Value: Double);
begin
  DefaultInterface.Set_SARISK(Value);
end;

function TCariTemelBilgiProperties.Get_SCRISK: Double;
begin
    Result := DefaultInterface.SCRISK;
end;

procedure TCariTemelBilgiProperties.Set_SCRISK(Value: Double);
begin
  DefaultInterface.Set_SCRISK(Value);
end;

function TCariTemelBilgiProperties.Get_CM_BORCT: Double;
begin
    Result := DefaultInterface.CM_BORCT;
end;

procedure TCariTemelBilgiProperties.Set_CM_BORCT(Value: Double);
begin
  DefaultInterface.Set_CM_BORCT(Value);
end;

function TCariTemelBilgiProperties.Get_CM_ALACT: Double;
begin
    Result := DefaultInterface.CM_ALACT;
end;

procedure TCariTemelBilgiProperties.Set_CM_ALACT(Value: Double);
begin
  DefaultInterface.Set_CM_ALACT(Value);
end;

function TCariTemelBilgiProperties.Get_CM_RAP_TARIH: TDateTime;
begin
    Result := DefaultInterface.CM_RAP_TARIH;
end;

procedure TCariTemelBilgiProperties.Set_CM_RAP_TARIH(Value: TDateTime);
begin
  DefaultInterface.Set_CM_RAP_TARIH(Value);
end;

function TCariTemelBilgiProperties.Get_KOSULKODU: WideString;
begin
    Result := DefaultInterface.KOSULKODU;
end;

procedure TCariTemelBilgiProperties.Set_KOSULKODU(const Value: WideString);
  { Warning: The property KOSULKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOSULKODU := Value;
end;

function TCariTemelBilgiProperties.Get_ISKONTO_ORANI: Double;
begin
    Result := DefaultInterface.ISKONTO_ORANI;
end;

procedure TCariTemelBilgiProperties.Set_ISKONTO_ORANI(Value: Double);
begin
  DefaultInterface.Set_ISKONTO_ORANI(Value);
end;

function TCariTemelBilgiProperties.Get_VADE_GUNU: Integer;
begin
    Result := DefaultInterface.VADE_GUNU;
end;

procedure TCariTemelBilgiProperties.Set_VADE_GUNU(Value: Integer);
begin
  DefaultInterface.Set_VADE_GUNU(Value);
end;

function TCariTemelBilgiProperties.Get_LISTE_FIATI: Integer;
begin
    Result := DefaultInterface.LISTE_FIATI;
end;

procedure TCariTemelBilgiProperties.Set_LISTE_FIATI(Value: Integer);
begin
  DefaultInterface.Set_LISTE_FIATI(Value);
end;

function TCariTemelBilgiProperties.Get_ACIK1: WideString;
begin
    Result := DefaultInterface.ACIK1;
end;

procedure TCariTemelBilgiProperties.Set_ACIK1(const Value: WideString);
  { Warning: The property ACIK1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ACIK1 := Value;
end;

function TCariTemelBilgiProperties.Get_ACIK2: WideString;
begin
    Result := DefaultInterface.ACIK2;
end;

procedure TCariTemelBilgiProperties.Set_ACIK2(const Value: WideString);
  { Warning: The property ACIK2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ACIK2 := Value;
end;

function TCariTemelBilgiProperties.Get_ACIK3: WideString;
begin
    Result := DefaultInterface.ACIK3;
end;

procedure TCariTemelBilgiProperties.Set_ACIK3(const Value: WideString);
  { Warning: The property ACIK3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ACIK3 := Value;
end;

function TCariTemelBilgiProperties.Get_M_KOD: WideString;
begin
    Result := DefaultInterface.M_KOD;
end;

procedure TCariTemelBilgiProperties.Set_M_KOD(const Value: WideString);
  { Warning: The property M_KOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.M_KOD := Value;
end;

function TCariTemelBilgiProperties.Get_DOVIZ_TIPI: Integer;
begin
    Result := DefaultInterface.DOVIZ_TIPI;
end;

procedure TCariTemelBilgiProperties.Set_DOVIZ_TIPI(Value: Integer);
begin
  DefaultInterface.Set_DOVIZ_TIPI(Value);
end;

function TCariTemelBilgiProperties.Get_DOVIZ_TURU: Integer;
begin
    Result := DefaultInterface.DOVIZ_TURU;
end;

procedure TCariTemelBilgiProperties.Set_DOVIZ_TURU(Value: Integer);
begin
  DefaultInterface.Set_DOVIZ_TURU(Value);
end;

function TCariTemelBilgiProperties.Get_HESAPTUTMASEKLI: WideString;
begin
    Result := DefaultInterface.HESAPTUTMASEKLI;
end;

procedure TCariTemelBilgiProperties.Set_HESAPTUTMASEKLI(const Value: WideString);
  { Warning: The property HESAPTUTMASEKLI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HESAPTUTMASEKLI := Value;
end;

function TCariTemelBilgiProperties.Get_DOVIZLIMI: WideString;
begin
    Result := DefaultInterface.DOVIZLIMI;
end;

procedure TCariTemelBilgiProperties.Set_DOVIZLIMI(const Value: WideString);
  { Warning: The property DOVIZLIMI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DOVIZLIMI := Value;
end;

function TCariTemelBilgiProperties.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TCariTemelBilgiProperties.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TCariTemelBilgiProperties.Get_Plasiyer_Kodu: WideString;
begin
    Result := DefaultInterface.Plasiyer_Kodu;
end;

procedure TCariTemelBilgiProperties.Set_Plasiyer_Kodu(const Value: WideString);
  { Warning: The property Plasiyer_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer_Kodu := Value;
end;

function TCariTemelBilgiProperties.Get_LOKALDEPO: Integer;
begin
    Result := DefaultInterface.LOKALDEPO;
end;

procedure TCariTemelBilgiProperties.Set_LOKALDEPO(Value: Integer);
begin
  DefaultInterface.Set_LOKALDEPO(Value);
end;

function TCariTemelBilgiProperties.Get_EMAIL: WideString;
begin
    Result := DefaultInterface.EMAIL;
end;

procedure TCariTemelBilgiProperties.Set_EMAIL(const Value: WideString);
  { Warning: The property EMAIL has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EMAIL := Value;
end;

function TCariTemelBilgiProperties.Get_WEB: WideString;
begin
    Result := DefaultInterface.WEB;
end;

procedure TCariTemelBilgiProperties.Set_WEB(const Value: WideString);
  { Warning: The property WEB has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.WEB := Value;
end;

function TCariTemelBilgiProperties.Get_KURFARKIBORC: WideString;
begin
    Result := DefaultInterface.KURFARKIBORC;
end;

procedure TCariTemelBilgiProperties.Set_KURFARKIBORC(const Value: WideString);
  { Warning: The property KURFARKIBORC has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KURFARKIBORC := Value;
end;

function TCariTemelBilgiProperties.Get_KURFARKIALAC: WideString;
begin
    Result := DefaultInterface.KURFARKIALAC;
end;

procedure TCariTemelBilgiProperties.Set_KURFARKIALAC(const Value: WideString);
  { Warning: The property KURFARKIALAC has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KURFARKIALAC := Value;
end;

function TCariTemelBilgiProperties.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TCariTemelBilgiProperties.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TCariTemelBilgiProperties.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TCariTemelBilgiProperties.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TCariTemelBilgiProperties.Get_F_Yedek1: Double;
begin
    Result := DefaultInterface.F_Yedek1;
end;

procedure TCariTemelBilgiProperties.Set_F_Yedek1(Value: Double);
begin
  DefaultInterface.Set_F_Yedek1(Value);
end;

function TCariTemelBilgiProperties.Get_F_Yedek2: Double;
begin
    Result := DefaultInterface.F_Yedek2;
end;

procedure TCariTemelBilgiProperties.Set_F_Yedek2(Value: Double);
begin
  DefaultInterface.Set_F_Yedek2(Value);
end;

function TCariTemelBilgiProperties.Get_C_Yedek1: WideString;
begin
    Result := DefaultInterface.C_Yedek1;
end;

procedure TCariTemelBilgiProperties.Set_C_Yedek1(const Value: WideString);
  { Warning: The property C_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek1 := Value;
end;

function TCariTemelBilgiProperties.Get_C_Yedek2: WideString;
begin
    Result := DefaultInterface.C_Yedek2;
end;

procedure TCariTemelBilgiProperties.Set_C_Yedek2(const Value: WideString);
  { Warning: The property C_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek2 := Value;
end;

function TCariTemelBilgiProperties.Get_B_Yedek1: Integer;
begin
    Result := DefaultInterface.B_Yedek1;
end;

procedure TCariTemelBilgiProperties.Set_B_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_B_Yedek1(Value);
end;

function TCariTemelBilgiProperties.Get_I_Yedek1: Integer;
begin
    Result := DefaultInterface.I_Yedek1;
end;

procedure TCariTemelBilgiProperties.Set_I_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek1(Value);
end;

function TCariTemelBilgiProperties.Get_L_Yedek1: Integer;
begin
    Result := DefaultInterface.L_Yedek1;
end;

procedure TCariTemelBilgiProperties.Set_L_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_L_Yedek1(Value);
end;

function TCariTemelBilgiProperties.Get_FIYATGRUBU: WideString;
begin
    Result := DefaultInterface.FIYATGRUBU;
end;

procedure TCariTemelBilgiProperties.Set_FIYATGRUBU(const Value: WideString);
  { Warning: The property FIYATGRUBU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FIYATGRUBU := Value;
end;

function TCariTemelBilgiProperties.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TCariTemelBilgiProperties.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TCariTemelBilgiProperties.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TCariTemelBilgiProperties.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TCariTemelBilgiProperties.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TCariTemelBilgiProperties.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TCariTemelBilgiProperties.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TCariTemelBilgiProperties.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TCariTemelBilgiProperties.Get_ODEMETIPI: Integer;
begin
    Result := DefaultInterface.ODEMETIPI;
end;

procedure TCariTemelBilgiProperties.Set_ODEMETIPI(Value: Integer);
begin
  DefaultInterface.Set_ODEMETIPI(Value);
end;

function TCariTemelBilgiProperties.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TCariTemelBilgiProperties.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TCariTemelBilgiProperties.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TCariTemelBilgiProperties.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

function TCariTemelBilgiProperties.Get_MUSTERIBAZIKDV: WideString;
begin
    Result := DefaultInterface.MUSTERIBAZIKDV;
end;

procedure TCariTemelBilgiProperties.Set_MUSTERIBAZIKDV(const Value: WideString);
  { Warning: The property MUSTERIBAZIKDV has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MUSTERIBAZIKDV := Value;
end;

function TCariTemelBilgiProperties.Get_AGIRLIK_ISK: Double;
begin
    Result := DefaultInterface.AGIRLIK_ISK;
end;

procedure TCariTemelBilgiProperties.Set_AGIRLIK_ISK(Value: Double);
begin
  DefaultInterface.Set_AGIRLIK_ISK(Value);
end;

{$ENDIF}

class function CoCariEkBilgi.Create: ICariEkBilgi;
begin
  Result := CreateComObject(CLASS_CariEkBilgi) as ICariEkBilgi;
end;

class function CoCariEkBilgi.CreateRemote(const MachineName: string): ICariEkBilgi;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CariEkBilgi) as ICariEkBilgi;
end;

procedure TCariEkBilgi.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5956D8AB-E86C-419F-9A4E-7ECC8B139A86}';
    IntfIID:   '{05C1EF45-72D8-4102-A61B-B9A17A8B3999}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCariEkBilgi.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICariEkBilgi;
  end;
end;

procedure TCariEkBilgi.ConnectTo(svrIntf: ICariEkBilgi);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCariEkBilgi.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCariEkBilgi.GetDefaultInterface: ICariEkBilgi;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCariEkBilgi.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCariEkBilgiProperties.Create(Self);
{$ENDIF}
end;

destructor TCariEkBilgi.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCariEkBilgi.GetServerProperties: TCariEkBilgiProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCariEkBilgi.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TCariEkBilgi.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCariEkBilgi.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TCariEkBilgi.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TCariEkBilgi.Get_CARI_KOD: WideString;
begin
    Result := DefaultInterface.CARI_KOD;
end;

procedure TCariEkBilgi.Set_CARI_KOD(const Value: WideString);
  { Warning: The property CARI_KOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_KOD := Value;
end;

function TCariEkBilgi.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TCariEkBilgi.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TCariEkBilgi.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TCariEkBilgi.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TCariEkBilgi.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TCariEkBilgi.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TCariEkBilgi.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TCariEkBilgi.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TCariEkBilgi.Get_Kull1N: Double;
begin
    Result := DefaultInterface.Kull1N;
end;

procedure TCariEkBilgi.Set_Kull1N(Value: Double);
begin
  DefaultInterface.Set_Kull1N(Value);
end;

function TCariEkBilgi.Get_Kull2N: Double;
begin
    Result := DefaultInterface.Kull2N;
end;

procedure TCariEkBilgi.Set_Kull2N(Value: Double);
begin
  DefaultInterface.Set_Kull2N(Value);
end;

function TCariEkBilgi.Get_Kull3N: Double;
begin
    Result := DefaultInterface.Kull3N;
end;

procedure TCariEkBilgi.Set_Kull3N(Value: Double);
begin
  DefaultInterface.Set_Kull3N(Value);
end;

function TCariEkBilgi.Get_Kull4N: Double;
begin
    Result := DefaultInterface.Kull4N;
end;

procedure TCariEkBilgi.Set_Kull4N(Value: Double);
begin
  DefaultInterface.Set_Kull4N(Value);
end;

function TCariEkBilgi.Get_Kull5N: Double;
begin
    Result := DefaultInterface.Kull5N;
end;

procedure TCariEkBilgi.Set_Kull5N(Value: Double);
begin
  DefaultInterface.Set_Kull5N(Value);
end;

function TCariEkBilgi.Get_Kull6N: Double;
begin
    Result := DefaultInterface.Kull6N;
end;

procedure TCariEkBilgi.Set_Kull6N(Value: Double);
begin
  DefaultInterface.Set_Kull6N(Value);
end;

function TCariEkBilgi.Get_Kull7N: Double;
begin
    Result := DefaultInterface.Kull7N;
end;

procedure TCariEkBilgi.Set_Kull7N(Value: Double);
begin
  DefaultInterface.Set_Kull7N(Value);
end;

function TCariEkBilgi.Get_Kull8N: Double;
begin
    Result := DefaultInterface.Kull8N;
end;

procedure TCariEkBilgi.Set_Kull8N(Value: Double);
begin
  DefaultInterface.Set_Kull8N(Value);
end;

function TCariEkBilgi.Get_Kull1S: WideString;
begin
    Result := DefaultInterface.Kull1S;
end;

procedure TCariEkBilgi.Set_Kull1S(const Value: WideString);
  { Warning: The property Kull1S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull1S := Value;
end;

function TCariEkBilgi.Get_Kull2S: WideString;
begin
    Result := DefaultInterface.Kull2S;
end;

procedure TCariEkBilgi.Set_Kull2S(const Value: WideString);
  { Warning: The property Kull2S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull2S := Value;
end;

function TCariEkBilgi.Get_Kull3S: WideString;
begin
    Result := DefaultInterface.Kull3S;
end;

procedure TCariEkBilgi.Set_Kull3S(const Value: WideString);
  { Warning: The property Kull3S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull3S := Value;
end;

function TCariEkBilgi.Get_Kull4S: WideString;
begin
    Result := DefaultInterface.Kull4S;
end;

procedure TCariEkBilgi.Set_Kull4S(const Value: WideString);
  { Warning: The property Kull4S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull4S := Value;
end;

function TCariEkBilgi.Get_Kull5S: WideString;
begin
    Result := DefaultInterface.Kull5S;
end;

procedure TCariEkBilgi.Set_Kull5S(const Value: WideString);
  { Warning: The property Kull5S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull5S := Value;
end;

function TCariEkBilgi.Get_Kull6S: WideString;
begin
    Result := DefaultInterface.Kull6S;
end;

procedure TCariEkBilgi.Set_Kull6S(const Value: WideString);
  { Warning: The property Kull6S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull6S := Value;
end;

function TCariEkBilgi.Get_Kull7S: WideString;
begin
    Result := DefaultInterface.Kull7S;
end;

procedure TCariEkBilgi.Set_Kull7S(const Value: WideString);
  { Warning: The property Kull7S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull7S := Value;
end;

function TCariEkBilgi.Get_Kull8S: WideString;
begin
    Result := DefaultInterface.Kull8S;
end;

procedure TCariEkBilgi.Set_Kull8S(const Value: WideString);
  { Warning: The property Kull8S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull8S := Value;
end;

function TCariEkBilgi.Get_SALES_VOLUME: Double;
begin
    Result := DefaultInterface.SALES_VOLUME;
end;

procedure TCariEkBilgi.Set_SALES_VOLUME(Value: Double);
begin
  DefaultInterface.Set_SALES_VOLUME(Value);
end;

function TCariEkBilgi.Get_PRIM: Double;
begin
    Result := DefaultInterface.PRIM;
end;

procedure TCariEkBilgi.Set_PRIM(Value: Double);
begin
  DefaultInterface.Set_PRIM(Value);
end;

function TCariEkBilgi.Get_CIRO_TARIHI: WideString;
begin
    Result := DefaultInterface.CIRO_TARIHI;
end;

procedure TCariEkBilgi.Set_CIRO_TARIHI(const Value: WideString);
  { Warning: The property CIRO_TARIHI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CIRO_TARIHI := Value;
end;

function TCariEkBilgi.Get_ESKI_YENI: WideString;
begin
    Result := DefaultInterface.ESKI_YENI;
end;

procedure TCariEkBilgi.Set_ESKI_YENI(const Value: WideString);
  { Warning: The property ESKI_YENI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ESKI_YENI := Value;
end;

function TCariEkBilgi.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TCariEkBilgi.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TCariEkBilgi.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TCariEkBilgi.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TCariEkBilgi.Get_F_Yedek1: Double;
begin
    Result := DefaultInterface.F_Yedek1;
end;

procedure TCariEkBilgi.Set_F_Yedek1(Value: Double);
begin
  DefaultInterface.Set_F_Yedek1(Value);
end;

function TCariEkBilgi.Get_F_Yedek2: Double;
begin
    Result := DefaultInterface.F_Yedek2;
end;

procedure TCariEkBilgi.Set_F_Yedek2(Value: Double);
begin
  DefaultInterface.Set_F_Yedek2(Value);
end;

function TCariEkBilgi.Get_C_Yedek1: WideString;
begin
    Result := DefaultInterface.C_Yedek1;
end;

procedure TCariEkBilgi.Set_C_Yedek1(const Value: WideString);
  { Warning: The property C_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek1 := Value;
end;

function TCariEkBilgi.Get_C_Yedek2: WideString;
begin
    Result := DefaultInterface.C_Yedek2;
end;

procedure TCariEkBilgi.Set_C_Yedek2(const Value: WideString);
  { Warning: The property C_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek2 := Value;
end;

function TCariEkBilgi.Get_B_Yedek1: Integer;
begin
    Result := DefaultInterface.B_Yedek1;
end;

procedure TCariEkBilgi.Set_B_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_B_Yedek1(Value);
end;

function TCariEkBilgi.Get_I_Yedek1: Integer;
begin
    Result := DefaultInterface.I_Yedek1;
end;

procedure TCariEkBilgi.Set_I_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek1(Value);
end;

function TCariEkBilgi.Get_L_Yedek1: Integer;
begin
    Result := DefaultInterface.L_Yedek1;
end;

procedure TCariEkBilgi.Set_L_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_L_Yedek1(Value);
end;

function TCariEkBilgi.Get_ODEKOD: WideString;
begin
    Result := DefaultInterface.ODEKOD;
end;

procedure TCariEkBilgi.Set_ODEKOD(const Value: WideString);
  { Warning: The property ODEKOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ODEKOD := Value;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCariEkBilgiProperties.Create(AServer: TCariEkBilgi);
begin
  inherited Create;
  FServer := AServer;
end;

function TCariEkBilgiProperties.GetDefaultInterface: ICariEkBilgi;
begin
  Result := FServer.DefaultInterface;
end;

function TCariEkBilgiProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TCariEkBilgiProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCariEkBilgiProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TCariEkBilgiProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TCariEkBilgiProperties.Get_CARI_KOD: WideString;
begin
    Result := DefaultInterface.CARI_KOD;
end;

procedure TCariEkBilgiProperties.Set_CARI_KOD(const Value: WideString);
  { Warning: The property CARI_KOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_KOD := Value;
end;

function TCariEkBilgiProperties.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TCariEkBilgiProperties.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TCariEkBilgiProperties.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TCariEkBilgiProperties.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TCariEkBilgiProperties.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TCariEkBilgiProperties.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TCariEkBilgiProperties.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TCariEkBilgiProperties.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TCariEkBilgiProperties.Get_Kull1N: Double;
begin
    Result := DefaultInterface.Kull1N;
end;

procedure TCariEkBilgiProperties.Set_Kull1N(Value: Double);
begin
  DefaultInterface.Set_Kull1N(Value);
end;

function TCariEkBilgiProperties.Get_Kull2N: Double;
begin
    Result := DefaultInterface.Kull2N;
end;

procedure TCariEkBilgiProperties.Set_Kull2N(Value: Double);
begin
  DefaultInterface.Set_Kull2N(Value);
end;

function TCariEkBilgiProperties.Get_Kull3N: Double;
begin
    Result := DefaultInterface.Kull3N;
end;

procedure TCariEkBilgiProperties.Set_Kull3N(Value: Double);
begin
  DefaultInterface.Set_Kull3N(Value);
end;

function TCariEkBilgiProperties.Get_Kull4N: Double;
begin
    Result := DefaultInterface.Kull4N;
end;

procedure TCariEkBilgiProperties.Set_Kull4N(Value: Double);
begin
  DefaultInterface.Set_Kull4N(Value);
end;

function TCariEkBilgiProperties.Get_Kull5N: Double;
begin
    Result := DefaultInterface.Kull5N;
end;

procedure TCariEkBilgiProperties.Set_Kull5N(Value: Double);
begin
  DefaultInterface.Set_Kull5N(Value);
end;

function TCariEkBilgiProperties.Get_Kull6N: Double;
begin
    Result := DefaultInterface.Kull6N;
end;

procedure TCariEkBilgiProperties.Set_Kull6N(Value: Double);
begin
  DefaultInterface.Set_Kull6N(Value);
end;

function TCariEkBilgiProperties.Get_Kull7N: Double;
begin
    Result := DefaultInterface.Kull7N;
end;

procedure TCariEkBilgiProperties.Set_Kull7N(Value: Double);
begin
  DefaultInterface.Set_Kull7N(Value);
end;

function TCariEkBilgiProperties.Get_Kull8N: Double;
begin
    Result := DefaultInterface.Kull8N;
end;

procedure TCariEkBilgiProperties.Set_Kull8N(Value: Double);
begin
  DefaultInterface.Set_Kull8N(Value);
end;

function TCariEkBilgiProperties.Get_Kull1S: WideString;
begin
    Result := DefaultInterface.Kull1S;
end;

procedure TCariEkBilgiProperties.Set_Kull1S(const Value: WideString);
  { Warning: The property Kull1S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull1S := Value;
end;

function TCariEkBilgiProperties.Get_Kull2S: WideString;
begin
    Result := DefaultInterface.Kull2S;
end;

procedure TCariEkBilgiProperties.Set_Kull2S(const Value: WideString);
  { Warning: The property Kull2S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull2S := Value;
end;

function TCariEkBilgiProperties.Get_Kull3S: WideString;
begin
    Result := DefaultInterface.Kull3S;
end;

procedure TCariEkBilgiProperties.Set_Kull3S(const Value: WideString);
  { Warning: The property Kull3S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull3S := Value;
end;

function TCariEkBilgiProperties.Get_Kull4S: WideString;
begin
    Result := DefaultInterface.Kull4S;
end;

procedure TCariEkBilgiProperties.Set_Kull4S(const Value: WideString);
  { Warning: The property Kull4S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull4S := Value;
end;

function TCariEkBilgiProperties.Get_Kull5S: WideString;
begin
    Result := DefaultInterface.Kull5S;
end;

procedure TCariEkBilgiProperties.Set_Kull5S(const Value: WideString);
  { Warning: The property Kull5S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull5S := Value;
end;

function TCariEkBilgiProperties.Get_Kull6S: WideString;
begin
    Result := DefaultInterface.Kull6S;
end;

procedure TCariEkBilgiProperties.Set_Kull6S(const Value: WideString);
  { Warning: The property Kull6S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull6S := Value;
end;

function TCariEkBilgiProperties.Get_Kull7S: WideString;
begin
    Result := DefaultInterface.Kull7S;
end;

procedure TCariEkBilgiProperties.Set_Kull7S(const Value: WideString);
  { Warning: The property Kull7S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull7S := Value;
end;

function TCariEkBilgiProperties.Get_Kull8S: WideString;
begin
    Result := DefaultInterface.Kull8S;
end;

procedure TCariEkBilgiProperties.Set_Kull8S(const Value: WideString);
  { Warning: The property Kull8S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull8S := Value;
end;

function TCariEkBilgiProperties.Get_SALES_VOLUME: Double;
begin
    Result := DefaultInterface.SALES_VOLUME;
end;

procedure TCariEkBilgiProperties.Set_SALES_VOLUME(Value: Double);
begin
  DefaultInterface.Set_SALES_VOLUME(Value);
end;

function TCariEkBilgiProperties.Get_PRIM: Double;
begin
    Result := DefaultInterface.PRIM;
end;

procedure TCariEkBilgiProperties.Set_PRIM(Value: Double);
begin
  DefaultInterface.Set_PRIM(Value);
end;

function TCariEkBilgiProperties.Get_CIRO_TARIHI: WideString;
begin
    Result := DefaultInterface.CIRO_TARIHI;
end;

procedure TCariEkBilgiProperties.Set_CIRO_TARIHI(const Value: WideString);
  { Warning: The property CIRO_TARIHI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CIRO_TARIHI := Value;
end;

function TCariEkBilgiProperties.Get_ESKI_YENI: WideString;
begin
    Result := DefaultInterface.ESKI_YENI;
end;

procedure TCariEkBilgiProperties.Set_ESKI_YENI(const Value: WideString);
  { Warning: The property ESKI_YENI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ESKI_YENI := Value;
end;

function TCariEkBilgiProperties.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TCariEkBilgiProperties.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TCariEkBilgiProperties.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TCariEkBilgiProperties.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TCariEkBilgiProperties.Get_F_Yedek1: Double;
begin
    Result := DefaultInterface.F_Yedek1;
end;

procedure TCariEkBilgiProperties.Set_F_Yedek1(Value: Double);
begin
  DefaultInterface.Set_F_Yedek1(Value);
end;

function TCariEkBilgiProperties.Get_F_Yedek2: Double;
begin
    Result := DefaultInterface.F_Yedek2;
end;

procedure TCariEkBilgiProperties.Set_F_Yedek2(Value: Double);
begin
  DefaultInterface.Set_F_Yedek2(Value);
end;

function TCariEkBilgiProperties.Get_C_Yedek1: WideString;
begin
    Result := DefaultInterface.C_Yedek1;
end;

procedure TCariEkBilgiProperties.Set_C_Yedek1(const Value: WideString);
  { Warning: The property C_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek1 := Value;
end;

function TCariEkBilgiProperties.Get_C_Yedek2: WideString;
begin
    Result := DefaultInterface.C_Yedek2;
end;

procedure TCariEkBilgiProperties.Set_C_Yedek2(const Value: WideString);
  { Warning: The property C_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek2 := Value;
end;

function TCariEkBilgiProperties.Get_B_Yedek1: Integer;
begin
    Result := DefaultInterface.B_Yedek1;
end;

procedure TCariEkBilgiProperties.Set_B_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_B_Yedek1(Value);
end;

function TCariEkBilgiProperties.Get_I_Yedek1: Integer;
begin
    Result := DefaultInterface.I_Yedek1;
end;

procedure TCariEkBilgiProperties.Set_I_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek1(Value);
end;

function TCariEkBilgiProperties.Get_L_Yedek1: Integer;
begin
    Result := DefaultInterface.L_Yedek1;
end;

procedure TCariEkBilgiProperties.Set_L_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_L_Yedek1(Value);
end;

function TCariEkBilgiProperties.Get_ODEKOD: WideString;
begin
    Result := DefaultInterface.ODEKOD;
end;

procedure TCariEkBilgiProperties.Set_ODEKOD(const Value: WideString);
  { Warning: The property ODEKOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ODEKOD := Value;
end;

{$ENDIF}

class function CoStok.Create: IStok;
begin
  Result := CreateComObject(CLASS_Stok) as IStok;
end;

class function CoStok.CreateRemote(const MachineName: string): IStok;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Stok) as IStok;
end;

procedure TStok.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F7AFE9FE-D6B1-42CC-B246-30877213BB29}';
    IntfIID:   '{AEC53AC8-6647-4C14-8FDD-AA7461F0C63B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStok.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IStok;
  end;
end;

procedure TStok.ConnectTo(svrIntf: IStok);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TStok.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TStok.GetDefaultInterface: IStok;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TStok.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TStokProperties.Create(Self);
{$ENDIF}
end;

destructor TStok.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TStok.GetServerProperties: TStokProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TStok.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TStok.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStok.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TStok.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TStok.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TStok.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

procedure TStok.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TStok.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TStok.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TStok.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TStok.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TStok.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TStok.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

function TStok.TemelBilgi: IStokTemelBilgi;
begin
  Result := DefaultInterface.TemelBilgi;
end;

function TStok.EkBilgi: IStokEkBilgi;
begin
  Result := DefaultInterface.EkBilgi;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TStokProperties.Create(AServer: TStok);
begin
  inherited Create;
  FServer := AServer;
end;

function TStokProperties.GetDefaultInterface: IStok;
begin
  Result := FServer.DefaultInterface;
end;

function TStokProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TStokProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStokProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TStokProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TStokProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TStokProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

{$ENDIF}

class function CoStokTemelBilgi.Create: IStokTemelBilgi;
begin
  Result := CreateComObject(CLASS_StokTemelBilgi) as IStokTemelBilgi;
end;

class function CoStokTemelBilgi.CreateRemote(const MachineName: string): IStokTemelBilgi;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StokTemelBilgi) as IStokTemelBilgi;
end;

procedure TStokTemelBilgi.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{656E54AC-32D7-4BB2-BB9F-5558F97B15BE}';
    IntfIID:   '{25F6F0BC-BA98-4F9C-842D-A88AE86C405A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStokTemelBilgi.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IStokTemelBilgi;
  end;
end;

procedure TStokTemelBilgi.ConnectTo(svrIntf: IStokTemelBilgi);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TStokTemelBilgi.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TStokTemelBilgi.GetDefaultInterface: IStokTemelBilgi;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TStokTemelBilgi.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TStokTemelBilgiProperties.Create(Self);
{$ENDIF}
end;

destructor TStokTemelBilgi.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TStokTemelBilgi.GetServerProperties: TStokTemelBilgiProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TStokTemelBilgi.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TStokTemelBilgi.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStokTemelBilgi.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TStokTemelBilgi.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TStokTemelBilgi.Get_Stok_Kodu: WideString;
begin
    Result := DefaultInterface.Stok_Kodu;
end;

procedure TStokTemelBilgi.Set_Stok_Kodu(const Value: WideString);
  { Warning: The property Stok_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stok_Kodu := Value;
end;

function TStokTemelBilgi.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TStokTemelBilgi.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TStokTemelBilgi.Get_ISLETME_KODU: Integer;
begin
    Result := DefaultInterface.ISLETME_KODU;
end;

procedure TStokTemelBilgi.Set_ISLETME_KODU(Value: Integer);
begin
  DefaultInterface.Set_ISLETME_KODU(Value);
end;

function TStokTemelBilgi.Get_Stok_Adi: WideString;
begin
    Result := DefaultInterface.Stok_Adi;
end;

procedure TStokTemelBilgi.Set_Stok_Adi(const Value: WideString);
  { Warning: The property Stok_Adi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stok_Adi := Value;
end;

function TStokTemelBilgi.Get_Uretici_Kodu: WideString;
begin
    Result := DefaultInterface.Uretici_Kodu;
end;

procedure TStokTemelBilgi.Set_Uretici_Kodu(const Value: WideString);
  { Warning: The property Uretici_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Uretici_Kodu := Value;
end;

function TStokTemelBilgi.Get_Grup_Kodu: WideString;
begin
    Result := DefaultInterface.Grup_Kodu;
end;

procedure TStokTemelBilgi.Set_Grup_Kodu(const Value: WideString);
  { Warning: The property Grup_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Grup_Kodu := Value;
end;

function TStokTemelBilgi.Get_Kod_1: WideString;
begin
    Result := DefaultInterface.Kod_1;
end;

procedure TStokTemelBilgi.Set_Kod_1(const Value: WideString);
  { Warning: The property Kod_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod_1 := Value;
end;

function TStokTemelBilgi.Get_Kod_2: WideString;
begin
    Result := DefaultInterface.Kod_2;
end;

procedure TStokTemelBilgi.Set_Kod_2(const Value: WideString);
  { Warning: The property Kod_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod_2 := Value;
end;

function TStokTemelBilgi.Get_Kod_3: WideString;
begin
    Result := DefaultInterface.Kod_3;
end;

procedure TStokTemelBilgi.Set_Kod_3(const Value: WideString);
  { Warning: The property Kod_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod_3 := Value;
end;

function TStokTemelBilgi.Get_Kod_4: WideString;
begin
    Result := DefaultInterface.Kod_4;
end;

procedure TStokTemelBilgi.Set_Kod_4(const Value: WideString);
  { Warning: The property Kod_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod_4 := Value;
end;

function TStokTemelBilgi.Get_Kod_5: WideString;
begin
    Result := DefaultInterface.Kod_5;
end;

procedure TStokTemelBilgi.Set_Kod_5(const Value: WideString);
  { Warning: The property Kod_5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod_5 := Value;
end;

function TStokTemelBilgi.Get_Satici_Kodu: WideString;
begin
    Result := DefaultInterface.Satici_Kodu;
end;

procedure TStokTemelBilgi.Set_Satici_Kodu(const Value: WideString);
  { Warning: The property Satici_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Satici_Kodu := Value;
end;

function TStokTemelBilgi.Get_Olcu_Br1: WideString;
begin
    Result := DefaultInterface.Olcu_Br1;
end;

procedure TStokTemelBilgi.Set_Olcu_Br1(const Value: WideString);
  { Warning: The property Olcu_Br1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Olcu_Br1 := Value;
end;

function TStokTemelBilgi.Get_Olcu_Br2: WideString;
begin
    Result := DefaultInterface.Olcu_Br2;
end;

procedure TStokTemelBilgi.Set_Olcu_Br2(const Value: WideString);
  { Warning: The property Olcu_Br2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Olcu_Br2 := Value;
end;

function TStokTemelBilgi.Get_Pay_1: Double;
begin
    Result := DefaultInterface.Pay_1;
end;

procedure TStokTemelBilgi.Set_Pay_1(Value: Double);
begin
  DefaultInterface.Set_Pay_1(Value);
end;

function TStokTemelBilgi.Get_Payda_1: Double;
begin
    Result := DefaultInterface.Payda_1;
end;

procedure TStokTemelBilgi.Set_Payda_1(Value: Double);
begin
  DefaultInterface.Set_Payda_1(Value);
end;

function TStokTemelBilgi.Get_Olcu_Br3: WideString;
begin
    Result := DefaultInterface.Olcu_Br3;
end;

procedure TStokTemelBilgi.Set_Olcu_Br3(const Value: WideString);
  { Warning: The property Olcu_Br3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Olcu_Br3 := Value;
end;

function TStokTemelBilgi.Get_Pay2: Double;
begin
    Result := DefaultInterface.Pay2;
end;

procedure TStokTemelBilgi.Set_Pay2(Value: Double);
begin
  DefaultInterface.Set_Pay2(Value);
end;

function TStokTemelBilgi.Get_Payda2: Double;
begin
    Result := DefaultInterface.Payda2;
end;

procedure TStokTemelBilgi.Set_Payda2(Value: Double);
begin
  DefaultInterface.Set_Payda2(Value);
end;

function TStokTemelBilgi.Get_Fiat_birimi: WideString;
begin
    Result := DefaultInterface.Fiat_birimi;
end;

procedure TStokTemelBilgi.Set_Fiat_birimi(const Value: WideString);
  { Warning: The property Fiat_birimi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Fiat_birimi := Value;
end;

function TStokTemelBilgi.Get_Azami_Stok: Double;
begin
    Result := DefaultInterface.Azami_Stok;
end;

procedure TStokTemelBilgi.Set_Azami_Stok(Value: Double);
begin
  DefaultInterface.Set_Azami_Stok(Value);
end;

function TStokTemelBilgi.Get_Asgari_Stok: Double;
begin
    Result := DefaultInterface.Asgari_Stok;
end;

procedure TStokTemelBilgi.Set_Asgari_Stok(Value: Double);
begin
  DefaultInterface.Set_Asgari_Stok(Value);
end;

function TStokTemelBilgi.Get_Temin_Suresi: Double;
begin
    Result := DefaultInterface.Temin_Suresi;
end;

procedure TStokTemelBilgi.Set_Temin_Suresi(Value: Double);
begin
  DefaultInterface.Set_Temin_Suresi(Value);
end;

function TStokTemelBilgi.Get_Kul_Mik: Double;
begin
    Result := DefaultInterface.Kul_Mik;
end;

procedure TStokTemelBilgi.Set_Kul_Mik(Value: Double);
begin
  DefaultInterface.Set_Kul_Mik(Value);
end;

function TStokTemelBilgi.Get_Risk_Suresi: Integer;
begin
    Result := DefaultInterface.Risk_Suresi;
end;

procedure TStokTemelBilgi.Set_Risk_Suresi(Value: Integer);
begin
  DefaultInterface.Set_Risk_Suresi(Value);
end;

function TStokTemelBilgi.Get_Zaman_Birimi: WideString;
begin
    Result := DefaultInterface.Zaman_Birimi;
end;

procedure TStokTemelBilgi.Set_Zaman_Birimi(const Value: WideString);
  { Warning: The property Zaman_Birimi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Zaman_Birimi := Value;
end;

function TStokTemelBilgi.Get_Satis_Fiat1: Double;
begin
    Result := DefaultInterface.Satis_Fiat1;
end;

procedure TStokTemelBilgi.Set_Satis_Fiat1(Value: Double);
begin
  DefaultInterface.Set_Satis_Fiat1(Value);
end;

function TStokTemelBilgi.Get_Satis_Fiat2: Double;
begin
    Result := DefaultInterface.Satis_Fiat2;
end;

procedure TStokTemelBilgi.Set_Satis_Fiat2(Value: Double);
begin
  DefaultInterface.Set_Satis_Fiat2(Value);
end;

function TStokTemelBilgi.Get_Satis_Fiat3: Double;
begin
    Result := DefaultInterface.Satis_Fiat3;
end;

procedure TStokTemelBilgi.Set_Satis_Fiat3(Value: Double);
begin
  DefaultInterface.Set_Satis_Fiat3(Value);
end;

function TStokTemelBilgi.Get_Satis_Fiat4: Double;
begin
    Result := DefaultInterface.Satis_Fiat4;
end;

procedure TStokTemelBilgi.Set_Satis_Fiat4(Value: Double);
begin
  DefaultInterface.Set_Satis_Fiat4(Value);
end;

function TStokTemelBilgi.Get_Sat_Dov_Tip: Integer;
begin
    Result := DefaultInterface.Sat_Dov_Tip;
end;

procedure TStokTemelBilgi.Set_Sat_Dov_Tip(Value: Integer);
begin
  DefaultInterface.Set_Sat_Dov_Tip(Value);
end;

function TStokTemelBilgi.Get_Dov_Alis_Fiat: Double;
begin
    Result := DefaultInterface.Dov_Alis_Fiat;
end;

procedure TStokTemelBilgi.Set_Dov_Alis_Fiat(Value: Double);
begin
  DefaultInterface.Set_Dov_Alis_Fiat(Value);
end;

function TStokTemelBilgi.Get_Dov_Satis_Fiat: Double;
begin
    Result := DefaultInterface.Dov_Satis_Fiat;
end;

procedure TStokTemelBilgi.Set_Dov_Satis_Fiat(Value: Double);
begin
  DefaultInterface.Set_Dov_Satis_Fiat(Value);
end;

function TStokTemelBilgi.Get_Dov_Mal_Fiat: Double;
begin
    Result := DefaultInterface.Dov_Mal_Fiat;
end;

procedure TStokTemelBilgi.Set_Dov_Mal_Fiat(Value: Double);
begin
  DefaultInterface.Set_Dov_Mal_Fiat(Value);
end;

function TStokTemelBilgi.Get_Muh_DetayKodu: Integer;
begin
    Result := DefaultInterface.Muh_DetayKodu;
end;

procedure TStokTemelBilgi.Set_Muh_DetayKodu(Value: Integer);
begin
  DefaultInterface.Set_Muh_DetayKodu(Value);
end;

function TStokTemelBilgi.Get_Birim_Agirlik: Double;
begin
    Result := DefaultInterface.Birim_Agirlik;
end;

procedure TStokTemelBilgi.Set_Birim_Agirlik(Value: Double);
begin
  DefaultInterface.Set_Birim_Agirlik(Value);
end;

function TStokTemelBilgi.Get_Nakliyet_Tut: Double;
begin
    Result := DefaultInterface.Nakliyet_Tut;
end;

procedure TStokTemelBilgi.Set_Nakliyet_Tut(Value: Double);
begin
  DefaultInterface.Set_Nakliyet_Tut(Value);
end;

function TStokTemelBilgi.Get_KDV_Orani: Double;
begin
    Result := DefaultInterface.KDV_Orani;
end;

procedure TStokTemelBilgi.Set_KDV_Orani(Value: Double);
begin
  DefaultInterface.Set_KDV_Orani(Value);
end;

function TStokTemelBilgi.Get_Alis_Dov_Tip: Integer;
begin
    Result := DefaultInterface.Alis_Dov_Tip;
end;

procedure TStokTemelBilgi.Set_Alis_Dov_Tip(Value: Integer);
begin
  DefaultInterface.Set_Alis_Dov_Tip(Value);
end;

function TStokTemelBilgi.Get_DEPO_KODU: Integer;
begin
    Result := DefaultInterface.DEPO_KODU;
end;

procedure TStokTemelBilgi.Set_DEPO_KODU(Value: Integer);
begin
  DefaultInterface.Set_DEPO_KODU(Value);
end;

function TStokTemelBilgi.Get_DOV_TUR: Integer;
begin
    Result := DefaultInterface.DOV_TUR;
end;

procedure TStokTemelBilgi.Set_DOV_TUR(Value: Integer);
begin
  DefaultInterface.Set_DOV_TUR(Value);
end;

function TStokTemelBilgi.Get_Uret_Olcu_Br: Integer;
begin
    Result := DefaultInterface.Uret_Olcu_Br;
end;

procedure TStokTemelBilgi.Set_Uret_Olcu_Br(Value: Integer);
begin
  DefaultInterface.Set_Uret_Olcu_Br(Value);
end;

function TStokTemelBilgi.Get_Bilesenmi: WideString;
begin
    Result := DefaultInterface.Bilesenmi;
end;

procedure TStokTemelBilgi.Set_Bilesenmi(const Value: WideString);
  { Warning: The property Bilesenmi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Bilesenmi := Value;
end;

function TStokTemelBilgi.Get_Mamulmu: WideString;
begin
    Result := DefaultInterface.Mamulmu;
end;

procedure TStokTemelBilgi.Set_Mamulmu(const Value: WideString);
  { Warning: The property Mamulmu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Mamulmu := Value;
end;

function TStokTemelBilgi.Get_Formul_Toplami: Double;
begin
    Result := DefaultInterface.Formul_Toplami;
end;

procedure TStokTemelBilgi.Set_Formul_Toplami(Value: Double);
begin
  DefaultInterface.Set_Formul_Toplami(Value);
end;

function TStokTemelBilgi.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TStokTemelBilgi.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TStokTemelBilgi.Get_Max_Iskonto: Double;
begin
    Result := DefaultInterface.Max_Iskonto;
end;

procedure TStokTemelBilgi.Set_Max_Iskonto(Value: Double);
begin
  DefaultInterface.Set_Max_Iskonto(Value);
end;

function TStokTemelBilgi.Get_Eczaci_Kari: Double;
begin
    Result := DefaultInterface.Eczaci_Kari;
end;

procedure TStokTemelBilgi.Set_Eczaci_Kari(Value: Double);
begin
  DefaultInterface.Set_Eczaci_Kari(Value);
end;

function TStokTemelBilgi.Get_Miktar: Double;
begin
    Result := DefaultInterface.Miktar;
end;

procedure TStokTemelBilgi.Set_Miktar(Value: Double);
begin
  DefaultInterface.Set_Miktar(Value);
end;

function TStokTemelBilgi.Get_Mal_Fazlasi: Double;
begin
    Result := DefaultInterface.Mal_Fazlasi;
end;

procedure TStokTemelBilgi.Set_Mal_Fazlasi(Value: Double);
begin
  DefaultInterface.Set_Mal_Fazlasi(Value);
end;

function TStokTemelBilgi.Get_Kdv_Tenzil_Oran: Double;
begin
    Result := DefaultInterface.Kdv_Tenzil_Oran;
end;

procedure TStokTemelBilgi.Set_Kdv_Tenzil_Oran(Value: Double);
begin
  DefaultInterface.Set_Kdv_Tenzil_Oran(Value);
end;

function TStokTemelBilgi.Get_Kilit: WideString;
begin
    Result := DefaultInterface.Kilit;
end;

procedure TStokTemelBilgi.Set_Kilit(const Value: WideString);
  { Warning: The property Kilit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kilit := Value;
end;

function TStokTemelBilgi.Get_Onceki_Kod: WideString;
begin
    Result := DefaultInterface.Onceki_Kod;
end;

procedure TStokTemelBilgi.Set_Onceki_Kod(const Value: WideString);
  { Warning: The property Onceki_Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Onceki_Kod := Value;
end;

function TStokTemelBilgi.Get_Sonraki_Kod: WideString;
begin
    Result := DefaultInterface.Sonraki_Kod;
end;

procedure TStokTemelBilgi.Set_Sonraki_Kod(const Value: WideString);
  { Warning: The property Sonraki_Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sonraki_Kod := Value;
end;

function TStokTemelBilgi.Get_Barkod1: WideString;
begin
    Result := DefaultInterface.Barkod1;
end;

procedure TStokTemelBilgi.Set_Barkod1(const Value: WideString);
  { Warning: The property Barkod1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Barkod1 := Value;
end;

function TStokTemelBilgi.Get_Barkod2: WideString;
begin
    Result := DefaultInterface.Barkod2;
end;

procedure TStokTemelBilgi.Set_Barkod2(const Value: WideString);
  { Warning: The property Barkod2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Barkod2 := Value;
end;

function TStokTemelBilgi.Get_Barkod3: WideString;
begin
    Result := DefaultInterface.Barkod3;
end;

procedure TStokTemelBilgi.Set_Barkod3(const Value: WideString);
  { Warning: The property Barkod3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Barkod3 := Value;
end;

function TStokTemelBilgi.Get_Alis_Kdv_Kodu: Double;
begin
    Result := DefaultInterface.Alis_Kdv_Kodu;
end;

procedure TStokTemelBilgi.Set_Alis_Kdv_Kodu(Value: Double);
begin
  DefaultInterface.Set_Alis_Kdv_Kodu(Value);
end;

function TStokTemelBilgi.Get_Alis_Fiat1: Double;
begin
    Result := DefaultInterface.Alis_Fiat1;
end;

procedure TStokTemelBilgi.Set_Alis_Fiat1(Value: Double);
begin
  DefaultInterface.Set_Alis_Fiat1(Value);
end;

function TStokTemelBilgi.Get_Alis_Fiat2: Double;
begin
    Result := DefaultInterface.Alis_Fiat2;
end;

procedure TStokTemelBilgi.Set_Alis_Fiat2(Value: Double);
begin
  DefaultInterface.Set_Alis_Fiat2(Value);
end;

function TStokTemelBilgi.Get_Alis_Fiat3: Double;
begin
    Result := DefaultInterface.Alis_Fiat3;
end;

procedure TStokTemelBilgi.Set_Alis_Fiat3(Value: Double);
begin
  DefaultInterface.Set_Alis_Fiat3(Value);
end;

function TStokTemelBilgi.Get_Alis_Fiat4: Double;
begin
    Result := DefaultInterface.Alis_Fiat4;
end;

procedure TStokTemelBilgi.Set_Alis_Fiat4(Value: Double);
begin
  DefaultInterface.Set_Alis_Fiat4(Value);
end;

function TStokTemelBilgi.Get_Lot_Size: Double;
begin
    Result := DefaultInterface.Lot_Size;
end;

procedure TStokTemelBilgi.Set_Lot_Size(Value: Double);
begin
  DefaultInterface.Set_Lot_Size(Value);
end;

function TStokTemelBilgi.Get_Min_Sip_Miktar: Double;
begin
    Result := DefaultInterface.Min_Sip_Miktar;
end;

procedure TStokTemelBilgi.Set_Min_Sip_Miktar(Value: Double);
begin
  DefaultInterface.Set_Min_Sip_Miktar(Value);
end;

function TStokTemelBilgi.Get_Sabit_Sip_Aralik: Integer;
begin
    Result := DefaultInterface.Sabit_Sip_Aralik;
end;

procedure TStokTemelBilgi.Set_Sabit_Sip_Aralik(Value: Integer);
begin
  DefaultInterface.Set_Sabit_Sip_Aralik(Value);
end;

function TStokTemelBilgi.Get_Sip_Politikasi: WideString;
begin
    Result := DefaultInterface.Sip_Politikasi;
end;

procedure TStokTemelBilgi.Set_Sip_Politikasi(const Value: WideString);
  { Warning: The property Sip_Politikasi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sip_Politikasi := Value;
end;

function TStokTemelBilgi.Get_Ozellik_Kodu1: Integer;
begin
    Result := DefaultInterface.Ozellik_Kodu1;
end;

procedure TStokTemelBilgi.Set_Ozellik_Kodu1(Value: Integer);
begin
  DefaultInterface.Set_Ozellik_Kodu1(Value);
end;

function TStokTemelBilgi.Get_Ozellik_Kodu2: Integer;
begin
    Result := DefaultInterface.Ozellik_Kodu2;
end;

procedure TStokTemelBilgi.Set_Ozellik_Kodu2(Value: Integer);
begin
  DefaultInterface.Set_Ozellik_Kodu2(Value);
end;

function TStokTemelBilgi.Get_Ozellik_Kodu3: Integer;
begin
    Result := DefaultInterface.Ozellik_Kodu3;
end;

procedure TStokTemelBilgi.Set_Ozellik_Kodu3(Value: Integer);
begin
  DefaultInterface.Set_Ozellik_Kodu3(Value);
end;

function TStokTemelBilgi.Get_Ozellik_Kodu4: Integer;
begin
    Result := DefaultInterface.Ozellik_Kodu4;
end;

procedure TStokTemelBilgi.Set_Ozellik_Kodu4(Value: Integer);
begin
  DefaultInterface.Set_Ozellik_Kodu4(Value);
end;

function TStokTemelBilgi.Get_Ozellik_Kodu5: Integer;
begin
    Result := DefaultInterface.Ozellik_Kodu5;
end;

procedure TStokTemelBilgi.Set_Ozellik_Kodu5(Value: Integer);
begin
  DefaultInterface.Set_Ozellik_Kodu5(Value);
end;

function TStokTemelBilgi.Get_Opsiyon_Kodu1: Integer;
begin
    Result := DefaultInterface.Opsiyon_Kodu1;
end;

procedure TStokTemelBilgi.Set_Opsiyon_Kodu1(Value: Integer);
begin
  DefaultInterface.Set_Opsiyon_Kodu1(Value);
end;

function TStokTemelBilgi.Get_Opsiyon_Kodu2: Integer;
begin
    Result := DefaultInterface.Opsiyon_Kodu2;
end;

procedure TStokTemelBilgi.Set_Opsiyon_Kodu2(Value: Integer);
begin
  DefaultInterface.Set_Opsiyon_Kodu2(Value);
end;

function TStokTemelBilgi.Get_Opsiyon_Kodu3: Integer;
begin
    Result := DefaultInterface.Opsiyon_Kodu3;
end;

procedure TStokTemelBilgi.Set_Opsiyon_Kodu3(Value: Integer);
begin
  DefaultInterface.Set_Opsiyon_Kodu3(Value);
end;

function TStokTemelBilgi.Get_Opsiyon_Kodu4: Integer;
begin
    Result := DefaultInterface.Opsiyon_Kodu4;
end;

procedure TStokTemelBilgi.Set_Opsiyon_Kodu4(Value: Integer);
begin
  DefaultInterface.Set_Opsiyon_Kodu4(Value);
end;

function TStokTemelBilgi.Get_Opsiyon_Kodu5: Integer;
begin
    Result := DefaultInterface.Opsiyon_Kodu5;
end;

procedure TStokTemelBilgi.Set_Opsiyon_Kodu5(Value: Integer);
begin
  DefaultInterface.Set_Opsiyon_Kodu5(Value);
end;

function TStokTemelBilgi.Get_Bilesen_Op_Kodu: Integer;
begin
    Result := DefaultInterface.Bilesen_Op_Kodu;
end;

procedure TStokTemelBilgi.Set_Bilesen_Op_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Bilesen_Op_Kodu(Value);
end;

function TStokTemelBilgi.Get_Sip_Ver_Mal: Double;
begin
    Result := DefaultInterface.Sip_Ver_Mal;
end;

procedure TStokTemelBilgi.Set_Sip_Ver_Mal(Value: Double);
begin
  DefaultInterface.Set_Sip_Ver_Mal(Value);
end;

function TStokTemelBilgi.Get_Elde_Bul_Mal: Double;
begin
    Result := DefaultInterface.Elde_Bul_Mal;
end;

procedure TStokTemelBilgi.Set_Elde_Bul_Mal(Value: Double);
begin
  DefaultInterface.Set_Elde_Bul_Mal(Value);
end;

function TStokTemelBilgi.Get_Yil_Tah_Kul_Mik: Double;
begin
    Result := DefaultInterface.Yil_Tah_Kul_Mik;
end;

procedure TStokTemelBilgi.Set_Yil_Tah_Kul_Mik(Value: Double);
begin
  DefaultInterface.Set_Yil_Tah_Kul_Mik(Value);
end;

function TStokTemelBilgi.Get_Ekon_Sip_Miktar: Double;
begin
    Result := DefaultInterface.Ekon_Sip_Miktar;
end;

procedure TStokTemelBilgi.Set_Ekon_Sip_Miktar(Value: Double);
begin
  DefaultInterface.Set_Ekon_Sip_Miktar(Value);
end;

function TStokTemelBilgi.Get_Eski_Recete: WideString;
begin
    Result := DefaultInterface.Eski_Recete;
end;

procedure TStokTemelBilgi.Set_Eski_Recete(const Value: WideString);
  { Warning: The property Eski_Recete has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Eski_Recete := Value;
end;

function TStokTemelBilgi.Get_Otomatik_Uretim: WideString;
begin
    Result := DefaultInterface.Otomatik_Uretim;
end;

procedure TStokTemelBilgi.Set_Otomatik_Uretim(const Value: WideString);
  { Warning: The property Otomatik_Uretim has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Otomatik_Uretim := Value;
end;

function TStokTemelBilgi.Get_Alfkod: WideString;
begin
    Result := DefaultInterface.Alfkod;
end;

procedure TStokTemelBilgi.Set_Alfkod(const Value: WideString);
  { Warning: The property Alfkod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Alfkod := Value;
end;

function TStokTemelBilgi.Get_SafKod: WideString;
begin
    Result := DefaultInterface.SafKod;
end;

procedure TStokTemelBilgi.Set_SafKod(const Value: WideString);
  { Warning: The property SafKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SafKod := Value;
end;

function TStokTemelBilgi.Get_Kodturu: WideString;
begin
    Result := DefaultInterface.Kodturu;
end;

procedure TStokTemelBilgi.Set_Kodturu(const Value: WideString);
  { Warning: The property Kodturu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kodturu := Value;
end;

function TStokTemelBilgi.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TStokTemelBilgi.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TStokTemelBilgi.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TStokTemelBilgi.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TStokTemelBilgi.Get_F_Yedek3: Double;
begin
    Result := DefaultInterface.F_Yedek3;
end;

procedure TStokTemelBilgi.Set_F_Yedek3(Value: Double);
begin
  DefaultInterface.Set_F_Yedek3(Value);
end;

function TStokTemelBilgi.Get_F_Yedek4: Double;
begin
    Result := DefaultInterface.F_Yedek4;
end;

procedure TStokTemelBilgi.Set_F_Yedek4(Value: Double);
begin
  DefaultInterface.Set_F_Yedek4(Value);
end;

function TStokTemelBilgi.Get_C_Yedek5: WideString;
begin
    Result := DefaultInterface.C_Yedek5;
end;

procedure TStokTemelBilgi.Set_C_Yedek5(const Value: WideString);
  { Warning: The property C_Yedek5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek5 := Value;
end;

function TStokTemelBilgi.Get_C_Yedek6: WideString;
begin
    Result := DefaultInterface.C_Yedek6;
end;

procedure TStokTemelBilgi.Set_C_Yedek6(const Value: WideString);
  { Warning: The property C_Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek6 := Value;
end;

function TStokTemelBilgi.Get_B_Yedek7: Integer;
begin
    Result := DefaultInterface.B_Yedek7;
end;

procedure TStokTemelBilgi.Set_B_Yedek7(Value: Integer);
begin
  DefaultInterface.Set_B_Yedek7(Value);
end;

function TStokTemelBilgi.Get_I_Yedek8: Integer;
begin
    Result := DefaultInterface.I_Yedek8;
end;

procedure TStokTemelBilgi.Set_I_Yedek8(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek8(Value);
end;

function TStokTemelBilgi.Get_L_Yedek9: Integer;
begin
    Result := DefaultInterface.L_Yedek9;
end;

procedure TStokTemelBilgi.Set_L_Yedek9(Value: Integer);
begin
  DefaultInterface.Set_L_Yedek9(Value);
end;

function TStokTemelBilgi.Get_D_YEDEK10: TDateTime;
begin
    Result := DefaultInterface.D_YEDEK10;
end;

procedure TStokTemelBilgi.Set_D_YEDEK10(Value: TDateTime);
begin
  DefaultInterface.Set_D_YEDEK10(Value);
end;

function TStokTemelBilgi.Get_Giris_Seri: WideString;
begin
    Result := DefaultInterface.Giris_Seri;
end;

procedure TStokTemelBilgi.Set_Giris_Seri(const Value: WideString);
  { Warning: The property Giris_Seri has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Giris_Seri := Value;
end;

function TStokTemelBilgi.Get_Cikis_Seri: WideString;
begin
    Result := DefaultInterface.Cikis_Seri;
end;

procedure TStokTemelBilgi.Set_Cikis_Seri(const Value: WideString);
  { Warning: The property Cikis_Seri has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Cikis_Seri := Value;
end;

function TStokTemelBilgi.Get_Seri_Bak: WideString;
begin
    Result := DefaultInterface.Seri_Bak;
end;

procedure TStokTemelBilgi.Set_Seri_Bak(const Value: WideString);
  { Warning: The property Seri_Bak has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri_Bak := Value;
end;

function TStokTemelBilgi.Get_Seri_Mik: WideString;
begin
    Result := DefaultInterface.Seri_Mik;
end;

procedure TStokTemelBilgi.Set_Seri_Mik(const Value: WideString);
  { Warning: The property Seri_Mik has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri_Mik := Value;
end;

function TStokTemelBilgi.Get_Seri_Gir_Ot: WideString;
begin
    Result := DefaultInterface.Seri_Gir_Ot;
end;

procedure TStokTemelBilgi.Set_Seri_Gir_Ot(const Value: WideString);
  { Warning: The property Seri_Gir_Ot has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri_Gir_Ot := Value;
end;

function TStokTemelBilgi.Get_Seri_Cik_Ot: WideString;
begin
    Result := DefaultInterface.Seri_Cik_Ot;
end;

procedure TStokTemelBilgi.Set_Seri_Cik_Ot(const Value: WideString);
  { Warning: The property Seri_Cik_Ot has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri_Cik_Ot := Value;
end;

function TStokTemelBilgi.Get_Seri_Baslangic: WideString;
begin
    Result := DefaultInterface.Seri_Baslangic;
end;

procedure TStokTemelBilgi.Set_Seri_Baslangic(const Value: WideString);
  { Warning: The property Seri_Baslangic has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri_Baslangic := Value;
end;

function TStokTemelBilgi.Get_FiyatKodu: WideString;
begin
    Result := DefaultInterface.FiyatKodu;
end;

procedure TStokTemelBilgi.Set_FiyatKodu(const Value: WideString);
  { Warning: The property FiyatKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FiyatKodu := Value;
end;

function TStokTemelBilgi.Get_FiyatSirasi: Integer;
begin
    Result := DefaultInterface.FiyatSirasi;
end;

procedure TStokTemelBilgi.Set_FiyatSirasi(Value: Integer);
begin
  DefaultInterface.Set_FiyatSirasi(Value);
end;

function TStokTemelBilgi.Get_PLANLANACAK: WideString;
begin
    Result := DefaultInterface.PLANLANACAK;
end;

procedure TStokTemelBilgi.Set_PLANLANACAK(const Value: WideString);
  { Warning: The property PLANLANACAK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PLANLANACAK := Value;
end;

function TStokTemelBilgi.Get_LOT_SIZECUSTOMER: Double;
begin
    Result := DefaultInterface.LOT_SIZECUSTOMER;
end;

procedure TStokTemelBilgi.Set_LOT_SIZECUSTOMER(Value: Double);
begin
  DefaultInterface.Set_LOT_SIZECUSTOMER(Value);
end;

function TStokTemelBilgi.Get_MIN_SIP_MIKTARCUSTOMER: Double;
begin
    Result := DefaultInterface.MIN_SIP_MIKTARCUSTOMER;
end;

procedure TStokTemelBilgi.Set_MIN_SIP_MIKTARCUSTOMER(Value: Double);
begin
  DefaultInterface.Set_MIN_SIP_MIKTARCUSTOMER(Value);
end;

function TStokTemelBilgi.Get_GUMRUKTARIFEKODU: WideString;
begin
    Result := DefaultInterface.GUMRUKTARIFEKODU;
end;

procedure TStokTemelBilgi.Set_GUMRUKTARIFEKODU(const Value: WideString);
  { Warning: The property GUMRUKTARIFEKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GUMRUKTARIFEKODU := Value;
end;

function TStokTemelBilgi.Get_ABCKODU: WideString;
begin
    Result := DefaultInterface.ABCKODU;
end;

procedure TStokTemelBilgi.Set_ABCKODU(const Value: WideString);
  { Warning: The property ABCKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ABCKODU := Value;
end;

function TStokTemelBilgi.Get_PERFORMANSKODU: WideString;
begin
    Result := DefaultInterface.PERFORMANSKODU;
end;

procedure TStokTemelBilgi.Set_PERFORMANSKODU(const Value: WideString);
  { Warning: The property PERFORMANSKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PERFORMANSKODU := Value;
end;

function TStokTemelBilgi.Get_SATICISIPKILIT: WideString;
begin
    Result := DefaultInterface.SATICISIPKILIT;
end;

procedure TStokTemelBilgi.Set_SATICISIPKILIT(const Value: WideString);
  { Warning: The property SATICISIPKILIT has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SATICISIPKILIT := Value;
end;

function TStokTemelBilgi.Get_MUSTERISIPKILIT: WideString;
begin
    Result := DefaultInterface.MUSTERISIPKILIT;
end;

procedure TStokTemelBilgi.Set_MUSTERISIPKILIT(const Value: WideString);
  { Warning: The property MUSTERISIPKILIT has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MUSTERISIPKILIT := Value;
end;

function TStokTemelBilgi.Get_SATINALMAKILIT: WideString;
begin
    Result := DefaultInterface.SATINALMAKILIT;
end;

procedure TStokTemelBilgi.Set_SATINALMAKILIT(const Value: WideString);
  { Warning: The property SATINALMAKILIT has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SATINALMAKILIT := Value;
end;

function TStokTemelBilgi.Get_SatisKilit: WideString;
begin
    Result := DefaultInterface.SatisKilit;
end;

procedure TStokTemelBilgi.Set_SatisKilit(const Value: WideString);
  { Warning: The property SatisKilit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SatisKilit := Value;
end;

function TStokTemelBilgi.Get_EN: Double;
begin
    Result := DefaultInterface.EN;
end;

procedure TStokTemelBilgi.Set_EN(Value: Double);
begin
  DefaultInterface.Set_EN(Value);
end;

function TStokTemelBilgi.Get_BOY: Double;
begin
    Result := DefaultInterface.BOY;
end;

procedure TStokTemelBilgi.Set_BOY(Value: Double);
begin
  DefaultInterface.Set_BOY(Value);
end;

function TStokTemelBilgi.Get_GENISLIK: Double;
begin
    Result := DefaultInterface.GENISLIK;
end;

procedure TStokTemelBilgi.Set_GENISLIK(Value: Double);
begin
  DefaultInterface.Set_GENISLIK(Value);
end;

function TStokTemelBilgi.Get_SIPLIMITVAR: WideString;
begin
    Result := DefaultInterface.SIPLIMITVAR;
end;

procedure TStokTemelBilgi.Set_SIPLIMITVAR(const Value: WideString);
  { Warning: The property SIPLIMITVAR has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SIPLIMITVAR := Value;
end;

function TStokTemelBilgi.Get_SONSTOKKODU: WideString;
begin
    Result := DefaultInterface.SONSTOKKODU;
end;

procedure TStokTemelBilgi.Set_SONSTOKKODU(const Value: WideString);
  { Warning: The property SONSTOKKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SONSTOKKODU := Value;
end;

function TStokTemelBilgi.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TStokTemelBilgi.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TStokTemelBilgi.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TStokTemelBilgi.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

function TStokTemelBilgi.Get_FIKTIF_MAM: WideString;
begin
    Result := DefaultInterface.FIKTIF_MAM;
end;

procedure TStokTemelBilgi.Set_FIKTIF_MAM(const Value: WideString);
  { Warning: The property FIKTIF_MAM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FIKTIF_MAM := Value;
end;

function TStokTemelBilgi.Get_YAPILANDIR: WideString;
begin
    Result := DefaultInterface.YAPILANDIR;
end;

procedure TStokTemelBilgi.Set_YAPILANDIR(const Value: WideString);
  { Warning: The property YAPILANDIR has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YAPILANDIR := Value;
end;

function TStokTemelBilgi.Get_SBOMVARMI: WideString;
begin
    Result := DefaultInterface.SBOMVARMI;
end;

procedure TStokTemelBilgi.Set_SBOMVARMI(const Value: WideString);
  { Warning: The property SBOMVARMI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SBOMVARMI := Value;
end;

function TStokTemelBilgi.Get_BAGLISTOKKOD: WideString;
begin
    Result := DefaultInterface.BAGLISTOKKOD;
end;

procedure TStokTemelBilgi.Set_BAGLISTOKKOD(const Value: WideString);
  { Warning: The property BAGLISTOKKOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BAGLISTOKKOD := Value;
end;

function TStokTemelBilgi.Get_YapKod: WideString;
begin
    Result := DefaultInterface.YapKod;
end;

procedure TStokTemelBilgi.Set_YapKod(const Value: WideString);
  { Warning: The property YapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YapKod := Value;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TStokTemelBilgiProperties.Create(AServer: TStokTemelBilgi);
begin
  inherited Create;
  FServer := AServer;
end;

function TStokTemelBilgiProperties.GetDefaultInterface: IStokTemelBilgi;
begin
  Result := FServer.DefaultInterface;
end;

function TStokTemelBilgiProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TStokTemelBilgiProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStokTemelBilgiProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TStokTemelBilgiProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TStokTemelBilgiProperties.Get_Stok_Kodu: WideString;
begin
    Result := DefaultInterface.Stok_Kodu;
end;

procedure TStokTemelBilgiProperties.Set_Stok_Kodu(const Value: WideString);
  { Warning: The property Stok_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stok_Kodu := Value;
end;

function TStokTemelBilgiProperties.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TStokTemelBilgiProperties.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TStokTemelBilgiProperties.Get_ISLETME_KODU: Integer;
begin
    Result := DefaultInterface.ISLETME_KODU;
end;

procedure TStokTemelBilgiProperties.Set_ISLETME_KODU(Value: Integer);
begin
  DefaultInterface.Set_ISLETME_KODU(Value);
end;

function TStokTemelBilgiProperties.Get_Stok_Adi: WideString;
begin
    Result := DefaultInterface.Stok_Adi;
end;

procedure TStokTemelBilgiProperties.Set_Stok_Adi(const Value: WideString);
  { Warning: The property Stok_Adi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stok_Adi := Value;
end;

function TStokTemelBilgiProperties.Get_Uretici_Kodu: WideString;
begin
    Result := DefaultInterface.Uretici_Kodu;
end;

procedure TStokTemelBilgiProperties.Set_Uretici_Kodu(const Value: WideString);
  { Warning: The property Uretici_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Uretici_Kodu := Value;
end;

function TStokTemelBilgiProperties.Get_Grup_Kodu: WideString;
begin
    Result := DefaultInterface.Grup_Kodu;
end;

procedure TStokTemelBilgiProperties.Set_Grup_Kodu(const Value: WideString);
  { Warning: The property Grup_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Grup_Kodu := Value;
end;

function TStokTemelBilgiProperties.Get_Kod_1: WideString;
begin
    Result := DefaultInterface.Kod_1;
end;

procedure TStokTemelBilgiProperties.Set_Kod_1(const Value: WideString);
  { Warning: The property Kod_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod_1 := Value;
end;

function TStokTemelBilgiProperties.Get_Kod_2: WideString;
begin
    Result := DefaultInterface.Kod_2;
end;

procedure TStokTemelBilgiProperties.Set_Kod_2(const Value: WideString);
  { Warning: The property Kod_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod_2 := Value;
end;

function TStokTemelBilgiProperties.Get_Kod_3: WideString;
begin
    Result := DefaultInterface.Kod_3;
end;

procedure TStokTemelBilgiProperties.Set_Kod_3(const Value: WideString);
  { Warning: The property Kod_3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod_3 := Value;
end;

function TStokTemelBilgiProperties.Get_Kod_4: WideString;
begin
    Result := DefaultInterface.Kod_4;
end;

procedure TStokTemelBilgiProperties.Set_Kod_4(const Value: WideString);
  { Warning: The property Kod_4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod_4 := Value;
end;

function TStokTemelBilgiProperties.Get_Kod_5: WideString;
begin
    Result := DefaultInterface.Kod_5;
end;

procedure TStokTemelBilgiProperties.Set_Kod_5(const Value: WideString);
  { Warning: The property Kod_5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod_5 := Value;
end;

function TStokTemelBilgiProperties.Get_Satici_Kodu: WideString;
begin
    Result := DefaultInterface.Satici_Kodu;
end;

procedure TStokTemelBilgiProperties.Set_Satici_Kodu(const Value: WideString);
  { Warning: The property Satici_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Satici_Kodu := Value;
end;

function TStokTemelBilgiProperties.Get_Olcu_Br1: WideString;
begin
    Result := DefaultInterface.Olcu_Br1;
end;

procedure TStokTemelBilgiProperties.Set_Olcu_Br1(const Value: WideString);
  { Warning: The property Olcu_Br1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Olcu_Br1 := Value;
end;

function TStokTemelBilgiProperties.Get_Olcu_Br2: WideString;
begin
    Result := DefaultInterface.Olcu_Br2;
end;

procedure TStokTemelBilgiProperties.Set_Olcu_Br2(const Value: WideString);
  { Warning: The property Olcu_Br2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Olcu_Br2 := Value;
end;

function TStokTemelBilgiProperties.Get_Pay_1: Double;
begin
    Result := DefaultInterface.Pay_1;
end;

procedure TStokTemelBilgiProperties.Set_Pay_1(Value: Double);
begin
  DefaultInterface.Set_Pay_1(Value);
end;

function TStokTemelBilgiProperties.Get_Payda_1: Double;
begin
    Result := DefaultInterface.Payda_1;
end;

procedure TStokTemelBilgiProperties.Set_Payda_1(Value: Double);
begin
  DefaultInterface.Set_Payda_1(Value);
end;

function TStokTemelBilgiProperties.Get_Olcu_Br3: WideString;
begin
    Result := DefaultInterface.Olcu_Br3;
end;

procedure TStokTemelBilgiProperties.Set_Olcu_Br3(const Value: WideString);
  { Warning: The property Olcu_Br3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Olcu_Br3 := Value;
end;

function TStokTemelBilgiProperties.Get_Pay2: Double;
begin
    Result := DefaultInterface.Pay2;
end;

procedure TStokTemelBilgiProperties.Set_Pay2(Value: Double);
begin
  DefaultInterface.Set_Pay2(Value);
end;

function TStokTemelBilgiProperties.Get_Payda2: Double;
begin
    Result := DefaultInterface.Payda2;
end;

procedure TStokTemelBilgiProperties.Set_Payda2(Value: Double);
begin
  DefaultInterface.Set_Payda2(Value);
end;

function TStokTemelBilgiProperties.Get_Fiat_birimi: WideString;
begin
    Result := DefaultInterface.Fiat_birimi;
end;

procedure TStokTemelBilgiProperties.Set_Fiat_birimi(const Value: WideString);
  { Warning: The property Fiat_birimi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Fiat_birimi := Value;
end;

function TStokTemelBilgiProperties.Get_Azami_Stok: Double;
begin
    Result := DefaultInterface.Azami_Stok;
end;

procedure TStokTemelBilgiProperties.Set_Azami_Stok(Value: Double);
begin
  DefaultInterface.Set_Azami_Stok(Value);
end;

function TStokTemelBilgiProperties.Get_Asgari_Stok: Double;
begin
    Result := DefaultInterface.Asgari_Stok;
end;

procedure TStokTemelBilgiProperties.Set_Asgari_Stok(Value: Double);
begin
  DefaultInterface.Set_Asgari_Stok(Value);
end;

function TStokTemelBilgiProperties.Get_Temin_Suresi: Double;
begin
    Result := DefaultInterface.Temin_Suresi;
end;

procedure TStokTemelBilgiProperties.Set_Temin_Suresi(Value: Double);
begin
  DefaultInterface.Set_Temin_Suresi(Value);
end;

function TStokTemelBilgiProperties.Get_Kul_Mik: Double;
begin
    Result := DefaultInterface.Kul_Mik;
end;

procedure TStokTemelBilgiProperties.Set_Kul_Mik(Value: Double);
begin
  DefaultInterface.Set_Kul_Mik(Value);
end;

function TStokTemelBilgiProperties.Get_Risk_Suresi: Integer;
begin
    Result := DefaultInterface.Risk_Suresi;
end;

procedure TStokTemelBilgiProperties.Set_Risk_Suresi(Value: Integer);
begin
  DefaultInterface.Set_Risk_Suresi(Value);
end;

function TStokTemelBilgiProperties.Get_Zaman_Birimi: WideString;
begin
    Result := DefaultInterface.Zaman_Birimi;
end;

procedure TStokTemelBilgiProperties.Set_Zaman_Birimi(const Value: WideString);
  { Warning: The property Zaman_Birimi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Zaman_Birimi := Value;
end;

function TStokTemelBilgiProperties.Get_Satis_Fiat1: Double;
begin
    Result := DefaultInterface.Satis_Fiat1;
end;

procedure TStokTemelBilgiProperties.Set_Satis_Fiat1(Value: Double);
begin
  DefaultInterface.Set_Satis_Fiat1(Value);
end;

function TStokTemelBilgiProperties.Get_Satis_Fiat2: Double;
begin
    Result := DefaultInterface.Satis_Fiat2;
end;

procedure TStokTemelBilgiProperties.Set_Satis_Fiat2(Value: Double);
begin
  DefaultInterface.Set_Satis_Fiat2(Value);
end;

function TStokTemelBilgiProperties.Get_Satis_Fiat3: Double;
begin
    Result := DefaultInterface.Satis_Fiat3;
end;

procedure TStokTemelBilgiProperties.Set_Satis_Fiat3(Value: Double);
begin
  DefaultInterface.Set_Satis_Fiat3(Value);
end;

function TStokTemelBilgiProperties.Get_Satis_Fiat4: Double;
begin
    Result := DefaultInterface.Satis_Fiat4;
end;

procedure TStokTemelBilgiProperties.Set_Satis_Fiat4(Value: Double);
begin
  DefaultInterface.Set_Satis_Fiat4(Value);
end;

function TStokTemelBilgiProperties.Get_Sat_Dov_Tip: Integer;
begin
    Result := DefaultInterface.Sat_Dov_Tip;
end;

procedure TStokTemelBilgiProperties.Set_Sat_Dov_Tip(Value: Integer);
begin
  DefaultInterface.Set_Sat_Dov_Tip(Value);
end;

function TStokTemelBilgiProperties.Get_Dov_Alis_Fiat: Double;
begin
    Result := DefaultInterface.Dov_Alis_Fiat;
end;

procedure TStokTemelBilgiProperties.Set_Dov_Alis_Fiat(Value: Double);
begin
  DefaultInterface.Set_Dov_Alis_Fiat(Value);
end;

function TStokTemelBilgiProperties.Get_Dov_Satis_Fiat: Double;
begin
    Result := DefaultInterface.Dov_Satis_Fiat;
end;

procedure TStokTemelBilgiProperties.Set_Dov_Satis_Fiat(Value: Double);
begin
  DefaultInterface.Set_Dov_Satis_Fiat(Value);
end;

function TStokTemelBilgiProperties.Get_Dov_Mal_Fiat: Double;
begin
    Result := DefaultInterface.Dov_Mal_Fiat;
end;

procedure TStokTemelBilgiProperties.Set_Dov_Mal_Fiat(Value: Double);
begin
  DefaultInterface.Set_Dov_Mal_Fiat(Value);
end;

function TStokTemelBilgiProperties.Get_Muh_DetayKodu: Integer;
begin
    Result := DefaultInterface.Muh_DetayKodu;
end;

procedure TStokTemelBilgiProperties.Set_Muh_DetayKodu(Value: Integer);
begin
  DefaultInterface.Set_Muh_DetayKodu(Value);
end;

function TStokTemelBilgiProperties.Get_Birim_Agirlik: Double;
begin
    Result := DefaultInterface.Birim_Agirlik;
end;

procedure TStokTemelBilgiProperties.Set_Birim_Agirlik(Value: Double);
begin
  DefaultInterface.Set_Birim_Agirlik(Value);
end;

function TStokTemelBilgiProperties.Get_Nakliyet_Tut: Double;
begin
    Result := DefaultInterface.Nakliyet_Tut;
end;

procedure TStokTemelBilgiProperties.Set_Nakliyet_Tut(Value: Double);
begin
  DefaultInterface.Set_Nakliyet_Tut(Value);
end;

function TStokTemelBilgiProperties.Get_KDV_Orani: Double;
begin
    Result := DefaultInterface.KDV_Orani;
end;

procedure TStokTemelBilgiProperties.Set_KDV_Orani(Value: Double);
begin
  DefaultInterface.Set_KDV_Orani(Value);
end;

function TStokTemelBilgiProperties.Get_Alis_Dov_Tip: Integer;
begin
    Result := DefaultInterface.Alis_Dov_Tip;
end;

procedure TStokTemelBilgiProperties.Set_Alis_Dov_Tip(Value: Integer);
begin
  DefaultInterface.Set_Alis_Dov_Tip(Value);
end;

function TStokTemelBilgiProperties.Get_DEPO_KODU: Integer;
begin
    Result := DefaultInterface.DEPO_KODU;
end;

procedure TStokTemelBilgiProperties.Set_DEPO_KODU(Value: Integer);
begin
  DefaultInterface.Set_DEPO_KODU(Value);
end;

function TStokTemelBilgiProperties.Get_DOV_TUR: Integer;
begin
    Result := DefaultInterface.DOV_TUR;
end;

procedure TStokTemelBilgiProperties.Set_DOV_TUR(Value: Integer);
begin
  DefaultInterface.Set_DOV_TUR(Value);
end;

function TStokTemelBilgiProperties.Get_Uret_Olcu_Br: Integer;
begin
    Result := DefaultInterface.Uret_Olcu_Br;
end;

procedure TStokTemelBilgiProperties.Set_Uret_Olcu_Br(Value: Integer);
begin
  DefaultInterface.Set_Uret_Olcu_Br(Value);
end;

function TStokTemelBilgiProperties.Get_Bilesenmi: WideString;
begin
    Result := DefaultInterface.Bilesenmi;
end;

procedure TStokTemelBilgiProperties.Set_Bilesenmi(const Value: WideString);
  { Warning: The property Bilesenmi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Bilesenmi := Value;
end;

function TStokTemelBilgiProperties.Get_Mamulmu: WideString;
begin
    Result := DefaultInterface.Mamulmu;
end;

procedure TStokTemelBilgiProperties.Set_Mamulmu(const Value: WideString);
  { Warning: The property Mamulmu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Mamulmu := Value;
end;

function TStokTemelBilgiProperties.Get_Formul_Toplami: Double;
begin
    Result := DefaultInterface.Formul_Toplami;
end;

procedure TStokTemelBilgiProperties.Set_Formul_Toplami(Value: Double);
begin
  DefaultInterface.Set_Formul_Toplami(Value);
end;

function TStokTemelBilgiProperties.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TStokTemelBilgiProperties.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TStokTemelBilgiProperties.Get_Max_Iskonto: Double;
begin
    Result := DefaultInterface.Max_Iskonto;
end;

procedure TStokTemelBilgiProperties.Set_Max_Iskonto(Value: Double);
begin
  DefaultInterface.Set_Max_Iskonto(Value);
end;

function TStokTemelBilgiProperties.Get_Eczaci_Kari: Double;
begin
    Result := DefaultInterface.Eczaci_Kari;
end;

procedure TStokTemelBilgiProperties.Set_Eczaci_Kari(Value: Double);
begin
  DefaultInterface.Set_Eczaci_Kari(Value);
end;

function TStokTemelBilgiProperties.Get_Miktar: Double;
begin
    Result := DefaultInterface.Miktar;
end;

procedure TStokTemelBilgiProperties.Set_Miktar(Value: Double);
begin
  DefaultInterface.Set_Miktar(Value);
end;

function TStokTemelBilgiProperties.Get_Mal_Fazlasi: Double;
begin
    Result := DefaultInterface.Mal_Fazlasi;
end;

procedure TStokTemelBilgiProperties.Set_Mal_Fazlasi(Value: Double);
begin
  DefaultInterface.Set_Mal_Fazlasi(Value);
end;

function TStokTemelBilgiProperties.Get_Kdv_Tenzil_Oran: Double;
begin
    Result := DefaultInterface.Kdv_Tenzil_Oran;
end;

procedure TStokTemelBilgiProperties.Set_Kdv_Tenzil_Oran(Value: Double);
begin
  DefaultInterface.Set_Kdv_Tenzil_Oran(Value);
end;

function TStokTemelBilgiProperties.Get_Kilit: WideString;
begin
    Result := DefaultInterface.Kilit;
end;

procedure TStokTemelBilgiProperties.Set_Kilit(const Value: WideString);
  { Warning: The property Kilit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kilit := Value;
end;

function TStokTemelBilgiProperties.Get_Onceki_Kod: WideString;
begin
    Result := DefaultInterface.Onceki_Kod;
end;

procedure TStokTemelBilgiProperties.Set_Onceki_Kod(const Value: WideString);
  { Warning: The property Onceki_Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Onceki_Kod := Value;
end;

function TStokTemelBilgiProperties.Get_Sonraki_Kod: WideString;
begin
    Result := DefaultInterface.Sonraki_Kod;
end;

procedure TStokTemelBilgiProperties.Set_Sonraki_Kod(const Value: WideString);
  { Warning: The property Sonraki_Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sonraki_Kod := Value;
end;

function TStokTemelBilgiProperties.Get_Barkod1: WideString;
begin
    Result := DefaultInterface.Barkod1;
end;

procedure TStokTemelBilgiProperties.Set_Barkod1(const Value: WideString);
  { Warning: The property Barkod1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Barkod1 := Value;
end;

function TStokTemelBilgiProperties.Get_Barkod2: WideString;
begin
    Result := DefaultInterface.Barkod2;
end;

procedure TStokTemelBilgiProperties.Set_Barkod2(const Value: WideString);
  { Warning: The property Barkod2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Barkod2 := Value;
end;

function TStokTemelBilgiProperties.Get_Barkod3: WideString;
begin
    Result := DefaultInterface.Barkod3;
end;

procedure TStokTemelBilgiProperties.Set_Barkod3(const Value: WideString);
  { Warning: The property Barkod3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Barkod3 := Value;
end;

function TStokTemelBilgiProperties.Get_Alis_Kdv_Kodu: Double;
begin
    Result := DefaultInterface.Alis_Kdv_Kodu;
end;

procedure TStokTemelBilgiProperties.Set_Alis_Kdv_Kodu(Value: Double);
begin
  DefaultInterface.Set_Alis_Kdv_Kodu(Value);
end;

function TStokTemelBilgiProperties.Get_Alis_Fiat1: Double;
begin
    Result := DefaultInterface.Alis_Fiat1;
end;

procedure TStokTemelBilgiProperties.Set_Alis_Fiat1(Value: Double);
begin
  DefaultInterface.Set_Alis_Fiat1(Value);
end;

function TStokTemelBilgiProperties.Get_Alis_Fiat2: Double;
begin
    Result := DefaultInterface.Alis_Fiat2;
end;

procedure TStokTemelBilgiProperties.Set_Alis_Fiat2(Value: Double);
begin
  DefaultInterface.Set_Alis_Fiat2(Value);
end;

function TStokTemelBilgiProperties.Get_Alis_Fiat3: Double;
begin
    Result := DefaultInterface.Alis_Fiat3;
end;

procedure TStokTemelBilgiProperties.Set_Alis_Fiat3(Value: Double);
begin
  DefaultInterface.Set_Alis_Fiat3(Value);
end;

function TStokTemelBilgiProperties.Get_Alis_Fiat4: Double;
begin
    Result := DefaultInterface.Alis_Fiat4;
end;

procedure TStokTemelBilgiProperties.Set_Alis_Fiat4(Value: Double);
begin
  DefaultInterface.Set_Alis_Fiat4(Value);
end;

function TStokTemelBilgiProperties.Get_Lot_Size: Double;
begin
    Result := DefaultInterface.Lot_Size;
end;

procedure TStokTemelBilgiProperties.Set_Lot_Size(Value: Double);
begin
  DefaultInterface.Set_Lot_Size(Value);
end;

function TStokTemelBilgiProperties.Get_Min_Sip_Miktar: Double;
begin
    Result := DefaultInterface.Min_Sip_Miktar;
end;

procedure TStokTemelBilgiProperties.Set_Min_Sip_Miktar(Value: Double);
begin
  DefaultInterface.Set_Min_Sip_Miktar(Value);
end;

function TStokTemelBilgiProperties.Get_Sabit_Sip_Aralik: Integer;
begin
    Result := DefaultInterface.Sabit_Sip_Aralik;
end;

procedure TStokTemelBilgiProperties.Set_Sabit_Sip_Aralik(Value: Integer);
begin
  DefaultInterface.Set_Sabit_Sip_Aralik(Value);
end;

function TStokTemelBilgiProperties.Get_Sip_Politikasi: WideString;
begin
    Result := DefaultInterface.Sip_Politikasi;
end;

procedure TStokTemelBilgiProperties.Set_Sip_Politikasi(const Value: WideString);
  { Warning: The property Sip_Politikasi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sip_Politikasi := Value;
end;

function TStokTemelBilgiProperties.Get_Ozellik_Kodu1: Integer;
begin
    Result := DefaultInterface.Ozellik_Kodu1;
end;

procedure TStokTemelBilgiProperties.Set_Ozellik_Kodu1(Value: Integer);
begin
  DefaultInterface.Set_Ozellik_Kodu1(Value);
end;

function TStokTemelBilgiProperties.Get_Ozellik_Kodu2: Integer;
begin
    Result := DefaultInterface.Ozellik_Kodu2;
end;

procedure TStokTemelBilgiProperties.Set_Ozellik_Kodu2(Value: Integer);
begin
  DefaultInterface.Set_Ozellik_Kodu2(Value);
end;

function TStokTemelBilgiProperties.Get_Ozellik_Kodu3: Integer;
begin
    Result := DefaultInterface.Ozellik_Kodu3;
end;

procedure TStokTemelBilgiProperties.Set_Ozellik_Kodu3(Value: Integer);
begin
  DefaultInterface.Set_Ozellik_Kodu3(Value);
end;

function TStokTemelBilgiProperties.Get_Ozellik_Kodu4: Integer;
begin
    Result := DefaultInterface.Ozellik_Kodu4;
end;

procedure TStokTemelBilgiProperties.Set_Ozellik_Kodu4(Value: Integer);
begin
  DefaultInterface.Set_Ozellik_Kodu4(Value);
end;

function TStokTemelBilgiProperties.Get_Ozellik_Kodu5: Integer;
begin
    Result := DefaultInterface.Ozellik_Kodu5;
end;

procedure TStokTemelBilgiProperties.Set_Ozellik_Kodu5(Value: Integer);
begin
  DefaultInterface.Set_Ozellik_Kodu5(Value);
end;

function TStokTemelBilgiProperties.Get_Opsiyon_Kodu1: Integer;
begin
    Result := DefaultInterface.Opsiyon_Kodu1;
end;

procedure TStokTemelBilgiProperties.Set_Opsiyon_Kodu1(Value: Integer);
begin
  DefaultInterface.Set_Opsiyon_Kodu1(Value);
end;

function TStokTemelBilgiProperties.Get_Opsiyon_Kodu2: Integer;
begin
    Result := DefaultInterface.Opsiyon_Kodu2;
end;

procedure TStokTemelBilgiProperties.Set_Opsiyon_Kodu2(Value: Integer);
begin
  DefaultInterface.Set_Opsiyon_Kodu2(Value);
end;

function TStokTemelBilgiProperties.Get_Opsiyon_Kodu3: Integer;
begin
    Result := DefaultInterface.Opsiyon_Kodu3;
end;

procedure TStokTemelBilgiProperties.Set_Opsiyon_Kodu3(Value: Integer);
begin
  DefaultInterface.Set_Opsiyon_Kodu3(Value);
end;

function TStokTemelBilgiProperties.Get_Opsiyon_Kodu4: Integer;
begin
    Result := DefaultInterface.Opsiyon_Kodu4;
end;

procedure TStokTemelBilgiProperties.Set_Opsiyon_Kodu4(Value: Integer);
begin
  DefaultInterface.Set_Opsiyon_Kodu4(Value);
end;

function TStokTemelBilgiProperties.Get_Opsiyon_Kodu5: Integer;
begin
    Result := DefaultInterface.Opsiyon_Kodu5;
end;

procedure TStokTemelBilgiProperties.Set_Opsiyon_Kodu5(Value: Integer);
begin
  DefaultInterface.Set_Opsiyon_Kodu5(Value);
end;

function TStokTemelBilgiProperties.Get_Bilesen_Op_Kodu: Integer;
begin
    Result := DefaultInterface.Bilesen_Op_Kodu;
end;

procedure TStokTemelBilgiProperties.Set_Bilesen_Op_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Bilesen_Op_Kodu(Value);
end;

function TStokTemelBilgiProperties.Get_Sip_Ver_Mal: Double;
begin
    Result := DefaultInterface.Sip_Ver_Mal;
end;

procedure TStokTemelBilgiProperties.Set_Sip_Ver_Mal(Value: Double);
begin
  DefaultInterface.Set_Sip_Ver_Mal(Value);
end;

function TStokTemelBilgiProperties.Get_Elde_Bul_Mal: Double;
begin
    Result := DefaultInterface.Elde_Bul_Mal;
end;

procedure TStokTemelBilgiProperties.Set_Elde_Bul_Mal(Value: Double);
begin
  DefaultInterface.Set_Elde_Bul_Mal(Value);
end;

function TStokTemelBilgiProperties.Get_Yil_Tah_Kul_Mik: Double;
begin
    Result := DefaultInterface.Yil_Tah_Kul_Mik;
end;

procedure TStokTemelBilgiProperties.Set_Yil_Tah_Kul_Mik(Value: Double);
begin
  DefaultInterface.Set_Yil_Tah_Kul_Mik(Value);
end;

function TStokTemelBilgiProperties.Get_Ekon_Sip_Miktar: Double;
begin
    Result := DefaultInterface.Ekon_Sip_Miktar;
end;

procedure TStokTemelBilgiProperties.Set_Ekon_Sip_Miktar(Value: Double);
begin
  DefaultInterface.Set_Ekon_Sip_Miktar(Value);
end;

function TStokTemelBilgiProperties.Get_Eski_Recete: WideString;
begin
    Result := DefaultInterface.Eski_Recete;
end;

procedure TStokTemelBilgiProperties.Set_Eski_Recete(const Value: WideString);
  { Warning: The property Eski_Recete has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Eski_Recete := Value;
end;

function TStokTemelBilgiProperties.Get_Otomatik_Uretim: WideString;
begin
    Result := DefaultInterface.Otomatik_Uretim;
end;

procedure TStokTemelBilgiProperties.Set_Otomatik_Uretim(const Value: WideString);
  { Warning: The property Otomatik_Uretim has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Otomatik_Uretim := Value;
end;

function TStokTemelBilgiProperties.Get_Alfkod: WideString;
begin
    Result := DefaultInterface.Alfkod;
end;

procedure TStokTemelBilgiProperties.Set_Alfkod(const Value: WideString);
  { Warning: The property Alfkod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Alfkod := Value;
end;

function TStokTemelBilgiProperties.Get_SafKod: WideString;
begin
    Result := DefaultInterface.SafKod;
end;

procedure TStokTemelBilgiProperties.Set_SafKod(const Value: WideString);
  { Warning: The property SafKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SafKod := Value;
end;

function TStokTemelBilgiProperties.Get_Kodturu: WideString;
begin
    Result := DefaultInterface.Kodturu;
end;

procedure TStokTemelBilgiProperties.Set_Kodturu(const Value: WideString);
  { Warning: The property Kodturu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kodturu := Value;
end;

function TStokTemelBilgiProperties.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TStokTemelBilgiProperties.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TStokTemelBilgiProperties.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TStokTemelBilgiProperties.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TStokTemelBilgiProperties.Get_F_Yedek3: Double;
begin
    Result := DefaultInterface.F_Yedek3;
end;

procedure TStokTemelBilgiProperties.Set_F_Yedek3(Value: Double);
begin
  DefaultInterface.Set_F_Yedek3(Value);
end;

function TStokTemelBilgiProperties.Get_F_Yedek4: Double;
begin
    Result := DefaultInterface.F_Yedek4;
end;

procedure TStokTemelBilgiProperties.Set_F_Yedek4(Value: Double);
begin
  DefaultInterface.Set_F_Yedek4(Value);
end;

function TStokTemelBilgiProperties.Get_C_Yedek5: WideString;
begin
    Result := DefaultInterface.C_Yedek5;
end;

procedure TStokTemelBilgiProperties.Set_C_Yedek5(const Value: WideString);
  { Warning: The property C_Yedek5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek5 := Value;
end;

function TStokTemelBilgiProperties.Get_C_Yedek6: WideString;
begin
    Result := DefaultInterface.C_Yedek6;
end;

procedure TStokTemelBilgiProperties.Set_C_Yedek6(const Value: WideString);
  { Warning: The property C_Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek6 := Value;
end;

function TStokTemelBilgiProperties.Get_B_Yedek7: Integer;
begin
    Result := DefaultInterface.B_Yedek7;
end;

procedure TStokTemelBilgiProperties.Set_B_Yedek7(Value: Integer);
begin
  DefaultInterface.Set_B_Yedek7(Value);
end;

function TStokTemelBilgiProperties.Get_I_Yedek8: Integer;
begin
    Result := DefaultInterface.I_Yedek8;
end;

procedure TStokTemelBilgiProperties.Set_I_Yedek8(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek8(Value);
end;

function TStokTemelBilgiProperties.Get_L_Yedek9: Integer;
begin
    Result := DefaultInterface.L_Yedek9;
end;

procedure TStokTemelBilgiProperties.Set_L_Yedek9(Value: Integer);
begin
  DefaultInterface.Set_L_Yedek9(Value);
end;

function TStokTemelBilgiProperties.Get_D_YEDEK10: TDateTime;
begin
    Result := DefaultInterface.D_YEDEK10;
end;

procedure TStokTemelBilgiProperties.Set_D_YEDEK10(Value: TDateTime);
begin
  DefaultInterface.Set_D_YEDEK10(Value);
end;

function TStokTemelBilgiProperties.Get_Giris_Seri: WideString;
begin
    Result := DefaultInterface.Giris_Seri;
end;

procedure TStokTemelBilgiProperties.Set_Giris_Seri(const Value: WideString);
  { Warning: The property Giris_Seri has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Giris_Seri := Value;
end;

function TStokTemelBilgiProperties.Get_Cikis_Seri: WideString;
begin
    Result := DefaultInterface.Cikis_Seri;
end;

procedure TStokTemelBilgiProperties.Set_Cikis_Seri(const Value: WideString);
  { Warning: The property Cikis_Seri has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Cikis_Seri := Value;
end;

function TStokTemelBilgiProperties.Get_Seri_Bak: WideString;
begin
    Result := DefaultInterface.Seri_Bak;
end;

procedure TStokTemelBilgiProperties.Set_Seri_Bak(const Value: WideString);
  { Warning: The property Seri_Bak has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri_Bak := Value;
end;

function TStokTemelBilgiProperties.Get_Seri_Mik: WideString;
begin
    Result := DefaultInterface.Seri_Mik;
end;

procedure TStokTemelBilgiProperties.Set_Seri_Mik(const Value: WideString);
  { Warning: The property Seri_Mik has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri_Mik := Value;
end;

function TStokTemelBilgiProperties.Get_Seri_Gir_Ot: WideString;
begin
    Result := DefaultInterface.Seri_Gir_Ot;
end;

procedure TStokTemelBilgiProperties.Set_Seri_Gir_Ot(const Value: WideString);
  { Warning: The property Seri_Gir_Ot has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri_Gir_Ot := Value;
end;

function TStokTemelBilgiProperties.Get_Seri_Cik_Ot: WideString;
begin
    Result := DefaultInterface.Seri_Cik_Ot;
end;

procedure TStokTemelBilgiProperties.Set_Seri_Cik_Ot(const Value: WideString);
  { Warning: The property Seri_Cik_Ot has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri_Cik_Ot := Value;
end;

function TStokTemelBilgiProperties.Get_Seri_Baslangic: WideString;
begin
    Result := DefaultInterface.Seri_Baslangic;
end;

procedure TStokTemelBilgiProperties.Set_Seri_Baslangic(const Value: WideString);
  { Warning: The property Seri_Baslangic has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri_Baslangic := Value;
end;

function TStokTemelBilgiProperties.Get_FiyatKodu: WideString;
begin
    Result := DefaultInterface.FiyatKodu;
end;

procedure TStokTemelBilgiProperties.Set_FiyatKodu(const Value: WideString);
  { Warning: The property FiyatKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FiyatKodu := Value;
end;

function TStokTemelBilgiProperties.Get_FiyatSirasi: Integer;
begin
    Result := DefaultInterface.FiyatSirasi;
end;

procedure TStokTemelBilgiProperties.Set_FiyatSirasi(Value: Integer);
begin
  DefaultInterface.Set_FiyatSirasi(Value);
end;

function TStokTemelBilgiProperties.Get_PLANLANACAK: WideString;
begin
    Result := DefaultInterface.PLANLANACAK;
end;

procedure TStokTemelBilgiProperties.Set_PLANLANACAK(const Value: WideString);
  { Warning: The property PLANLANACAK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PLANLANACAK := Value;
end;

function TStokTemelBilgiProperties.Get_LOT_SIZECUSTOMER: Double;
begin
    Result := DefaultInterface.LOT_SIZECUSTOMER;
end;

procedure TStokTemelBilgiProperties.Set_LOT_SIZECUSTOMER(Value: Double);
begin
  DefaultInterface.Set_LOT_SIZECUSTOMER(Value);
end;

function TStokTemelBilgiProperties.Get_MIN_SIP_MIKTARCUSTOMER: Double;
begin
    Result := DefaultInterface.MIN_SIP_MIKTARCUSTOMER;
end;

procedure TStokTemelBilgiProperties.Set_MIN_SIP_MIKTARCUSTOMER(Value: Double);
begin
  DefaultInterface.Set_MIN_SIP_MIKTARCUSTOMER(Value);
end;

function TStokTemelBilgiProperties.Get_GUMRUKTARIFEKODU: WideString;
begin
    Result := DefaultInterface.GUMRUKTARIFEKODU;
end;

procedure TStokTemelBilgiProperties.Set_GUMRUKTARIFEKODU(const Value: WideString);
  { Warning: The property GUMRUKTARIFEKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GUMRUKTARIFEKODU := Value;
end;

function TStokTemelBilgiProperties.Get_ABCKODU: WideString;
begin
    Result := DefaultInterface.ABCKODU;
end;

procedure TStokTemelBilgiProperties.Set_ABCKODU(const Value: WideString);
  { Warning: The property ABCKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ABCKODU := Value;
end;

function TStokTemelBilgiProperties.Get_PERFORMANSKODU: WideString;
begin
    Result := DefaultInterface.PERFORMANSKODU;
end;

procedure TStokTemelBilgiProperties.Set_PERFORMANSKODU(const Value: WideString);
  { Warning: The property PERFORMANSKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PERFORMANSKODU := Value;
end;

function TStokTemelBilgiProperties.Get_SATICISIPKILIT: WideString;
begin
    Result := DefaultInterface.SATICISIPKILIT;
end;

procedure TStokTemelBilgiProperties.Set_SATICISIPKILIT(const Value: WideString);
  { Warning: The property SATICISIPKILIT has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SATICISIPKILIT := Value;
end;

function TStokTemelBilgiProperties.Get_MUSTERISIPKILIT: WideString;
begin
    Result := DefaultInterface.MUSTERISIPKILIT;
end;

procedure TStokTemelBilgiProperties.Set_MUSTERISIPKILIT(const Value: WideString);
  { Warning: The property MUSTERISIPKILIT has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MUSTERISIPKILIT := Value;
end;

function TStokTemelBilgiProperties.Get_SATINALMAKILIT: WideString;
begin
    Result := DefaultInterface.SATINALMAKILIT;
end;

procedure TStokTemelBilgiProperties.Set_SATINALMAKILIT(const Value: WideString);
  { Warning: The property SATINALMAKILIT has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SATINALMAKILIT := Value;
end;

function TStokTemelBilgiProperties.Get_SatisKilit: WideString;
begin
    Result := DefaultInterface.SatisKilit;
end;

procedure TStokTemelBilgiProperties.Set_SatisKilit(const Value: WideString);
  { Warning: The property SatisKilit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SatisKilit := Value;
end;

function TStokTemelBilgiProperties.Get_EN: Double;
begin
    Result := DefaultInterface.EN;
end;

procedure TStokTemelBilgiProperties.Set_EN(Value: Double);
begin
  DefaultInterface.Set_EN(Value);
end;

function TStokTemelBilgiProperties.Get_BOY: Double;
begin
    Result := DefaultInterface.BOY;
end;

procedure TStokTemelBilgiProperties.Set_BOY(Value: Double);
begin
  DefaultInterface.Set_BOY(Value);
end;

function TStokTemelBilgiProperties.Get_GENISLIK: Double;
begin
    Result := DefaultInterface.GENISLIK;
end;

procedure TStokTemelBilgiProperties.Set_GENISLIK(Value: Double);
begin
  DefaultInterface.Set_GENISLIK(Value);
end;

function TStokTemelBilgiProperties.Get_SIPLIMITVAR: WideString;
begin
    Result := DefaultInterface.SIPLIMITVAR;
end;

procedure TStokTemelBilgiProperties.Set_SIPLIMITVAR(const Value: WideString);
  { Warning: The property SIPLIMITVAR has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SIPLIMITVAR := Value;
end;

function TStokTemelBilgiProperties.Get_SONSTOKKODU: WideString;
begin
    Result := DefaultInterface.SONSTOKKODU;
end;

procedure TStokTemelBilgiProperties.Set_SONSTOKKODU(const Value: WideString);
  { Warning: The property SONSTOKKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SONSTOKKODU := Value;
end;

function TStokTemelBilgiProperties.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TStokTemelBilgiProperties.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TStokTemelBilgiProperties.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TStokTemelBilgiProperties.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

function TStokTemelBilgiProperties.Get_FIKTIF_MAM: WideString;
begin
    Result := DefaultInterface.FIKTIF_MAM;
end;

procedure TStokTemelBilgiProperties.Set_FIKTIF_MAM(const Value: WideString);
  { Warning: The property FIKTIF_MAM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FIKTIF_MAM := Value;
end;

function TStokTemelBilgiProperties.Get_YAPILANDIR: WideString;
begin
    Result := DefaultInterface.YAPILANDIR;
end;

procedure TStokTemelBilgiProperties.Set_YAPILANDIR(const Value: WideString);
  { Warning: The property YAPILANDIR has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YAPILANDIR := Value;
end;

function TStokTemelBilgiProperties.Get_SBOMVARMI: WideString;
begin
    Result := DefaultInterface.SBOMVARMI;
end;

procedure TStokTemelBilgiProperties.Set_SBOMVARMI(const Value: WideString);
  { Warning: The property SBOMVARMI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SBOMVARMI := Value;
end;

function TStokTemelBilgiProperties.Get_BAGLISTOKKOD: WideString;
begin
    Result := DefaultInterface.BAGLISTOKKOD;
end;

procedure TStokTemelBilgiProperties.Set_BAGLISTOKKOD(const Value: WideString);
  { Warning: The property BAGLISTOKKOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BAGLISTOKKOD := Value;
end;

function TStokTemelBilgiProperties.Get_YapKod: WideString;
begin
    Result := DefaultInterface.YapKod;
end;

procedure TStokTemelBilgiProperties.Set_YapKod(const Value: WideString);
  { Warning: The property YapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YapKod := Value;
end;

{$ENDIF}

class function CoStokEkBilgi.Create: IStokEkBilgi;
begin
  Result := CreateComObject(CLASS_StokEkBilgi) as IStokEkBilgi;
end;

class function CoStokEkBilgi.CreateRemote(const MachineName: string): IStokEkBilgi;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StokEkBilgi) as IStokEkBilgi;
end;

procedure TStokEkBilgi.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{18F22A07-D502-4768-BB72-DDE0C831319C}';
    IntfIID:   '{D8053976-640A-4084-9F1A-E4456BFC7A65}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStokEkBilgi.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IStokEkBilgi;
  end;
end;

procedure TStokEkBilgi.ConnectTo(svrIntf: IStokEkBilgi);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TStokEkBilgi.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TStokEkBilgi.GetDefaultInterface: IStokEkBilgi;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TStokEkBilgi.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TStokEkBilgiProperties.Create(Self);
{$ENDIF}
end;

destructor TStokEkBilgi.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TStokEkBilgi.GetServerProperties: TStokEkBilgiProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TStokEkBilgi.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TStokEkBilgi.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStokEkBilgi.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TStokEkBilgi.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TStokEkBilgi.Get_Stok_Kodu: WideString;
begin
    Result := DefaultInterface.Stok_Kodu;
end;

procedure TStokEkBilgi.Set_Stok_Kodu(const Value: WideString);
  { Warning: The property Stok_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stok_Kodu := Value;
end;

function TStokEkBilgi.Get_Tur: WideString;
begin
    Result := DefaultInterface.Tur;
end;

procedure TStokEkBilgi.Set_Tur(const Value: WideString);
  { Warning: The property Tur has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tur := Value;
end;

function TStokEkBilgi.Get_Mgrup: WideString;
begin
    Result := DefaultInterface.Mgrup;
end;

procedure TStokEkBilgi.Set_Mgrup(const Value: WideString);
  { Warning: The property Mgrup has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Mgrup := Value;
end;

function TStokEkBilgi.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TStokEkBilgi.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TStokEkBilgi.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TStokEkBilgi.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TStokEkBilgi.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TStokEkBilgi.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TStokEkBilgi.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TStokEkBilgi.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TStokEkBilgi.Get_Ingisim: WideString;
begin
    Result := DefaultInterface.Ingisim;
end;

procedure TStokEkBilgi.Set_Ingisim(const Value: WideString);
  { Warning: The property Ingisim has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ingisim := Value;
end;

function TStokEkBilgi.Get_Birim_Maliyet: Double;
begin
    Result := DefaultInterface.Birim_Maliyet;
end;

procedure TStokEkBilgi.Set_Birim_Maliyet(Value: Double);
begin
  DefaultInterface.Set_Birim_Maliyet(Value);
end;

function TStokEkBilgi.Get_Kull1N: Double;
begin
    Result := DefaultInterface.Kull1N;
end;

procedure TStokEkBilgi.Set_Kull1N(Value: Double);
begin
  DefaultInterface.Set_Kull1N(Value);
end;

function TStokEkBilgi.Get_Kull2N: Double;
begin
    Result := DefaultInterface.Kull2N;
end;

procedure TStokEkBilgi.Set_Kull2N(Value: Double);
begin
  DefaultInterface.Set_Kull2N(Value);
end;

function TStokEkBilgi.Get_Kull3N: Double;
begin
    Result := DefaultInterface.Kull3N;
end;

procedure TStokEkBilgi.Set_Kull3N(Value: Double);
begin
  DefaultInterface.Set_Kull3N(Value);
end;

function TStokEkBilgi.Get_Kull4N: Double;
begin
    Result := DefaultInterface.Kull4N;
end;

procedure TStokEkBilgi.Set_Kull4N(Value: Double);
begin
  DefaultInterface.Set_Kull4N(Value);
end;

function TStokEkBilgi.Get_Kull5N: Double;
begin
    Result := DefaultInterface.Kull5N;
end;

procedure TStokEkBilgi.Set_Kull5N(Value: Double);
begin
  DefaultInterface.Set_Kull5N(Value);
end;

function TStokEkBilgi.Get_Kull6N: Double;
begin
    Result := DefaultInterface.Kull6N;
end;

procedure TStokEkBilgi.Set_Kull6N(Value: Double);
begin
  DefaultInterface.Set_Kull6N(Value);
end;

function TStokEkBilgi.Get_Kull7N: Double;
begin
    Result := DefaultInterface.Kull7N;
end;

procedure TStokEkBilgi.Set_Kull7N(Value: Double);
begin
  DefaultInterface.Set_Kull7N(Value);
end;

function TStokEkBilgi.Get_Kull8N: Double;
begin
    Result := DefaultInterface.Kull8N;
end;

procedure TStokEkBilgi.Set_Kull8N(Value: Double);
begin
  DefaultInterface.Set_Kull8N(Value);
end;

function TStokEkBilgi.Get_Kull1S: WideString;
begin
    Result := DefaultInterface.Kull1S;
end;

procedure TStokEkBilgi.Set_Kull1S(const Value: WideString);
  { Warning: The property Kull1S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull1S := Value;
end;

function TStokEkBilgi.Get_Kull2S: WideString;
begin
    Result := DefaultInterface.Kull2S;
end;

procedure TStokEkBilgi.Set_Kull2S(const Value: WideString);
  { Warning: The property Kull2S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull2S := Value;
end;

function TStokEkBilgi.Get_Kull3S: WideString;
begin
    Result := DefaultInterface.Kull3S;
end;

procedure TStokEkBilgi.Set_Kull3S(const Value: WideString);
  { Warning: The property Kull3S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull3S := Value;
end;

function TStokEkBilgi.Get_Kull4S: WideString;
begin
    Result := DefaultInterface.Kull4S;
end;

procedure TStokEkBilgi.Set_Kull4S(const Value: WideString);
  { Warning: The property Kull4S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull4S := Value;
end;

function TStokEkBilgi.Get_Kull5S: WideString;
begin
    Result := DefaultInterface.Kull5S;
end;

procedure TStokEkBilgi.Set_Kull5S(const Value: WideString);
  { Warning: The property Kull5S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull5S := Value;
end;

function TStokEkBilgi.Get_Kull6S: WideString;
begin
    Result := DefaultInterface.Kull6S;
end;

procedure TStokEkBilgi.Set_Kull6S(const Value: WideString);
  { Warning: The property Kull6S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull6S := Value;
end;

function TStokEkBilgi.Get_Kull7S: WideString;
begin
    Result := DefaultInterface.Kull7S;
end;

procedure TStokEkBilgi.Set_Kull7S(const Value: WideString);
  { Warning: The property Kull7S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull7S := Value;
end;

function TStokEkBilgi.Get_Kull8S: WideString;
begin
    Result := DefaultInterface.Kull8S;
end;

procedure TStokEkBilgi.Set_Kull8S(const Value: WideString);
  { Warning: The property Kull8S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull8S := Value;
end;

function TStokEkBilgi.Get_Son_Satal_Fiat: Double;
begin
    Result := DefaultInterface.Son_Satal_Fiat;
end;

procedure TStokEkBilgi.Set_Son_Satal_Fiat(Value: Double);
begin
  DefaultInterface.Set_Son_Satal_Fiat(Value);
end;

function TStokEkBilgi.Get_Son_Satal_Tar: TDateTime;
begin
    Result := DefaultInterface.Son_Satal_Tar;
end;

procedure TStokEkBilgi.Set_Son_Satal_Tar(Value: TDateTime);
begin
  DefaultInterface.Set_Son_Satal_Tar(Value);
end;

function TStokEkBilgi.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TStokEkBilgi.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TStokEkBilgi.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TStokEkBilgi.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TStokEkBilgi.Get_F_Yedek1: Double;
begin
    Result := DefaultInterface.F_Yedek1;
end;

procedure TStokEkBilgi.Set_F_Yedek1(Value: Double);
begin
  DefaultInterface.Set_F_Yedek1(Value);
end;

function TStokEkBilgi.Get_F_Yedek2: Double;
begin
    Result := DefaultInterface.F_Yedek2;
end;

procedure TStokEkBilgi.Set_F_Yedek2(Value: Double);
begin
  DefaultInterface.Set_F_Yedek2(Value);
end;

function TStokEkBilgi.Get_C_Yedek1: WideString;
begin
    Result := DefaultInterface.C_Yedek1;
end;

procedure TStokEkBilgi.Set_C_Yedek1(const Value: WideString);
  { Warning: The property C_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek1 := Value;
end;

function TStokEkBilgi.Get_C_Yedek2: WideString;
begin
    Result := DefaultInterface.C_Yedek2;
end;

procedure TStokEkBilgi.Set_C_Yedek2(const Value: WideString);
  { Warning: The property C_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek2 := Value;
end;

function TStokEkBilgi.Get_B_Yedek1: Integer;
begin
    Result := DefaultInterface.B_Yedek1;
end;

procedure TStokEkBilgi.Set_B_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_B_Yedek1(Value);
end;

function TStokEkBilgi.Get_I_Yedek1: Integer;
begin
    Result := DefaultInterface.I_Yedek1;
end;

procedure TStokEkBilgi.Set_I_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek1(Value);
end;

function TStokEkBilgi.Get_L_Yedek1: Integer;
begin
    Result := DefaultInterface.L_Yedek1;
end;

procedure TStokEkBilgi.Set_L_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_L_Yedek1(Value);
end;

function TStokEkBilgi.Get_Sonsattar: TDateTime;
begin
    Result := DefaultInterface.Sonsattar;
end;

procedure TStokEkBilgi.Set_Sonsattar(Value: TDateTime);
begin
  DefaultInterface.Set_Sonsattar(Value);
end;

function TStokEkBilgi.Get_Dagitici_Kodu: WideString;
begin
    Result := DefaultInterface.Dagitici_Kodu;
end;

procedure TStokEkBilgi.Set_Dagitici_Kodu(const Value: WideString);
  { Warning: The property Dagitici_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Dagitici_Kodu := Value;
end;

function TStokEkBilgi.Get_CURBIRIM_MALIYET: Double;
begin
    Result := DefaultInterface.CURBIRIM_MALIYET;
end;

procedure TStokEkBilgi.Set_CURBIRIM_MALIYET(Value: Double);
begin
  DefaultInterface.Set_CURBIRIM_MALIYET(Value);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TStokEkBilgiProperties.Create(AServer: TStokEkBilgi);
begin
  inherited Create;
  FServer := AServer;
end;

function TStokEkBilgiProperties.GetDefaultInterface: IStokEkBilgi;
begin
  Result := FServer.DefaultInterface;
end;

function TStokEkBilgiProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TStokEkBilgiProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStokEkBilgiProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TStokEkBilgiProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TStokEkBilgiProperties.Get_Stok_Kodu: WideString;
begin
    Result := DefaultInterface.Stok_Kodu;
end;

procedure TStokEkBilgiProperties.Set_Stok_Kodu(const Value: WideString);
  { Warning: The property Stok_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stok_Kodu := Value;
end;

function TStokEkBilgiProperties.Get_Tur: WideString;
begin
    Result := DefaultInterface.Tur;
end;

procedure TStokEkBilgiProperties.Set_Tur(const Value: WideString);
  { Warning: The property Tur has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tur := Value;
end;

function TStokEkBilgiProperties.Get_Mgrup: WideString;
begin
    Result := DefaultInterface.Mgrup;
end;

procedure TStokEkBilgiProperties.Set_Mgrup(const Value: WideString);
  { Warning: The property Mgrup has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Mgrup := Value;
end;

function TStokEkBilgiProperties.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TStokEkBilgiProperties.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TStokEkBilgiProperties.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TStokEkBilgiProperties.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TStokEkBilgiProperties.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TStokEkBilgiProperties.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TStokEkBilgiProperties.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TStokEkBilgiProperties.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TStokEkBilgiProperties.Get_Ingisim: WideString;
begin
    Result := DefaultInterface.Ingisim;
end;

procedure TStokEkBilgiProperties.Set_Ingisim(const Value: WideString);
  { Warning: The property Ingisim has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ingisim := Value;
end;

function TStokEkBilgiProperties.Get_Birim_Maliyet: Double;
begin
    Result := DefaultInterface.Birim_Maliyet;
end;

procedure TStokEkBilgiProperties.Set_Birim_Maliyet(Value: Double);
begin
  DefaultInterface.Set_Birim_Maliyet(Value);
end;

function TStokEkBilgiProperties.Get_Kull1N: Double;
begin
    Result := DefaultInterface.Kull1N;
end;

procedure TStokEkBilgiProperties.Set_Kull1N(Value: Double);
begin
  DefaultInterface.Set_Kull1N(Value);
end;

function TStokEkBilgiProperties.Get_Kull2N: Double;
begin
    Result := DefaultInterface.Kull2N;
end;

procedure TStokEkBilgiProperties.Set_Kull2N(Value: Double);
begin
  DefaultInterface.Set_Kull2N(Value);
end;

function TStokEkBilgiProperties.Get_Kull3N: Double;
begin
    Result := DefaultInterface.Kull3N;
end;

procedure TStokEkBilgiProperties.Set_Kull3N(Value: Double);
begin
  DefaultInterface.Set_Kull3N(Value);
end;

function TStokEkBilgiProperties.Get_Kull4N: Double;
begin
    Result := DefaultInterface.Kull4N;
end;

procedure TStokEkBilgiProperties.Set_Kull4N(Value: Double);
begin
  DefaultInterface.Set_Kull4N(Value);
end;

function TStokEkBilgiProperties.Get_Kull5N: Double;
begin
    Result := DefaultInterface.Kull5N;
end;

procedure TStokEkBilgiProperties.Set_Kull5N(Value: Double);
begin
  DefaultInterface.Set_Kull5N(Value);
end;

function TStokEkBilgiProperties.Get_Kull6N: Double;
begin
    Result := DefaultInterface.Kull6N;
end;

procedure TStokEkBilgiProperties.Set_Kull6N(Value: Double);
begin
  DefaultInterface.Set_Kull6N(Value);
end;

function TStokEkBilgiProperties.Get_Kull7N: Double;
begin
    Result := DefaultInterface.Kull7N;
end;

procedure TStokEkBilgiProperties.Set_Kull7N(Value: Double);
begin
  DefaultInterface.Set_Kull7N(Value);
end;

function TStokEkBilgiProperties.Get_Kull8N: Double;
begin
    Result := DefaultInterface.Kull8N;
end;

procedure TStokEkBilgiProperties.Set_Kull8N(Value: Double);
begin
  DefaultInterface.Set_Kull8N(Value);
end;

function TStokEkBilgiProperties.Get_Kull1S: WideString;
begin
    Result := DefaultInterface.Kull1S;
end;

procedure TStokEkBilgiProperties.Set_Kull1S(const Value: WideString);
  { Warning: The property Kull1S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull1S := Value;
end;

function TStokEkBilgiProperties.Get_Kull2S: WideString;
begin
    Result := DefaultInterface.Kull2S;
end;

procedure TStokEkBilgiProperties.Set_Kull2S(const Value: WideString);
  { Warning: The property Kull2S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull2S := Value;
end;

function TStokEkBilgiProperties.Get_Kull3S: WideString;
begin
    Result := DefaultInterface.Kull3S;
end;

procedure TStokEkBilgiProperties.Set_Kull3S(const Value: WideString);
  { Warning: The property Kull3S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull3S := Value;
end;

function TStokEkBilgiProperties.Get_Kull4S: WideString;
begin
    Result := DefaultInterface.Kull4S;
end;

procedure TStokEkBilgiProperties.Set_Kull4S(const Value: WideString);
  { Warning: The property Kull4S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull4S := Value;
end;

function TStokEkBilgiProperties.Get_Kull5S: WideString;
begin
    Result := DefaultInterface.Kull5S;
end;

procedure TStokEkBilgiProperties.Set_Kull5S(const Value: WideString);
  { Warning: The property Kull5S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull5S := Value;
end;

function TStokEkBilgiProperties.Get_Kull6S: WideString;
begin
    Result := DefaultInterface.Kull6S;
end;

procedure TStokEkBilgiProperties.Set_Kull6S(const Value: WideString);
  { Warning: The property Kull6S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull6S := Value;
end;

function TStokEkBilgiProperties.Get_Kull7S: WideString;
begin
    Result := DefaultInterface.Kull7S;
end;

procedure TStokEkBilgiProperties.Set_Kull7S(const Value: WideString);
  { Warning: The property Kull7S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull7S := Value;
end;

function TStokEkBilgiProperties.Get_Kull8S: WideString;
begin
    Result := DefaultInterface.Kull8S;
end;

procedure TStokEkBilgiProperties.Set_Kull8S(const Value: WideString);
  { Warning: The property Kull8S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull8S := Value;
end;

function TStokEkBilgiProperties.Get_Son_Satal_Fiat: Double;
begin
    Result := DefaultInterface.Son_Satal_Fiat;
end;

procedure TStokEkBilgiProperties.Set_Son_Satal_Fiat(Value: Double);
begin
  DefaultInterface.Set_Son_Satal_Fiat(Value);
end;

function TStokEkBilgiProperties.Get_Son_Satal_Tar: TDateTime;
begin
    Result := DefaultInterface.Son_Satal_Tar;
end;

procedure TStokEkBilgiProperties.Set_Son_Satal_Tar(Value: TDateTime);
begin
  DefaultInterface.Set_Son_Satal_Tar(Value);
end;

function TStokEkBilgiProperties.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TStokEkBilgiProperties.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TStokEkBilgiProperties.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TStokEkBilgiProperties.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TStokEkBilgiProperties.Get_F_Yedek1: Double;
begin
    Result := DefaultInterface.F_Yedek1;
end;

procedure TStokEkBilgiProperties.Set_F_Yedek1(Value: Double);
begin
  DefaultInterface.Set_F_Yedek1(Value);
end;

function TStokEkBilgiProperties.Get_F_Yedek2: Double;
begin
    Result := DefaultInterface.F_Yedek2;
end;

procedure TStokEkBilgiProperties.Set_F_Yedek2(Value: Double);
begin
  DefaultInterface.Set_F_Yedek2(Value);
end;

function TStokEkBilgiProperties.Get_C_Yedek1: WideString;
begin
    Result := DefaultInterface.C_Yedek1;
end;

procedure TStokEkBilgiProperties.Set_C_Yedek1(const Value: WideString);
  { Warning: The property C_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek1 := Value;
end;

function TStokEkBilgiProperties.Get_C_Yedek2: WideString;
begin
    Result := DefaultInterface.C_Yedek2;
end;

procedure TStokEkBilgiProperties.Set_C_Yedek2(const Value: WideString);
  { Warning: The property C_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek2 := Value;
end;

function TStokEkBilgiProperties.Get_B_Yedek1: Integer;
begin
    Result := DefaultInterface.B_Yedek1;
end;

procedure TStokEkBilgiProperties.Set_B_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_B_Yedek1(Value);
end;

function TStokEkBilgiProperties.Get_I_Yedek1: Integer;
begin
    Result := DefaultInterface.I_Yedek1;
end;

procedure TStokEkBilgiProperties.Set_I_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek1(Value);
end;

function TStokEkBilgiProperties.Get_L_Yedek1: Integer;
begin
    Result := DefaultInterface.L_Yedek1;
end;

procedure TStokEkBilgiProperties.Set_L_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_L_Yedek1(Value);
end;

function TStokEkBilgiProperties.Get_Sonsattar: TDateTime;
begin
    Result := DefaultInterface.Sonsattar;
end;

procedure TStokEkBilgiProperties.Set_Sonsattar(Value: TDateTime);
begin
  DefaultInterface.Set_Sonsattar(Value);
end;

function TStokEkBilgiProperties.Get_Dagitici_Kodu: WideString;
begin
    Result := DefaultInterface.Dagitici_Kodu;
end;

procedure TStokEkBilgiProperties.Set_Dagitici_Kodu(const Value: WideString);
  { Warning: The property Dagitici_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Dagitici_Kodu := Value;
end;

function TStokEkBilgiProperties.Get_CURBIRIM_MALIYET: Double;
begin
    Result := DefaultInterface.CURBIRIM_MALIYET;
end;

procedure TStokEkBilgiProperties.Set_CURBIRIM_MALIYET(Value: Double);
begin
  DefaultInterface.Set_CURBIRIM_MALIYET(Value);
end;

{$ENDIF}

class function CoKur.Create: IKur;
begin
  Result := CreateComObject(CLASS_Kur) as IKur;
end;

class function CoKur.CreateRemote(const MachineName: string): IKur;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Kur) as IKur;
end;

procedure TKur.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DA30C828-0F3D-4B61-8F22-870A28593195}';
    IntfIID:   '{0BC0158B-4647-423D-99FF-86926EBDFE17}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TKur.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IKur;
  end;
end;

procedure TKur.ConnectTo(svrIntf: IKur);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TKur.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TKur.GetDefaultInterface: IKur;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TKur.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TKurProperties.Create(Self);
{$ENDIF}
end;

destructor TKur.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TKur.GetServerProperties: TKurProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TKur.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TKur.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TKur.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TKur.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TKur.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TKur.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TKur.Get_Sira: Integer;
begin
    Result := DefaultInterface.Sira;
end;

procedure TKur.Set_Sira(Value: Integer);
begin
  DefaultInterface.Set_Sira(Value);
end;

function TKur.Get_Tarih: TDateTime;
begin
    Result := DefaultInterface.Tarih;
end;

procedure TKur.Set_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih(Value);
end;

function TKur.Get_DOV_ALIS: Double;
begin
    Result := DefaultInterface.DOV_ALIS;
end;

procedure TKur.Set_DOV_ALIS(Value: Double);
begin
  DefaultInterface.Set_DOV_ALIS(Value);
end;

function TKur.Get_DOV_SATIS: Double;
begin
    Result := DefaultInterface.DOV_SATIS;
end;

procedure TKur.Set_DOV_SATIS(Value: Double);
begin
  DefaultInterface.Set_DOV_SATIS(Value);
end;

function TKur.Get_EFF_ALIS: Double;
begin
    Result := DefaultInterface.EFF_ALIS;
end;

procedure TKur.Set_EFF_ALIS(Value: Double);
begin
  DefaultInterface.Set_EFF_ALIS(Value);
end;

function TKur.Get_EFF_SATIS: Double;
begin
    Result := DefaultInterface.EFF_SATIS;
end;

procedure TKur.Set_EFF_SATIS(Value: Double);
begin
  DefaultInterface.Set_EFF_SATIS(Value);
end;

function TKur.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TKur.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TKur.Get_F_Yedek1: Double;
begin
    Result := DefaultInterface.F_Yedek1;
end;

procedure TKur.Set_F_Yedek1(Value: Double);
begin
  DefaultInterface.Set_F_Yedek1(Value);
end;

function TKur.Get_F_Yedek2: Double;
begin
    Result := DefaultInterface.F_Yedek2;
end;

procedure TKur.Set_F_Yedek2(Value: Double);
begin
  DefaultInterface.Set_F_Yedek2(Value);
end;

function TKur.Get_I_Yedek1: Integer;
begin
    Result := DefaultInterface.I_Yedek1;
end;

procedure TKur.Set_I_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek1(Value);
end;

procedure TKur.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TKur.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TKur.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TKur.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TKur.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TKur.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TKur.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TKurProperties.Create(AServer: TKur);
begin
  inherited Create;
  FServer := AServer;
end;

function TKurProperties.GetDefaultInterface: IKur;
begin
  Result := FServer.DefaultInterface;
end;

function TKurProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TKurProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TKurProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TKurProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TKurProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TKurProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TKurProperties.Get_Sira: Integer;
begin
    Result := DefaultInterface.Sira;
end;

procedure TKurProperties.Set_Sira(Value: Integer);
begin
  DefaultInterface.Set_Sira(Value);
end;

function TKurProperties.Get_Tarih: TDateTime;
begin
    Result := DefaultInterface.Tarih;
end;

procedure TKurProperties.Set_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih(Value);
end;

function TKurProperties.Get_DOV_ALIS: Double;
begin
    Result := DefaultInterface.DOV_ALIS;
end;

procedure TKurProperties.Set_DOV_ALIS(Value: Double);
begin
  DefaultInterface.Set_DOV_ALIS(Value);
end;

function TKurProperties.Get_DOV_SATIS: Double;
begin
    Result := DefaultInterface.DOV_SATIS;
end;

procedure TKurProperties.Set_DOV_SATIS(Value: Double);
begin
  DefaultInterface.Set_DOV_SATIS(Value);
end;

function TKurProperties.Get_EFF_ALIS: Double;
begin
    Result := DefaultInterface.EFF_ALIS;
end;

procedure TKurProperties.Set_EFF_ALIS(Value: Double);
begin
  DefaultInterface.Set_EFF_ALIS(Value);
end;

function TKurProperties.Get_EFF_SATIS: Double;
begin
    Result := DefaultInterface.EFF_SATIS;
end;

procedure TKurProperties.Set_EFF_SATIS(Value: Double);
begin
  DefaultInterface.Set_EFF_SATIS(Value);
end;

function TKurProperties.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TKurProperties.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TKurProperties.Get_F_Yedek1: Double;
begin
    Result := DefaultInterface.F_Yedek1;
end;

procedure TKurProperties.Set_F_Yedek1(Value: Double);
begin
  DefaultInterface.Set_F_Yedek1(Value);
end;

function TKurProperties.Get_F_Yedek2: Double;
begin
    Result := DefaultInterface.F_Yedek2;
end;

procedure TKurProperties.Set_F_Yedek2(Value: Double);
begin
  DefaultInterface.Set_F_Yedek2(Value);
end;

function TKurProperties.Get_I_Yedek1: Integer;
begin
    Result := DefaultInterface.I_Yedek1;
end;

procedure TKurProperties.Set_I_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek1(Value);
end;

{$ENDIF}

class function CoDoviz.Create: IDoviz;
begin
  Result := CreateComObject(CLASS_Doviz) as IDoviz;
end;

class function CoDoviz.CreateRemote(const MachineName: string): IDoviz;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Doviz) as IDoviz;
end;

procedure TDoviz.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2F82D9E5-4C45-45E3-BB04-D026A9C8E40D}';
    IntfIID:   '{E629DD7D-9DC9-4621-88B2-CB2F90E0F5AD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDoviz.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDoviz;
  end;
end;

procedure TDoviz.ConnectTo(svrIntf: IDoviz);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDoviz.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDoviz.GetDefaultInterface: IDoviz;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDoviz.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDovizProperties.Create(Self);
{$ENDIF}
end;

destructor TDoviz.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDoviz.GetServerProperties: TDovizProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDoviz.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TDoviz.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDoviz.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TDoviz.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TDoviz.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TDoviz.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TDoviz.Get_Sira: Integer;
begin
    Result := DefaultInterface.Sira;
end;

procedure TDoviz.Set_Sira(Value: Integer);
begin
  DefaultInterface.Set_Sira(Value);
end;

function TDoviz.Get_BIRIM: Integer;
begin
    Result := DefaultInterface.BIRIM;
end;

procedure TDoviz.Set_BIRIM(Value: Integer);
begin
  DefaultInterface.Set_BIRIM(Value);
end;

function TDoviz.Get_ISIM: WideString;
begin
    Result := DefaultInterface.ISIM;
end;

procedure TDoviz.Set_ISIM(const Value: WideString);
  { Warning: The property ISIM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ISIM := Value;
end;

function TDoviz.Get_NETSISSIRA: Integer;
begin
    Result := DefaultInterface.NETSISSIRA;
end;

procedure TDoviz.Set_NETSISSIRA(Value: Integer);
begin
  DefaultInterface.Set_NETSISSIRA(Value);
end;

procedure TDoviz.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TDoviz.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TDoviz.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TDoviz.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TDoviz.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TDoviz.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TDoviz.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

procedure TDoviz.DovizKurGuncelle(DovTarih: TDateTime);
begin
  DefaultInterface.DovizKurGuncelle(DovTarih);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDovizProperties.Create(AServer: TDoviz);
begin
  inherited Create;
  FServer := AServer;
end;

function TDovizProperties.GetDefaultInterface: IDoviz;
begin
  Result := FServer.DefaultInterface;
end;

function TDovizProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TDovizProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDovizProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TDovizProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TDovizProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TDovizProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TDovizProperties.Get_Sira: Integer;
begin
    Result := DefaultInterface.Sira;
end;

procedure TDovizProperties.Set_Sira(Value: Integer);
begin
  DefaultInterface.Set_Sira(Value);
end;

function TDovizProperties.Get_BIRIM: Integer;
begin
    Result := DefaultInterface.BIRIM;
end;

procedure TDovizProperties.Set_BIRIM(Value: Integer);
begin
  DefaultInterface.Set_BIRIM(Value);
end;

function TDovizProperties.Get_ISIM: WideString;
begin
    Result := DefaultInterface.ISIM;
end;

procedure TDovizProperties.Set_ISIM(const Value: WideString);
  { Warning: The property ISIM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ISIM := Value;
end;

function TDovizProperties.Get_NETSISSIRA: Integer;
begin
    Result := DefaultInterface.NETSISSIRA;
end;

procedure TDovizProperties.Set_NETSISSIRA(Value: Integer);
begin
  DefaultInterface.Set_NETSISSIRA(Value);
end;

{$ENDIF}

class function CoCekSenet.Create: ICekSenet;
begin
  Result := CreateComObject(CLASS_CekSenet) as ICekSenet;
end;

class function CoCekSenet.CreateRemote(const MachineName: string): ICekSenet;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CekSenet) as ICekSenet;
end;

procedure TCekSenet.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C51CA6B5-E975-47DD-9C41-6D37174EC430}';
    IntfIID:   '{A2986128-0A31-4A78-BF4A-C20C4F3100EE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCekSenet.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICekSenet;
  end;
end;

procedure TCekSenet.ConnectTo(svrIntf: ICekSenet);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCekSenet.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCekSenet.GetDefaultInterface: ICekSenet;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCekSenet.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCekSenetProperties.Create(Self);
{$ENDIF}
end;

destructor TCekSenet.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCekSenet.GetServerProperties: TCekSenetProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCekSenet.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TCekSenet.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCekSenet.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TCekSenet.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TCekSenet.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TCekSenet.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TCekSenet.Get_SC_NO: WideString;
begin
    Result := DefaultInterface.SC_NO;
end;

procedure TCekSenet.Set_SC_NO(const Value: WideString);
  { Warning: The property SC_NO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_NO := Value;
end;

function TCekSenet.Get_SC_GIRTRH: TDateTime;
begin
    Result := DefaultInterface.SC_GIRTRH;
end;

procedure TCekSenet.Set_SC_GIRTRH(Value: TDateTime);
begin
  DefaultInterface.Set_SC_GIRTRH(Value);
end;

function TCekSenet.Get_VADETRH: TDateTime;
begin
    Result := DefaultInterface.VADETRH;
end;

procedure TCekSenet.Set_VADETRH(Value: TDateTime);
begin
  DefaultInterface.Set_VADETRH(Value);
end;

function TCekSenet.Get_SC_CIKTRH: TDateTime;
begin
    Result := DefaultInterface.SC_CIKTRH;
end;

procedure TCekSenet.Set_SC_CIKTRH(Value: TDateTime);
begin
  DefaultInterface.Set_SC_CIKTRH(Value);
end;

function TCekSenet.Get_SC_ODETRH: TDateTime;
begin
    Result := DefaultInterface.SC_ODETRH;
end;

procedure TCekSenet.Set_SC_ODETRH(Value: TDateTime);
begin
  DefaultInterface.Set_SC_ODETRH(Value);
end;

function TCekSenet.Get_SC_VERENK: WideString;
begin
    Result := DefaultInterface.SC_VERENK;
end;

procedure TCekSenet.Set_SC_VERENK(const Value: WideString);
  { Warning: The property SC_VERENK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_VERENK := Value;
end;

function TCekSenet.Get_SC_ABORCLU: WideString;
begin
    Result := DefaultInterface.SC_ABORCLU;
end;

procedure TCekSenet.Set_SC_ABORCLU(const Value: WideString);
  { Warning: The property SC_ABORCLU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_ABORCLU := Value;
end;

function TCekSenet.Get_AS_C: WideString;
begin
    Result := DefaultInterface.AS_C;
end;

procedure TCekSenet.Set_AS_C(const Value: WideString);
  { Warning: The property AS_C has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AS_C := Value;
end;

function TCekSenet.Get_SC_VERILENK: WideString;
begin
    Result := DefaultInterface.SC_VERILENK;
end;

procedure TCekSenet.Set_SC_VERILENK(const Value: WideString);
  { Warning: The property SC_VERILENK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_VERILENK := Value;
end;

function TCekSenet.Get_SC_VERYCM: WideString;
begin
    Result := DefaultInterface.SC_VERYCM;
end;

procedure TCekSenet.Set_SC_VERYCM(const Value: WideString);
  { Warning: The property SC_VERYCM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_VERYCM := Value;
end;

function TCekSenet.Get_SC_BANKNO: WideString;
begin
    Result := DefaultInterface.SC_BANKNO;
end;

procedure TCekSenet.Set_SC_BANKNO(const Value: WideString);
  { Warning: The property SC_BANKNO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_BANKNO := Value;
end;

function TCekSenet.Get_SC_SONDUR: WideString;
begin
    Result := DefaultInterface.SC_SONDUR;
end;

procedure TCekSenet.Set_SC_SONDUR(const Value: WideString);
  { Warning: The property SC_SONDUR has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_SONDUR := Value;
end;

function TCekSenet.Get_SC_YERI: WideString;
begin
    Result := DefaultInterface.SC_YERI;
end;

procedure TCekSenet.Set_SC_YERI(const Value: WideString);
  { Warning: The property SC_YERI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_YERI := Value;
end;

function TCekSenet.Get_RAPOR_KODU: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU;
end;

procedure TCekSenet.Set_RAPOR_KODU(const Value: WideString);
  { Warning: The property RAPOR_KODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU := Value;
end;

function TCekSenet.Get_Tutar: Double;
begin
    Result := DefaultInterface.Tutar;
end;

procedure TCekSenet.Set_Tutar(Value: Double);
begin
  DefaultInterface.Set_Tutar(Value);
end;

function TCekSenet.Get_KURFARKI: Double;
begin
    Result := DefaultInterface.KURFARKI;
end;

procedure TCekSenet.Set_KURFARKI(Value: Double);
begin
  DefaultInterface.Set_KURFARKI(Value);
end;

function TCekSenet.Get_SC_ALB_NO: WideString;
begin
    Result := DefaultInterface.SC_ALB_NO;
end;

procedure TCekSenet.Set_SC_ALB_NO(const Value: WideString);
  { Warning: The property SC_ALB_NO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_ALB_NO := Value;
end;

function TCekSenet.Get_SC_VERB_NO: WideString;
begin
    Result := DefaultInterface.SC_VERB_NO;
end;

procedure TCekSenet.Set_SC_VERB_NO(const Value: WideString);
  { Warning: The property SC_VERB_NO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_VERB_NO := Value;
end;

function TCekSenet.Get_YERI: WideString;
begin
    Result := DefaultInterface.YERI;
end;

procedure TCekSenet.Set_YERI(const Value: WideString);
  { Warning: The property YERI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YERI := Value;
end;

function TCekSenet.Get_C_NUMARA: WideString;
begin
    Result := DefaultInterface.C_NUMARA;
end;

procedure TCekSenet.Set_C_NUMARA(const Value: WideString);
  { Warning: The property C_NUMARA has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_NUMARA := Value;
end;

function TCekSenet.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TCekSenet.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TCekSenet.Get_DOVTIP: Integer;
begin
    Result := DefaultInterface.DOVTIP;
end;

procedure TCekSenet.Set_DOVTIP(Value: Integer);
begin
  DefaultInterface.Set_DOVTIP(Value);
end;

function TCekSenet.Get_DOVTUT: Double;
begin
    Result := DefaultInterface.DOVTUT;
end;

procedure TCekSenet.Set_DOVTUT(Value: Double);
begin
  DefaultInterface.Set_DOVTUT(Value);
end;

function TCekSenet.Get_GIRILDIGIYER: Integer;
begin
    Result := DefaultInterface.GIRILDIGIYER;
end;

procedure TCekSenet.Set_GIRILDIGIYER(Value: Integer);
begin
  DefaultInterface.Set_GIRILDIGIYER(Value);
end;

function TCekSenet.Get_Firmadovtut: Double;
begin
    Result := DefaultInterface.Firmadovtut;
end;

procedure TCekSenet.Set_Firmadovtut(Value: Double);
begin
  DefaultInterface.Set_Firmadovtut(Value);
end;

function TCekSenet.Get_Firmadovtip: Integer;
begin
    Result := DefaultInterface.Firmadovtip;
end;

procedure TCekSenet.Set_Firmadovtip(Value: Integer);
begin
  DefaultInterface.Set_Firmadovtip(Value);
end;

function TCekSenet.Get_CEKSERI: WideString;
begin
    Result := DefaultInterface.CEKSERI;
end;

procedure TCekSenet.Set_CEKSERI(const Value: WideString);
  { Warning: The property CEKSERI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CEKSERI := Value;
end;

function TCekSenet.Get_Plasiyer_Kodu: WideString;
begin
    Result := DefaultInterface.Plasiyer_Kodu;
end;

procedure TCekSenet.Set_Plasiyer_Kodu(const Value: WideString);
  { Warning: The property Plasiyer_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer_Kodu := Value;
end;

function TCekSenet.Get_PLASIYER_TARIH: TDateTime;
begin
    Result := DefaultInterface.PLASIYER_TARIH;
end;

procedure TCekSenet.Set_PLASIYER_TARIH(Value: TDateTime);
begin
  DefaultInterface.Set_PLASIYER_TARIH(Value);
end;

function TCekSenet.Get_RAP_KOD: WideString;
begin
    Result := DefaultInterface.RAP_KOD;
end;

procedure TCekSenet.Set_RAP_KOD(const Value: WideString);
  { Warning: The property RAP_KOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAP_KOD := Value;
end;

function TCekSenet.Get_GIRIS_BORDRO: WideString;
begin
    Result := DefaultInterface.GIRIS_BORDRO;
end;

procedure TCekSenet.Set_GIRIS_BORDRO(const Value: WideString);
  { Warning: The property GIRIS_BORDRO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GIRIS_BORDRO := Value;
end;

function TCekSenet.Get_CIKIS_BORDRO: WideString;
begin
    Result := DefaultInterface.CIKIS_BORDRO;
end;

procedure TCekSenet.Set_CIKIS_BORDRO(const Value: WideString);
  { Warning: The property CIKIS_BORDRO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CIKIS_BORDRO := Value;
end;

function TCekSenet.Get_Yedek1: WideString;
begin
    Result := DefaultInterface.Yedek1;
end;

procedure TCekSenet.Set_Yedek1(const Value: WideString);
  { Warning: The property Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek1 := Value;
end;

function TCekSenet.Get_Yedek2: WideString;
begin
    Result := DefaultInterface.Yedek2;
end;

procedure TCekSenet.Set_Yedek2(const Value: WideString);
  { Warning: The property Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek2 := Value;
end;

function TCekSenet.Get_Yedek3: Double;
begin
    Result := DefaultInterface.Yedek3;
end;

procedure TCekSenet.Set_Yedek3(Value: Double);
begin
  DefaultInterface.Set_Yedek3(Value);
end;

function TCekSenet.Get_Yedek4: Double;
begin
    Result := DefaultInterface.Yedek4;
end;

procedure TCekSenet.Set_Yedek4(Value: Double);
begin
  DefaultInterface.Set_Yedek4(Value);
end;

function TCekSenet.Get_Yedek5: WideString;
begin
    Result := DefaultInterface.Yedek5;
end;

procedure TCekSenet.Set_Yedek5(const Value: WideString);
  { Warning: The property Yedek5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek5 := Value;
end;

function TCekSenet.Get_Yedek6: WideString;
begin
    Result := DefaultInterface.Yedek6;
end;

procedure TCekSenet.Set_Yedek6(const Value: WideString);
  { Warning: The property Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek6 := Value;
end;

function TCekSenet.Get_Yedek8: Integer;
begin
    Result := DefaultInterface.Yedek8;
end;

procedure TCekSenet.Set_Yedek8(Value: Integer);
begin
  DefaultInterface.Set_Yedek8(Value);
end;

function TCekSenet.Get_Yedek7: Integer;
begin
    Result := DefaultInterface.Yedek7;
end;

procedure TCekSenet.Set_Yedek7(Value: Integer);
begin
  DefaultInterface.Set_Yedek7(Value);
end;

function TCekSenet.Get_Yedek9: Integer;
begin
    Result := DefaultInterface.Yedek9;
end;

procedure TCekSenet.Set_Yedek9(Value: Integer);
begin
  DefaultInterface.Set_Yedek9(Value);
end;

function TCekSenet.Get_Yedek10: TDateTime;
begin
    Result := DefaultInterface.Yedek10;
end;

procedure TCekSenet.Set_Yedek10(Value: TDateTime);
begin
  DefaultInterface.Set_Yedek10(Value);
end;

function TCekSenet.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TCekSenet.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TCekSenet.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TCekSenet.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TCekSenet.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TCekSenet.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TCekSenet.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TCekSenet.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TCekSenet.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TCekSenet.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TCekSenet.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TCekSenet.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TCekSenet.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TCekSenet.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

function TCekSenet.Get_VONAYNUM: Integer;
begin
    Result := DefaultInterface.VONAYNUM;
end;

procedure TCekSenet.Set_VONAYNUM(Value: Integer);
begin
  DefaultInterface.Set_VONAYNUM(Value);
end;

function TCekSenet.Get_VONAYTIPI: WideString;
begin
    Result := DefaultInterface.VONAYTIPI;
end;

procedure TCekSenet.Set_VONAYTIPI(const Value: WideString);
  { Warning: The property VONAYTIPI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VONAYTIPI := Value;
end;

function TCekSenet.Get_KasaKodu: WideString;
begin
    Result := DefaultInterface.KasaKodu;
end;

procedure TCekSenet.Set_KasaKodu(const Value: WideString);
  { Warning: The property KasaKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KasaKodu := Value;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCekSenetProperties.Create(AServer: TCekSenet);
begin
  inherited Create;
  FServer := AServer;
end;

function TCekSenetProperties.GetDefaultInterface: ICekSenet;
begin
  Result := FServer.DefaultInterface;
end;

function TCekSenetProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TCekSenetProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCekSenetProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TCekSenetProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TCekSenetProperties.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TCekSenetProperties.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TCekSenetProperties.Get_SC_NO: WideString;
begin
    Result := DefaultInterface.SC_NO;
end;

procedure TCekSenetProperties.Set_SC_NO(const Value: WideString);
  { Warning: The property SC_NO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_NO := Value;
end;

function TCekSenetProperties.Get_SC_GIRTRH: TDateTime;
begin
    Result := DefaultInterface.SC_GIRTRH;
end;

procedure TCekSenetProperties.Set_SC_GIRTRH(Value: TDateTime);
begin
  DefaultInterface.Set_SC_GIRTRH(Value);
end;

function TCekSenetProperties.Get_VADETRH: TDateTime;
begin
    Result := DefaultInterface.VADETRH;
end;

procedure TCekSenetProperties.Set_VADETRH(Value: TDateTime);
begin
  DefaultInterface.Set_VADETRH(Value);
end;

function TCekSenetProperties.Get_SC_CIKTRH: TDateTime;
begin
    Result := DefaultInterface.SC_CIKTRH;
end;

procedure TCekSenetProperties.Set_SC_CIKTRH(Value: TDateTime);
begin
  DefaultInterface.Set_SC_CIKTRH(Value);
end;

function TCekSenetProperties.Get_SC_ODETRH: TDateTime;
begin
    Result := DefaultInterface.SC_ODETRH;
end;

procedure TCekSenetProperties.Set_SC_ODETRH(Value: TDateTime);
begin
  DefaultInterface.Set_SC_ODETRH(Value);
end;

function TCekSenetProperties.Get_SC_VERENK: WideString;
begin
    Result := DefaultInterface.SC_VERENK;
end;

procedure TCekSenetProperties.Set_SC_VERENK(const Value: WideString);
  { Warning: The property SC_VERENK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_VERENK := Value;
end;

function TCekSenetProperties.Get_SC_ABORCLU: WideString;
begin
    Result := DefaultInterface.SC_ABORCLU;
end;

procedure TCekSenetProperties.Set_SC_ABORCLU(const Value: WideString);
  { Warning: The property SC_ABORCLU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_ABORCLU := Value;
end;

function TCekSenetProperties.Get_AS_C: WideString;
begin
    Result := DefaultInterface.AS_C;
end;

procedure TCekSenetProperties.Set_AS_C(const Value: WideString);
  { Warning: The property AS_C has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AS_C := Value;
end;

function TCekSenetProperties.Get_SC_VERILENK: WideString;
begin
    Result := DefaultInterface.SC_VERILENK;
end;

procedure TCekSenetProperties.Set_SC_VERILENK(const Value: WideString);
  { Warning: The property SC_VERILENK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_VERILENK := Value;
end;

function TCekSenetProperties.Get_SC_VERYCM: WideString;
begin
    Result := DefaultInterface.SC_VERYCM;
end;

procedure TCekSenetProperties.Set_SC_VERYCM(const Value: WideString);
  { Warning: The property SC_VERYCM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_VERYCM := Value;
end;

function TCekSenetProperties.Get_SC_BANKNO: WideString;
begin
    Result := DefaultInterface.SC_BANKNO;
end;

procedure TCekSenetProperties.Set_SC_BANKNO(const Value: WideString);
  { Warning: The property SC_BANKNO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_BANKNO := Value;
end;

function TCekSenetProperties.Get_SC_SONDUR: WideString;
begin
    Result := DefaultInterface.SC_SONDUR;
end;

procedure TCekSenetProperties.Set_SC_SONDUR(const Value: WideString);
  { Warning: The property SC_SONDUR has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_SONDUR := Value;
end;

function TCekSenetProperties.Get_SC_YERI: WideString;
begin
    Result := DefaultInterface.SC_YERI;
end;

procedure TCekSenetProperties.Set_SC_YERI(const Value: WideString);
  { Warning: The property SC_YERI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_YERI := Value;
end;

function TCekSenetProperties.Get_RAPOR_KODU: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU;
end;

procedure TCekSenetProperties.Set_RAPOR_KODU(const Value: WideString);
  { Warning: The property RAPOR_KODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU := Value;
end;

function TCekSenetProperties.Get_Tutar: Double;
begin
    Result := DefaultInterface.Tutar;
end;

procedure TCekSenetProperties.Set_Tutar(Value: Double);
begin
  DefaultInterface.Set_Tutar(Value);
end;

function TCekSenetProperties.Get_KURFARKI: Double;
begin
    Result := DefaultInterface.KURFARKI;
end;

procedure TCekSenetProperties.Set_KURFARKI(Value: Double);
begin
  DefaultInterface.Set_KURFARKI(Value);
end;

function TCekSenetProperties.Get_SC_ALB_NO: WideString;
begin
    Result := DefaultInterface.SC_ALB_NO;
end;

procedure TCekSenetProperties.Set_SC_ALB_NO(const Value: WideString);
  { Warning: The property SC_ALB_NO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_ALB_NO := Value;
end;

function TCekSenetProperties.Get_SC_VERB_NO: WideString;
begin
    Result := DefaultInterface.SC_VERB_NO;
end;

procedure TCekSenetProperties.Set_SC_VERB_NO(const Value: WideString);
  { Warning: The property SC_VERB_NO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_VERB_NO := Value;
end;

function TCekSenetProperties.Get_YERI: WideString;
begin
    Result := DefaultInterface.YERI;
end;

procedure TCekSenetProperties.Set_YERI(const Value: WideString);
  { Warning: The property YERI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YERI := Value;
end;

function TCekSenetProperties.Get_C_NUMARA: WideString;
begin
    Result := DefaultInterface.C_NUMARA;
end;

procedure TCekSenetProperties.Set_C_NUMARA(const Value: WideString);
  { Warning: The property C_NUMARA has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_NUMARA := Value;
end;

function TCekSenetProperties.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TCekSenetProperties.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TCekSenetProperties.Get_DOVTIP: Integer;
begin
    Result := DefaultInterface.DOVTIP;
end;

procedure TCekSenetProperties.Set_DOVTIP(Value: Integer);
begin
  DefaultInterface.Set_DOVTIP(Value);
end;

function TCekSenetProperties.Get_DOVTUT: Double;
begin
    Result := DefaultInterface.DOVTUT;
end;

procedure TCekSenetProperties.Set_DOVTUT(Value: Double);
begin
  DefaultInterface.Set_DOVTUT(Value);
end;

function TCekSenetProperties.Get_GIRILDIGIYER: Integer;
begin
    Result := DefaultInterface.GIRILDIGIYER;
end;

procedure TCekSenetProperties.Set_GIRILDIGIYER(Value: Integer);
begin
  DefaultInterface.Set_GIRILDIGIYER(Value);
end;

function TCekSenetProperties.Get_Firmadovtut: Double;
begin
    Result := DefaultInterface.Firmadovtut;
end;

procedure TCekSenetProperties.Set_Firmadovtut(Value: Double);
begin
  DefaultInterface.Set_Firmadovtut(Value);
end;

function TCekSenetProperties.Get_Firmadovtip: Integer;
begin
    Result := DefaultInterface.Firmadovtip;
end;

procedure TCekSenetProperties.Set_Firmadovtip(Value: Integer);
begin
  DefaultInterface.Set_Firmadovtip(Value);
end;

function TCekSenetProperties.Get_CEKSERI: WideString;
begin
    Result := DefaultInterface.CEKSERI;
end;

procedure TCekSenetProperties.Set_CEKSERI(const Value: WideString);
  { Warning: The property CEKSERI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CEKSERI := Value;
end;

function TCekSenetProperties.Get_Plasiyer_Kodu: WideString;
begin
    Result := DefaultInterface.Plasiyer_Kodu;
end;

procedure TCekSenetProperties.Set_Plasiyer_Kodu(const Value: WideString);
  { Warning: The property Plasiyer_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer_Kodu := Value;
end;

function TCekSenetProperties.Get_PLASIYER_TARIH: TDateTime;
begin
    Result := DefaultInterface.PLASIYER_TARIH;
end;

procedure TCekSenetProperties.Set_PLASIYER_TARIH(Value: TDateTime);
begin
  DefaultInterface.Set_PLASIYER_TARIH(Value);
end;

function TCekSenetProperties.Get_RAP_KOD: WideString;
begin
    Result := DefaultInterface.RAP_KOD;
end;

procedure TCekSenetProperties.Set_RAP_KOD(const Value: WideString);
  { Warning: The property RAP_KOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAP_KOD := Value;
end;

function TCekSenetProperties.Get_GIRIS_BORDRO: WideString;
begin
    Result := DefaultInterface.GIRIS_BORDRO;
end;

procedure TCekSenetProperties.Set_GIRIS_BORDRO(const Value: WideString);
  { Warning: The property GIRIS_BORDRO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GIRIS_BORDRO := Value;
end;

function TCekSenetProperties.Get_CIKIS_BORDRO: WideString;
begin
    Result := DefaultInterface.CIKIS_BORDRO;
end;

procedure TCekSenetProperties.Set_CIKIS_BORDRO(const Value: WideString);
  { Warning: The property CIKIS_BORDRO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CIKIS_BORDRO := Value;
end;

function TCekSenetProperties.Get_Yedek1: WideString;
begin
    Result := DefaultInterface.Yedek1;
end;

procedure TCekSenetProperties.Set_Yedek1(const Value: WideString);
  { Warning: The property Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek1 := Value;
end;

function TCekSenetProperties.Get_Yedek2: WideString;
begin
    Result := DefaultInterface.Yedek2;
end;

procedure TCekSenetProperties.Set_Yedek2(const Value: WideString);
  { Warning: The property Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek2 := Value;
end;

function TCekSenetProperties.Get_Yedek3: Double;
begin
    Result := DefaultInterface.Yedek3;
end;

procedure TCekSenetProperties.Set_Yedek3(Value: Double);
begin
  DefaultInterface.Set_Yedek3(Value);
end;

function TCekSenetProperties.Get_Yedek4: Double;
begin
    Result := DefaultInterface.Yedek4;
end;

procedure TCekSenetProperties.Set_Yedek4(Value: Double);
begin
  DefaultInterface.Set_Yedek4(Value);
end;

function TCekSenetProperties.Get_Yedek5: WideString;
begin
    Result := DefaultInterface.Yedek5;
end;

procedure TCekSenetProperties.Set_Yedek5(const Value: WideString);
  { Warning: The property Yedek5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek5 := Value;
end;

function TCekSenetProperties.Get_Yedek6: WideString;
begin
    Result := DefaultInterface.Yedek6;
end;

procedure TCekSenetProperties.Set_Yedek6(const Value: WideString);
  { Warning: The property Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek6 := Value;
end;

function TCekSenetProperties.Get_Yedek8: Integer;
begin
    Result := DefaultInterface.Yedek8;
end;

procedure TCekSenetProperties.Set_Yedek8(Value: Integer);
begin
  DefaultInterface.Set_Yedek8(Value);
end;

function TCekSenetProperties.Get_Yedek7: Integer;
begin
    Result := DefaultInterface.Yedek7;
end;

procedure TCekSenetProperties.Set_Yedek7(Value: Integer);
begin
  DefaultInterface.Set_Yedek7(Value);
end;

function TCekSenetProperties.Get_Yedek9: Integer;
begin
    Result := DefaultInterface.Yedek9;
end;

procedure TCekSenetProperties.Set_Yedek9(Value: Integer);
begin
  DefaultInterface.Set_Yedek9(Value);
end;

function TCekSenetProperties.Get_Yedek10: TDateTime;
begin
    Result := DefaultInterface.Yedek10;
end;

procedure TCekSenetProperties.Set_Yedek10(Value: TDateTime);
begin
  DefaultInterface.Set_Yedek10(Value);
end;

function TCekSenetProperties.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TCekSenetProperties.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TCekSenetProperties.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TCekSenetProperties.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TCekSenetProperties.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TCekSenetProperties.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TCekSenetProperties.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TCekSenetProperties.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TCekSenetProperties.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TCekSenetProperties.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TCekSenetProperties.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TCekSenetProperties.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TCekSenetProperties.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TCekSenetProperties.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

function TCekSenetProperties.Get_VONAYNUM: Integer;
begin
    Result := DefaultInterface.VONAYNUM;
end;

procedure TCekSenetProperties.Set_VONAYNUM(Value: Integer);
begin
  DefaultInterface.Set_VONAYNUM(Value);
end;

function TCekSenetProperties.Get_VONAYTIPI: WideString;
begin
    Result := DefaultInterface.VONAYTIPI;
end;

procedure TCekSenetProperties.Set_VONAYTIPI(const Value: WideString);
  { Warning: The property VONAYTIPI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VONAYTIPI := Value;
end;

function TCekSenetProperties.Get_KasaKodu: WideString;
begin
    Result := DefaultInterface.KasaKodu;
end;

procedure TCekSenetProperties.Set_KasaKodu(const Value: WideString);
  { Warning: The property KasaKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KasaKodu := Value;
end;

{$ENDIF}

class function CoCekSenetAna.Create: ICekSenetAna;
begin
  Result := CreateComObject(CLASS_CekSenetAna) as ICekSenetAna;
end;

class function CoCekSenetAna.CreateRemote(const MachineName: string): ICekSenetAna;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CekSenetAna) as ICekSenetAna;
end;

procedure TCekSenetAna.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6A8051AC-0EA1-4C53-A8DE-FF4D5D26FD96}';
    IntfIID:   '{A1428D07-5E6A-4344-8698-083ACAED7C58}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCekSenetAna.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICekSenetAna;
  end;
end;

procedure TCekSenetAna.ConnectTo(svrIntf: ICekSenetAna);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCekSenetAna.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCekSenetAna.GetDefaultInterface: ICekSenetAna;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCekSenetAna.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCekSenetAnaProperties.Create(Self);
{$ENDIF}
end;

destructor TCekSenetAna.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCekSenetAna.GetServerProperties: TCekSenetAnaProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCekSenetAna.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TCekSenetAna.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCekSenetAna.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TCekSenetAna.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TCekSenetAna.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TCekSenetAna.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TCekSenetAna.Get_EvrakAdedi: Integer;
begin
    Result := DefaultInterface.EvrakAdedi;
end;

function TCekSenetAna.Get_OkunanCS: ICekSenet;
begin
    Result := DefaultInterface.OkunanCS;
end;

function TCekSenetAna.Get_Tip: TCekSenType;
begin
    Result := DefaultInterface.Tip;
end;

procedure TCekSenetAna.Set_Tip(Value: TCekSenType);
begin
  DefaultInterface.Set_Tip(Value);
end;

function TCekSenetAna.Get_OtoNumaraGetir: WordBool;
begin
    Result := DefaultInterface.OtoNumaraGetir;
end;

procedure TCekSenetAna.Set_OtoNumaraGetir(Value: WordBool);
begin
  DefaultInterface.Set_OtoNumaraGetir(Value);
end;

procedure TCekSenetAna.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TCekSenetAna.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TCekSenetAna.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TCekSenetAna.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TCekSenetAna.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TCekSenetAna.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TCekSenetAna.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

function TCekSenetAna.Evrak(Index: Integer): ICekSenet;
begin
  Result := DefaultInterface.Evrak(Index);
end;

function TCekSenetAna.EvrakYeni: ICekSenet;
begin
  Result := DefaultInterface.EvrakYeni;
end;

function TCekSenetAna.EvraklariKaydet(KaydetmeTipi: TCekSenetEvrakKaydetmeTipi): WordBool;
begin
  Result := DefaultInterface.EvraklariKaydet(KaydetmeTipi);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCekSenetAnaProperties.Create(AServer: TCekSenetAna);
begin
  inherited Create;
  FServer := AServer;
end;

function TCekSenetAnaProperties.GetDefaultInterface: ICekSenetAna;
begin
  Result := FServer.DefaultInterface;
end;

function TCekSenetAnaProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TCekSenetAnaProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCekSenetAnaProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TCekSenetAnaProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TCekSenetAnaProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TCekSenetAnaProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TCekSenetAnaProperties.Get_EvrakAdedi: Integer;
begin
    Result := DefaultInterface.EvrakAdedi;
end;

function TCekSenetAnaProperties.Get_OkunanCS: ICekSenet;
begin
    Result := DefaultInterface.OkunanCS;
end;

function TCekSenetAnaProperties.Get_Tip: TCekSenType;
begin
    Result := DefaultInterface.Tip;
end;

procedure TCekSenetAnaProperties.Set_Tip(Value: TCekSenType);
begin
  DefaultInterface.Set_Tip(Value);
end;

function TCekSenetAnaProperties.Get_OtoNumaraGetir: WordBool;
begin
    Result := DefaultInterface.OtoNumaraGetir;
end;

procedure TCekSenetAnaProperties.Set_OtoNumaraGetir(Value: WordBool);
begin
  DefaultInterface.Set_OtoNumaraGetir(Value);
end;

{$ENDIF}

class function CoIReceteAna.Create: IIReceteAna;
begin
  Result := CreateComObject(CLASS_IReceteAna) as IIReceteAna;
end;

class function CoIReceteAna.CreateRemote(const MachineName: string): IIReceteAna;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_IReceteAna) as IIReceteAna;
end;

procedure TIReceteAna.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4B96A2E8-5810-4121-AC77-DA0921BA4BF9}';
    IntfIID:   '{6F628EC9-2AAA-4A4C-9AA4-7B6F15CBC99C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TIReceteAna.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IIReceteAna;
  end;
end;

procedure TIReceteAna.ConnectTo(svrIntf: IIReceteAna);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TIReceteAna.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TIReceteAna.GetDefaultInterface: IIReceteAna;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TIReceteAna.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TIReceteAnaProperties.Create(Self);
{$ENDIF}
end;

destructor TIReceteAna.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TIReceteAna.GetServerProperties: TIReceteAnaProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TIReceteAna.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TIReceteAna.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TIReceteAna.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TIReceteAna.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TIReceteAna.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TIReceteAna.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TIReceteAna.Get_PrmMamulKodu: WideString;
begin
    Result := DefaultInterface.PrmMamulKodu;
end;

procedure TIReceteAna.Set_PrmMamulKodu(const Value: WideString);
  { Warning: The property PrmMamulKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrmMamulKodu := Value;
end;

function TIReceteAna.Get_PrmSira: Integer;
begin
    Result := DefaultInterface.PrmSira;
end;

procedure TIReceteAna.Set_PrmSira(Value: Integer);
begin
  DefaultInterface.Set_PrmSira(Value);
end;

function TIReceteAna.Get_PrmSeviye: Integer;
begin
    Result := DefaultInterface.PrmSeviye;
end;

procedure TIReceteAna.Set_PrmSeviye(Value: Integer);
begin
  DefaultInterface.Set_PrmSeviye(Value);
end;

function TIReceteAna.Get_PrmSetNo: WideString;
begin
    Result := DefaultInterface.PrmSetNo;
end;

procedure TIReceteAna.Set_PrmSetNo(const Value: WideString);
  { Warning: The property PrmSetNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrmSetNo := Value;
end;

function TIReceteAna.Get_PrmOtoUret: WideString;
begin
    Result := DefaultInterface.PrmOtoUret;
end;

procedure TIReceteAna.Set_PrmOtoUret(const Value: WideString);
  { Warning: The property PrmOtoUret has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrmOtoUret := Value;
end;

function TIReceteAna.Get_PrmOPRBIL: WideString;
begin
    Result := DefaultInterface.PrmOPRBIL;
end;

procedure TIReceteAna.Set_PrmOPRBIL(const Value: WideString);
  { Warning: The property PrmOPRBIL has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrmOPRBIL := Value;
end;

function TIReceteAna.Get_ReceteSayisi: Integer;
begin
    Result := DefaultInterface.ReceteSayisi;
end;

function TIReceteAna.Get_MamulYapKod: WideString;
begin
    Result := DefaultInterface.MamulYapKod;
end;

procedure TIReceteAna.Set_MamulYapKod(const Value: WideString);
  { Warning: The property MamulYapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MamulYapKod := Value;
end;

function TIReceteAna.Get_ReceteToplami: Integer;
begin
    Result := DefaultInterface.ReceteToplami;
end;

procedure TIReceteAna.Set_ReceteToplami(Value: Integer);
begin
  DefaultInterface.Set_ReceteToplami(Value);
end;

function TIReceteAna.Get_OlcuBirimi: WideString;
begin
    Result := DefaultInterface.OlcuBirimi;
end;

procedure TIReceteAna.Set_OlcuBirimi(const Value: WideString);
  { Warning: The property OlcuBirimi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OlcuBirimi := Value;
end;

procedure TIReceteAna.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TIReceteAna.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TIReceteAna.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TIReceteAna.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TIReceteAna.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TIReceteAna.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TIReceteAna.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

function TIReceteAna.okuRecete(Index: Integer): IRecete;
begin
  Result := DefaultInterface.okuRecete(Index);
end;

procedure TIReceteAna.hazirlaReceteListe;
begin
  DefaultInterface.hazirlaReceteListe;
end;

function TIReceteAna.YeniRecete(const MAM_KODU: WideString): IRecete;
begin
  Result := DefaultInterface.YeniRecete(MAM_KODU);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TIReceteAnaProperties.Create(AServer: TIReceteAna);
begin
  inherited Create;
  FServer := AServer;
end;

function TIReceteAnaProperties.GetDefaultInterface: IIReceteAna;
begin
  Result := FServer.DefaultInterface;
end;

function TIReceteAnaProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TIReceteAnaProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TIReceteAnaProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TIReceteAnaProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TIReceteAnaProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TIReceteAnaProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TIReceteAnaProperties.Get_PrmMamulKodu: WideString;
begin
    Result := DefaultInterface.PrmMamulKodu;
end;

procedure TIReceteAnaProperties.Set_PrmMamulKodu(const Value: WideString);
  { Warning: The property PrmMamulKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrmMamulKodu := Value;
end;

function TIReceteAnaProperties.Get_PrmSira: Integer;
begin
    Result := DefaultInterface.PrmSira;
end;

procedure TIReceteAnaProperties.Set_PrmSira(Value: Integer);
begin
  DefaultInterface.Set_PrmSira(Value);
end;

function TIReceteAnaProperties.Get_PrmSeviye: Integer;
begin
    Result := DefaultInterface.PrmSeviye;
end;

procedure TIReceteAnaProperties.Set_PrmSeviye(Value: Integer);
begin
  DefaultInterface.Set_PrmSeviye(Value);
end;

function TIReceteAnaProperties.Get_PrmSetNo: WideString;
begin
    Result := DefaultInterface.PrmSetNo;
end;

procedure TIReceteAnaProperties.Set_PrmSetNo(const Value: WideString);
  { Warning: The property PrmSetNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrmSetNo := Value;
end;

function TIReceteAnaProperties.Get_PrmOtoUret: WideString;
begin
    Result := DefaultInterface.PrmOtoUret;
end;

procedure TIReceteAnaProperties.Set_PrmOtoUret(const Value: WideString);
  { Warning: The property PrmOtoUret has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrmOtoUret := Value;
end;

function TIReceteAnaProperties.Get_PrmOPRBIL: WideString;
begin
    Result := DefaultInterface.PrmOPRBIL;
end;

procedure TIReceteAnaProperties.Set_PrmOPRBIL(const Value: WideString);
  { Warning: The property PrmOPRBIL has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.PrmOPRBIL := Value;
end;

function TIReceteAnaProperties.Get_ReceteSayisi: Integer;
begin
    Result := DefaultInterface.ReceteSayisi;
end;

function TIReceteAnaProperties.Get_MamulYapKod: WideString;
begin
    Result := DefaultInterface.MamulYapKod;
end;

procedure TIReceteAnaProperties.Set_MamulYapKod(const Value: WideString);
  { Warning: The property MamulYapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MamulYapKod := Value;
end;

function TIReceteAnaProperties.Get_ReceteToplami: Integer;
begin
    Result := DefaultInterface.ReceteToplami;
end;

procedure TIReceteAnaProperties.Set_ReceteToplami(Value: Integer);
begin
  DefaultInterface.Set_ReceteToplami(Value);
end;

function TIReceteAnaProperties.Get_OlcuBirimi: WideString;
begin
    Result := DefaultInterface.OlcuBirimi;
end;

procedure TIReceteAnaProperties.Set_OlcuBirimi(const Value: WideString);
  { Warning: The property OlcuBirimi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OlcuBirimi := Value;
end;

{$ENDIF}

class function CoRecete.Create: IRecete;
begin
  Result := CreateComObject(CLASS_Recete) as IRecete;
end;

class function CoRecete.CreateRemote(const MachineName: string): IRecete;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Recete) as IRecete;
end;

procedure TRecete.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4F7441C6-859B-4517-B607-60B8BE6EB7F3}';
    IntfIID:   '{975400BA-3949-4E3E-9E5B-EFA1A400A073}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TRecete.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IRecete;
  end;
end;

procedure TRecete.ConnectTo(svrIntf: IRecete);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TRecete.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TRecete.GetDefaultInterface: IRecete;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TRecete.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TReceteProperties.Create(Self);
{$ENDIF}
end;

destructor TRecete.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TRecete.GetServerProperties: TReceteProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TRecete.Get_Mamul_Kodu: WideString;
begin
    Result := DefaultInterface.Mamul_Kodu;
end;

procedure TRecete.Set_Mamul_Kodu(const Value: WideString);
  { Warning: The property Mamul_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Mamul_Kodu := Value;
end;

function TRecete.Get_Ham_Kodu: WideString;
begin
    Result := DefaultInterface.Ham_Kodu;
end;

procedure TRecete.Set_Ham_Kodu(const Value: WideString);
  { Warning: The property Ham_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ham_Kodu := Value;
end;

function TRecete.Get_Miktar: Double;
begin
    Result := DefaultInterface.Miktar;
end;

procedure TRecete.Set_Miktar(Value: Double);
begin
  DefaultInterface.Set_Miktar(Value);
end;

function TRecete.Get_FireMik: Double;
begin
    Result := DefaultInterface.FireMik;
end;

procedure TRecete.Set_FireMik(Value: Double);
begin
  DefaultInterface.Set_FireMik(Value);
end;

function TRecete.Get_OpNo: WideString;
begin
    Result := DefaultInterface.OpNo;
end;

procedure TRecete.Set_OpNo(const Value: WideString);
  { Warning: The property OpNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OpNo := Value;
end;

function TRecete.Get_SabitFireMik: Double;
begin
    Result := DefaultInterface.SabitFireMik;
end;

procedure TRecete.Set_SabitFireMik(Value: Double);
begin
  DefaultInterface.Set_SabitFireMik(Value);
end;

function TRecete.Get_Stok_Maliyet: WideString;
begin
    Result := DefaultInterface.Stok_Maliyet;
end;

procedure TRecete.Set_Stok_Maliyet(const Value: WideString);
  { Warning: The property Stok_Maliyet has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stok_Maliyet := Value;
end;

function TRecete.Get_MiktarSabitle: WordBool;
begin
    Result := DefaultInterface.MiktarSabitle;
end;

procedure TRecete.Set_MiktarSabitle(Value: WordBool);
begin
  DefaultInterface.Set_MiktarSabitle(Value);
end;

function TRecete.Get_H_OTOMATIK_URETIM: WordBool;
begin
    Result := DefaultInterface.H_OTOMATIK_URETIM;
end;

procedure TRecete.Set_H_OTOMATIK_URETIM(Value: WordBool);
begin
  DefaultInterface.Set_H_OTOMATIK_URETIM(Value);
end;

function TRecete.Get_H_MamulMu: WordBool;
begin
    Result := DefaultInterface.H_MamulMu;
end;

procedure TRecete.Set_H_MamulMu(Value: WordBool);
begin
  DefaultInterface.Set_H_MamulMu(Value);
end;

function TRecete.Get_H_ALIS_FIAT1: Double;
begin
    Result := DefaultInterface.H_ALIS_FIAT1;
end;

procedure TRecete.Set_H_ALIS_FIAT1(Value: Double);
begin
  DefaultInterface.Set_H_ALIS_FIAT1(Value);
end;

function TRecete.Get_H_Stok_Adi: WideString;
begin
    Result := DefaultInterface.H_Stok_Adi;
end;

procedure TRecete.Set_H_Stok_Adi(const Value: WideString);
  { Warning: The property H_Stok_Adi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.H_Stok_Adi := Value;
end;

function TRecete.Get_H_Olcu_Br1: WideString;
begin
    Result := DefaultInterface.H_Olcu_Br1;
end;

procedure TRecete.Set_H_Olcu_Br1(const Value: WideString);
  { Warning: The property H_Olcu_Br1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.H_Olcu_Br1 := Value;
end;

function TRecete.Get_H_Kilit: WordBool;
begin
    Result := DefaultInterface.H_Kilit;
end;

procedure TRecete.Set_H_Kilit(Value: WordBool);
begin
  DefaultInterface.Set_H_Kilit(Value);
end;

function TRecete.Get_M_Stok_Adi: WideString;
begin
    Result := DefaultInterface.M_Stok_Adi;
end;

procedure TRecete.Set_M_Stok_Adi(const Value: WideString);
  { Warning: The property M_Stok_Adi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.M_Stok_Adi := Value;
end;

function TRecete.Get_M_Formul_Toplami: Double;
begin
    Result := DefaultInterface.M_Formul_Toplami;
end;

procedure TRecete.Set_M_Formul_Toplami(Value: Double);
begin
  DefaultInterface.Set_M_Formul_Toplami(Value);
end;

function TRecete.Get_M_Olcu_Br1: WideString;
begin
    Result := DefaultInterface.M_Olcu_Br1;
end;

procedure TRecete.Set_M_Olcu_Br1(const Value: WideString);
  { Warning: The property M_Olcu_Br1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.M_Olcu_Br1 := Value;
end;

function TRecete.Get_OncelikDegissin: WordBool;
begin
    Result := DefaultInterface.OncelikDegissin;
end;

procedure TRecete.Set_OncelikDegissin(Value: WordBool);
begin
  DefaultInterface.Set_OncelikDegissin(Value);
end;

function TRecete.Get_Planlama_Orani: Double;
begin
    Result := DefaultInterface.Planlama_Orani;
end;

procedure TRecete.Set_Planlama_Orani(Value: Double);
begin
  DefaultInterface.Set_Planlama_Orani(Value);
end;

function TRecete.Get_Oncelik: Integer;
begin
    Result := DefaultInterface.Oncelik;
end;

procedure TRecete.Set_Oncelik(Value: Integer);
begin
  DefaultInterface.Set_Oncelik(Value);
end;

function TRecete.Get_FiktifMi: WordBool;
begin
    Result := DefaultInterface.FiktifMi;
end;

procedure TRecete.Set_FiktifMi(Value: WordBool);
begin
  DefaultInterface.Set_FiktifMi(Value);
end;

function TRecete.Get_SarfMamul_Kodu: WideString;
begin
    Result := DefaultInterface.SarfMamul_Kodu;
end;

procedure TRecete.Set_SarfMamul_Kodu(const Value: WideString);
  { Warning: The property SarfMamul_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SarfMamul_Kodu := Value;
end;

function TRecete.Get_FiktifMam_Maliyet: Double;
begin
    Result := DefaultInterface.FiktifMam_Maliyet;
end;

procedure TRecete.Set_FiktifMam_Maliyet(Value: Double);
begin
  DefaultInterface.Set_FiktifMam_Maliyet(Value);
end;

function TRecete.Get_OpKodu: WideString;
begin
    Result := DefaultInterface.OpKodu;
end;

procedure TRecete.Set_OpKodu(const Value: WideString);
  { Warning: The property OpKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OpKodu := Value;
end;

function TRecete.Get_Opr_Bil: WideString;
begin
    Result := DefaultInterface.Opr_Bil;
end;

procedure TRecete.Set_Opr_Bil(const Value: WideString);
  { Warning: The property Opr_Bil has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Opr_Bil := Value;
end;

function TRecete.Get_HamYapKod: WideString;
begin
    Result := DefaultInterface.HamYapKod;
end;

procedure TRecete.Set_HamYapKod(const Value: WideString);
  { Warning: The property HamYapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HamYapKod := Value;
end;

function TRecete.Get_Aciklama: WideString;
begin
    Result := DefaultInterface.Aciklama;
end;

procedure TRecete.Set_Aciklama(const Value: WideString);
  { Warning: The property Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama := Value;
end;

function TRecete.Get_IstasyonKodu: WideString;
begin
    Result := DefaultInterface.IstasyonKodu;
end;

procedure TRecete.Set_IstasyonKodu(const Value: WideString);
  { Warning: The property IstasyonKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IstasyonKodu := Value;
end;

function TRecete.Get_HazirlikSuresi: Double;
begin
    Result := DefaultInterface.HazirlikSuresi;
end;

procedure TRecete.Set_HazirlikSuresi(Value: Double);
begin
  DefaultInterface.Set_HazirlikSuresi(Value);
end;

function TRecete.Get_TransferSuresi: Double;
begin
    Result := DefaultInterface.TransferSuresi;
end;

procedure TRecete.Set_TransferSuresi(Value: Double);
begin
  DefaultInterface.Set_TransferSuresi(Value);
end;

function TRecete.Get_UretimSuresi: Double;
begin
    Result := DefaultInterface.UretimSuresi;
end;

procedure TRecete.Set_UretimSuresi(Value: Double);
begin
  DefaultInterface.Set_UretimSuresi(Value);
end;

function TRecete.Get_GecisMiktari: Double;
begin
    Result := DefaultInterface.GecisMiktari;
end;

procedure TRecete.Set_GecisMiktari(Value: Double);
begin
  DefaultInterface.Set_GecisMiktari(Value);
end;

function TRecete.Get_IscilikMaliyeti: Double;
begin
    Result := DefaultInterface.IscilikMaliyeti;
end;

procedure TRecete.Set_IscilikMaliyeti(Value: Double);
begin
  DefaultInterface.Set_IscilikMaliyeti(Value);
end;

function TRecete.Get_DigerMaliyetler: Double;
begin
    Result := DefaultInterface.DigerMaliyetler;
end;

procedure TRecete.Set_DigerMaliyetler(Value: Double);
begin
  DefaultInterface.Set_DigerMaliyetler(Value);
end;

function TRecete.Get_UEDahilEdilsin: WordBool;
begin
    Result := DefaultInterface.UEDahilEdilsin;
end;

procedure TRecete.Set_UEDahilEdilsin(Value: WordBool);
begin
  DefaultInterface.Set_UEDahilEdilsin(Value);
end;

function TRecete.Get_SonOperasyon: WordBool;
begin
    Result := DefaultInterface.SonOperasyon;
end;

procedure TRecete.Set_SonOperasyon(Value: WordBool);
begin
  DefaultInterface.Set_SonOperasyon(Value);
end;

function TRecete.Get_SimTezMiktari: Double;
begin
    Result := DefaultInterface.SimTezMiktari;
end;

procedure TRecete.Set_SimTezMiktari(Value: Double);
begin
  DefaultInterface.Set_SimTezMiktari(Value);
end;

function TRecete.Get_AmbarCikisFisi: TAlternaTifPolitikalar;
begin
    Result := DefaultInterface.AmbarCikisFisi;
end;

procedure TRecete.Set_AmbarCikisFisi(Value: TAlternaTifPolitikalar);
begin
  DefaultInterface.Set_AmbarCikisFisi(Value);
end;

function TRecete.Get_DATransferFisi: TAlternaTifPolitikalar;
begin
    Result := DefaultInterface.DATransferFisi;
end;

procedure TRecete.Set_DATransferFisi(Value: TAlternaTifPolitikalar);
begin
  DefaultInterface.Set_DATransferFisi(Value);
end;

function TRecete.Get_UretimSonuKaydi: TAlternaTifPolitikalar;
begin
    Result := DefaultInterface.UretimSonuKaydi;
end;

procedure TRecete.Set_UretimSonuKaydi(Value: TAlternaTifPolitikalar);
begin
  DefaultInterface.Set_UretimSonuKaydi(Value);
end;

function TRecete.Get_Mrp: TAltPolitikaMrp;
begin
    Result := DefaultInterface.Mrp;
end;

procedure TRecete.Set_Mrp(Value: TAltPolitikaMrp);
begin
  DefaultInterface.Set_Mrp(Value);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TReceteProperties.Create(AServer: TRecete);
begin
  inherited Create;
  FServer := AServer;
end;

function TReceteProperties.GetDefaultInterface: IRecete;
begin
  Result := FServer.DefaultInterface;
end;

function TReceteProperties.Get_Mamul_Kodu: WideString;
begin
    Result := DefaultInterface.Mamul_Kodu;
end;

procedure TReceteProperties.Set_Mamul_Kodu(const Value: WideString);
  { Warning: The property Mamul_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Mamul_Kodu := Value;
end;

function TReceteProperties.Get_Ham_Kodu: WideString;
begin
    Result := DefaultInterface.Ham_Kodu;
end;

procedure TReceteProperties.Set_Ham_Kodu(const Value: WideString);
  { Warning: The property Ham_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ham_Kodu := Value;
end;

function TReceteProperties.Get_Miktar: Double;
begin
    Result := DefaultInterface.Miktar;
end;

procedure TReceteProperties.Set_Miktar(Value: Double);
begin
  DefaultInterface.Set_Miktar(Value);
end;

function TReceteProperties.Get_FireMik: Double;
begin
    Result := DefaultInterface.FireMik;
end;

procedure TReceteProperties.Set_FireMik(Value: Double);
begin
  DefaultInterface.Set_FireMik(Value);
end;

function TReceteProperties.Get_OpNo: WideString;
begin
    Result := DefaultInterface.OpNo;
end;

procedure TReceteProperties.Set_OpNo(const Value: WideString);
  { Warning: The property OpNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OpNo := Value;
end;

function TReceteProperties.Get_SabitFireMik: Double;
begin
    Result := DefaultInterface.SabitFireMik;
end;

procedure TReceteProperties.Set_SabitFireMik(Value: Double);
begin
  DefaultInterface.Set_SabitFireMik(Value);
end;

function TReceteProperties.Get_Stok_Maliyet: WideString;
begin
    Result := DefaultInterface.Stok_Maliyet;
end;

procedure TReceteProperties.Set_Stok_Maliyet(const Value: WideString);
  { Warning: The property Stok_Maliyet has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stok_Maliyet := Value;
end;

function TReceteProperties.Get_MiktarSabitle: WordBool;
begin
    Result := DefaultInterface.MiktarSabitle;
end;

procedure TReceteProperties.Set_MiktarSabitle(Value: WordBool);
begin
  DefaultInterface.Set_MiktarSabitle(Value);
end;

function TReceteProperties.Get_H_OTOMATIK_URETIM: WordBool;
begin
    Result := DefaultInterface.H_OTOMATIK_URETIM;
end;

procedure TReceteProperties.Set_H_OTOMATIK_URETIM(Value: WordBool);
begin
  DefaultInterface.Set_H_OTOMATIK_URETIM(Value);
end;

function TReceteProperties.Get_H_MamulMu: WordBool;
begin
    Result := DefaultInterface.H_MamulMu;
end;

procedure TReceteProperties.Set_H_MamulMu(Value: WordBool);
begin
  DefaultInterface.Set_H_MamulMu(Value);
end;

function TReceteProperties.Get_H_ALIS_FIAT1: Double;
begin
    Result := DefaultInterface.H_ALIS_FIAT1;
end;

procedure TReceteProperties.Set_H_ALIS_FIAT1(Value: Double);
begin
  DefaultInterface.Set_H_ALIS_FIAT1(Value);
end;

function TReceteProperties.Get_H_Stok_Adi: WideString;
begin
    Result := DefaultInterface.H_Stok_Adi;
end;

procedure TReceteProperties.Set_H_Stok_Adi(const Value: WideString);
  { Warning: The property H_Stok_Adi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.H_Stok_Adi := Value;
end;

function TReceteProperties.Get_H_Olcu_Br1: WideString;
begin
    Result := DefaultInterface.H_Olcu_Br1;
end;

procedure TReceteProperties.Set_H_Olcu_Br1(const Value: WideString);
  { Warning: The property H_Olcu_Br1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.H_Olcu_Br1 := Value;
end;

function TReceteProperties.Get_H_Kilit: WordBool;
begin
    Result := DefaultInterface.H_Kilit;
end;

procedure TReceteProperties.Set_H_Kilit(Value: WordBool);
begin
  DefaultInterface.Set_H_Kilit(Value);
end;

function TReceteProperties.Get_M_Stok_Adi: WideString;
begin
    Result := DefaultInterface.M_Stok_Adi;
end;

procedure TReceteProperties.Set_M_Stok_Adi(const Value: WideString);
  { Warning: The property M_Stok_Adi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.M_Stok_Adi := Value;
end;

function TReceteProperties.Get_M_Formul_Toplami: Double;
begin
    Result := DefaultInterface.M_Formul_Toplami;
end;

procedure TReceteProperties.Set_M_Formul_Toplami(Value: Double);
begin
  DefaultInterface.Set_M_Formul_Toplami(Value);
end;

function TReceteProperties.Get_M_Olcu_Br1: WideString;
begin
    Result := DefaultInterface.M_Olcu_Br1;
end;

procedure TReceteProperties.Set_M_Olcu_Br1(const Value: WideString);
  { Warning: The property M_Olcu_Br1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.M_Olcu_Br1 := Value;
end;

function TReceteProperties.Get_OncelikDegissin: WordBool;
begin
    Result := DefaultInterface.OncelikDegissin;
end;

procedure TReceteProperties.Set_OncelikDegissin(Value: WordBool);
begin
  DefaultInterface.Set_OncelikDegissin(Value);
end;

function TReceteProperties.Get_Planlama_Orani: Double;
begin
    Result := DefaultInterface.Planlama_Orani;
end;

procedure TReceteProperties.Set_Planlama_Orani(Value: Double);
begin
  DefaultInterface.Set_Planlama_Orani(Value);
end;

function TReceteProperties.Get_Oncelik: Integer;
begin
    Result := DefaultInterface.Oncelik;
end;

procedure TReceteProperties.Set_Oncelik(Value: Integer);
begin
  DefaultInterface.Set_Oncelik(Value);
end;

function TReceteProperties.Get_FiktifMi: WordBool;
begin
    Result := DefaultInterface.FiktifMi;
end;

procedure TReceteProperties.Set_FiktifMi(Value: WordBool);
begin
  DefaultInterface.Set_FiktifMi(Value);
end;

function TReceteProperties.Get_SarfMamul_Kodu: WideString;
begin
    Result := DefaultInterface.SarfMamul_Kodu;
end;

procedure TReceteProperties.Set_SarfMamul_Kodu(const Value: WideString);
  { Warning: The property SarfMamul_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SarfMamul_Kodu := Value;
end;

function TReceteProperties.Get_FiktifMam_Maliyet: Double;
begin
    Result := DefaultInterface.FiktifMam_Maliyet;
end;

procedure TReceteProperties.Set_FiktifMam_Maliyet(Value: Double);
begin
  DefaultInterface.Set_FiktifMam_Maliyet(Value);
end;

function TReceteProperties.Get_OpKodu: WideString;
begin
    Result := DefaultInterface.OpKodu;
end;

procedure TReceteProperties.Set_OpKodu(const Value: WideString);
  { Warning: The property OpKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OpKodu := Value;
end;

function TReceteProperties.Get_Opr_Bil: WideString;
begin
    Result := DefaultInterface.Opr_Bil;
end;

procedure TReceteProperties.Set_Opr_Bil(const Value: WideString);
  { Warning: The property Opr_Bil has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Opr_Bil := Value;
end;

function TReceteProperties.Get_HamYapKod: WideString;
begin
    Result := DefaultInterface.HamYapKod;
end;

procedure TReceteProperties.Set_HamYapKod(const Value: WideString);
  { Warning: The property HamYapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HamYapKod := Value;
end;

function TReceteProperties.Get_Aciklama: WideString;
begin
    Result := DefaultInterface.Aciklama;
end;

procedure TReceteProperties.Set_Aciklama(const Value: WideString);
  { Warning: The property Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama := Value;
end;

function TReceteProperties.Get_IstasyonKodu: WideString;
begin
    Result := DefaultInterface.IstasyonKodu;
end;

procedure TReceteProperties.Set_IstasyonKodu(const Value: WideString);
  { Warning: The property IstasyonKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IstasyonKodu := Value;
end;

function TReceteProperties.Get_HazirlikSuresi: Double;
begin
    Result := DefaultInterface.HazirlikSuresi;
end;

procedure TReceteProperties.Set_HazirlikSuresi(Value: Double);
begin
  DefaultInterface.Set_HazirlikSuresi(Value);
end;

function TReceteProperties.Get_TransferSuresi: Double;
begin
    Result := DefaultInterface.TransferSuresi;
end;

procedure TReceteProperties.Set_TransferSuresi(Value: Double);
begin
  DefaultInterface.Set_TransferSuresi(Value);
end;

function TReceteProperties.Get_UretimSuresi: Double;
begin
    Result := DefaultInterface.UretimSuresi;
end;

procedure TReceteProperties.Set_UretimSuresi(Value: Double);
begin
  DefaultInterface.Set_UretimSuresi(Value);
end;

function TReceteProperties.Get_GecisMiktari: Double;
begin
    Result := DefaultInterface.GecisMiktari;
end;

procedure TReceteProperties.Set_GecisMiktari(Value: Double);
begin
  DefaultInterface.Set_GecisMiktari(Value);
end;

function TReceteProperties.Get_IscilikMaliyeti: Double;
begin
    Result := DefaultInterface.IscilikMaliyeti;
end;

procedure TReceteProperties.Set_IscilikMaliyeti(Value: Double);
begin
  DefaultInterface.Set_IscilikMaliyeti(Value);
end;

function TReceteProperties.Get_DigerMaliyetler: Double;
begin
    Result := DefaultInterface.DigerMaliyetler;
end;

procedure TReceteProperties.Set_DigerMaliyetler(Value: Double);
begin
  DefaultInterface.Set_DigerMaliyetler(Value);
end;

function TReceteProperties.Get_UEDahilEdilsin: WordBool;
begin
    Result := DefaultInterface.UEDahilEdilsin;
end;

procedure TReceteProperties.Set_UEDahilEdilsin(Value: WordBool);
begin
  DefaultInterface.Set_UEDahilEdilsin(Value);
end;

function TReceteProperties.Get_SonOperasyon: WordBool;
begin
    Result := DefaultInterface.SonOperasyon;
end;

procedure TReceteProperties.Set_SonOperasyon(Value: WordBool);
begin
  DefaultInterface.Set_SonOperasyon(Value);
end;

function TReceteProperties.Get_SimTezMiktari: Double;
begin
    Result := DefaultInterface.SimTezMiktari;
end;

procedure TReceteProperties.Set_SimTezMiktari(Value: Double);
begin
  DefaultInterface.Set_SimTezMiktari(Value);
end;

function TReceteProperties.Get_AmbarCikisFisi: TAlternaTifPolitikalar;
begin
    Result := DefaultInterface.AmbarCikisFisi;
end;

procedure TReceteProperties.Set_AmbarCikisFisi(Value: TAlternaTifPolitikalar);
begin
  DefaultInterface.Set_AmbarCikisFisi(Value);
end;

function TReceteProperties.Get_DATransferFisi: TAlternaTifPolitikalar;
begin
    Result := DefaultInterface.DATransferFisi;
end;

procedure TReceteProperties.Set_DATransferFisi(Value: TAlternaTifPolitikalar);
begin
  DefaultInterface.Set_DATransferFisi(Value);
end;

function TReceteProperties.Get_UretimSonuKaydi: TAlternaTifPolitikalar;
begin
    Result := DefaultInterface.UretimSonuKaydi;
end;

procedure TReceteProperties.Set_UretimSonuKaydi(Value: TAlternaTifPolitikalar);
begin
  DefaultInterface.Set_UretimSonuKaydi(Value);
end;

function TReceteProperties.Get_Mrp: TAltPolitikaMrp;
begin
    Result := DefaultInterface.Mrp;
end;

procedure TReceteProperties.Set_Mrp(Value: TAltPolitikaMrp);
begin
  DefaultInterface.Set_Mrp(Value);
end;

{$ENDIF}

class function CoNetField.Create: INetField;
begin
  Result := CreateComObject(CLASS_NetField) as INetField;
end;

class function CoNetField.CreateRemote(const MachineName: string): INetField;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NetField) as INetField;
end;

procedure TNetField.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{229B7D4C-63E3-4BC7-AAC6-CF1654CF743E}';
    IntfIID:   '{3C1ADC96-4757-4320-92B7-1DEA8F691AC3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNetField.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as INetField;
  end;
end;

procedure TNetField.ConnectTo(svrIntf: INetField);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNetField.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNetField.GetDefaultInterface: INetField;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNetField.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNetFieldProperties.Create(Self);
{$ENDIF}
end;

destructor TNetField.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNetField.GetServerProperties: TNetFieldProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNetField.Get_FieldName: WideString;
begin
    Result := DefaultInterface.FieldName;
end;

function TNetField.Get_AsString: WideString;
begin
    Result := DefaultInterface.AsString;
end;

function TNetField.Get_AsInteger: Integer;
begin
    Result := DefaultInterface.AsInteger;
end;

function TNetField.Get_AsDateTime: TDateTime;
begin
    Result := DefaultInterface.AsDateTime;
end;

function TNetField.Get_AsVariant: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.AsVariant;
end;

function TNetField.Get_AsFloat: Double;
begin
    Result := DefaultInterface.AsFloat;
end;

function TNetField.Get_DisplayName: WideString;
begin
    Result := DefaultInterface.DisplayName;
end;

function TNetField.Get_DataType: Integer;
begin
    Result := DefaultInterface.DataType;
end;

function TNetField.Get_IsBlolb: WordBool;
begin
    Result := DefaultInterface.IsBlolb;
end;

function TNetField.Get_DisplayText: WideString;
begin
    Result := DefaultInterface.DisplayText;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNetFieldProperties.Create(AServer: TNetField);
begin
  inherited Create;
  FServer := AServer;
end;

function TNetFieldProperties.GetDefaultInterface: INetField;
begin
  Result := FServer.DefaultInterface;
end;

function TNetFieldProperties.Get_FieldName: WideString;
begin
    Result := DefaultInterface.FieldName;
end;

function TNetFieldProperties.Get_AsString: WideString;
begin
    Result := DefaultInterface.AsString;
end;

function TNetFieldProperties.Get_AsInteger: Integer;
begin
    Result := DefaultInterface.AsInteger;
end;

function TNetFieldProperties.Get_AsDateTime: TDateTime;
begin
    Result := DefaultInterface.AsDateTime;
end;

function TNetFieldProperties.Get_AsVariant: OleVariant;
var
  InterfaceVariant : OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  Result := InterfaceVariant.AsVariant;
end;

function TNetFieldProperties.Get_AsFloat: Double;
begin
    Result := DefaultInterface.AsFloat;
end;

function TNetFieldProperties.Get_DisplayName: WideString;
begin
    Result := DefaultInterface.DisplayName;
end;

function TNetFieldProperties.Get_DataType: Integer;
begin
    Result := DefaultInterface.DataType;
end;

function TNetFieldProperties.Get_IsBlolb: WordBool;
begin
    Result := DefaultInterface.IsBlolb;
end;

function TNetFieldProperties.Get_DisplayText: WideString;
begin
    Result := DefaultInterface.DisplayText;
end;

{$ENDIF}

class function CoVTGuvenlik.Create: IVTGuvenlik;
begin
  Result := CreateComObject(CLASS_VTGuvenlik) as IVTGuvenlik;
end;

class function CoVTGuvenlik.CreateRemote(const MachineName: string): IVTGuvenlik;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_VTGuvenlik) as IVTGuvenlik;
end;

procedure TVTGuvenlik.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1EF91D5E-F843-41CB-B14F-F9B2392E81DE}';
    IntfIID:   '{0680A9BF-C3A9-4F52-BBE8-7F3D01C562F4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TVTGuvenlik.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IVTGuvenlik;
  end;
end;

procedure TVTGuvenlik.ConnectTo(svrIntf: IVTGuvenlik);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TVTGuvenlik.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TVTGuvenlik.GetDefaultInterface: IVTGuvenlik;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TVTGuvenlik.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TVTGuvenlikProperties.Create(Self);
{$ENDIF}
end;

destructor TVTGuvenlik.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TVTGuvenlik.GetServerProperties: TVTGuvenlikProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TVTGuvenlik.Get_KisitKapsami: TKisitKapsami;
begin
    Result := DefaultInterface.KisitKapsami;
end;

procedure TVTGuvenlik.Set_KisitKapsami(Value: TKisitKapsami);
begin
  DefaultInterface.Set_KisitKapsami(Value);
end;

function TVTGuvenlik.Get_KullaniciKodu: Integer;
begin
    Result := DefaultInterface.KullaniciKodu;
end;

procedure TVTGuvenlik.Set_KullaniciKodu(Value: Integer);
begin
  DefaultInterface.Set_KullaniciKodu(Value);
end;

function TVTGuvenlik.Get_GrupKodu: Integer;
begin
    Result := DefaultInterface.GrupKodu;
end;

procedure TVTGuvenlik.Set_GrupKodu(Value: Integer);
begin
  DefaultInterface.Set_GrupKodu(Value);
end;

function TVTGuvenlik.Get_VeriTabaniNesnesi: WideString;
begin
    Result := DefaultInterface.VeriTabaniNesnesi;
end;

procedure TVTGuvenlik.Set_VeriTabaniNesnesi(const Value: WideString);
  { Warning: The property VeriTabaniNesnesi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VeriTabaniNesnesi := Value;
end;

function TVTGuvenlik.Get_SahaAdi: WideString;
begin
    Result := DefaultInterface.SahaAdi;
end;

procedure TVTGuvenlik.Set_SahaAdi(const Value: WideString);
  { Warning: The property SahaAdi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SahaAdi := Value;
end;

function TVTGuvenlik.Get_NullKontroluYapilsin: WordBool;
begin
    Result := DefaultInterface.NullKontroluYapilsin;
end;

procedure TVTGuvenlik.Set_NullKontroluYapilsin(Value: WordBool);
begin
  DefaultInterface.Set_NullKontroluYapilsin(Value);
end;

function TVTGuvenlik.Get_HataAciklama: WideString;
begin
    Result := DefaultInterface.HataAciklama;
end;

procedure TVTGuvenlik.Set_HataAciklama(const Value: WideString);
  { Warning: The property HataAciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HataAciklama := Value;
end;

function TVTGuvenlik.Get_SQL: WideString;
begin
    Result := DefaultInterface.SQL;
end;

procedure TVTGuvenlik.Set_SQL(const Value: WideString);
  { Warning: The property SQL has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SQL := Value;
end;

procedure TVTGuvenlik.SatirBaziGuvenlikEkle;
begin
  DefaultInterface.SatirBaziGuvenlikEkle;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TVTGuvenlikProperties.Create(AServer: TVTGuvenlik);
begin
  inherited Create;
  FServer := AServer;
end;

function TVTGuvenlikProperties.GetDefaultInterface: IVTGuvenlik;
begin
  Result := FServer.DefaultInterface;
end;

function TVTGuvenlikProperties.Get_KisitKapsami: TKisitKapsami;
begin
    Result := DefaultInterface.KisitKapsami;
end;

procedure TVTGuvenlikProperties.Set_KisitKapsami(Value: TKisitKapsami);
begin
  DefaultInterface.Set_KisitKapsami(Value);
end;

function TVTGuvenlikProperties.Get_KullaniciKodu: Integer;
begin
    Result := DefaultInterface.KullaniciKodu;
end;

procedure TVTGuvenlikProperties.Set_KullaniciKodu(Value: Integer);
begin
  DefaultInterface.Set_KullaniciKodu(Value);
end;

function TVTGuvenlikProperties.Get_GrupKodu: Integer;
begin
    Result := DefaultInterface.GrupKodu;
end;

procedure TVTGuvenlikProperties.Set_GrupKodu(Value: Integer);
begin
  DefaultInterface.Set_GrupKodu(Value);
end;

function TVTGuvenlikProperties.Get_VeriTabaniNesnesi: WideString;
begin
    Result := DefaultInterface.VeriTabaniNesnesi;
end;

procedure TVTGuvenlikProperties.Set_VeriTabaniNesnesi(const Value: WideString);
  { Warning: The property VeriTabaniNesnesi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VeriTabaniNesnesi := Value;
end;

function TVTGuvenlikProperties.Get_SahaAdi: WideString;
begin
    Result := DefaultInterface.SahaAdi;
end;

procedure TVTGuvenlikProperties.Set_SahaAdi(const Value: WideString);
  { Warning: The property SahaAdi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SahaAdi := Value;
end;

function TVTGuvenlikProperties.Get_NullKontroluYapilsin: WordBool;
begin
    Result := DefaultInterface.NullKontroluYapilsin;
end;

procedure TVTGuvenlikProperties.Set_NullKontroluYapilsin(Value: WordBool);
begin
  DefaultInterface.Set_NullKontroluYapilsin(Value);
end;

function TVTGuvenlikProperties.Get_HataAciklama: WideString;
begin
    Result := DefaultInterface.HataAciklama;
end;

procedure TVTGuvenlikProperties.Set_HataAciklama(const Value: WideString);
  { Warning: The property HataAciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HataAciklama := Value;
end;

function TVTGuvenlikProperties.Get_SQL: WideString;
begin
    Result := DefaultInterface.SQL;
end;

procedure TVTGuvenlikProperties.Set_SQL(const Value: WideString);
  { Warning: The property SQL has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SQL := Value;
end;

{$ENDIF}

class function CoMaliyetMuhasebesi.Create: IMaliyetMuhasebesi;
begin
  Result := CreateComObject(CLASS_MaliyetMuhasebesi) as IMaliyetMuhasebesi;
end;

class function CoMaliyetMuhasebesi.CreateRemote(const MachineName: string): IMaliyetMuhasebesi;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MaliyetMuhasebesi) as IMaliyetMuhasebesi;
end;

procedure TMaliyetMuhasebesi.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A15A0997-06DE-4A8E-94CD-9173D576ADD3}';
    IntfIID:   '{E07836D2-83E7-4511-BBAA-0E7D15956CB7}';
    EventIID:  '{2643E901-88EE-43C9-ACD0-D05B94ECE71E}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMaliyetMuhasebesi.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IMaliyetMuhasebesi;
  end;
end;

procedure TMaliyetMuhasebesi.ConnectTo(svrIntf: IMaliyetMuhasebesi);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TMaliyetMuhasebesi.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TMaliyetMuhasebesi.GetDefaultInterface: IMaliyetMuhasebesi;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMaliyetMuhasebesi.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMaliyetMuhasebesiProperties.Create(Self);
{$ENDIF}
end;

destructor TMaliyetMuhasebesi.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMaliyetMuhasebesi.GetServerProperties: TMaliyetMuhasebesiProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TMaliyetMuhasebesi.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    201: if Assigned(FOnInfo) then
         FOnInfo(Self);
  end; {case DispID}
end;

function TMaliyetMuhasebesi.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TMaliyetMuhasebesi.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMaliyetMuhasebesi.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TMaliyetMuhasebesi.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TMaliyetMuhasebesi.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TMaliyetMuhasebesi.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TMaliyetMuhasebesi.Get_AyKodu: Integer;
begin
    Result := DefaultInterface.AyKodu;
end;

procedure TMaliyetMuhasebesi.Set_AyKodu(Value: Integer);
begin
  DefaultInterface.Set_AyKodu(Value);
end;

function TMaliyetMuhasebesi.Get_YilKodu: Integer;
begin
    Result := DefaultInterface.YilKodu;
end;

procedure TMaliyetMuhasebesi.Set_YilKodu(Value: Integer);
begin
  DefaultInterface.Set_YilKodu(Value);
end;

function TMaliyetMuhasebesi.Get_YillikIslemYapilacak: WordBool;
begin
    Result := DefaultInterface.YillikIslemYapilacak;
end;

procedure TMaliyetMuhasebesi.Set_YillikIslemYapilacak(Value: WordBool);
begin
  DefaultInterface.Set_YillikIslemYapilacak(Value);
end;

function TMaliyetMuhasebesi.Get_HazirlikYapilacak: WordBool;
begin
    Result := DefaultInterface.HazirlikYapilacak;
end;

procedure TMaliyetMuhasebesi.Set_HazirlikYapilacak(Value: WordBool);
begin
  DefaultInterface.Set_HazirlikYapilacak(Value);
end;

function TMaliyetMuhasebesi.Get_MahsupOlusturulacak: WordBool;
begin
    Result := DefaultInterface.MahsupOlusturulacak;
end;

procedure TMaliyetMuhasebesi.Set_MahsupOlusturulacak(Value: WordBool);
begin
  DefaultInterface.Set_MahsupOlusturulacak(Value);
end;

function TMaliyetMuhasebesi.Get_FarkMahsupOlusturulacak: WordBool;
begin
    Result := DefaultInterface.FarkMahsupOlusturulacak;
end;

procedure TMaliyetMuhasebesi.Set_FarkMahsupOlusturulacak(Value: WordBool);
begin
  DefaultInterface.Set_FarkMahsupOlusturulacak(Value);
end;

function TMaliyetMuhasebesi.Get_FarkMahsupAyKodu: Integer;
begin
    Result := DefaultInterface.FarkMahsupAyKodu;
end;

procedure TMaliyetMuhasebesi.Set_FarkMahsupAyKodu(Value: Integer);
begin
  DefaultInterface.Set_FarkMahsupAyKodu(Value);
end;

function TMaliyetMuhasebesi.Get_PaylastirmaHasTutar: Double;
begin
    Result := DefaultInterface.PaylastirmaHasTutar;
end;

procedure TMaliyetMuhasebesi.Set_PaylastirmaHasTutar(Value: Double);
begin
  DefaultInterface.Set_PaylastirmaHasTutar(Value);
end;

function TMaliyetMuhasebesi.Get_GenelSafhaSayisi: Integer;
begin
    Result := DefaultInterface.GenelSafhaSayisi;
end;

procedure TMaliyetMuhasebesi.Set_GenelSafhaSayisi(Value: Integer);
begin
  DefaultInterface.Set_GenelSafhaSayisi(Value);
end;

function TMaliyetMuhasebesi.Get_Message: WideString;
begin
    Result := DefaultInterface.Message;
end;

procedure TMaliyetMuhasebesi.Set_Message(const Value: WideString);
  { Warning: The property Message has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Message := Value;
end;

procedure TMaliyetMuhasebesi.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TMaliyetMuhasebesi.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TMaliyetMuhasebesi.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TMaliyetMuhasebesi.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TMaliyetMuhasebesi.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TMaliyetMuhasebesi.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TMaliyetMuhasebesi.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

procedure TMaliyetMuhasebesi.Calistir;
begin
  DefaultInterface.Calistir;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMaliyetMuhasebesiProperties.Create(AServer: TMaliyetMuhasebesi);
begin
  inherited Create;
  FServer := AServer;
end;

function TMaliyetMuhasebesiProperties.GetDefaultInterface: IMaliyetMuhasebesi;
begin
  Result := FServer.DefaultInterface;
end;

function TMaliyetMuhasebesiProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TMaliyetMuhasebesiProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMaliyetMuhasebesiProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TMaliyetMuhasebesiProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TMaliyetMuhasebesiProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TMaliyetMuhasebesiProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TMaliyetMuhasebesiProperties.Get_AyKodu: Integer;
begin
    Result := DefaultInterface.AyKodu;
end;

procedure TMaliyetMuhasebesiProperties.Set_AyKodu(Value: Integer);
begin
  DefaultInterface.Set_AyKodu(Value);
end;

function TMaliyetMuhasebesiProperties.Get_YilKodu: Integer;
begin
    Result := DefaultInterface.YilKodu;
end;

procedure TMaliyetMuhasebesiProperties.Set_YilKodu(Value: Integer);
begin
  DefaultInterface.Set_YilKodu(Value);
end;

function TMaliyetMuhasebesiProperties.Get_YillikIslemYapilacak: WordBool;
begin
    Result := DefaultInterface.YillikIslemYapilacak;
end;

procedure TMaliyetMuhasebesiProperties.Set_YillikIslemYapilacak(Value: WordBool);
begin
  DefaultInterface.Set_YillikIslemYapilacak(Value);
end;

function TMaliyetMuhasebesiProperties.Get_HazirlikYapilacak: WordBool;
begin
    Result := DefaultInterface.HazirlikYapilacak;
end;

procedure TMaliyetMuhasebesiProperties.Set_HazirlikYapilacak(Value: WordBool);
begin
  DefaultInterface.Set_HazirlikYapilacak(Value);
end;

function TMaliyetMuhasebesiProperties.Get_MahsupOlusturulacak: WordBool;
begin
    Result := DefaultInterface.MahsupOlusturulacak;
end;

procedure TMaliyetMuhasebesiProperties.Set_MahsupOlusturulacak(Value: WordBool);
begin
  DefaultInterface.Set_MahsupOlusturulacak(Value);
end;

function TMaliyetMuhasebesiProperties.Get_FarkMahsupOlusturulacak: WordBool;
begin
    Result := DefaultInterface.FarkMahsupOlusturulacak;
end;

procedure TMaliyetMuhasebesiProperties.Set_FarkMahsupOlusturulacak(Value: WordBool);
begin
  DefaultInterface.Set_FarkMahsupOlusturulacak(Value);
end;

function TMaliyetMuhasebesiProperties.Get_FarkMahsupAyKodu: Integer;
begin
    Result := DefaultInterface.FarkMahsupAyKodu;
end;

procedure TMaliyetMuhasebesiProperties.Set_FarkMahsupAyKodu(Value: Integer);
begin
  DefaultInterface.Set_FarkMahsupAyKodu(Value);
end;

function TMaliyetMuhasebesiProperties.Get_PaylastirmaHasTutar: Double;
begin
    Result := DefaultInterface.PaylastirmaHasTutar;
end;

procedure TMaliyetMuhasebesiProperties.Set_PaylastirmaHasTutar(Value: Double);
begin
  DefaultInterface.Set_PaylastirmaHasTutar(Value);
end;

function TMaliyetMuhasebesiProperties.Get_GenelSafhaSayisi: Integer;
begin
    Result := DefaultInterface.GenelSafhaSayisi;
end;

procedure TMaliyetMuhasebesiProperties.Set_GenelSafhaSayisi(Value: Integer);
begin
  DefaultInterface.Set_GenelSafhaSayisi(Value);
end;

function TMaliyetMuhasebesiProperties.Get_Message: WideString;
begin
    Result := DefaultInterface.Message;
end;

procedure TMaliyetMuhasebesiProperties.Set_Message(const Value: WideString);
  { Warning: The property Message has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Message := Value;
end;

{$ENDIF}

class function CoStokMaliyet.Create: IStokMaliyet;
begin
  Result := CreateComObject(CLASS_StokMaliyet) as IStokMaliyet;
end;

class function CoStokMaliyet.CreateRemote(const MachineName: string): IStokMaliyet;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StokMaliyet) as IStokMaliyet;
end;

procedure TStokMaliyet.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BDD435FA-D122-43A1-8CEE-10C57EBD1CF1}';
    IntfIID:   '{061426B1-FEC6-4D9E-BA19-A5A2E272A1E7}';
    EventIID:  '{BB6A4ECD-291A-45AF-9668-80C951713E98}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStokMaliyet.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IStokMaliyet;
  end;
end;

procedure TStokMaliyet.ConnectTo(svrIntf: IStokMaliyet);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TStokMaliyet.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TStokMaliyet.GetDefaultInterface: IStokMaliyet;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TStokMaliyet.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TStokMaliyetProperties.Create(Self);
{$ENDIF}
end;

destructor TStokMaliyet.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TStokMaliyet.GetServerProperties: TStokMaliyetProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TStokMaliyet.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    201: if Assigned(FOnInfo) then
         FOnInfo(Self);
  end; {case DispID}
end;

function TStokMaliyet.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TStokMaliyet.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStokMaliyet.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TStokMaliyet.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TStokMaliyet.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TStokMaliyet.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TStokMaliyet.Get_YillikIslemYapilacak: WordBool;
begin
    Result := DefaultInterface.YillikIslemYapilacak;
end;

procedure TStokMaliyet.Set_YillikIslemYapilacak(Value: WordBool);
begin
  DefaultInterface.Set_YillikIslemYapilacak(Value);
end;

function TStokMaliyet.Get_SubelerDahil: WordBool;
begin
    Result := DefaultInterface.SubelerDahil;
end;

procedure TStokMaliyet.Set_SubelerDahil(Value: WordBool);
begin
  DefaultInterface.Set_SubelerDahil(Value);
end;

function TStokMaliyet.Get_SubeBazMaliyetHesapla: WordBool;
begin
    Result := DefaultInterface.SubeBazMaliyetHesapla;
end;

procedure TStokMaliyet.Set_SubeBazMaliyetHesapla(Value: WordBool);
begin
  DefaultInterface.Set_SubeBazMaliyetHesapla(Value);
end;

function TStokMaliyet.Get_BasTarih: TDateTime;
begin
    Result := DefaultInterface.BasTarih;
end;

procedure TStokMaliyet.Set_BasTarih(Value: TDateTime);
begin
  DefaultInterface.Set_BasTarih(Value);
end;

function TStokMaliyet.Get_BitTarih: TDateTime;
begin
    Result := DefaultInterface.BitTarih;
end;

procedure TStokMaliyet.Set_BitTarih(Value: TDateTime);
begin
  DefaultInterface.Set_BitTarih(Value);
end;

function TStokMaliyet.Get_MaliyetMerkezSubeKodu: WideString;
begin
    Result := DefaultInterface.MaliyetMerkezSubeKodu;
end;

procedure TStokMaliyet.Set_MaliyetMerkezSubeKodu(const Value: WideString);
  { Warning: The property MaliyetMerkezSubeKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MaliyetMerkezSubeKodu := Value;
end;

function TStokMaliyet.Get_DonguSayisi: Integer;
begin
    Result := DefaultInterface.DonguSayisi;
end;

procedure TStokMaliyet.Set_DonguSayisi(Value: Integer);
begin
  DefaultInterface.Set_DonguSayisi(Value);
end;

function TStokMaliyet.Get_SatIadeDonemORtFiyDegerlen: WordBool;
begin
    Result := DefaultInterface.SatIadeDonemORtFiyDegerlen;
end;

procedure TStokMaliyet.Set_SatIadeDonemORtFiyDegerlen(Value: WordBool);
begin
  DefaultInterface.Set_SatIadeDonemORtFiyDegerlen(Value);
end;

function TStokMaliyet.Get_TurKisitlamasi: TTurKisit;
begin
    Result := DefaultInterface.TurKisitlamasi;
end;

procedure TStokMaliyet.Set_TurKisitlamasi(Value: TTurKisit);
begin
  DefaultInterface.Set_TurKisitlamasi(Value);
end;

function TStokMaliyet.Get_MaliyetTipi: Integer;
begin
    Result := DefaultInterface.MaliyetTipi;
end;

function TStokMaliyet.Get_SQLWhereCaluse: WideString;
begin
    Result := DefaultInterface.SQLWhereCaluse;
end;

procedure TStokMaliyet.Set_SQLWhereCaluse(const Value: WideString);
  { Warning: The property SQLWhereCaluse has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SQLWhereCaluse := Value;
end;

function TStokMaliyet.Get_StokKodu: WideString;
begin
    Result := DefaultInterface.StokKodu;
end;

procedure TStokMaliyet.Set_StokKodu(const Value: WideString);
  { Warning: The property StokKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StokKodu := Value;
end;

function TStokMaliyet.Get_GrupKodu: WideString;
begin
    Result := DefaultInterface.GrupKodu;
end;

procedure TStokMaliyet.Set_GrupKodu(const Value: WideString);
  { Warning: The property GrupKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GrupKodu := Value;
end;

function TStokMaliyet.Get_Kod_1: WideString;
begin
    Result := DefaultInterface.Kod_1;
end;

procedure TStokMaliyet.Set_Kod_1(const Value: WideString);
  { Warning: The property Kod_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod_1 := Value;
end;

function TStokMaliyet.Get_Kod_2: WideString;
begin
    Result := DefaultInterface.Kod_2;
end;

procedure TStokMaliyet.Set_Kod_2(const Value: WideString);
  { Warning: The property Kod_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod_2 := Value;
end;

function TStokMaliyet.Get_Message: WideString;
begin
    Result := DefaultInterface.Message;
end;

procedure TStokMaliyet.Set_Message(const Value: WideString);
  { Warning: The property Message has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Message := Value;
end;

procedure TStokMaliyet.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TStokMaliyet.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TStokMaliyet.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TStokMaliyet.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TStokMaliyet.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TStokMaliyet.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TStokMaliyet.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

procedure TStokMaliyet.Calistir;
begin
  DefaultInterface.Calistir;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TStokMaliyetProperties.Create(AServer: TStokMaliyet);
begin
  inherited Create;
  FServer := AServer;
end;

function TStokMaliyetProperties.GetDefaultInterface: IStokMaliyet;
begin
  Result := FServer.DefaultInterface;
end;

function TStokMaliyetProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TStokMaliyetProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStokMaliyetProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TStokMaliyetProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TStokMaliyetProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TStokMaliyetProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TStokMaliyetProperties.Get_YillikIslemYapilacak: WordBool;
begin
    Result := DefaultInterface.YillikIslemYapilacak;
end;

procedure TStokMaliyetProperties.Set_YillikIslemYapilacak(Value: WordBool);
begin
  DefaultInterface.Set_YillikIslemYapilacak(Value);
end;

function TStokMaliyetProperties.Get_SubelerDahil: WordBool;
begin
    Result := DefaultInterface.SubelerDahil;
end;

procedure TStokMaliyetProperties.Set_SubelerDahil(Value: WordBool);
begin
  DefaultInterface.Set_SubelerDahil(Value);
end;

function TStokMaliyetProperties.Get_SubeBazMaliyetHesapla: WordBool;
begin
    Result := DefaultInterface.SubeBazMaliyetHesapla;
end;

procedure TStokMaliyetProperties.Set_SubeBazMaliyetHesapla(Value: WordBool);
begin
  DefaultInterface.Set_SubeBazMaliyetHesapla(Value);
end;

function TStokMaliyetProperties.Get_BasTarih: TDateTime;
begin
    Result := DefaultInterface.BasTarih;
end;

procedure TStokMaliyetProperties.Set_BasTarih(Value: TDateTime);
begin
  DefaultInterface.Set_BasTarih(Value);
end;

function TStokMaliyetProperties.Get_BitTarih: TDateTime;
begin
    Result := DefaultInterface.BitTarih;
end;

procedure TStokMaliyetProperties.Set_BitTarih(Value: TDateTime);
begin
  DefaultInterface.Set_BitTarih(Value);
end;

function TStokMaliyetProperties.Get_MaliyetMerkezSubeKodu: WideString;
begin
    Result := DefaultInterface.MaliyetMerkezSubeKodu;
end;

procedure TStokMaliyetProperties.Set_MaliyetMerkezSubeKodu(const Value: WideString);
  { Warning: The property MaliyetMerkezSubeKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MaliyetMerkezSubeKodu := Value;
end;

function TStokMaliyetProperties.Get_DonguSayisi: Integer;
begin
    Result := DefaultInterface.DonguSayisi;
end;

procedure TStokMaliyetProperties.Set_DonguSayisi(Value: Integer);
begin
  DefaultInterface.Set_DonguSayisi(Value);
end;

function TStokMaliyetProperties.Get_SatIadeDonemORtFiyDegerlen: WordBool;
begin
    Result := DefaultInterface.SatIadeDonemORtFiyDegerlen;
end;

procedure TStokMaliyetProperties.Set_SatIadeDonemORtFiyDegerlen(Value: WordBool);
begin
  DefaultInterface.Set_SatIadeDonemORtFiyDegerlen(Value);
end;

function TStokMaliyetProperties.Get_TurKisitlamasi: TTurKisit;
begin
    Result := DefaultInterface.TurKisitlamasi;
end;

procedure TStokMaliyetProperties.Set_TurKisitlamasi(Value: TTurKisit);
begin
  DefaultInterface.Set_TurKisitlamasi(Value);
end;

function TStokMaliyetProperties.Get_MaliyetTipi: Integer;
begin
    Result := DefaultInterface.MaliyetTipi;
end;

function TStokMaliyetProperties.Get_SQLWhereCaluse: WideString;
begin
    Result := DefaultInterface.SQLWhereCaluse;
end;

procedure TStokMaliyetProperties.Set_SQLWhereCaluse(const Value: WideString);
  { Warning: The property SQLWhereCaluse has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SQLWhereCaluse := Value;
end;

function TStokMaliyetProperties.Get_StokKodu: WideString;
begin
    Result := DefaultInterface.StokKodu;
end;

procedure TStokMaliyetProperties.Set_StokKodu(const Value: WideString);
  { Warning: The property StokKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StokKodu := Value;
end;

function TStokMaliyetProperties.Get_GrupKodu: WideString;
begin
    Result := DefaultInterface.GrupKodu;
end;

procedure TStokMaliyetProperties.Set_GrupKodu(const Value: WideString);
  { Warning: The property GrupKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GrupKodu := Value;
end;

function TStokMaliyetProperties.Get_Kod_1: WideString;
begin
    Result := DefaultInterface.Kod_1;
end;

procedure TStokMaliyetProperties.Set_Kod_1(const Value: WideString);
  { Warning: The property Kod_1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod_1 := Value;
end;

function TStokMaliyetProperties.Get_Kod_2: WideString;
begin
    Result := DefaultInterface.Kod_2;
end;

procedure TStokMaliyetProperties.Set_Kod_2(const Value: WideString);
  { Warning: The property Kod_2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod_2 := Value;
end;

function TStokMaliyetProperties.Get_Message: WideString;
begin
    Result := DefaultInterface.Message;
end;

procedure TStokMaliyetProperties.Set_Message(const Value: WideString);
  { Warning: The property Message has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Message := Value;
end;

{$ENDIF}

class function CoAmbarFisMuh.Create: IAmbarFisMuh;
begin
  Result := CreateComObject(CLASS_AmbarFisMuh) as IAmbarFisMuh;
end;

class function CoAmbarFisMuh.CreateRemote(const MachineName: string): IAmbarFisMuh;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AmbarFisMuh) as IAmbarFisMuh;
end;

procedure TAmbarFisMuh.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0F239668-B831-4E37-839E-71A69CB1D006}';
    IntfIID:   '{BB055262-5C94-4304-B8B1-36050F8E5323}';
    EventIID:  '{BE114B02-F94C-4549-8199-B011697F62E7}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAmbarFisMuh.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IAmbarFisMuh;
  end;
end;

procedure TAmbarFisMuh.ConnectTo(svrIntf: IAmbarFisMuh);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TAmbarFisMuh.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TAmbarFisMuh.GetDefaultInterface: IAmbarFisMuh;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TAmbarFisMuh.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TAmbarFisMuhProperties.Create(Self);
{$ENDIF}
end;

destructor TAmbarFisMuh.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TAmbarFisMuh.GetServerProperties: TAmbarFisMuhProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TAmbarFisMuh.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
  end; {case DispID}
end;

function TAmbarFisMuh.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TAmbarFisMuh.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TAmbarFisMuh.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TAmbarFisMuh.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TAmbarFisMuh.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TAmbarFisMuh.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TAmbarFisMuh.Get_Ay: WideString;
begin
    Result := DefaultInterface.Ay;
end;

procedure TAmbarFisMuh.Set_Ay(const Value: WideString);
  { Warning: The property Ay has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ay := Value;
end;

function TAmbarFisMuh.Get_Yil: WideString;
begin
    Result := DefaultInterface.Yil;
end;

procedure TAmbarFisMuh.Set_Yil(const Value: WideString);
  { Warning: The property Yil has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yil := Value;
end;

function TAmbarFisMuh.Get_Gun: Integer;
begin
    Result := DefaultInterface.Gun;
end;

procedure TAmbarFisMuh.Set_Gun(Value: Integer);
begin
  DefaultInterface.Set_Gun(Value);
end;

function TAmbarFisMuh.Get_Aciklama: WideString;
begin
    Result := DefaultInterface.Aciklama;
end;

procedure TAmbarFisMuh.Set_Aciklama(const Value: WideString);
  { Warning: The property Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama := Value;
end;

function TAmbarFisMuh.Get_GrupKod1: WideString;
begin
    Result := DefaultInterface.GrupKod1;
end;

procedure TAmbarFisMuh.Set_GrupKod1(const Value: WideString);
  { Warning: The property GrupKod1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GrupKod1 := Value;
end;

function TAmbarFisMuh.Get_GrupKod2: WideString;
begin
    Result := DefaultInterface.GrupKod2;
end;

procedure TAmbarFisMuh.Set_GrupKod2(const Value: WideString);
  { Warning: The property GrupKod2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GrupKod2 := Value;
end;

function TAmbarFisMuh.Get_AmbFisNoKirilimliAktar: WordBool;
begin
    Result := DefaultInterface.AmbFisNoKirilimliAktar;
end;

procedure TAmbarFisMuh.Set_AmbFisNoKirilimliAktar(Value: WordBool);
begin
  DefaultInterface.Set_AmbFisNoKirilimliAktar(Value);
end;

function TAmbarFisMuh.Get_SubelerDahil: WordBool;
begin
    Result := DefaultInterface.SubelerDahil;
end;

procedure TAmbarFisMuh.Set_SubelerDahil(Value: WordBool);
begin
  DefaultInterface.Set_SubelerDahil(Value);
end;

function TAmbarFisMuh.Get_HesapTipi: THesTipi;
begin
    Result := DefaultInterface.HesapTipi;
end;

procedure TAmbarFisMuh.Set_HesapTipi(Value: THesTipi);
begin
  DefaultInterface.Set_HesapTipi(Value);
end;

procedure TAmbarFisMuh.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TAmbarFisMuh.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TAmbarFisMuh.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TAmbarFisMuh.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TAmbarFisMuh.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TAmbarFisMuh.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TAmbarFisMuh.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

procedure TAmbarFisMuh.Calistir;
begin
  DefaultInterface.Calistir;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TAmbarFisMuhProperties.Create(AServer: TAmbarFisMuh);
begin
  inherited Create;
  FServer := AServer;
end;

function TAmbarFisMuhProperties.GetDefaultInterface: IAmbarFisMuh;
begin
  Result := FServer.DefaultInterface;
end;

function TAmbarFisMuhProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TAmbarFisMuhProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TAmbarFisMuhProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TAmbarFisMuhProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TAmbarFisMuhProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TAmbarFisMuhProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TAmbarFisMuhProperties.Get_Ay: WideString;
begin
    Result := DefaultInterface.Ay;
end;

procedure TAmbarFisMuhProperties.Set_Ay(const Value: WideString);
  { Warning: The property Ay has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ay := Value;
end;

function TAmbarFisMuhProperties.Get_Yil: WideString;
begin
    Result := DefaultInterface.Yil;
end;

procedure TAmbarFisMuhProperties.Set_Yil(const Value: WideString);
  { Warning: The property Yil has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yil := Value;
end;

function TAmbarFisMuhProperties.Get_Gun: Integer;
begin
    Result := DefaultInterface.Gun;
end;

procedure TAmbarFisMuhProperties.Set_Gun(Value: Integer);
begin
  DefaultInterface.Set_Gun(Value);
end;

function TAmbarFisMuhProperties.Get_Aciklama: WideString;
begin
    Result := DefaultInterface.Aciklama;
end;

procedure TAmbarFisMuhProperties.Set_Aciklama(const Value: WideString);
  { Warning: The property Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama := Value;
end;

function TAmbarFisMuhProperties.Get_GrupKod1: WideString;
begin
    Result := DefaultInterface.GrupKod1;
end;

procedure TAmbarFisMuhProperties.Set_GrupKod1(const Value: WideString);
  { Warning: The property GrupKod1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GrupKod1 := Value;
end;

function TAmbarFisMuhProperties.Get_GrupKod2: WideString;
begin
    Result := DefaultInterface.GrupKod2;
end;

procedure TAmbarFisMuhProperties.Set_GrupKod2(const Value: WideString);
  { Warning: The property GrupKod2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GrupKod2 := Value;
end;

function TAmbarFisMuhProperties.Get_AmbFisNoKirilimliAktar: WordBool;
begin
    Result := DefaultInterface.AmbFisNoKirilimliAktar;
end;

procedure TAmbarFisMuhProperties.Set_AmbFisNoKirilimliAktar(Value: WordBool);
begin
  DefaultInterface.Set_AmbFisNoKirilimliAktar(Value);
end;

function TAmbarFisMuhProperties.Get_SubelerDahil: WordBool;
begin
    Result := DefaultInterface.SubelerDahil;
end;

procedure TAmbarFisMuhProperties.Set_SubelerDahil(Value: WordBool);
begin
  DefaultInterface.Set_SubelerDahil(Value);
end;

function TAmbarFisMuhProperties.Get_HesapTipi: THesTipi;
begin
    Result := DefaultInterface.HesapTipi;
end;

procedure TAmbarFisMuhProperties.Set_HesapTipi(Value: THesTipi);
begin
  DefaultInterface.Set_HesapTipi(Value);
end;

{$ENDIF}

class function CoDepTransMuh.Create: IDepTransMuh;
begin
  Result := CreateComObject(CLASS_DepTransMuh) as IDepTransMuh;
end;

class function CoDepTransMuh.CreateRemote(const MachineName: string): IDepTransMuh;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DepTransMuh) as IDepTransMuh;
end;

procedure TDepTransMuh.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{32C36AD9-802E-464E-A3BF-9815B0E2D1B6}';
    IntfIID:   '{4CA06758-FF70-439A-BE39-D393332A6590}';
    EventIID:  '{F2428408-A806-4372-99FB-025C6A312F07}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDepTransMuh.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IDepTransMuh;
  end;
end;

procedure TDepTransMuh.ConnectTo(svrIntf: IDepTransMuh);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TDepTransMuh.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TDepTransMuh.GetDefaultInterface: IDepTransMuh;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDepTransMuh.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDepTransMuhProperties.Create(Self);
{$ENDIF}
end;

destructor TDepTransMuh.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDepTransMuh.GetServerProperties: TDepTransMuhProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TDepTransMuh.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
  end; {case DispID}
end;

function TDepTransMuh.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TDepTransMuh.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDepTransMuh.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TDepTransMuh.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TDepTransMuh.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TDepTransMuh.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TDepTransMuh.Get_YilKodu: WideString;
begin
    Result := DefaultInterface.YilKodu;
end;

procedure TDepTransMuh.Set_YilKodu(const Value: WideString);
  { Warning: The property YilKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YilKodu := Value;
end;

function TDepTransMuh.Get_AyKodu: WideString;
begin
    Result := DefaultInterface.AyKodu;
end;

procedure TDepTransMuh.Set_AyKodu(const Value: WideString);
  { Warning: The property AyKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AyKodu := Value;
end;

function TDepTransMuh.Get_MuhtelifTipHarDahEt: WordBool;
begin
    Result := DefaultInterface.MuhtelifTipHarDahEt;
end;

procedure TDepTransMuh.Set_MuhtelifTipHarDahEt(Value: WordBool);
begin
  DefaultInterface.Set_MuhtelifTipHarDahEt(Value);
end;

function TDepTransMuh.Get_EntBilMerkezdeOlus: WordBool;
begin
    Result := DefaultInterface.EntBilMerkezdeOlus;
end;

procedure TDepTransMuh.Set_EntBilMerkezdeOlus(Value: WordBool);
begin
  DefaultInterface.Set_EntBilMerkezdeOlus(Value);
end;

function TDepTransMuh.Get_FarkTransferMuhKodu: WideString;
begin
    Result := DefaultInterface.FarkTransferMuhKodu;
end;

procedure TDepTransMuh.Set_FarkTransferMuhKodu(const Value: WideString);
  { Warning: The property FarkTransferMuhKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FarkTransferMuhKodu := Value;
end;

function TDepTransMuh.Get_CikisHesapTipi: THesTipi;
begin
    Result := DefaultInterface.CikisHesapTipi;
end;

procedure TDepTransMuh.Set_CikisHesapTipi(Value: THesTipi);
begin
  DefaultInterface.Set_CikisHesapTipi(Value);
end;

function TDepTransMuh.Get_MuhTipi: TMuhasebelesTipi;
begin
    Result := DefaultInterface.MuhTipi;
end;

procedure TDepTransMuh.Set_MuhTipi(Value: TMuhasebelesTipi);
begin
  DefaultInterface.Set_MuhTipi(Value);
end;

procedure TDepTransMuh.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TDepTransMuh.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TDepTransMuh.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TDepTransMuh.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TDepTransMuh.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TDepTransMuh.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TDepTransMuh.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

procedure TDepTransMuh.Calistir;
begin
  DefaultInterface.Calistir;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDepTransMuhProperties.Create(AServer: TDepTransMuh);
begin
  inherited Create;
  FServer := AServer;
end;

function TDepTransMuhProperties.GetDefaultInterface: IDepTransMuh;
begin
  Result := FServer.DefaultInterface;
end;

function TDepTransMuhProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TDepTransMuhProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDepTransMuhProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TDepTransMuhProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TDepTransMuhProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TDepTransMuhProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TDepTransMuhProperties.Get_YilKodu: WideString;
begin
    Result := DefaultInterface.YilKodu;
end;

procedure TDepTransMuhProperties.Set_YilKodu(const Value: WideString);
  { Warning: The property YilKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YilKodu := Value;
end;

function TDepTransMuhProperties.Get_AyKodu: WideString;
begin
    Result := DefaultInterface.AyKodu;
end;

procedure TDepTransMuhProperties.Set_AyKodu(const Value: WideString);
  { Warning: The property AyKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AyKodu := Value;
end;

function TDepTransMuhProperties.Get_MuhtelifTipHarDahEt: WordBool;
begin
    Result := DefaultInterface.MuhtelifTipHarDahEt;
end;

procedure TDepTransMuhProperties.Set_MuhtelifTipHarDahEt(Value: WordBool);
begin
  DefaultInterface.Set_MuhtelifTipHarDahEt(Value);
end;

function TDepTransMuhProperties.Get_EntBilMerkezdeOlus: WordBool;
begin
    Result := DefaultInterface.EntBilMerkezdeOlus;
end;

procedure TDepTransMuhProperties.Set_EntBilMerkezdeOlus(Value: WordBool);
begin
  DefaultInterface.Set_EntBilMerkezdeOlus(Value);
end;

function TDepTransMuhProperties.Get_FarkTransferMuhKodu: WideString;
begin
    Result := DefaultInterface.FarkTransferMuhKodu;
end;

procedure TDepTransMuhProperties.Set_FarkTransferMuhKodu(const Value: WideString);
  { Warning: The property FarkTransferMuhKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FarkTransferMuhKodu := Value;
end;

function TDepTransMuhProperties.Get_CikisHesapTipi: THesTipi;
begin
    Result := DefaultInterface.CikisHesapTipi;
end;

procedure TDepTransMuhProperties.Set_CikisHesapTipi(Value: THesTipi);
begin
  DefaultInterface.Set_CikisHesapTipi(Value);
end;

function TDepTransMuhProperties.Get_MuhTipi: TMuhasebelesTipi;
begin
    Result := DefaultInterface.MuhTipi;
end;

procedure TDepTransMuhProperties.Set_MuhTipi(Value: TMuhasebelesTipi);
begin
  DefaultInterface.Set_MuhTipi(Value);
end;

{$ENDIF}

class function CoKasaBakiye.Create: IKasaBakiye;
begin
  Result := CreateComObject(CLASS_KasaBakiye) as IKasaBakiye;
end;

class function CoKasaBakiye.CreateRemote(const MachineName: string): IKasaBakiye;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_KasaBakiye) as IKasaBakiye;
end;

procedure TKasaBakiye.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8FEBAF65-E327-49A4-B951-A55645AAF831}';
    IntfIID:   '{7C7354F4-831B-481E-A0C2-782C7C429DC5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TKasaBakiye.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IKasaBakiye;
  end;
end;

procedure TKasaBakiye.ConnectTo(svrIntf: IKasaBakiye);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TKasaBakiye.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TKasaBakiye.GetDefaultInterface: IKasaBakiye;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TKasaBakiye.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TKasaBakiyeProperties.Create(Self);
{$ENDIF}
end;

destructor TKasaBakiye.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TKasaBakiye.GetServerProperties: TKasaBakiyeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TKasaBakiye.Get_KsMas_Kod: WideString;
begin
    Result := DefaultInterface.KsMas_Kod;
end;

procedure TKasaBakiye.Set_KsMas_Kod(const Value: WideString);
  { Warning: The property KsMas_Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KsMas_Kod := Value;
end;

function TKasaBakiye.Get_Giris: Double;
begin
    Result := DefaultInterface.Giris;
end;

procedure TKasaBakiye.Set_Giris(Value: Double);
begin
  DefaultInterface.Set_Giris(Value);
end;

function TKasaBakiye.Get_Cikis: Double;
begin
    Result := DefaultInterface.Cikis;
end;

procedure TKasaBakiye.Set_Cikis(Value: Double);
begin
  DefaultInterface.Set_Cikis(Value);
end;

function TKasaBakiye.Get_Devir: Double;
begin
    Result := DefaultInterface.Devir;
end;

procedure TKasaBakiye.Set_Devir(Value: Double);
begin
  DefaultInterface.Set_Devir(Value);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TKasaBakiyeProperties.Create(AServer: TKasaBakiye);
begin
  inherited Create;
  FServer := AServer;
end;

function TKasaBakiyeProperties.GetDefaultInterface: IKasaBakiye;
begin
  Result := FServer.DefaultInterface;
end;

function TKasaBakiyeProperties.Get_KsMas_Kod: WideString;
begin
    Result := DefaultInterface.KsMas_Kod;
end;

procedure TKasaBakiyeProperties.Set_KsMas_Kod(const Value: WideString);
  { Warning: The property KsMas_Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KsMas_Kod := Value;
end;

function TKasaBakiyeProperties.Get_Giris: Double;
begin
    Result := DefaultInterface.Giris;
end;

procedure TKasaBakiyeProperties.Set_Giris(Value: Double);
begin
  DefaultInterface.Set_Giris(Value);
end;

function TKasaBakiyeProperties.Get_Cikis: Double;
begin
    Result := DefaultInterface.Cikis;
end;

procedure TKasaBakiyeProperties.Set_Cikis(Value: Double);
begin
  DefaultInterface.Set_Cikis(Value);
end;

function TKasaBakiyeProperties.Get_Devir: Double;
begin
    Result := DefaultInterface.Devir;
end;

procedure TKasaBakiyeProperties.Set_Devir(Value: Double);
begin
  DefaultInterface.Set_Devir(Value);
end;

{$ENDIF}

class function CoDekont.Create: IDekont;
begin
  Result := CreateComObject(CLASS_Dekont) as IDekont;
end;

class function CoDekont.CreateRemote(const MachineName: string): IDekont;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Dekont) as IDekont;
end;

procedure TDekont.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{91F586E8-156D-4B5F-B65D-EF7026AE4330}';
    IntfIID:   '{9D4C7424-700E-40A5-B5D3-47E4739157D8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDekont.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDekont;
  end;
end;

procedure TDekont.ConnectTo(svrIntf: IDekont);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDekont.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDekont.GetDefaultInterface: IDekont;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDekont.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDekontProperties.Create(Self);
{$ENDIF}
end;

destructor TDekont.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDekont.GetServerProperties: TDekontProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDekont.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TDekont.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDekont.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TDekont.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TDekont.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TDekont.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TDekont.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TDekont.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TDekont.Get_IncKeyNo: Integer;
begin
    Result := DefaultInterface.IncKeyNo;
end;

procedure TDekont.Set_IncKeyNo(Value: Integer);
begin
  DefaultInterface.Set_IncKeyNo(Value);
end;

function TDekont.Get_Seri_No: WideString;
begin
    Result := DefaultInterface.Seri_No;
end;

procedure TDekont.Set_Seri_No(const Value: WideString);
  { Warning: The property Seri_No has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri_No := Value;
end;

function TDekont.Get_Dekont_No: Integer;
begin
    Result := DefaultInterface.Dekont_No;
end;

procedure TDekont.Set_Dekont_No(Value: Integer);
begin
  DefaultInterface.Set_Dekont_No(Value);
end;

function TDekont.Get_Sira_No: Integer;
begin
    Result := DefaultInterface.Sira_No;
end;

procedure TDekont.Set_Sira_No(Value: Integer);
begin
  DefaultInterface.Set_Sira_No(Value);
end;

function TDekont.Get_Fisno: WideString;
begin
    Result := DefaultInterface.Fisno;
end;

procedure TDekont.Set_Fisno(const Value: WideString);
  { Warning: The property Fisno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Fisno := Value;
end;

function TDekont.Get_Tarih: TDateTime;
begin
    Result := DefaultInterface.Tarih;
end;

procedure TDekont.Set_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih(Value);
end;

function TDekont.Get_ValorTrh: TDateTime;
begin
    Result := DefaultInterface.ValorTrh;
end;

procedure TDekont.Set_ValorTrh(Value: TDateTime);
begin
  DefaultInterface.Set_ValorTrh(Value);
end;

function TDekont.Get_ValorGun: Integer;
begin
    Result := DefaultInterface.ValorGun;
end;

procedure TDekont.Set_ValorGun(Value: Integer);
begin
  DefaultInterface.Set_ValorGun(Value);
end;

function TDekont.Get_C_M: WideString;
begin
    Result := DefaultInterface.C_M;
end;

procedure TDekont.Set_C_M(const Value: WideString);
  { Warning: The property C_M has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_M := Value;
end;

function TDekont.Get_Kod: WideString;
begin
    Result := DefaultInterface.Kod;
end;

procedure TDekont.Set_Kod(const Value: WideString);
  { Warning: The property Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod := Value;
end;

function TDekont.Get_Referans: WideString;
begin
    Result := DefaultInterface.Referans;
end;

procedure TDekont.Set_Referans(const Value: WideString);
  { Warning: The property Referans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Referans := Value;
end;

function TDekont.Get_CRapKod: WideString;
begin
    Result := DefaultInterface.CRapKod;
end;

procedure TDekont.Set_CRapKod(const Value: WideString);
  { Warning: The property CRapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CRapKod := Value;
end;

function TDekont.Get_Plasiyer: WideString;
begin
    Result := DefaultInterface.Plasiyer;
end;

procedure TDekont.Set_Plasiyer(const Value: WideString);
  { Warning: The property Plasiyer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer := Value;
end;

function TDekont.Get_Aciklama1: WideString;
begin
    Result := DefaultInterface.Aciklama1;
end;

procedure TDekont.Set_Aciklama1(const Value: WideString);
  { Warning: The property Aciklama1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama1 := Value;
end;

function TDekont.Get_Aciklama2: WideString;
begin
    Result := DefaultInterface.Aciklama2;
end;

procedure TDekont.Set_Aciklama2(const Value: WideString);
  { Warning: The property Aciklama2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama2 := Value;
end;

function TDekont.Get_Aciklama3: WideString;
begin
    Result := DefaultInterface.Aciklama3;
end;

procedure TDekont.Set_Aciklama3(const Value: WideString);
  { Warning: The property Aciklama3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama3 := Value;
end;

function TDekont.Get_Aciklama4: WideString;
begin
    Result := DefaultInterface.Aciklama4;
end;

procedure TDekont.Set_Aciklama4(const Value: WideString);
  { Warning: The property Aciklama4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama4 := Value;
end;

function TDekont.Get_B_A: WideString;
begin
    Result := DefaultInterface.B_A;
end;

procedure TDekont.Set_B_A(const Value: WideString);
  { Warning: The property B_A has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.B_A := Value;
end;

function TDekont.Get_Tutar: Double;
begin
    Result := DefaultInterface.Tutar;
end;

procedure TDekont.Set_Tutar(Value: Double);
begin
  DefaultInterface.Set_Tutar(Value);
end;

function TDekont.Get_Kdv_Oran: Double;
begin
    Result := DefaultInterface.Kdv_Oran;
end;

procedure TDekont.Set_Kdv_Oran(Value: Double);
begin
  DefaultInterface.Set_Kdv_Oran(Value);
end;

function TDekont.Get_Kdv_Dahil: WideString;
begin
    Result := DefaultInterface.Kdv_Dahil;
end;

procedure TDekont.Set_Kdv_Dahil(const Value: WideString);
  { Warning: The property Kdv_Dahil has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kdv_Dahil := Value;
end;

function TDekont.Get_Genel_KDV: WideString;
begin
    Result := DefaultInterface.Genel_KDV;
end;

procedure TDekont.Set_Genel_KDV(const Value: WideString);
  { Warning: The property Genel_KDV has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Genel_KDV := Value;
end;

function TDekont.Get_Miktar: Double;
begin
    Result := DefaultInterface.Miktar;
end;

procedure TDekont.Set_Miktar(Value: Double);
begin
  DefaultInterface.Set_Miktar(Value);
end;

function TDekont.Get_DovTL: WideString;
begin
    Result := DefaultInterface.DovTL;
end;

procedure TDekont.Set_DovTL(const Value: WideString);
  { Warning: The property DovTL has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DovTL := Value;
end;

function TDekont.Get_DOVTIP: Integer;
begin
    Result := DefaultInterface.DOVTIP;
end;

procedure TDekont.Set_DOVTIP(Value: Integer);
begin
  DefaultInterface.Set_DOVTIP(Value);
end;

function TDekont.Get_DOVTUT: Double;
begin
    Result := DefaultInterface.DOVTUT;
end;

procedure TDekont.Set_DOVTUT(Value: Double);
begin
  DefaultInterface.Set_DOVTUT(Value);
end;

function TDekont.Get_Yedek1: WideString;
begin
    Result := DefaultInterface.Yedek1;
end;

procedure TDekont.Set_Yedek1(const Value: WideString);
  { Warning: The property Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek1 := Value;
end;

function TDekont.Get_Yedek2: WideString;
begin
    Result := DefaultInterface.Yedek2;
end;

procedure TDekont.Set_Yedek2(const Value: WideString);
  { Warning: The property Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek2 := Value;
end;

function TDekont.Get_Yedek3: Double;
begin
    Result := DefaultInterface.Yedek3;
end;

procedure TDekont.Set_Yedek3(Value: Double);
begin
  DefaultInterface.Set_Yedek3(Value);
end;

function TDekont.Get_Yedek4: Double;
begin
    Result := DefaultInterface.Yedek4;
end;

procedure TDekont.Set_Yedek4(Value: Double);
begin
  DefaultInterface.Set_Yedek4(Value);
end;

function TDekont.Get_Yedek5: Double;
begin
    Result := DefaultInterface.Yedek5;
end;

procedure TDekont.Set_Yedek5(Value: Double);
begin
  DefaultInterface.Set_Yedek5(Value);
end;

function TDekont.Get_Yedek6: WideString;
begin
    Result := DefaultInterface.Yedek6;
end;

procedure TDekont.Set_Yedek6(const Value: WideString);
  { Warning: The property Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek6 := Value;
end;

function TDekont.Get_Yedek7: Integer;
begin
    Result := DefaultInterface.Yedek7;
end;

procedure TDekont.Set_Yedek7(Value: Integer);
begin
  DefaultInterface.Set_Yedek7(Value);
end;

function TDekont.Get_Yedek8: Integer;
begin
    Result := DefaultInterface.Yedek8;
end;

procedure TDekont.Set_Yedek8(Value: Integer);
begin
  DefaultInterface.Set_Yedek8(Value);
end;

function TDekont.Get_Yedek9: Integer;
begin
    Result := DefaultInterface.Yedek9;
end;

procedure TDekont.Set_Yedek9(Value: Integer);
begin
  DefaultInterface.Set_Yedek9(Value);
end;

function TDekont.Get_Yedek10: TDateTime;
begin
    Result := DefaultInterface.Yedek10;
end;

procedure TDekont.Set_Yedek10(Value: TDateTime);
begin
  DefaultInterface.Set_Yedek10(Value);
end;

function TDekont.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TDekont.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TDekont.Get_EXPORTREFNO: WideString;
begin
    Result := DefaultInterface.EXPORTREFNO;
end;

procedure TDekont.Set_EXPORTREFNO(const Value: WideString);
  { Warning: The property EXPORTREFNO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EXPORTREFNO := Value;
end;

function TDekont.Get_EXEXPENSETYPE: Integer;
begin
    Result := DefaultInterface.EXEXPENSETYPE;
end;

procedure TDekont.Set_EXEXPENSETYPE(Value: Integer);
begin
  DefaultInterface.Set_EXEXPENSETYPE(Value);
end;

function TDekont.Get_CMISLENECEK: WideString;
begin
    Result := DefaultInterface.CMISLENECEK;
end;

procedure TDekont.Set_CMISLENECEK(const Value: WideString);
  { Warning: The property CMISLENECEK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CMISLENECEK := Value;
end;

function TDekont.Get_SubeGirilecek: WideString;
begin
    Result := DefaultInterface.SubeGirilecek;
end;

procedure TDekont.Set_SubeGirilecek(const Value: WideString);
  { Warning: The property SubeGirilecek has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubeGirilecek := Value;
end;

function TDekont.Get_KDVDOVIZ: Double;
begin
    Result := DefaultInterface.KDVDOVIZ;
end;

procedure TDekont.Set_KDVDOVIZ(Value: Double);
begin
  DefaultInterface.Set_KDVDOVIZ(Value);
end;

function TDekont.Get_Entegrefkey: WideString;
begin
    Result := DefaultInterface.Entegrefkey;
end;

procedure TDekont.Set_Entegrefkey(const Value: WideString);
  { Warning: The property Entegrefkey has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Entegrefkey := Value;
end;

function TDekont.Get_RAPOR_KODU2: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU2;
end;

procedure TDekont.Set_RAPOR_KODU2(const Value: WideString);
  { Warning: The property RAPOR_KODU2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU2 := Value;
end;

function TDekont.Get_OtoVadeGunuGetir: WordBool;
begin
    Result := DefaultInterface.OtoVadeGunuGetir;
end;

procedure TDekont.Set_OtoVadeGunuGetir(Value: WordBool);
begin
  DefaultInterface.Set_OtoVadeGunuGetir(Value);
end;

function TDekont.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TDekont.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TDekont.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TDekont.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TDekont.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TDekont.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TDekont.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TDekont.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

procedure TDekont.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TDekont.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TDekont.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TDekont.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TDekont.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TDekont.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TDekont.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

function TDekont.CDekont(Opr: TDekOpr): WordBool;
begin
  Result := DefaultInterface.CDekont(Opr);
end;

function TDekont.MDekont(Opr: TDekOpr): WordBool;
begin
  Result := DefaultInterface.MDekont(Opr);
end;

function TDekont.BDekont(Opr: TDekOpr): WordBool;
begin
  Result := DefaultInterface.BDekont(Opr);
end;

function TDekont.SDekont(Opr: TDekOpr): WordBool;
begin
  Result := DefaultInterface.SDekont(Opr);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDekontProperties.Create(AServer: TDekont);
begin
  inherited Create;
  FServer := AServer;
end;

function TDekontProperties.GetDefaultInterface: IDekont;
begin
  Result := FServer.DefaultInterface;
end;

function TDekontProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TDekontProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDekontProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TDekontProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TDekontProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TDekontProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TDekontProperties.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TDekontProperties.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TDekontProperties.Get_IncKeyNo: Integer;
begin
    Result := DefaultInterface.IncKeyNo;
end;

procedure TDekontProperties.Set_IncKeyNo(Value: Integer);
begin
  DefaultInterface.Set_IncKeyNo(Value);
end;

function TDekontProperties.Get_Seri_No: WideString;
begin
    Result := DefaultInterface.Seri_No;
end;

procedure TDekontProperties.Set_Seri_No(const Value: WideString);
  { Warning: The property Seri_No has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri_No := Value;
end;

function TDekontProperties.Get_Dekont_No: Integer;
begin
    Result := DefaultInterface.Dekont_No;
end;

procedure TDekontProperties.Set_Dekont_No(Value: Integer);
begin
  DefaultInterface.Set_Dekont_No(Value);
end;

function TDekontProperties.Get_Sira_No: Integer;
begin
    Result := DefaultInterface.Sira_No;
end;

procedure TDekontProperties.Set_Sira_No(Value: Integer);
begin
  DefaultInterface.Set_Sira_No(Value);
end;

function TDekontProperties.Get_Fisno: WideString;
begin
    Result := DefaultInterface.Fisno;
end;

procedure TDekontProperties.Set_Fisno(const Value: WideString);
  { Warning: The property Fisno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Fisno := Value;
end;

function TDekontProperties.Get_Tarih: TDateTime;
begin
    Result := DefaultInterface.Tarih;
end;

procedure TDekontProperties.Set_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih(Value);
end;

function TDekontProperties.Get_ValorTrh: TDateTime;
begin
    Result := DefaultInterface.ValorTrh;
end;

procedure TDekontProperties.Set_ValorTrh(Value: TDateTime);
begin
  DefaultInterface.Set_ValorTrh(Value);
end;

function TDekontProperties.Get_ValorGun: Integer;
begin
    Result := DefaultInterface.ValorGun;
end;

procedure TDekontProperties.Set_ValorGun(Value: Integer);
begin
  DefaultInterface.Set_ValorGun(Value);
end;

function TDekontProperties.Get_C_M: WideString;
begin
    Result := DefaultInterface.C_M;
end;

procedure TDekontProperties.Set_C_M(const Value: WideString);
  { Warning: The property C_M has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_M := Value;
end;

function TDekontProperties.Get_Kod: WideString;
begin
    Result := DefaultInterface.Kod;
end;

procedure TDekontProperties.Set_Kod(const Value: WideString);
  { Warning: The property Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod := Value;
end;

function TDekontProperties.Get_Referans: WideString;
begin
    Result := DefaultInterface.Referans;
end;

procedure TDekontProperties.Set_Referans(const Value: WideString);
  { Warning: The property Referans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Referans := Value;
end;

function TDekontProperties.Get_CRapKod: WideString;
begin
    Result := DefaultInterface.CRapKod;
end;

procedure TDekontProperties.Set_CRapKod(const Value: WideString);
  { Warning: The property CRapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CRapKod := Value;
end;

function TDekontProperties.Get_Plasiyer: WideString;
begin
    Result := DefaultInterface.Plasiyer;
end;

procedure TDekontProperties.Set_Plasiyer(const Value: WideString);
  { Warning: The property Plasiyer has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer := Value;
end;

function TDekontProperties.Get_Aciklama1: WideString;
begin
    Result := DefaultInterface.Aciklama1;
end;

procedure TDekontProperties.Set_Aciklama1(const Value: WideString);
  { Warning: The property Aciklama1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama1 := Value;
end;

function TDekontProperties.Get_Aciklama2: WideString;
begin
    Result := DefaultInterface.Aciklama2;
end;

procedure TDekontProperties.Set_Aciklama2(const Value: WideString);
  { Warning: The property Aciklama2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama2 := Value;
end;

function TDekontProperties.Get_Aciklama3: WideString;
begin
    Result := DefaultInterface.Aciklama3;
end;

procedure TDekontProperties.Set_Aciklama3(const Value: WideString);
  { Warning: The property Aciklama3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama3 := Value;
end;

function TDekontProperties.Get_Aciklama4: WideString;
begin
    Result := DefaultInterface.Aciklama4;
end;

procedure TDekontProperties.Set_Aciklama4(const Value: WideString);
  { Warning: The property Aciklama4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama4 := Value;
end;

function TDekontProperties.Get_B_A: WideString;
begin
    Result := DefaultInterface.B_A;
end;

procedure TDekontProperties.Set_B_A(const Value: WideString);
  { Warning: The property B_A has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.B_A := Value;
end;

function TDekontProperties.Get_Tutar: Double;
begin
    Result := DefaultInterface.Tutar;
end;

procedure TDekontProperties.Set_Tutar(Value: Double);
begin
  DefaultInterface.Set_Tutar(Value);
end;

function TDekontProperties.Get_Kdv_Oran: Double;
begin
    Result := DefaultInterface.Kdv_Oran;
end;

procedure TDekontProperties.Set_Kdv_Oran(Value: Double);
begin
  DefaultInterface.Set_Kdv_Oran(Value);
end;

function TDekontProperties.Get_Kdv_Dahil: WideString;
begin
    Result := DefaultInterface.Kdv_Dahil;
end;

procedure TDekontProperties.Set_Kdv_Dahil(const Value: WideString);
  { Warning: The property Kdv_Dahil has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kdv_Dahil := Value;
end;

function TDekontProperties.Get_Genel_KDV: WideString;
begin
    Result := DefaultInterface.Genel_KDV;
end;

procedure TDekontProperties.Set_Genel_KDV(const Value: WideString);
  { Warning: The property Genel_KDV has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Genel_KDV := Value;
end;

function TDekontProperties.Get_Miktar: Double;
begin
    Result := DefaultInterface.Miktar;
end;

procedure TDekontProperties.Set_Miktar(Value: Double);
begin
  DefaultInterface.Set_Miktar(Value);
end;

function TDekontProperties.Get_DovTL: WideString;
begin
    Result := DefaultInterface.DovTL;
end;

procedure TDekontProperties.Set_DovTL(const Value: WideString);
  { Warning: The property DovTL has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DovTL := Value;
end;

function TDekontProperties.Get_DOVTIP: Integer;
begin
    Result := DefaultInterface.DOVTIP;
end;

procedure TDekontProperties.Set_DOVTIP(Value: Integer);
begin
  DefaultInterface.Set_DOVTIP(Value);
end;

function TDekontProperties.Get_DOVTUT: Double;
begin
    Result := DefaultInterface.DOVTUT;
end;

procedure TDekontProperties.Set_DOVTUT(Value: Double);
begin
  DefaultInterface.Set_DOVTUT(Value);
end;

function TDekontProperties.Get_Yedek1: WideString;
begin
    Result := DefaultInterface.Yedek1;
end;

procedure TDekontProperties.Set_Yedek1(const Value: WideString);
  { Warning: The property Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek1 := Value;
end;

function TDekontProperties.Get_Yedek2: WideString;
begin
    Result := DefaultInterface.Yedek2;
end;

procedure TDekontProperties.Set_Yedek2(const Value: WideString);
  { Warning: The property Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek2 := Value;
end;

function TDekontProperties.Get_Yedek3: Double;
begin
    Result := DefaultInterface.Yedek3;
end;

procedure TDekontProperties.Set_Yedek3(Value: Double);
begin
  DefaultInterface.Set_Yedek3(Value);
end;

function TDekontProperties.Get_Yedek4: Double;
begin
    Result := DefaultInterface.Yedek4;
end;

procedure TDekontProperties.Set_Yedek4(Value: Double);
begin
  DefaultInterface.Set_Yedek4(Value);
end;

function TDekontProperties.Get_Yedek5: Double;
begin
    Result := DefaultInterface.Yedek5;
end;

procedure TDekontProperties.Set_Yedek5(Value: Double);
begin
  DefaultInterface.Set_Yedek5(Value);
end;

function TDekontProperties.Get_Yedek6: WideString;
begin
    Result := DefaultInterface.Yedek6;
end;

procedure TDekontProperties.Set_Yedek6(const Value: WideString);
  { Warning: The property Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek6 := Value;
end;

function TDekontProperties.Get_Yedek7: Integer;
begin
    Result := DefaultInterface.Yedek7;
end;

procedure TDekontProperties.Set_Yedek7(Value: Integer);
begin
  DefaultInterface.Set_Yedek7(Value);
end;

function TDekontProperties.Get_Yedek8: Integer;
begin
    Result := DefaultInterface.Yedek8;
end;

procedure TDekontProperties.Set_Yedek8(Value: Integer);
begin
  DefaultInterface.Set_Yedek8(Value);
end;

function TDekontProperties.Get_Yedek9: Integer;
begin
    Result := DefaultInterface.Yedek9;
end;

procedure TDekontProperties.Set_Yedek9(Value: Integer);
begin
  DefaultInterface.Set_Yedek9(Value);
end;

function TDekontProperties.Get_Yedek10: TDateTime;
begin
    Result := DefaultInterface.Yedek10;
end;

procedure TDekontProperties.Set_Yedek10(Value: TDateTime);
begin
  DefaultInterface.Set_Yedek10(Value);
end;

function TDekontProperties.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TDekontProperties.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TDekontProperties.Get_EXPORTREFNO: WideString;
begin
    Result := DefaultInterface.EXPORTREFNO;
end;

procedure TDekontProperties.Set_EXPORTREFNO(const Value: WideString);
  { Warning: The property EXPORTREFNO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EXPORTREFNO := Value;
end;

function TDekontProperties.Get_EXEXPENSETYPE: Integer;
begin
    Result := DefaultInterface.EXEXPENSETYPE;
end;

procedure TDekontProperties.Set_EXEXPENSETYPE(Value: Integer);
begin
  DefaultInterface.Set_EXEXPENSETYPE(Value);
end;

function TDekontProperties.Get_CMISLENECEK: WideString;
begin
    Result := DefaultInterface.CMISLENECEK;
end;

procedure TDekontProperties.Set_CMISLENECEK(const Value: WideString);
  { Warning: The property CMISLENECEK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CMISLENECEK := Value;
end;

function TDekontProperties.Get_SubeGirilecek: WideString;
begin
    Result := DefaultInterface.SubeGirilecek;
end;

procedure TDekontProperties.Set_SubeGirilecek(const Value: WideString);
  { Warning: The property SubeGirilecek has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SubeGirilecek := Value;
end;

function TDekontProperties.Get_KDVDOVIZ: Double;
begin
    Result := DefaultInterface.KDVDOVIZ;
end;

procedure TDekontProperties.Set_KDVDOVIZ(Value: Double);
begin
  DefaultInterface.Set_KDVDOVIZ(Value);
end;

function TDekontProperties.Get_Entegrefkey: WideString;
begin
    Result := DefaultInterface.Entegrefkey;
end;

procedure TDekontProperties.Set_Entegrefkey(const Value: WideString);
  { Warning: The property Entegrefkey has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Entegrefkey := Value;
end;

function TDekontProperties.Get_RAPOR_KODU2: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU2;
end;

procedure TDekontProperties.Set_RAPOR_KODU2(const Value: WideString);
  { Warning: The property RAPOR_KODU2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU2 := Value;
end;

function TDekontProperties.Get_OtoVadeGunuGetir: WordBool;
begin
    Result := DefaultInterface.OtoVadeGunuGetir;
end;

procedure TDekontProperties.Set_OtoVadeGunuGetir(Value: WordBool);
begin
  DefaultInterface.Set_OtoVadeGunuGetir(Value);
end;

function TDekontProperties.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TDekontProperties.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TDekontProperties.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TDekontProperties.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TDekontProperties.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TDekontProperties.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TDekontProperties.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TDekontProperties.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

{$ENDIF}

class function CoDekCekSen.Create: IDekCekSen;
begin
  Result := CreateComObject(CLASS_DekCekSen) as IDekCekSen;
end;

class function CoDekCekSen.CreateRemote(const MachineName: string): IDekCekSen;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DekCekSen) as IDekCekSen;
end;

procedure TDekCekSen.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1CB78822-B17A-43D8-B9CD-966FCE6EB33D}';
    IntfIID:   '{459B7D40-D4B4-48DF-99D6-4DFFDD10EFDC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDekCekSen.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDekCekSen;
  end;
end;

procedure TDekCekSen.ConnectTo(svrIntf: IDekCekSen);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDekCekSen.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDekCekSen.GetDefaultInterface: IDekCekSen;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDekCekSen.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDekCekSenProperties.Create(Self);
{$ENDIF}
end;

destructor TDekCekSen.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDekCekSen.GetServerProperties: TDekCekSenProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDekCekSen.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TDekCekSen.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDekCekSen.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TDekCekSen.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TDekCekSen.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TDekCekSen.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TDekCekSen.Get_SC_NO: WideString;
begin
    Result := DefaultInterface.SC_NO;
end;

procedure TDekCekSen.Set_SC_NO(const Value: WideString);
  { Warning: The property SC_NO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_NO := Value;
end;

function TDekCekSen.Get_Seri: WideString;
begin
    Result := DefaultInterface.Seri;
end;

procedure TDekCekSen.Set_Seri(const Value: WideString);
  { Warning: The property Seri has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri := Value;
end;

function TDekCekSen.Get_Dekont_Tarihi: TDateTime;
begin
    Result := DefaultInterface.Dekont_Tarihi;
end;

procedure TDekCekSen.Set_Dekont_Tarihi(Value: TDateTime);
begin
  DefaultInterface.Set_Dekont_Tarihi(Value);
end;

function TDekCekSen.Get_TTHesap_Kodu: WideString;
begin
    Result := DefaultInterface.TTHesap_Kodu;
end;

procedure TDekCekSen.Set_TTHesap_Kodu(const Value: WideString);
  { Warning: The property TTHesap_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TTHesap_Kodu := Value;
end;

function TDekCekSen.Get_DovizKuru: Double;
begin
    Result := DefaultInterface.DovizKuru;
end;

procedure TDekCekSen.Set_DovizKuru(Value: Double);
begin
  DefaultInterface.Set_DovizKuru(Value);
end;

function TDekCekSen.Get_TahsilMasraf: Double;
begin
    Result := DefaultInterface.TahsilMasraf;
end;

procedure TDekCekSen.Set_TahsilMasraf(Value: Double);
begin
  DefaultInterface.Set_TahsilMasraf(Value);
end;

function TDekCekSen.Get_Tutar: Double;
begin
    Result := DefaultInterface.Tutar;
end;

procedure TDekCekSen.Set_Tutar(Value: Double);
begin
  DefaultInterface.Set_Tutar(Value);
end;

function TDekCekSen.Get_GiderHesapKodu: WideString;
begin
    Result := DefaultInterface.GiderHesapKodu;
end;

procedure TDekCekSen.Set_GiderHesapKodu(const Value: WideString);
  { Warning: The property GiderHesapKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GiderHesapKodu := Value;
end;

function TDekCekSen.Get_BankaBorcBedel: Double;
begin
    Result := DefaultInterface.BankaBorcBedel;
end;

procedure TDekCekSen.Set_BankaBorcBedel(Value: Double);
begin
  DefaultInterface.Set_BankaBorcBedel(Value);
end;

function TDekCekSen.Get_VirmanHesapKodu: WideString;
begin
    Result := DefaultInterface.VirmanHesapKodu;
end;

procedure TDekCekSen.Set_VirmanHesapKodu(const Value: WideString);
  { Warning: The property VirmanHesapKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VirmanHesapKodu := Value;
end;

function TDekCekSen.Get_AlacakCari: WideString;
begin
    Result := DefaultInterface.AlacakCari;
end;

procedure TDekCekSen.Set_AlacakCari(const Value: WideString);
  { Warning: The property AlacakCari has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AlacakCari := Value;
end;

function TDekCekSen.Get_BorcCari: WideString;
begin
    Result := DefaultInterface.BorcCari;
end;

procedure TDekCekSen.Set_BorcCari(const Value: WideString);
  { Warning: The property BorcCari has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BorcCari := Value;
end;

function TDekCekSen.Get_Plasiyer_Kodu: WideString;
begin
    Result := DefaultInterface.Plasiyer_Kodu;
end;

procedure TDekCekSen.Set_Plasiyer_Kodu(const Value: WideString);
  { Warning: The property Plasiyer_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer_Kodu := Value;
end;

function TDekCekSen.Get_Aciklama: WideString;
begin
    Result := DefaultInterface.Aciklama;
end;

procedure TDekCekSen.Set_Aciklama(const Value: WideString);
  { Warning: The property Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama := Value;
end;

function TDekCekSen.Get_Fisno: WideString;
begin
    Result := DefaultInterface.Fisno;
end;

procedure TDekCekSen.Set_Fisno(const Value: WideString);
  { Warning: The property Fisno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Fisno := Value;
end;

function TDekCekSen.Get_CariRaporKodu: WideString;
begin
    Result := DefaultInterface.CariRaporKodu;
end;

procedure TDekCekSen.Set_CariRaporKodu(const Value: WideString);
  { Warning: The property CariRaporKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CariRaporKodu := Value;
end;

function TDekCekSen.Get_Islem_Tarihi: TDateTime;
begin
    Result := DefaultInterface.Islem_Tarihi;
end;

procedure TDekCekSen.Set_Islem_Tarihi(Value: TDateTime);
begin
  DefaultInterface.Set_Islem_Tarihi(Value);
end;

function TDekCekSen.Get_C_M: WideString;
begin
    Result := DefaultInterface.C_M;
end;

procedure TDekCekSen.Set_C_M(const Value: WideString);
  { Warning: The property C_M has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_M := Value;
end;

function TDekCekSen.Get_Banka_Kodu: WideString;
begin
    Result := DefaultInterface.Banka_Kodu;
end;

procedure TDekCekSen.Set_Banka_Kodu(const Value: WideString);
  { Warning: The property Banka_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Banka_Kodu := Value;
end;

function TDekCekSen.Get_KURFARKI: Double;
begin
    Result := DefaultInterface.KURFARKI;
end;

procedure TDekCekSen.Set_KURFARKI(Value: Double);
begin
  DefaultInterface.Set_KURFARKI(Value);
end;

procedure TDekCekSen.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TDekCekSen.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TDekCekSen.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TDekCekSen.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TDekCekSen.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TDekCekSen.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TDekCekSen.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

function TDekCekSen.CSDOdeme(Tablo: TCekSenType): WordBool;
begin
  Result := DefaultInterface.CSDOdeme(Tablo);
end;

function TDekCekSen.BCSDOdeme(Tablo: TCekSenType): WordBool;
begin
  Result := DefaultInterface.BCSDOdeme(Tablo);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDekCekSenProperties.Create(AServer: TDekCekSen);
begin
  inherited Create;
  FServer := AServer;
end;

function TDekCekSenProperties.GetDefaultInterface: IDekCekSen;
begin
  Result := FServer.DefaultInterface;
end;

function TDekCekSenProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TDekCekSenProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDekCekSenProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TDekCekSenProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TDekCekSenProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TDekCekSenProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TDekCekSenProperties.Get_SC_NO: WideString;
begin
    Result := DefaultInterface.SC_NO;
end;

procedure TDekCekSenProperties.Set_SC_NO(const Value: WideString);
  { Warning: The property SC_NO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SC_NO := Value;
end;

function TDekCekSenProperties.Get_Seri: WideString;
begin
    Result := DefaultInterface.Seri;
end;

procedure TDekCekSenProperties.Set_Seri(const Value: WideString);
  { Warning: The property Seri has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri := Value;
end;

function TDekCekSenProperties.Get_Dekont_Tarihi: TDateTime;
begin
    Result := DefaultInterface.Dekont_Tarihi;
end;

procedure TDekCekSenProperties.Set_Dekont_Tarihi(Value: TDateTime);
begin
  DefaultInterface.Set_Dekont_Tarihi(Value);
end;

function TDekCekSenProperties.Get_TTHesap_Kodu: WideString;
begin
    Result := DefaultInterface.TTHesap_Kodu;
end;

procedure TDekCekSenProperties.Set_TTHesap_Kodu(const Value: WideString);
  { Warning: The property TTHesap_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TTHesap_Kodu := Value;
end;

function TDekCekSenProperties.Get_DovizKuru: Double;
begin
    Result := DefaultInterface.DovizKuru;
end;

procedure TDekCekSenProperties.Set_DovizKuru(Value: Double);
begin
  DefaultInterface.Set_DovizKuru(Value);
end;

function TDekCekSenProperties.Get_TahsilMasraf: Double;
begin
    Result := DefaultInterface.TahsilMasraf;
end;

procedure TDekCekSenProperties.Set_TahsilMasraf(Value: Double);
begin
  DefaultInterface.Set_TahsilMasraf(Value);
end;

function TDekCekSenProperties.Get_Tutar: Double;
begin
    Result := DefaultInterface.Tutar;
end;

procedure TDekCekSenProperties.Set_Tutar(Value: Double);
begin
  DefaultInterface.Set_Tutar(Value);
end;

function TDekCekSenProperties.Get_GiderHesapKodu: WideString;
begin
    Result := DefaultInterface.GiderHesapKodu;
end;

procedure TDekCekSenProperties.Set_GiderHesapKodu(const Value: WideString);
  { Warning: The property GiderHesapKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GiderHesapKodu := Value;
end;

function TDekCekSenProperties.Get_BankaBorcBedel: Double;
begin
    Result := DefaultInterface.BankaBorcBedel;
end;

procedure TDekCekSenProperties.Set_BankaBorcBedel(Value: Double);
begin
  DefaultInterface.Set_BankaBorcBedel(Value);
end;

function TDekCekSenProperties.Get_VirmanHesapKodu: WideString;
begin
    Result := DefaultInterface.VirmanHesapKodu;
end;

procedure TDekCekSenProperties.Set_VirmanHesapKodu(const Value: WideString);
  { Warning: The property VirmanHesapKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.VirmanHesapKodu := Value;
end;

function TDekCekSenProperties.Get_AlacakCari: WideString;
begin
    Result := DefaultInterface.AlacakCari;
end;

procedure TDekCekSenProperties.Set_AlacakCari(const Value: WideString);
  { Warning: The property AlacakCari has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AlacakCari := Value;
end;

function TDekCekSenProperties.Get_BorcCari: WideString;
begin
    Result := DefaultInterface.BorcCari;
end;

procedure TDekCekSenProperties.Set_BorcCari(const Value: WideString);
  { Warning: The property BorcCari has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BorcCari := Value;
end;

function TDekCekSenProperties.Get_Plasiyer_Kodu: WideString;
begin
    Result := DefaultInterface.Plasiyer_Kodu;
end;

procedure TDekCekSenProperties.Set_Plasiyer_Kodu(const Value: WideString);
  { Warning: The property Plasiyer_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer_Kodu := Value;
end;

function TDekCekSenProperties.Get_Aciklama: WideString;
begin
    Result := DefaultInterface.Aciklama;
end;

procedure TDekCekSenProperties.Set_Aciklama(const Value: WideString);
  { Warning: The property Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama := Value;
end;

function TDekCekSenProperties.Get_Fisno: WideString;
begin
    Result := DefaultInterface.Fisno;
end;

procedure TDekCekSenProperties.Set_Fisno(const Value: WideString);
  { Warning: The property Fisno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Fisno := Value;
end;

function TDekCekSenProperties.Get_CariRaporKodu: WideString;
begin
    Result := DefaultInterface.CariRaporKodu;
end;

procedure TDekCekSenProperties.Set_CariRaporKodu(const Value: WideString);
  { Warning: The property CariRaporKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CariRaporKodu := Value;
end;

function TDekCekSenProperties.Get_Islem_Tarihi: TDateTime;
begin
    Result := DefaultInterface.Islem_Tarihi;
end;

procedure TDekCekSenProperties.Set_Islem_Tarihi(Value: TDateTime);
begin
  DefaultInterface.Set_Islem_Tarihi(Value);
end;

function TDekCekSenProperties.Get_C_M: WideString;
begin
    Result := DefaultInterface.C_M;
end;

procedure TDekCekSenProperties.Set_C_M(const Value: WideString);
  { Warning: The property C_M has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_M := Value;
end;

function TDekCekSenProperties.Get_Banka_Kodu: WideString;
begin
    Result := DefaultInterface.Banka_Kodu;
end;

procedure TDekCekSenProperties.Set_Banka_Kodu(const Value: WideString);
  { Warning: The property Banka_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Banka_Kodu := Value;
end;

function TDekCekSenProperties.Get_KURFARKI: Double;
begin
    Result := DefaultInterface.KURFARKI;
end;

procedure TDekCekSenProperties.Set_KURFARKI(Value: Double);
begin
  DefaultInterface.Set_KURFARKI(Value);
end;

{$ENDIF}

class function CoProje.Create: IProje;
begin
  Result := CreateComObject(CLASS_Proje) as IProje;
end;

class function CoProje.CreateRemote(const MachineName: string): IProje;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Proje) as IProje;
end;

procedure TProje.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1BA88008-099E-4DE7-A70C-3710F2C0A33B}';
    IntfIID:   '{D1BF7F83-64EE-430D-9C67-A055F7E4FB1E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TProje.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IProje;
  end;
end;

procedure TProje.ConnectTo(svrIntf: IProje);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TProje.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TProje.GetDefaultInterface: IProje;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TProje.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TProjeProperties.Create(Self);
{$ENDIF}
end;

destructor TProje.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TProje.GetServerProperties: TProjeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TProje.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TProje.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TProje.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TProje.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TProje.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TProje.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TProje.Get_ISLETME_KODU: Integer;
begin
    Result := DefaultInterface.ISLETME_KODU;
end;

procedure TProje.Set_ISLETME_KODU(Value: Integer);
begin
  DefaultInterface.Set_ISLETME_KODU(Value);
end;

function TProje.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TProje.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TProje.Get_Tur: WideString;
begin
    Result := DefaultInterface.Tur;
end;

procedure TProje.Set_Tur(const Value: WideString);
  { Warning: The property Tur has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tur := Value;
end;

function TProje.Get_Proje_Aciklama: WideString;
begin
    Result := DefaultInterface.Proje_Aciklama;
end;

procedure TProje.Set_Proje_Aciklama(const Value: WideString);
  { Warning: The property Proje_Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Aciklama := Value;
end;

function TProje.Get_Rapor_Kod1: WideString;
begin
    Result := DefaultInterface.Rapor_Kod1;
end;

procedure TProje.Set_Rapor_Kod1(const Value: WideString);
  { Warning: The property Rapor_Kod1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Rapor_Kod1 := Value;
end;

function TProje.Get_Rapor_Kod2: WideString;
begin
    Result := DefaultInterface.Rapor_Kod2;
end;

procedure TProje.Set_Rapor_Kod2(const Value: WideString);
  { Warning: The property Rapor_Kod2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Rapor_Kod2 := Value;
end;

function TProje.Get_Ref_Kod: WideString;
begin
    Result := DefaultInterface.Ref_Kod;
end;

procedure TProje.Set_Ref_Kod(const Value: WideString);
  { Warning: The property Ref_Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ref_Kod := Value;
end;

procedure TProje.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TProje.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TProje.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TProje.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TProje.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TProje.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TProje.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TProjeProperties.Create(AServer: TProje);
begin
  inherited Create;
  FServer := AServer;
end;

function TProjeProperties.GetDefaultInterface: IProje;
begin
  Result := FServer.DefaultInterface;
end;

function TProjeProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TProjeProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TProjeProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TProjeProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TProjeProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TProjeProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TProjeProperties.Get_ISLETME_KODU: Integer;
begin
    Result := DefaultInterface.ISLETME_KODU;
end;

procedure TProjeProperties.Set_ISLETME_KODU(Value: Integer);
begin
  DefaultInterface.Set_ISLETME_KODU(Value);
end;

function TProjeProperties.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TProjeProperties.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TProjeProperties.Get_Tur: WideString;
begin
    Result := DefaultInterface.Tur;
end;

procedure TProjeProperties.Set_Tur(const Value: WideString);
  { Warning: The property Tur has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tur := Value;
end;

function TProjeProperties.Get_Proje_Aciklama: WideString;
begin
    Result := DefaultInterface.Proje_Aciklama;
end;

procedure TProjeProperties.Set_Proje_Aciklama(const Value: WideString);
  { Warning: The property Proje_Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Aciklama := Value;
end;

function TProjeProperties.Get_Rapor_Kod1: WideString;
begin
    Result := DefaultInterface.Rapor_Kod1;
end;

procedure TProjeProperties.Set_Rapor_Kod1(const Value: WideString);
  { Warning: The property Rapor_Kod1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Rapor_Kod1 := Value;
end;

function TProjeProperties.Get_Rapor_Kod2: WideString;
begin
    Result := DefaultInterface.Rapor_Kod2;
end;

procedure TProjeProperties.Set_Rapor_Kod2(const Value: WideString);
  { Warning: The property Rapor_Kod2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Rapor_Kod2 := Value;
end;

function TProjeProperties.Get_Ref_Kod: WideString;
begin
    Result := DefaultInterface.Ref_Kod;
end;

procedure TProjeProperties.Set_Ref_Kod(const Value: WideString);
  { Warning: The property Ref_Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ref_Kod := Value;
end;

{$ENDIF}

class function CoMuplanTemelBilgi.Create: IMuplanTemelBilgi;
begin
  Result := CreateComObject(CLASS_MuplanTemelBilgi) as IMuplanTemelBilgi;
end;

class function CoMuplanTemelBilgi.CreateRemote(const MachineName: string): IMuplanTemelBilgi;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MuplanTemelBilgi) as IMuplanTemelBilgi;
end;

procedure TMuplanTemelBilgi.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C308DD70-9AB0-4CA0-976B-6048345BF5D9}';
    IntfIID:   '{C23852E1-CCE0-47F9-AC8D-8D1F94D8293F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMuplanTemelBilgi.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IMuplanTemelBilgi;
  end;
end;

procedure TMuplanTemelBilgi.ConnectTo(svrIntf: IMuplanTemelBilgi);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMuplanTemelBilgi.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMuplanTemelBilgi.GetDefaultInterface: IMuplanTemelBilgi;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMuplanTemelBilgi.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMuplanTemelBilgiProperties.Create(Self);
{$ENDIF}
end;

destructor TMuplanTemelBilgi.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMuplanTemelBilgi.GetServerProperties: TMuplanTemelBilgiProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMuplanTemelBilgi.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TMuplanTemelBilgi.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMuplanTemelBilgi.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TMuplanTemelBilgi.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TMuplanTemelBilgi.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TMuplanTemelBilgi.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TMuplanTemelBilgi.Get_ISLETME_KODU: Integer;
begin
    Result := DefaultInterface.ISLETME_KODU;
end;

procedure TMuplanTemelBilgi.Set_ISLETME_KODU(Value: Integer);
begin
  DefaultInterface.Set_ISLETME_KODU(Value);
end;

function TMuplanTemelBilgi.Get_Hesap_Kodu: WideString;
begin
    Result := DefaultInterface.Hesap_Kodu;
end;

procedure TMuplanTemelBilgi.Set_Hesap_Kodu(const Value: WideString);
  { Warning: The property Hesap_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hesap_Kodu := Value;
end;

function TMuplanTemelBilgi.Get_Agm: WideString;
begin
    Result := DefaultInterface.Agm;
end;

procedure TMuplanTemelBilgi.Set_Agm(const Value: WideString);
  { Warning: The property Agm has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Agm := Value;
end;

function TMuplanTemelBilgi.Get_Hs_Adi: WideString;
begin
    Result := DefaultInterface.Hs_Adi;
end;

procedure TMuplanTemelBilgi.Set_Hs_Adi(const Value: WideString);
  { Warning: The property Hs_Adi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hs_Adi := Value;
end;

function TMuplanTemelBilgi.Get_Hs_Yd_Adi: WideString;
begin
    Result := DefaultInterface.Hs_Yd_Adi;
end;

procedure TMuplanTemelBilgi.Set_Hs_Yd_Adi(const Value: WideString);
  { Warning: The property Hs_Yd_Adi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hs_Yd_Adi := Value;
end;

function TMuplanTemelBilgi.Get_Hs_Grkod: WideString;
begin
    Result := DefaultInterface.Hs_Grkod;
end;

procedure TMuplanTemelBilgi.Set_Hs_Grkod(const Value: WideString);
  { Warning: The property Hs_Grkod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hs_Grkod := Value;
end;

function TMuplanTemelBilgi.Get_Olcu_Birim: WideString;
begin
    Result := DefaultInterface.Olcu_Birim;
end;

procedure TMuplanTemelBilgi.Set_Olcu_Birim(const Value: WideString);
  { Warning: The property Olcu_Birim has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Olcu_Birim := Value;
end;

function TMuplanTemelBilgi.Get_Hs_Blkz: WideString;
begin
    Result := DefaultInterface.Hs_Blkz;
end;

procedure TMuplanTemelBilgi.Set_Hs_Blkz(const Value: WideString);
  { Warning: The property Hs_Blkz has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hs_Blkz := Value;
end;

function TMuplanTemelBilgi.Get_Calis_Tip: WideString;
begin
    Result := DefaultInterface.Calis_Tip;
end;

procedure TMuplanTemelBilgi.Set_Calis_Tip(const Value: WideString);
  { Warning: The property Calis_Tip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Calis_Tip := Value;
end;

function TMuplanTemelBilgi.Get_Calis_Bag: WideString;
begin
    Result := DefaultInterface.Calis_Bag;
end;

procedure TMuplanTemelBilgi.Set_Calis_Bag(const Value: WideString);
  { Warning: The property Calis_Bag has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Calis_Bag := Value;
end;

function TMuplanTemelBilgi.Get_DOVIZLIMI: WideString;
begin
    Result := DefaultInterface.DOVIZLIMI;
end;

procedure TMuplanTemelBilgi.Set_DOVIZLIMI(const Value: WideString);
  { Warning: The property DOVIZLIMI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DOVIZLIMI := Value;
end;

function TMuplanTemelBilgi.Get_DOVIZ_TIPI: Integer;
begin
    Result := DefaultInterface.DOVIZ_TIPI;
end;

procedure TMuplanTemelBilgi.Set_DOVIZ_TIPI(Value: Integer);
begin
  DefaultInterface.Set_DOVIZ_TIPI(Value);
end;

function TMuplanTemelBilgi.Get_Hesaplamaturu: WideString;
begin
    Result := DefaultInterface.Hesaplamaturu;
end;

procedure TMuplanTemelBilgi.Set_Hesaplamaturu(const Value: WideString);
  { Warning: The property Hesaplamaturu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hesaplamaturu := Value;
end;

function TMuplanTemelBilgi.Get_Dovizkontrol: WideString;
begin
    Result := DefaultInterface.Dovizkontrol;
end;

procedure TMuplanTemelBilgi.Set_Dovizkontrol(const Value: WideString);
  { Warning: The property Dovizkontrol has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Dovizkontrol := Value;
end;

function TMuplanTemelBilgi.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TMuplanTemelBilgi.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TMuplanTemelBilgi.Get_RefKodlu_Calis: WideString;
begin
    Result := DefaultInterface.RefKodlu_Calis;
end;

procedure TMuplanTemelBilgi.Set_RefKodlu_Calis(const Value: WideString);
  { Warning: The property RefKodlu_Calis has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RefKodlu_Calis := Value;
end;

function TMuplanTemelBilgi.Get_Yedek1: WideString;
begin
    Result := DefaultInterface.Yedek1;
end;

procedure TMuplanTemelBilgi.Set_Yedek1(const Value: WideString);
  { Warning: The property Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek1 := Value;
end;

function TMuplanTemelBilgi.Get_Yedek2: WideString;
begin
    Result := DefaultInterface.Yedek2;
end;

procedure TMuplanTemelBilgi.Set_Yedek2(const Value: WideString);
  { Warning: The property Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek2 := Value;
end;

function TMuplanTemelBilgi.Get_Yedek3: Double;
begin
    Result := DefaultInterface.Yedek3;
end;

procedure TMuplanTemelBilgi.Set_Yedek3(Value: Double);
begin
  DefaultInterface.Set_Yedek3(Value);
end;

function TMuplanTemelBilgi.Get_Yedek4: Double;
begin
    Result := DefaultInterface.Yedek4;
end;

procedure TMuplanTemelBilgi.Set_Yedek4(Value: Double);
begin
  DefaultInterface.Set_Yedek4(Value);
end;

function TMuplanTemelBilgi.Get_Yedek5: WideString;
begin
    Result := DefaultInterface.Yedek5;
end;

procedure TMuplanTemelBilgi.Set_Yedek5(const Value: WideString);
  { Warning: The property Yedek5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek5 := Value;
end;

function TMuplanTemelBilgi.Get_Yedek6: WideString;
begin
    Result := DefaultInterface.Yedek6;
end;

procedure TMuplanTemelBilgi.Set_Yedek6(const Value: WideString);
  { Warning: The property Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek6 := Value;
end;

function TMuplanTemelBilgi.Get_Yedek7: Integer;
begin
    Result := DefaultInterface.Yedek7;
end;

procedure TMuplanTemelBilgi.Set_Yedek7(Value: Integer);
begin
  DefaultInterface.Set_Yedek7(Value);
end;

function TMuplanTemelBilgi.Get_Yedek8: Integer;
begin
    Result := DefaultInterface.Yedek8;
end;

procedure TMuplanTemelBilgi.Set_Yedek8(Value: Integer);
begin
  DefaultInterface.Set_Yedek8(Value);
end;

function TMuplanTemelBilgi.Get_Yedek9: Integer;
begin
    Result := DefaultInterface.Yedek9;
end;

procedure TMuplanTemelBilgi.Set_Yedek9(Value: Integer);
begin
  DefaultInterface.Set_Yedek9(Value);
end;

function TMuplanTemelBilgi.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TMuplanTemelBilgi.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TMuplanTemelBilgi.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TMuplanTemelBilgi.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TMuplanTemelBilgi.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TMuplanTemelBilgi.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TMuplanTemelBilgi.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TMuplanTemelBilgi.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TMuplanTemelBilgi.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TMuplanTemelBilgi.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TMuplanTemelBilgi.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TMuplanTemelBilgi.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

function TMuplanTemelBilgi.Get_Enf_Fark_HesKod: WideString;
begin
    Result := DefaultInterface.Enf_Fark_HesKod;
end;

procedure TMuplanTemelBilgi.Set_Enf_Fark_HesKod(const Value: WideString);
  { Warning: The property Enf_Fark_HesKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Enf_Fark_HesKod := Value;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMuplanTemelBilgiProperties.Create(AServer: TMuplanTemelBilgi);
begin
  inherited Create;
  FServer := AServer;
end;

function TMuplanTemelBilgiProperties.GetDefaultInterface: IMuplanTemelBilgi;
begin
  Result := FServer.DefaultInterface;
end;

function TMuplanTemelBilgiProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TMuplanTemelBilgiProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMuplanTemelBilgiProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TMuplanTemelBilgiProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TMuplanTemelBilgiProperties.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TMuplanTemelBilgiProperties.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TMuplanTemelBilgiProperties.Get_ISLETME_KODU: Integer;
begin
    Result := DefaultInterface.ISLETME_KODU;
end;

procedure TMuplanTemelBilgiProperties.Set_ISLETME_KODU(Value: Integer);
begin
  DefaultInterface.Set_ISLETME_KODU(Value);
end;

function TMuplanTemelBilgiProperties.Get_Hesap_Kodu: WideString;
begin
    Result := DefaultInterface.Hesap_Kodu;
end;

procedure TMuplanTemelBilgiProperties.Set_Hesap_Kodu(const Value: WideString);
  { Warning: The property Hesap_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hesap_Kodu := Value;
end;

function TMuplanTemelBilgiProperties.Get_Agm: WideString;
begin
    Result := DefaultInterface.Agm;
end;

procedure TMuplanTemelBilgiProperties.Set_Agm(const Value: WideString);
  { Warning: The property Agm has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Agm := Value;
end;

function TMuplanTemelBilgiProperties.Get_Hs_Adi: WideString;
begin
    Result := DefaultInterface.Hs_Adi;
end;

procedure TMuplanTemelBilgiProperties.Set_Hs_Adi(const Value: WideString);
  { Warning: The property Hs_Adi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hs_Adi := Value;
end;

function TMuplanTemelBilgiProperties.Get_Hs_Yd_Adi: WideString;
begin
    Result := DefaultInterface.Hs_Yd_Adi;
end;

procedure TMuplanTemelBilgiProperties.Set_Hs_Yd_Adi(const Value: WideString);
  { Warning: The property Hs_Yd_Adi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hs_Yd_Adi := Value;
end;

function TMuplanTemelBilgiProperties.Get_Hs_Grkod: WideString;
begin
    Result := DefaultInterface.Hs_Grkod;
end;

procedure TMuplanTemelBilgiProperties.Set_Hs_Grkod(const Value: WideString);
  { Warning: The property Hs_Grkod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hs_Grkod := Value;
end;

function TMuplanTemelBilgiProperties.Get_Olcu_Birim: WideString;
begin
    Result := DefaultInterface.Olcu_Birim;
end;

procedure TMuplanTemelBilgiProperties.Set_Olcu_Birim(const Value: WideString);
  { Warning: The property Olcu_Birim has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Olcu_Birim := Value;
end;

function TMuplanTemelBilgiProperties.Get_Hs_Blkz: WideString;
begin
    Result := DefaultInterface.Hs_Blkz;
end;

procedure TMuplanTemelBilgiProperties.Set_Hs_Blkz(const Value: WideString);
  { Warning: The property Hs_Blkz has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hs_Blkz := Value;
end;

function TMuplanTemelBilgiProperties.Get_Calis_Tip: WideString;
begin
    Result := DefaultInterface.Calis_Tip;
end;

procedure TMuplanTemelBilgiProperties.Set_Calis_Tip(const Value: WideString);
  { Warning: The property Calis_Tip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Calis_Tip := Value;
end;

function TMuplanTemelBilgiProperties.Get_Calis_Bag: WideString;
begin
    Result := DefaultInterface.Calis_Bag;
end;

procedure TMuplanTemelBilgiProperties.Set_Calis_Bag(const Value: WideString);
  { Warning: The property Calis_Bag has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Calis_Bag := Value;
end;

function TMuplanTemelBilgiProperties.Get_DOVIZLIMI: WideString;
begin
    Result := DefaultInterface.DOVIZLIMI;
end;

procedure TMuplanTemelBilgiProperties.Set_DOVIZLIMI(const Value: WideString);
  { Warning: The property DOVIZLIMI has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DOVIZLIMI := Value;
end;

function TMuplanTemelBilgiProperties.Get_DOVIZ_TIPI: Integer;
begin
    Result := DefaultInterface.DOVIZ_TIPI;
end;

procedure TMuplanTemelBilgiProperties.Set_DOVIZ_TIPI(Value: Integer);
begin
  DefaultInterface.Set_DOVIZ_TIPI(Value);
end;

function TMuplanTemelBilgiProperties.Get_Hesaplamaturu: WideString;
begin
    Result := DefaultInterface.Hesaplamaturu;
end;

procedure TMuplanTemelBilgiProperties.Set_Hesaplamaturu(const Value: WideString);
  { Warning: The property Hesaplamaturu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hesaplamaturu := Value;
end;

function TMuplanTemelBilgiProperties.Get_Dovizkontrol: WideString;
begin
    Result := DefaultInterface.Dovizkontrol;
end;

procedure TMuplanTemelBilgiProperties.Set_Dovizkontrol(const Value: WideString);
  { Warning: The property Dovizkontrol has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Dovizkontrol := Value;
end;

function TMuplanTemelBilgiProperties.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TMuplanTemelBilgiProperties.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TMuplanTemelBilgiProperties.Get_RefKodlu_Calis: WideString;
begin
    Result := DefaultInterface.RefKodlu_Calis;
end;

procedure TMuplanTemelBilgiProperties.Set_RefKodlu_Calis(const Value: WideString);
  { Warning: The property RefKodlu_Calis has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RefKodlu_Calis := Value;
end;

function TMuplanTemelBilgiProperties.Get_Yedek1: WideString;
begin
    Result := DefaultInterface.Yedek1;
end;

procedure TMuplanTemelBilgiProperties.Set_Yedek1(const Value: WideString);
  { Warning: The property Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek1 := Value;
end;

function TMuplanTemelBilgiProperties.Get_Yedek2: WideString;
begin
    Result := DefaultInterface.Yedek2;
end;

procedure TMuplanTemelBilgiProperties.Set_Yedek2(const Value: WideString);
  { Warning: The property Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek2 := Value;
end;

function TMuplanTemelBilgiProperties.Get_Yedek3: Double;
begin
    Result := DefaultInterface.Yedek3;
end;

procedure TMuplanTemelBilgiProperties.Set_Yedek3(Value: Double);
begin
  DefaultInterface.Set_Yedek3(Value);
end;

function TMuplanTemelBilgiProperties.Get_Yedek4: Double;
begin
    Result := DefaultInterface.Yedek4;
end;

procedure TMuplanTemelBilgiProperties.Set_Yedek4(Value: Double);
begin
  DefaultInterface.Set_Yedek4(Value);
end;

function TMuplanTemelBilgiProperties.Get_Yedek5: WideString;
begin
    Result := DefaultInterface.Yedek5;
end;

procedure TMuplanTemelBilgiProperties.Set_Yedek5(const Value: WideString);
  { Warning: The property Yedek5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek5 := Value;
end;

function TMuplanTemelBilgiProperties.Get_Yedek6: WideString;
begin
    Result := DefaultInterface.Yedek6;
end;

procedure TMuplanTemelBilgiProperties.Set_Yedek6(const Value: WideString);
  { Warning: The property Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek6 := Value;
end;

function TMuplanTemelBilgiProperties.Get_Yedek7: Integer;
begin
    Result := DefaultInterface.Yedek7;
end;

procedure TMuplanTemelBilgiProperties.Set_Yedek7(Value: Integer);
begin
  DefaultInterface.Set_Yedek7(Value);
end;

function TMuplanTemelBilgiProperties.Get_Yedek8: Integer;
begin
    Result := DefaultInterface.Yedek8;
end;

procedure TMuplanTemelBilgiProperties.Set_Yedek8(Value: Integer);
begin
  DefaultInterface.Set_Yedek8(Value);
end;

function TMuplanTemelBilgiProperties.Get_Yedek9: Integer;
begin
    Result := DefaultInterface.Yedek9;
end;

procedure TMuplanTemelBilgiProperties.Set_Yedek9(Value: Integer);
begin
  DefaultInterface.Set_Yedek9(Value);
end;

function TMuplanTemelBilgiProperties.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TMuplanTemelBilgiProperties.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TMuplanTemelBilgiProperties.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TMuplanTemelBilgiProperties.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TMuplanTemelBilgiProperties.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TMuplanTemelBilgiProperties.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TMuplanTemelBilgiProperties.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TMuplanTemelBilgiProperties.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TMuplanTemelBilgiProperties.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TMuplanTemelBilgiProperties.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TMuplanTemelBilgiProperties.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TMuplanTemelBilgiProperties.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

function TMuplanTemelBilgiProperties.Get_Enf_Fark_HesKod: WideString;
begin
    Result := DefaultInterface.Enf_Fark_HesKod;
end;

procedure TMuplanTemelBilgiProperties.Set_Enf_Fark_HesKod(const Value: WideString);
  { Warning: The property Enf_Fark_HesKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Enf_Fark_HesKod := Value;
end;

{$ENDIF}

class function CoMuplanEkBilgi.Create: IMuplanEkBilgi;
begin
  Result := CreateComObject(CLASS_MuplanEkBilgi) as IMuplanEkBilgi;
end;

class function CoMuplanEkBilgi.CreateRemote(const MachineName: string): IMuplanEkBilgi;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MuplanEkBilgi) as IMuplanEkBilgi;
end;

procedure TMuplanEkBilgi.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{12AB25F0-DC8E-447F-98E5-124572776BDC}';
    IntfIID:   '{41D6CDB4-65E7-4644-929B-A169F9F2C513}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMuplanEkBilgi.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IMuplanEkBilgi;
  end;
end;

procedure TMuplanEkBilgi.ConnectTo(svrIntf: IMuplanEkBilgi);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMuplanEkBilgi.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMuplanEkBilgi.GetDefaultInterface: IMuplanEkBilgi;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMuplanEkBilgi.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMuplanEkBilgiProperties.Create(Self);
{$ENDIF}
end;

destructor TMuplanEkBilgi.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMuplanEkBilgi.GetServerProperties: TMuplanEkBilgiProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMuplanEkBilgi.Get_Kod: WideString;
begin
    Result := DefaultInterface.Kod;
end;

procedure TMuplanEkBilgi.Set_Kod(const Value: WideString);
  { Warning: The property Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod := Value;
end;

function TMuplanEkBilgi.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TMuplanEkBilgi.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TMuplanEkBilgi.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TMuplanEkBilgi.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TMuplanEkBilgi.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TMuplanEkBilgi.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TMuplanEkBilgi.Get_Kull1N: Double;
begin
    Result := DefaultInterface.Kull1N;
end;

procedure TMuplanEkBilgi.Set_Kull1N(Value: Double);
begin
  DefaultInterface.Set_Kull1N(Value);
end;

function TMuplanEkBilgi.Get_Kull2N: Double;
begin
    Result := DefaultInterface.Kull2N;
end;

procedure TMuplanEkBilgi.Set_Kull2N(Value: Double);
begin
  DefaultInterface.Set_Kull2N(Value);
end;

function TMuplanEkBilgi.Get_Kull3N: Double;
begin
    Result := DefaultInterface.Kull3N;
end;

procedure TMuplanEkBilgi.Set_Kull3N(Value: Double);
begin
  DefaultInterface.Set_Kull3N(Value);
end;

function TMuplanEkBilgi.Get_Kull4N: Double;
begin
    Result := DefaultInterface.Kull4N;
end;

procedure TMuplanEkBilgi.Set_Kull4N(Value: Double);
begin
  DefaultInterface.Set_Kull4N(Value);
end;

function TMuplanEkBilgi.Get_Kull5N: Double;
begin
    Result := DefaultInterface.Kull5N;
end;

procedure TMuplanEkBilgi.Set_Kull5N(Value: Double);
begin
  DefaultInterface.Set_Kull5N(Value);
end;

function TMuplanEkBilgi.Get_Kull6N: Double;
begin
    Result := DefaultInterface.Kull6N;
end;

procedure TMuplanEkBilgi.Set_Kull6N(Value: Double);
begin
  DefaultInterface.Set_Kull6N(Value);
end;

function TMuplanEkBilgi.Get_Kull7N: Double;
begin
    Result := DefaultInterface.Kull7N;
end;

procedure TMuplanEkBilgi.Set_Kull7N(Value: Double);
begin
  DefaultInterface.Set_Kull7N(Value);
end;

function TMuplanEkBilgi.Get_Kull8N: Double;
begin
    Result := DefaultInterface.Kull8N;
end;

procedure TMuplanEkBilgi.Set_Kull8N(Value: Double);
begin
  DefaultInterface.Set_Kull8N(Value);
end;

function TMuplanEkBilgi.Get_Kull1S: WideString;
begin
    Result := DefaultInterface.Kull1S;
end;

procedure TMuplanEkBilgi.Set_Kull1S(const Value: WideString);
  { Warning: The property Kull1S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull1S := Value;
end;

function TMuplanEkBilgi.Get_Kull2S: WideString;
begin
    Result := DefaultInterface.Kull2S;
end;

procedure TMuplanEkBilgi.Set_Kull2S(const Value: WideString);
  { Warning: The property Kull2S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull2S := Value;
end;

function TMuplanEkBilgi.Get_Kull3S: WideString;
begin
    Result := DefaultInterface.Kull3S;
end;

procedure TMuplanEkBilgi.Set_Kull3S(const Value: WideString);
  { Warning: The property Kull3S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull3S := Value;
end;

function TMuplanEkBilgi.Get_Kull4S: WideString;
begin
    Result := DefaultInterface.Kull4S;
end;

procedure TMuplanEkBilgi.Set_Kull4S(const Value: WideString);
  { Warning: The property Kull4S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull4S := Value;
end;

function TMuplanEkBilgi.Get_Kull5S: WideString;
begin
    Result := DefaultInterface.Kull5S;
end;

procedure TMuplanEkBilgi.Set_Kull5S(const Value: WideString);
  { Warning: The property Kull5S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull5S := Value;
end;

function TMuplanEkBilgi.Get_Kull6S: WideString;
begin
    Result := DefaultInterface.Kull6S;
end;

procedure TMuplanEkBilgi.Set_Kull6S(const Value: WideString);
  { Warning: The property Kull6S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull6S := Value;
end;

function TMuplanEkBilgi.Get_Kull7S: WideString;
begin
    Result := DefaultInterface.Kull7S;
end;

procedure TMuplanEkBilgi.Set_Kull7S(const Value: WideString);
  { Warning: The property Kull7S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull7S := Value;
end;

function TMuplanEkBilgi.Get_Kull8S: WideString;
begin
    Result := DefaultInterface.Kull8S;
end;

procedure TMuplanEkBilgi.Set_Kull8S(const Value: WideString);
  { Warning: The property Kull8S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull8S := Value;
end;

function TMuplanEkBilgi.Get_Yedek1: WideString;
begin
    Result := DefaultInterface.Yedek1;
end;

procedure TMuplanEkBilgi.Set_Yedek1(const Value: WideString);
  { Warning: The property Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek1 := Value;
end;

function TMuplanEkBilgi.Get_Yedek2: WideString;
begin
    Result := DefaultInterface.Yedek2;
end;

procedure TMuplanEkBilgi.Set_Yedek2(const Value: WideString);
  { Warning: The property Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek2 := Value;
end;

function TMuplanEkBilgi.Get_Yedek3: Double;
begin
    Result := DefaultInterface.Yedek3;
end;

procedure TMuplanEkBilgi.Set_Yedek3(Value: Double);
begin
  DefaultInterface.Set_Yedek3(Value);
end;

function TMuplanEkBilgi.Get_Yedek4: Double;
begin
    Result := DefaultInterface.Yedek4;
end;

procedure TMuplanEkBilgi.Set_Yedek4(Value: Double);
begin
  DefaultInterface.Set_Yedek4(Value);
end;

function TMuplanEkBilgi.Get_Yedek5: WideString;
begin
    Result := DefaultInterface.Yedek5;
end;

procedure TMuplanEkBilgi.Set_Yedek5(const Value: WideString);
  { Warning: The property Yedek5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek5 := Value;
end;

function TMuplanEkBilgi.Get_Yedek6: WideString;
begin
    Result := DefaultInterface.Yedek6;
end;

procedure TMuplanEkBilgi.Set_Yedek6(const Value: WideString);
  { Warning: The property Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek6 := Value;
end;

function TMuplanEkBilgi.Get_Yedek7: Integer;
begin
    Result := DefaultInterface.Yedek7;
end;

procedure TMuplanEkBilgi.Set_Yedek7(Value: Integer);
begin
  DefaultInterface.Set_Yedek7(Value);
end;

function TMuplanEkBilgi.Get_Yedek8: Integer;
begin
    Result := DefaultInterface.Yedek8;
end;

procedure TMuplanEkBilgi.Set_Yedek8(Value: Integer);
begin
  DefaultInterface.Set_Yedek8(Value);
end;

function TMuplanEkBilgi.Get_Yedek9: Integer;
begin
    Result := DefaultInterface.Yedek9;
end;

procedure TMuplanEkBilgi.Set_Yedek9(Value: Integer);
begin
  DefaultInterface.Set_Yedek9(Value);
end;

function TMuplanEkBilgi.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TMuplanEkBilgi.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMuplanEkBilgiProperties.Create(AServer: TMuplanEkBilgi);
begin
  inherited Create;
  FServer := AServer;
end;

function TMuplanEkBilgiProperties.GetDefaultInterface: IMuplanEkBilgi;
begin
  Result := FServer.DefaultInterface;
end;

function TMuplanEkBilgiProperties.Get_Kod: WideString;
begin
    Result := DefaultInterface.Kod;
end;

procedure TMuplanEkBilgiProperties.Set_Kod(const Value: WideString);
  { Warning: The property Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod := Value;
end;

function TMuplanEkBilgiProperties.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TMuplanEkBilgiProperties.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TMuplanEkBilgiProperties.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TMuplanEkBilgiProperties.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TMuplanEkBilgiProperties.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TMuplanEkBilgiProperties.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TMuplanEkBilgiProperties.Get_Kull1N: Double;
begin
    Result := DefaultInterface.Kull1N;
end;

procedure TMuplanEkBilgiProperties.Set_Kull1N(Value: Double);
begin
  DefaultInterface.Set_Kull1N(Value);
end;

function TMuplanEkBilgiProperties.Get_Kull2N: Double;
begin
    Result := DefaultInterface.Kull2N;
end;

procedure TMuplanEkBilgiProperties.Set_Kull2N(Value: Double);
begin
  DefaultInterface.Set_Kull2N(Value);
end;

function TMuplanEkBilgiProperties.Get_Kull3N: Double;
begin
    Result := DefaultInterface.Kull3N;
end;

procedure TMuplanEkBilgiProperties.Set_Kull3N(Value: Double);
begin
  DefaultInterface.Set_Kull3N(Value);
end;

function TMuplanEkBilgiProperties.Get_Kull4N: Double;
begin
    Result := DefaultInterface.Kull4N;
end;

procedure TMuplanEkBilgiProperties.Set_Kull4N(Value: Double);
begin
  DefaultInterface.Set_Kull4N(Value);
end;

function TMuplanEkBilgiProperties.Get_Kull5N: Double;
begin
    Result := DefaultInterface.Kull5N;
end;

procedure TMuplanEkBilgiProperties.Set_Kull5N(Value: Double);
begin
  DefaultInterface.Set_Kull5N(Value);
end;

function TMuplanEkBilgiProperties.Get_Kull6N: Double;
begin
    Result := DefaultInterface.Kull6N;
end;

procedure TMuplanEkBilgiProperties.Set_Kull6N(Value: Double);
begin
  DefaultInterface.Set_Kull6N(Value);
end;

function TMuplanEkBilgiProperties.Get_Kull7N: Double;
begin
    Result := DefaultInterface.Kull7N;
end;

procedure TMuplanEkBilgiProperties.Set_Kull7N(Value: Double);
begin
  DefaultInterface.Set_Kull7N(Value);
end;

function TMuplanEkBilgiProperties.Get_Kull8N: Double;
begin
    Result := DefaultInterface.Kull8N;
end;

procedure TMuplanEkBilgiProperties.Set_Kull8N(Value: Double);
begin
  DefaultInterface.Set_Kull8N(Value);
end;

function TMuplanEkBilgiProperties.Get_Kull1S: WideString;
begin
    Result := DefaultInterface.Kull1S;
end;

procedure TMuplanEkBilgiProperties.Set_Kull1S(const Value: WideString);
  { Warning: The property Kull1S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull1S := Value;
end;

function TMuplanEkBilgiProperties.Get_Kull2S: WideString;
begin
    Result := DefaultInterface.Kull2S;
end;

procedure TMuplanEkBilgiProperties.Set_Kull2S(const Value: WideString);
  { Warning: The property Kull2S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull2S := Value;
end;

function TMuplanEkBilgiProperties.Get_Kull3S: WideString;
begin
    Result := DefaultInterface.Kull3S;
end;

procedure TMuplanEkBilgiProperties.Set_Kull3S(const Value: WideString);
  { Warning: The property Kull3S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull3S := Value;
end;

function TMuplanEkBilgiProperties.Get_Kull4S: WideString;
begin
    Result := DefaultInterface.Kull4S;
end;

procedure TMuplanEkBilgiProperties.Set_Kull4S(const Value: WideString);
  { Warning: The property Kull4S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull4S := Value;
end;

function TMuplanEkBilgiProperties.Get_Kull5S: WideString;
begin
    Result := DefaultInterface.Kull5S;
end;

procedure TMuplanEkBilgiProperties.Set_Kull5S(const Value: WideString);
  { Warning: The property Kull5S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull5S := Value;
end;

function TMuplanEkBilgiProperties.Get_Kull6S: WideString;
begin
    Result := DefaultInterface.Kull6S;
end;

procedure TMuplanEkBilgiProperties.Set_Kull6S(const Value: WideString);
  { Warning: The property Kull6S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull6S := Value;
end;

function TMuplanEkBilgiProperties.Get_Kull7S: WideString;
begin
    Result := DefaultInterface.Kull7S;
end;

procedure TMuplanEkBilgiProperties.Set_Kull7S(const Value: WideString);
  { Warning: The property Kull7S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull7S := Value;
end;

function TMuplanEkBilgiProperties.Get_Kull8S: WideString;
begin
    Result := DefaultInterface.Kull8S;
end;

procedure TMuplanEkBilgiProperties.Set_Kull8S(const Value: WideString);
  { Warning: The property Kull8S has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kull8S := Value;
end;

function TMuplanEkBilgiProperties.Get_Yedek1: WideString;
begin
    Result := DefaultInterface.Yedek1;
end;

procedure TMuplanEkBilgiProperties.Set_Yedek1(const Value: WideString);
  { Warning: The property Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek1 := Value;
end;

function TMuplanEkBilgiProperties.Get_Yedek2: WideString;
begin
    Result := DefaultInterface.Yedek2;
end;

procedure TMuplanEkBilgiProperties.Set_Yedek2(const Value: WideString);
  { Warning: The property Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek2 := Value;
end;

function TMuplanEkBilgiProperties.Get_Yedek3: Double;
begin
    Result := DefaultInterface.Yedek3;
end;

procedure TMuplanEkBilgiProperties.Set_Yedek3(Value: Double);
begin
  DefaultInterface.Set_Yedek3(Value);
end;

function TMuplanEkBilgiProperties.Get_Yedek4: Double;
begin
    Result := DefaultInterface.Yedek4;
end;

procedure TMuplanEkBilgiProperties.Set_Yedek4(Value: Double);
begin
  DefaultInterface.Set_Yedek4(Value);
end;

function TMuplanEkBilgiProperties.Get_Yedek5: WideString;
begin
    Result := DefaultInterface.Yedek5;
end;

procedure TMuplanEkBilgiProperties.Set_Yedek5(const Value: WideString);
  { Warning: The property Yedek5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek5 := Value;
end;

function TMuplanEkBilgiProperties.Get_Yedek6: WideString;
begin
    Result := DefaultInterface.Yedek6;
end;

procedure TMuplanEkBilgiProperties.Set_Yedek6(const Value: WideString);
  { Warning: The property Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek6 := Value;
end;

function TMuplanEkBilgiProperties.Get_Yedek7: Integer;
begin
    Result := DefaultInterface.Yedek7;
end;

procedure TMuplanEkBilgiProperties.Set_Yedek7(Value: Integer);
begin
  DefaultInterface.Set_Yedek7(Value);
end;

function TMuplanEkBilgiProperties.Get_Yedek8: Integer;
begin
    Result := DefaultInterface.Yedek8;
end;

procedure TMuplanEkBilgiProperties.Set_Yedek8(Value: Integer);
begin
  DefaultInterface.Set_Yedek8(Value);
end;

function TMuplanEkBilgiProperties.Get_Yedek9: Integer;
begin
    Result := DefaultInterface.Yedek9;
end;

procedure TMuplanEkBilgiProperties.Set_Yedek9(Value: Integer);
begin
  DefaultInterface.Set_Yedek9(Value);
end;

function TMuplanEkBilgiProperties.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TMuplanEkBilgiProperties.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

{$ENDIF}

class function CoMuPlan.Create: IMuPlan;
begin
  Result := CreateComObject(CLASS_MuPlan) as IMuPlan;
end;

class function CoMuPlan.CreateRemote(const MachineName: string): IMuPlan;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MuPlan) as IMuPlan;
end;

procedure TMuPlan.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{47316AAD-875E-4D2D-9D55-8BDD8DE13838}';
    IntfIID:   '{D8265652-9AEF-48DC-8B3F-43E26BBC5A99}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMuPlan.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IMuPlan;
  end;
end;

procedure TMuPlan.ConnectTo(svrIntf: IMuPlan);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMuPlan.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMuPlan.GetDefaultInterface: IMuPlan;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMuPlan.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMuPlanProperties.Create(Self);
{$ENDIF}
end;

destructor TMuPlan.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMuPlan.GetServerProperties: TMuPlanProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMuPlan.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TMuPlan.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMuPlan.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TMuPlan.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TMuPlan.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TMuPlan.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

procedure TMuPlan.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TMuPlan.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TMuPlan.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TMuPlan.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TMuPlan.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TMuPlan.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TMuPlan.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

function TMuPlan.TemelBilgi: IMuplanTemelBilgi;
begin
  Result := DefaultInterface.TemelBilgi;
end;

function TMuPlan.EkBilgi: IMuplanEkBilgi;
begin
  Result := DefaultInterface.EkBilgi;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMuPlanProperties.Create(AServer: TMuPlan);
begin
  inherited Create;
  FServer := AServer;
end;

function TMuPlanProperties.GetDefaultInterface: IMuPlan;
begin
  Result := FServer.DefaultInterface;
end;

function TMuPlanProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TMuPlanProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMuPlanProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TMuPlanProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TMuPlanProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TMuPlanProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

{$ENDIF}

class function CoNetRS.Create: INetRS;
begin
  Result := CreateComObject(CLASS_NetRS) as INetRS;
end;

class function CoNetRS.CreateRemote(const MachineName: string): INetRS;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NetRS) as INetRS;
end;

procedure TNetRS.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BE23776B-7789-4A82-A130-AC98B86594F0}';
    IntfIID:   '{2812BD2D-6915-4EDE-925A-B7896F81AB10}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNetRS.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as INetRS;
  end;
end;

procedure TNetRS.ConnectTo(svrIntf: INetRS);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNetRS.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNetRS.GetDefaultInterface: INetRS;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNetRS.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNetRSProperties.Create(Self);
{$ENDIF}
end;

destructor TNetRS.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNetRS.GetServerProperties: TNetRSProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNetRS.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TNetRS.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TNetRS.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TNetRS.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TNetRS.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TNetRS.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TNetRS.Get_EOF: WordBool;
begin
    Result := DefaultInterface.EOF;
end;

function TNetRS.Get_BOF: WordBool;
begin
    Result := DefaultInterface.BOF;
end;

function TNetRS.Get_FieldCount: Integer;
begin
    Result := DefaultInterface.FieldCount;
end;

function TNetRS.Get_IUXQueryAdr: Integer;
begin
    Result := DefaultInterface.IUXQueryAdr;
end;

function TNetRS.Get_ReportQuery: WordBool;
begin
    Result := DefaultInterface.ReportQuery;
end;

procedure TNetRS.Set_ReportQuery(Value: WordBool);
begin
  DefaultInterface.Set_ReportQuery(Value);
end;

procedure TNetRS.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TNetRS.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TNetRS.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TNetRS.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TNetRS.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TNetRS.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TNetRS.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

function TNetRS.Ac(const SQL: WideString): WordBool;
begin
  Result := DefaultInterface.Ac(SQL);
end;

procedure TNetRS.IlkK;
begin
  DefaultInterface.IlkK;
end;

procedure TNetRS.OncekiK;
begin
  DefaultInterface.OncekiK;
end;

procedure TNetRS.SonK;
begin
  DefaultInterface.SonK;
end;

procedure TNetRS.SonrakiK;
begin
  DefaultInterface.SonrakiK;
end;

procedure TNetRS.Kapat;
begin
  DefaultInterface.Kapat;
end;

procedure TNetRS.Calistir(const SQL: WideString);
begin
  DefaultInterface.Calistir(SQL);
end;

function TNetRS.FieldByName(const Name: WideString): INetField;
begin
  Result := DefaultInterface.FieldByName(Name);
end;

function TNetRS.OpenByUniDirectional(const SQL: WideString): WordBool;
begin
  Result := DefaultInterface.OpenByUniDirectional(SQL);
end;

function TNetRS.Fields(Index: Integer): INetField;
begin
  Result := DefaultInterface.Fields(Index);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNetRSProperties.Create(AServer: TNetRS);
begin
  inherited Create;
  FServer := AServer;
end;

function TNetRSProperties.GetDefaultInterface: INetRS;
begin
  Result := FServer.DefaultInterface;
end;

function TNetRSProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TNetRSProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TNetRSProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TNetRSProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TNetRSProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TNetRSProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TNetRSProperties.Get_EOF: WordBool;
begin
    Result := DefaultInterface.EOF;
end;

function TNetRSProperties.Get_BOF: WordBool;
begin
    Result := DefaultInterface.BOF;
end;

function TNetRSProperties.Get_FieldCount: Integer;
begin
    Result := DefaultInterface.FieldCount;
end;

function TNetRSProperties.Get_IUXQueryAdr: Integer;
begin
    Result := DefaultInterface.IUXQueryAdr;
end;

function TNetRSProperties.Get_ReportQuery: WordBool;
begin
    Result := DefaultInterface.ReportQuery;
end;

procedure TNetRSProperties.Set_ReportQuery(Value: WordBool);
begin
  DefaultInterface.Set_ReportQuery(Value);
end;

{$ENDIF}

class function CoDagFisOlus.Create: IDagFisOlus;
begin
  Result := CreateComObject(CLASS_DagFisOlus) as IDagFisOlus;
end;

class function CoDagFisOlus.CreateRemote(const MachineName: string): IDagFisOlus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DagFisOlus) as IDagFisOlus;
end;

procedure TDagFisOlus.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A0D31D30-7A81-470A-9BD8-D7D73B6ADBF6}';
    IntfIID:   '{F36817D5-AD76-4FDD-9658-5EFBE59A5DAC}';
    EventIID:  '{E07BFE2D-B9AC-45F3-BB78-DDE3C67A971B}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDagFisOlus.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IDagFisOlus;
  end;
end;

procedure TDagFisOlus.ConnectTo(svrIntf: IDagFisOlus);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TDagFisOlus.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TDagFisOlus.GetDefaultInterface: IDagFisOlus;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDagFisOlus.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDagFisOlusProperties.Create(Self);
{$ENDIF}
end;

destructor TDagFisOlus.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDagFisOlus.GetServerProperties: TDagFisOlusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TDagFisOlus.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
  end; {case DispID}
end;

function TDagFisOlus.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TDagFisOlus.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDagFisOlus.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TDagFisOlus.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TDagFisOlus.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TDagFisOlus.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TDagFisOlus.Get_FisTarih: TDateTime;
begin
    Result := DefaultInterface.FisTarih;
end;

procedure TDagFisOlus.Set_FisTarih(Value: TDateTime);
begin
  DefaultInterface.Set_FisTarih(Value);
end;

function TDagFisOlus.Get_Fisno: WideString;
begin
    Result := DefaultInterface.Fisno;
end;

procedure TDagFisOlus.Set_Fisno(const Value: WideString);
  { Warning: The property Fisno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Fisno := Value;
end;

function TDagFisOlus.Get_BasIslemSiraNo: WideString;
begin
    Result := DefaultInterface.BasIslemSiraNo;
end;

procedure TDagFisOlus.Set_BasIslemSiraNo(const Value: WideString);
  { Warning: The property BasIslemSiraNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BasIslemSiraNo := Value;
end;

function TDagFisOlus.Get_BitIslemSiraNo: WideString;
begin
    Result := DefaultInterface.BitIslemSiraNo;
end;

procedure TDagFisOlus.Set_BitIslemSiraNo(const Value: WideString);
  { Warning: The property BitIslemSiraNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BitIslemSiraNo := Value;
end;

function TDagFisOlus.Get_BasDagFisNo: WideString;
begin
    Result := DefaultInterface.BasDagFisNo;
end;

procedure TDagFisOlus.Set_BasDagFisNo(const Value: WideString);
  { Warning: The property BasDagFisNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BasDagFisNo := Value;
end;

function TDagFisOlus.Get_BitDagFisNo: WideString;
begin
    Result := DefaultInterface.BitDagFisNo;
end;

procedure TDagFisOlus.Set_BitDagFisNo(const Value: WideString);
  { Warning: The property BitDagFisNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BitDagFisNo := Value;
end;

function TDagFisOlus.Get_FisAciklama: WideString;
begin
    Result := DefaultInterface.FisAciklama;
end;

procedure TDagFisOlus.Set_FisAciklama(const Value: WideString);
  { Warning: The property FisAciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FisAciklama := Value;
end;

function TDagFisOlus.Get_DagitimTuru: TDagFisTip;
begin
    Result := DefaultInterface.DagitimTuru;
end;

procedure TDagFisOlus.Set_DagitimTuru(Value: TDagFisTip);
begin
  DefaultInterface.Set_DagitimTuru(Value);
end;

function TDagFisOlus.Get_ProjeKoduKontYapilsin: WordBool;
begin
    Result := DefaultInterface.ProjeKoduKontYapilsin;
end;

procedure TDagFisOlus.Set_ProjeKoduKontYapilsin(Value: WordBool);
begin
  DefaultInterface.Set_ProjeKoduKontYapilsin(Value);
end;

procedure TDagFisOlus.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TDagFisOlus.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TDagFisOlus.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TDagFisOlus.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TDagFisOlus.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TDagFisOlus.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TDagFisOlus.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

procedure TDagFisOlus.Calistir;
begin
  DefaultInterface.Calistir;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDagFisOlusProperties.Create(AServer: TDagFisOlus);
begin
  inherited Create;
  FServer := AServer;
end;

function TDagFisOlusProperties.GetDefaultInterface: IDagFisOlus;
begin
  Result := FServer.DefaultInterface;
end;

function TDagFisOlusProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TDagFisOlusProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TDagFisOlusProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TDagFisOlusProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TDagFisOlusProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TDagFisOlusProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TDagFisOlusProperties.Get_FisTarih: TDateTime;
begin
    Result := DefaultInterface.FisTarih;
end;

procedure TDagFisOlusProperties.Set_FisTarih(Value: TDateTime);
begin
  DefaultInterface.Set_FisTarih(Value);
end;

function TDagFisOlusProperties.Get_Fisno: WideString;
begin
    Result := DefaultInterface.Fisno;
end;

procedure TDagFisOlusProperties.Set_Fisno(const Value: WideString);
  { Warning: The property Fisno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Fisno := Value;
end;

function TDagFisOlusProperties.Get_BasIslemSiraNo: WideString;
begin
    Result := DefaultInterface.BasIslemSiraNo;
end;

procedure TDagFisOlusProperties.Set_BasIslemSiraNo(const Value: WideString);
  { Warning: The property BasIslemSiraNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BasIslemSiraNo := Value;
end;

function TDagFisOlusProperties.Get_BitIslemSiraNo: WideString;
begin
    Result := DefaultInterface.BitIslemSiraNo;
end;

procedure TDagFisOlusProperties.Set_BitIslemSiraNo(const Value: WideString);
  { Warning: The property BitIslemSiraNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BitIslemSiraNo := Value;
end;

function TDagFisOlusProperties.Get_BasDagFisNo: WideString;
begin
    Result := DefaultInterface.BasDagFisNo;
end;

procedure TDagFisOlusProperties.Set_BasDagFisNo(const Value: WideString);
  { Warning: The property BasDagFisNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BasDagFisNo := Value;
end;

function TDagFisOlusProperties.Get_BitDagFisNo: WideString;
begin
    Result := DefaultInterface.BitDagFisNo;
end;

procedure TDagFisOlusProperties.Set_BitDagFisNo(const Value: WideString);
  { Warning: The property BitDagFisNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BitDagFisNo := Value;
end;

function TDagFisOlusProperties.Get_FisAciklama: WideString;
begin
    Result := DefaultInterface.FisAciklama;
end;

procedure TDagFisOlusProperties.Set_FisAciklama(const Value: WideString);
  { Warning: The property FisAciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FisAciklama := Value;
end;

function TDagFisOlusProperties.Get_DagitimTuru: TDagFisTip;
begin
    Result := DefaultInterface.DagitimTuru;
end;

procedure TDagFisOlusProperties.Set_DagitimTuru(Value: TDagFisTip);
begin
  DefaultInterface.Set_DagitimTuru(Value);
end;

function TDagFisOlusProperties.Get_ProjeKoduKontYapilsin: WordBool;
begin
    Result := DefaultInterface.ProjeKoduKontYapilsin;
end;

procedure TDagFisOlusProperties.Set_ProjeKoduKontYapilsin(Value: WordBool);
begin
  DefaultInterface.Set_ProjeKoduKontYapilsin(Value);
end;

{$ENDIF}

class function CoStokPH.Create: IStokPH;
begin
  Result := CreateComObject(CLASS_StokPH) as IStokPH;
end;

class function CoStokPH.CreateRemote(const MachineName: string): IStokPH;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StokPH) as IStokPH;
end;

procedure TStokPH.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{941D8FC3-A9FE-48FF-AA18-7F9D79396EB9}';
    IntfIID:   '{DEDD42FC-614D-4C07-9AF1-FF88C5006910}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStokPH.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IStokPH;
  end;
end;

procedure TStokPH.ConnectTo(svrIntf: IStokPH);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TStokPH.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TStokPH.GetDefaultInterface: IStokPH;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TStokPH.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TStokPHProperties.Create(Self);
{$ENDIF}
end;

destructor TStokPH.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TStokPH.GetServerProperties: TStokPHProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TStokPH.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TStokPH.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStokPH.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TStokPH.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TStokPH.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TStokPH.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TStokPH.Get_Stok_Kodu: WideString;
begin
    Result := DefaultInterface.Stok_Kodu;
end;

procedure TStokPH.Set_Stok_Kodu(const Value: WideString);
  { Warning: The property Stok_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stok_Kodu := Value;
end;

function TStokPH.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TStokPH.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TStokPH.Get_DEPO_KODU: Integer;
begin
    Result := DefaultInterface.DEPO_KODU;
end;

procedure TStokPH.Set_DEPO_KODU(Value: Integer);
begin
  DefaultInterface.Set_DEPO_KODU(Value);
end;

function TStokPH.Get_Top_Giris_Mik: Double;
begin
    Result := DefaultInterface.Top_Giris_Mik;
end;

procedure TStokPH.Set_Top_Giris_Mik(Value: Double);
begin
  DefaultInterface.Set_Top_Giris_Mik(Value);
end;

function TStokPH.Get_Top_Giris_Tut: Double;
begin
    Result := DefaultInterface.Top_Giris_Tut;
end;

procedure TStokPH.Set_Top_Giris_Tut(Value: Double);
begin
  DefaultInterface.Set_Top_Giris_Tut(Value);
end;

function TStokPH.Get_Top_Cikis_Mik: Double;
begin
    Result := DefaultInterface.Top_Cikis_Mik;
end;

procedure TStokPH.Set_Top_Cikis_Mik(Value: Double);
begin
  DefaultInterface.Set_Top_Cikis_Mik(Value);
end;

function TStokPH.Get_Top_Cikis_Tut: Double;
begin
    Result := DefaultInterface.Top_Cikis_Tut;
end;

procedure TStokPH.Set_Top_Cikis_Tut(Value: Double);
begin
  DefaultInterface.Set_Top_Cikis_Tut(Value);
end;

function TStokPH.Get_Son_Gir_Br_Fiat: Double;
begin
    Result := DefaultInterface.Son_Gir_Br_Fiat;
end;

procedure TStokPH.Set_Son_Gir_Br_Fiat(Value: Double);
begin
  DefaultInterface.Set_Son_Gir_Br_Fiat(Value);
end;

function TStokPH.Get_Son_Gir_Net_Fiat: Double;
begin
    Result := DefaultInterface.Son_Gir_Net_Fiat;
end;

procedure TStokPH.Set_Son_Gir_Net_Fiat(Value: Double);
begin
  DefaultInterface.Set_Son_Gir_Net_Fiat(Value);
end;

function TStokPH.Get_Stok_Dagitim: Double;
begin
    Result := DefaultInterface.Stok_Dagitim;
end;

procedure TStokPH.Set_Stok_Dagitim(Value: Double);
begin
  DefaultInterface.Set_Stok_Dagitim(Value);
end;

function TStokPH.Get_Mus_Top_Siparis: Double;
begin
    Result := DefaultInterface.Mus_Top_Siparis;
end;

procedure TStokPH.Set_Mus_Top_Siparis(Value: Double);
begin
  DefaultInterface.Set_Mus_Top_Siparis(Value);
end;

function TStokPH.Get_Mus_Top_Teslim: Double;
begin
    Result := DefaultInterface.Mus_Top_Teslim;
end;

procedure TStokPH.Set_Mus_Top_Teslim(Value: Double);
begin
  DefaultInterface.Set_Mus_Top_Teslim(Value);
end;

function TStokPH.Get_Sat_Top_Teslim: Double;
begin
    Result := DefaultInterface.Sat_Top_Teslim;
end;

procedure TStokPH.Set_Sat_Top_Teslim(Value: Double);
begin
  DefaultInterface.Set_Sat_Top_Teslim(Value);
end;

function TStokPH.Get_Sat_Top_Siparis: Double;
begin
    Result := DefaultInterface.Sat_Top_Siparis;
end;

procedure TStokPH.Set_Sat_Top_Siparis(Value: Double);
begin
  DefaultInterface.Set_Sat_Top_Siparis(Value);
end;

function TStokPH.Get_YOLMIK: Double;
begin
    Result := DefaultInterface.YOLMIK;
end;

procedure TStokPH.Set_YOLMIK(Value: Double);
begin
  DefaultInterface.Set_YOLMIK(Value);
end;

procedure TStokPH.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TStokPH.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TStokPH.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TStokPH.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TStokPH.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TStokPH.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TStokPH.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TStokPHProperties.Create(AServer: TStokPH);
begin
  inherited Create;
  FServer := AServer;
end;

function TStokPHProperties.GetDefaultInterface: IStokPH;
begin
  Result := FServer.DefaultInterface;
end;

function TStokPHProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TStokPHProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStokPHProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TStokPHProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TStokPHProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TStokPHProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TStokPHProperties.Get_Stok_Kodu: WideString;
begin
    Result := DefaultInterface.Stok_Kodu;
end;

procedure TStokPHProperties.Set_Stok_Kodu(const Value: WideString);
  { Warning: The property Stok_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stok_Kodu := Value;
end;

function TStokPHProperties.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TStokPHProperties.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TStokPHProperties.Get_DEPO_KODU: Integer;
begin
    Result := DefaultInterface.DEPO_KODU;
end;

procedure TStokPHProperties.Set_DEPO_KODU(Value: Integer);
begin
  DefaultInterface.Set_DEPO_KODU(Value);
end;

function TStokPHProperties.Get_Top_Giris_Mik: Double;
begin
    Result := DefaultInterface.Top_Giris_Mik;
end;

procedure TStokPHProperties.Set_Top_Giris_Mik(Value: Double);
begin
  DefaultInterface.Set_Top_Giris_Mik(Value);
end;

function TStokPHProperties.Get_Top_Giris_Tut: Double;
begin
    Result := DefaultInterface.Top_Giris_Tut;
end;

procedure TStokPHProperties.Set_Top_Giris_Tut(Value: Double);
begin
  DefaultInterface.Set_Top_Giris_Tut(Value);
end;

function TStokPHProperties.Get_Top_Cikis_Mik: Double;
begin
    Result := DefaultInterface.Top_Cikis_Mik;
end;

procedure TStokPHProperties.Set_Top_Cikis_Mik(Value: Double);
begin
  DefaultInterface.Set_Top_Cikis_Mik(Value);
end;

function TStokPHProperties.Get_Top_Cikis_Tut: Double;
begin
    Result := DefaultInterface.Top_Cikis_Tut;
end;

procedure TStokPHProperties.Set_Top_Cikis_Tut(Value: Double);
begin
  DefaultInterface.Set_Top_Cikis_Tut(Value);
end;

function TStokPHProperties.Get_Son_Gir_Br_Fiat: Double;
begin
    Result := DefaultInterface.Son_Gir_Br_Fiat;
end;

procedure TStokPHProperties.Set_Son_Gir_Br_Fiat(Value: Double);
begin
  DefaultInterface.Set_Son_Gir_Br_Fiat(Value);
end;

function TStokPHProperties.Get_Son_Gir_Net_Fiat: Double;
begin
    Result := DefaultInterface.Son_Gir_Net_Fiat;
end;

procedure TStokPHProperties.Set_Son_Gir_Net_Fiat(Value: Double);
begin
  DefaultInterface.Set_Son_Gir_Net_Fiat(Value);
end;

function TStokPHProperties.Get_Stok_Dagitim: Double;
begin
    Result := DefaultInterface.Stok_Dagitim;
end;

procedure TStokPHProperties.Set_Stok_Dagitim(Value: Double);
begin
  DefaultInterface.Set_Stok_Dagitim(Value);
end;

function TStokPHProperties.Get_Mus_Top_Siparis: Double;
begin
    Result := DefaultInterface.Mus_Top_Siparis;
end;

procedure TStokPHProperties.Set_Mus_Top_Siparis(Value: Double);
begin
  DefaultInterface.Set_Mus_Top_Siparis(Value);
end;

function TStokPHProperties.Get_Mus_Top_Teslim: Double;
begin
    Result := DefaultInterface.Mus_Top_Teslim;
end;

procedure TStokPHProperties.Set_Mus_Top_Teslim(Value: Double);
begin
  DefaultInterface.Set_Mus_Top_Teslim(Value);
end;

function TStokPHProperties.Get_Sat_Top_Teslim: Double;
begin
    Result := DefaultInterface.Sat_Top_Teslim;
end;

procedure TStokPHProperties.Set_Sat_Top_Teslim(Value: Double);
begin
  DefaultInterface.Set_Sat_Top_Teslim(Value);
end;

function TStokPHProperties.Get_Sat_Top_Siparis: Double;
begin
    Result := DefaultInterface.Sat_Top_Siparis;
end;

procedure TStokPHProperties.Set_Sat_Top_Siparis(Value: Double);
begin
  DefaultInterface.Set_Sat_Top_Siparis(Value);
end;

function TStokPHProperties.Get_YOLMIK: Double;
begin
    Result := DefaultInterface.YOLMIK;
end;

procedure TStokPHProperties.Set_YOLMIK(Value: Double);
begin
  DefaultInterface.Set_YOLMIK(Value);
end;

{$ENDIF}

class function CoStDovEnfCevir.Create: IStDovEnfCevir;
begin
  Result := CreateComObject(CLASS_StDovEnfCevir) as IStDovEnfCevir;
end;

class function CoStDovEnfCevir.CreateRemote(const MachineName: string): IStDovEnfCevir;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StDovEnfCevir) as IStDovEnfCevir;
end;

procedure TStDovEnfCevir.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9C0800E0-1118-4AFF-B256-DE71CF0F1D00}';
    IntfIID:   '{8727B54B-44C1-4EE5-9AAA-9A32BE250A06}';
    EventIID:  '{AD142343-0038-4E87-89BD-0179E4F7BDE1}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStDovEnfCevir.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as IStDovEnfCevir;
  end;
end;

procedure TStDovEnfCevir.ConnectTo(svrIntf: IStDovEnfCevir);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TStDovEnfCevir.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TStDovEnfCevir.GetDefaultInterface: IStDovEnfCevir;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TStDovEnfCevir.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TStDovEnfCevirProperties.Create(Self);
{$ENDIF}
end;

destructor TStDovEnfCevir.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TStDovEnfCevir.GetServerProperties: TStDovEnfCevirProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TStDovEnfCevir.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    201: if Assigned(FOnInfo) then
         FOnInfo(Self);
  end; {case DispID}
end;

function TStDovEnfCevir.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TStDovEnfCevir.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStDovEnfCevir.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TStDovEnfCevir.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TStDovEnfCevir.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TStDovEnfCevir.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TStDovEnfCevir.Get_StokKodu: WideString;
begin
    Result := DefaultInterface.StokKodu;
end;

procedure TStDovEnfCevir.Set_StokKodu(const Value: WideString);
  { Warning: The property StokKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StokKodu := Value;
end;

function TStDovEnfCevir.Get_GrupKodu: WideString;
begin
    Result := DefaultInterface.GrupKodu;
end;

procedure TStDovEnfCevir.Set_GrupKodu(const Value: WideString);
  { Warning: The property GrupKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GrupKodu := Value;
end;

function TStDovEnfCevir.Get_KOD1: WideString;
begin
    Result := DefaultInterface.KOD1;
end;

procedure TStDovEnfCevir.Set_KOD1(const Value: WideString);
  { Warning: The property KOD1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOD1 := Value;
end;

function TStDovEnfCevir.Get_KOD2: WideString;
begin
    Result := DefaultInterface.KOD2;
end;

procedure TStDovEnfCevir.Set_KOD2(const Value: WideString);
  { Warning: The property KOD2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOD2 := Value;
end;

function TStDovEnfCevir.Get_Tarih1: TDateTime;
begin
    Result := DefaultInterface.Tarih1;
end;

procedure TStDovEnfCevir.Set_Tarih1(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih1(Value);
end;

function TStDovEnfCevir.Get_Tarih2: TDateTime;
begin
    Result := DefaultInterface.Tarih2;
end;

procedure TStDovEnfCevir.Set_Tarih2(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih2(Value);
end;

function TStDovEnfCevir.Get_Message: WideString;
begin
    Result := DefaultInterface.Message;
end;

procedure TStDovEnfCevir.Set_Message(const Value: WideString);
  { Warning: The property Message has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Message := Value;
end;

procedure TStDovEnfCevir.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TStDovEnfCevir.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TStDovEnfCevir.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TStDovEnfCevir.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TStDovEnfCevir.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TStDovEnfCevir.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TStDovEnfCevir.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

procedure TStDovEnfCevir.Calistir;
begin
  DefaultInterface.Calistir;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TStDovEnfCevirProperties.Create(AServer: TStDovEnfCevir);
begin
  inherited Create;
  FServer := AServer;
end;

function TStDovEnfCevirProperties.GetDefaultInterface: IStDovEnfCevir;
begin
  Result := FServer.DefaultInterface;
end;

function TStDovEnfCevirProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TStDovEnfCevirProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStDovEnfCevirProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TStDovEnfCevirProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TStDovEnfCevirProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TStDovEnfCevirProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TStDovEnfCevirProperties.Get_StokKodu: WideString;
begin
    Result := DefaultInterface.StokKodu;
end;

procedure TStDovEnfCevirProperties.Set_StokKodu(const Value: WideString);
  { Warning: The property StokKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StokKodu := Value;
end;

function TStDovEnfCevirProperties.Get_GrupKodu: WideString;
begin
    Result := DefaultInterface.GrupKodu;
end;

procedure TStDovEnfCevirProperties.Set_GrupKodu(const Value: WideString);
  { Warning: The property GrupKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GrupKodu := Value;
end;

function TStDovEnfCevirProperties.Get_KOD1: WideString;
begin
    Result := DefaultInterface.KOD1;
end;

procedure TStDovEnfCevirProperties.Set_KOD1(const Value: WideString);
  { Warning: The property KOD1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOD1 := Value;
end;

function TStDovEnfCevirProperties.Get_KOD2: WideString;
begin
    Result := DefaultInterface.KOD2;
end;

procedure TStDovEnfCevirProperties.Set_KOD2(const Value: WideString);
  { Warning: The property KOD2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOD2 := Value;
end;

function TStDovEnfCevirProperties.Get_Tarih1: TDateTime;
begin
    Result := DefaultInterface.Tarih1;
end;

procedure TStDovEnfCevirProperties.Set_Tarih1(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih1(Value);
end;

function TStDovEnfCevirProperties.Get_Tarih2: TDateTime;
begin
    Result := DefaultInterface.Tarih2;
end;

procedure TStDovEnfCevirProperties.Set_Tarih2(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih2(Value);
end;

function TStDovEnfCevirProperties.Get_Message: WideString;
begin
    Result := DefaultInterface.Message;
end;

procedure TStDovEnfCevirProperties.Set_Message(const Value: WideString);
  { Warning: The property Message has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Message := Value;
end;

{$ENDIF}

class function CoNetGuvenlik.Create: INetGuvenlik;
begin
  Result := CreateComObject(CLASS_NetGuvenlik) as INetGuvenlik;
end;

class function CoNetGuvenlik.CreateRemote(const MachineName: string): INetGuvenlik;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NetGuvenlik) as INetGuvenlik;
end;

procedure TNetGuvenlik.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A53EBB11-AD89-4AA4-9DD8-EDC1B7E5A675}';
    IntfIID:   '{76236DD7-89FC-490F-8E56-2944A6B42DF8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNetGuvenlik.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as INetGuvenlik;
  end;
end;

procedure TNetGuvenlik.ConnectTo(svrIntf: INetGuvenlik);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNetGuvenlik.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNetGuvenlik.GetDefaultInterface: INetGuvenlik;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNetGuvenlik.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNetGuvenlikProperties.Create(Self);
{$ENDIF}
end;

destructor TNetGuvenlik.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNetGuvenlik.GetServerProperties: TNetGuvenlikProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNetGuvenlik.Get_UrunSurumu: TNetProductVersion;
begin
    Result := DefaultInterface.UrunSurumu;
end;

function TNetGuvenlik.Get_LisansSayisi: Integer;
begin
    Result := DefaultInterface.LisansSayisi;
end;

function TNetGuvenlik.Get_GuvenlikSunucusu: WideString;
begin
    Result := DefaultInterface.GuvenlikSunucusu;
end;

function TNetGuvenlik.Get_MusteriKodu: WideString;
begin
    Result := DefaultInterface.MusteriKodu;
end;

function TNetGuvenlik.Get_KurulumTipi: TNetKurulumTip;
begin
    Result := DefaultInterface.KurulumTipi;
end;

function TNetGuvenlik.ProgramListe(ProgramIndex: Integer): WordBool;
begin
  Result := DefaultInterface.ProgramListe(ProgramIndex);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNetGuvenlikProperties.Create(AServer: TNetGuvenlik);
begin
  inherited Create;
  FServer := AServer;
end;

function TNetGuvenlikProperties.GetDefaultInterface: INetGuvenlik;
begin
  Result := FServer.DefaultInterface;
end;

function TNetGuvenlikProperties.Get_UrunSurumu: TNetProductVersion;
begin
    Result := DefaultInterface.UrunSurumu;
end;

function TNetGuvenlikProperties.Get_LisansSayisi: Integer;
begin
    Result := DefaultInterface.LisansSayisi;
end;

function TNetGuvenlikProperties.Get_GuvenlikSunucusu: WideString;
begin
    Result := DefaultInterface.GuvenlikSunucusu;
end;

function TNetGuvenlikProperties.Get_MusteriKodu: WideString;
begin
    Result := DefaultInterface.MusteriKodu;
end;

function TNetGuvenlikProperties.Get_KurulumTipi: TNetKurulumTip;
begin
    Result := DefaultInterface.KurulumTipi;
end;

{$ENDIF}

class function CoStokHareket.Create: IStokHareket;
begin
  Result := CreateComObject(CLASS_StokHareket) as IStokHareket;
end;

class function CoStokHareket.CreateRemote(const MachineName: string): IStokHareket;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StokHareket) as IStokHareket;
end;

procedure TStokHareket.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{095E6AA5-6638-4740-AA12-D952E0543A92}';
    IntfIID:   '{80EE77BE-9B9F-4354-83E7-F46FC2860200}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStokHareket.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IStokHareket;
  end;
end;

procedure TStokHareket.ConnectTo(svrIntf: IStokHareket);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TStokHareket.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TStokHareket.GetDefaultInterface: IStokHareket;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TStokHareket.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TStokHareketProperties.Create(Self);
{$ENDIF}
end;

destructor TStokHareket.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TStokHareket.GetServerProperties: TStokHareketProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TStokHareket.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TStokHareket.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStokHareket.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TStokHareket.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TStokHareket.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TStokHareket.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TStokHareket.Get_SilmeIcinGerekliSahalar: WideString;
begin
    Result := DefaultInterface.SilmeIcinGerekliSahalar;
end;

function TStokHareket.Get_SonKayitNoAl: WordBool;
begin
    Result := DefaultInterface.SonKayitNoAl;
end;

procedure TStokHareket.Set_SonKayitNoAl(Value: WordBool);
begin
  DefaultInterface.Set_SonKayitNoAl(Value);
end;

function TStokHareket.Get_Stok_Kodu: WideString;
begin
    Result := DefaultInterface.Stok_Kodu;
end;

procedure TStokHareket.Set_Stok_Kodu(const Value: WideString);
  { Warning: The property Stok_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stok_Kodu := Value;
end;

function TStokHareket.Get_Fisno: WideString;
begin
    Result := DefaultInterface.Fisno;
end;

procedure TStokHareket.Set_Fisno(const Value: WideString);
  { Warning: The property Fisno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Fisno := Value;
end;

function TStokHareket.Get_Sthar_Gcmik: Double;
begin
    Result := DefaultInterface.Sthar_Gcmik;
end;

procedure TStokHareket.Set_Sthar_Gcmik(Value: Double);
begin
  DefaultInterface.Set_Sthar_Gcmik(Value);
end;

function TStokHareket.Get_Sthar_Gcmik2: Double;
begin
    Result := DefaultInterface.Sthar_Gcmik2;
end;

procedure TStokHareket.Set_Sthar_Gcmik2(Value: Double);
begin
  DefaultInterface.Set_Sthar_Gcmik2(Value);
end;

function TStokHareket.Get_CEVRIM: Double;
begin
    Result := DefaultInterface.CEVRIM;
end;

procedure TStokHareket.Set_CEVRIM(Value: Double);
begin
  DefaultInterface.Set_CEVRIM(Value);
end;

function TStokHareket.Get_Sthar_Gckod: WideString;
begin
    Result := DefaultInterface.Sthar_Gckod;
end;

procedure TStokHareket.Set_Sthar_Gckod(const Value: WideString);
  { Warning: The property Sthar_Gckod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Gckod := Value;
end;

function TStokHareket.Get_Sthar_Tarih: TDateTime;
begin
    Result := DefaultInterface.Sthar_Tarih;
end;

procedure TStokHareket.Set_Sthar_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Sthar_Tarih(Value);
end;

function TStokHareket.Get_Sthar_Nf: Double;
begin
    Result := DefaultInterface.Sthar_Nf;
end;

procedure TStokHareket.Set_Sthar_Nf(Value: Double);
begin
  DefaultInterface.Set_Sthar_Nf(Value);
end;

function TStokHareket.Get_Sthar_Bf: Double;
begin
    Result := DefaultInterface.Sthar_Bf;
end;

procedure TStokHareket.Set_Sthar_Bf(Value: Double);
begin
  DefaultInterface.Set_Sthar_Bf(Value);
end;

function TStokHareket.Get_Sthar_Iaf: Double;
begin
    Result := DefaultInterface.Sthar_Iaf;
end;

procedure TStokHareket.Set_Sthar_Iaf(Value: Double);
begin
  DefaultInterface.Set_Sthar_Iaf(Value);
end;

function TStokHareket.Get_Sthar_Kdv: Double;
begin
    Result := DefaultInterface.Sthar_Kdv;
end;

procedure TStokHareket.Set_Sthar_Kdv(Value: Double);
begin
  DefaultInterface.Set_Sthar_Kdv(Value);
end;

function TStokHareket.Get_DEPO_KODU: Integer;
begin
    Result := DefaultInterface.DEPO_KODU;
end;

procedure TStokHareket.Set_DEPO_KODU(Value: Integer);
begin
  DefaultInterface.Set_DEPO_KODU(Value);
end;

function TStokHareket.Get_Sthar_Aciklama: WideString;
begin
    Result := DefaultInterface.Sthar_Aciklama;
end;

procedure TStokHareket.Set_Sthar_Aciklama(const Value: WideString);
  { Warning: The property Sthar_Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Aciklama := Value;
end;

function TStokHareket.Get_Sthar_Satisk: Double;
begin
    Result := DefaultInterface.Sthar_Satisk;
end;

procedure TStokHareket.Set_Sthar_Satisk(Value: Double);
begin
  DefaultInterface.Set_Sthar_Satisk(Value);
end;

function TStokHareket.Get_Sthar_Malfisk: Double;
begin
    Result := DefaultInterface.Sthar_Malfisk;
end;

procedure TStokHareket.Set_Sthar_Malfisk(Value: Double);
begin
  DefaultInterface.Set_Sthar_Malfisk(Value);
end;

function TStokHareket.Get_Sthar_Ftirsip: WideString;
begin
    Result := DefaultInterface.Sthar_Ftirsip;
end;

procedure TStokHareket.Set_Sthar_Ftirsip(const Value: WideString);
  { Warning: The property Sthar_Ftirsip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Ftirsip := Value;
end;

function TStokHareket.Get_Sthar_Satisk2: Double;
begin
    Result := DefaultInterface.Sthar_Satisk2;
end;

procedure TStokHareket.Set_Sthar_Satisk2(Value: Double);
begin
  DefaultInterface.Set_Sthar_Satisk2(Value);
end;

function TStokHareket.Get_Liste_Fiat: Integer;
begin
    Result := DefaultInterface.Liste_Fiat;
end;

procedure TStokHareket.Set_Liste_Fiat(Value: Integer);
begin
  DefaultInterface.Set_Liste_Fiat(Value);
end;

function TStokHareket.Get_Sthar_Htur: WideString;
begin
    Result := DefaultInterface.Sthar_Htur;
end;

procedure TStokHareket.Set_Sthar_Htur(const Value: WideString);
  { Warning: The property Sthar_Htur has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Htur := Value;
end;

function TStokHareket.Get_Sthar_Dovtip: Integer;
begin
    Result := DefaultInterface.Sthar_Dovtip;
end;

procedure TStokHareket.Set_Sthar_Dovtip(Value: Integer);
begin
  DefaultInterface.Set_Sthar_Dovtip(Value);
end;

function TStokHareket.Get_PROMASYON_KODU: Integer;
begin
    Result := DefaultInterface.PROMASYON_KODU;
end;

procedure TStokHareket.Set_PROMASYON_KODU(Value: Integer);
begin
  DefaultInterface.Set_PROMASYON_KODU(Value);
end;

function TStokHareket.Get_Sthar_Dovfiat: Double;
begin
    Result := DefaultInterface.Sthar_Dovfiat;
end;

procedure TStokHareket.Set_Sthar_Dovfiat(Value: Double);
begin
  DefaultInterface.Set_Sthar_Dovfiat(Value);
end;

function TStokHareket.Get_Sthar_Odegun: Integer;
begin
    Result := DefaultInterface.Sthar_Odegun;
end;

procedure TStokHareket.Set_Sthar_Odegun(Value: Integer);
begin
  DefaultInterface.Set_Sthar_Odegun(Value);
end;

function TStokHareket.Get_STra_SatIsk3: Double;
begin
    Result := DefaultInterface.STra_SatIsk3;
end;

procedure TStokHareket.Set_STra_SatIsk3(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk3(Value);
end;

function TStokHareket.Get_STra_SatIsk4: Double;
begin
    Result := DefaultInterface.STra_SatIsk4;
end;

procedure TStokHareket.Set_STra_SatIsk4(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk4(Value);
end;

function TStokHareket.Get_STra_SatIsk5: Double;
begin
    Result := DefaultInterface.STra_SatIsk5;
end;

procedure TStokHareket.Set_STra_SatIsk5(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk5(Value);
end;

function TStokHareket.Get_STra_SatIsk6: Double;
begin
    Result := DefaultInterface.STra_SatIsk6;
end;

procedure TStokHareket.Set_STra_SatIsk6(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk6(Value);
end;

function TStokHareket.Get_Sthar_Bgtip: WideString;
begin
    Result := DefaultInterface.Sthar_Bgtip;
end;

procedure TStokHareket.Set_Sthar_Bgtip(const Value: WideString);
  { Warning: The property Sthar_Bgtip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Bgtip := Value;
end;

function TStokHareket.Get_Sthar_Kod1: WideString;
begin
    Result := DefaultInterface.Sthar_Kod1;
end;

procedure TStokHareket.Set_Sthar_Kod1(const Value: WideString);
  { Warning: The property Sthar_Kod1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Kod1 := Value;
end;

function TStokHareket.Get_Sthar_Kod2: WideString;
begin
    Result := DefaultInterface.Sthar_Kod2;
end;

procedure TStokHareket.Set_Sthar_Kod2(const Value: WideString);
  { Warning: The property Sthar_Kod2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Kod2 := Value;
end;

function TStokHareket.Get_Sthar_Sipnum: WideString;
begin
    Result := DefaultInterface.Sthar_Sipnum;
end;

procedure TStokHareket.Set_Sthar_Sipnum(const Value: WideString);
  { Warning: The property Sthar_Sipnum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Sipnum := Value;
end;

function TStokHareket.Get_Sthar_Carikod: WideString;
begin
    Result := DefaultInterface.Sthar_Carikod;
end;

procedure TStokHareket.Set_Sthar_Carikod(const Value: WideString);
  { Warning: The property Sthar_Carikod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Carikod := Value;
end;

function TStokHareket.Get_Sthar_Sip_Turu: WideString;
begin
    Result := DefaultInterface.Sthar_Sip_Turu;
end;

procedure TStokHareket.Set_Sthar_Sip_Turu(const Value: WideString);
  { Warning: The property Sthar_Sip_Turu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Sip_Turu := Value;
end;

function TStokHareket.Get_Plasiyer_Kodu: WideString;
begin
    Result := DefaultInterface.Plasiyer_Kodu;
end;

procedure TStokHareket.Set_Plasiyer_Kodu(const Value: WideString);
  { Warning: The property Plasiyer_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer_Kodu := Value;
end;

function TStokHareket.Get_Ekalan_Neden: WideString;
begin
    Result := DefaultInterface.Ekalan_Neden;
end;

procedure TStokHareket.Set_Ekalan_Neden(const Value: WideString);
  { Warning: The property Ekalan_Neden has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ekalan_Neden := Value;
end;

function TStokHareket.Get_Ekalan: WideString;
begin
    Result := DefaultInterface.Ekalan;
end;

procedure TStokHareket.Set_Ekalan(const Value: WideString);
  { Warning: The property Ekalan has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ekalan := Value;
end;

function TStokHareket.Get_Ekalan1: WideString;
begin
    Result := DefaultInterface.Ekalan1;
end;

procedure TStokHareket.Set_Ekalan1(const Value: WideString);
  { Warning: The property Ekalan1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ekalan1 := Value;
end;

function TStokHareket.Get_Redmik: Double;
begin
    Result := DefaultInterface.Redmik;
end;

procedure TStokHareket.Set_Redmik(Value: Double);
begin
  DefaultInterface.Set_Redmik(Value);
end;

function TStokHareket.Get_Redneden: Integer;
begin
    Result := DefaultInterface.Redneden;
end;

procedure TStokHareket.Set_Redneden(Value: Integer);
begin
  DefaultInterface.Set_Redneden(Value);
end;

function TStokHareket.Get_Sira: Integer;
begin
    Result := DefaultInterface.Sira;
end;

procedure TStokHareket.Set_Sira(Value: Integer);
begin
  DefaultInterface.Set_Sira(Value);
end;

function TStokHareket.Get_STra_SIPKONT: Integer;
begin
    Result := DefaultInterface.STra_SIPKONT;
end;

procedure TStokHareket.Set_STra_SIPKONT(Value: Integer);
begin
  DefaultInterface.Set_STra_SIPKONT(Value);
end;

function TStokHareket.Get_Ambar_Kabulno: WideString;
begin
    Result := DefaultInterface.Ambar_Kabulno;
end;

procedure TStokHareket.Set_Ambar_Kabulno(const Value: WideString);
  { Warning: The property Ambar_Kabulno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ambar_Kabulno := Value;
end;

function TStokHareket.Get_Firma_Dovtip: Integer;
begin
    Result := DefaultInterface.Firma_Dovtip;
end;

procedure TStokHareket.Set_Firma_Dovtip(Value: Integer);
begin
  DefaultInterface.Set_Firma_Dovtip(Value);
end;

function TStokHareket.Get_Firma_Dovtut: Double;
begin
    Result := DefaultInterface.Firma_Dovtut;
end;

procedure TStokHareket.Set_Firma_Dovtut(Value: Double);
begin
  DefaultInterface.Set_Firma_Dovtut(Value);
end;

function TStokHareket.Get_Firma_Dovmal: Double;
begin
    Result := DefaultInterface.Firma_Dovmal;
end;

procedure TStokHareket.Set_Firma_Dovmal(Value: Double);
begin
  DefaultInterface.Set_Firma_Dovmal(Value);
end;

function TStokHareket.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TStokHareket.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TStokHareket.Get_Irsaliye_No: WideString;
begin
    Result := DefaultInterface.Irsaliye_No;
end;

procedure TStokHareket.Set_Irsaliye_No(const Value: WideString);
  { Warning: The property Irsaliye_No has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Irsaliye_No := Value;
end;

function TStokHareket.Get_Irsaliye_Tarih: TDateTime;
begin
    Result := DefaultInterface.Irsaliye_Tarih;
end;

procedure TStokHareket.Set_Irsaliye_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Irsaliye_Tarih(Value);
end;

function TStokHareket.Get_KOSULKODU: WideString;
begin
    Result := DefaultInterface.KOSULKODU;
end;

procedure TStokHareket.Set_KOSULKODU(const Value: WideString);
  { Warning: The property KOSULKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOSULKODU := Value;
end;

function TStokHareket.Get_Ecza_fat_tip: Integer;
begin
    Result := DefaultInterface.Ecza_fat_tip;
end;

procedure TStokHareket.Set_Ecza_fat_tip(Value: Integer);
begin
  DefaultInterface.Set_Ecza_fat_tip(Value);
end;

function TStokHareket.Get_Sthar_Testar: TDateTime;
begin
    Result := DefaultInterface.Sthar_Testar;
end;

procedure TStokHareket.Set_Sthar_Testar(Value: TDateTime);
begin
  DefaultInterface.Set_Sthar_Testar(Value);
end;

function TStokHareket.Get_Olcubr: Integer;
begin
    Result := DefaultInterface.Olcubr;
end;

procedure TStokHareket.Set_Olcubr(Value: Integer);
begin
  DefaultInterface.Set_Olcubr(Value);
end;

function TStokHareket.Get_IncKeyNo: Integer;
begin
    Result := DefaultInterface.IncKeyNo;
end;

procedure TStokHareket.Set_IncKeyNo(Value: Integer);
begin
  DefaultInterface.Set_IncKeyNo(Value);
end;

function TStokHareket.Get_Vade_Tarihi: TDateTime;
begin
    Result := DefaultInterface.Vade_Tarihi;
end;

procedure TStokHareket.Set_Vade_Tarihi(Value: TDateTime);
begin
  DefaultInterface.Set_Vade_Tarihi(Value);
end;

function TStokHareket.Get_Liste_No: WideString;
begin
    Result := DefaultInterface.Liste_No;
end;

procedure TStokHareket.Set_Liste_No(const Value: WideString);
  { Warning: The property Liste_No has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Liste_No := Value;
end;

function TStokHareket.Get_Baglanti_No: Integer;
begin
    Result := DefaultInterface.Baglanti_No;
end;

procedure TStokHareket.Set_Baglanti_No(Value: Integer);
begin
  DefaultInterface.Set_Baglanti_No(Value);
end;

function TStokHareket.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TStokHareket.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TStokHareket.Get_Muh_Kodu: WideString;
begin
    Result := DefaultInterface.Muh_Kodu;
end;

procedure TStokHareket.Set_Muh_Kodu(const Value: WideString);
  { Warning: The property Muh_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Muh_Kodu := Value;
end;

function TStokHareket.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TStokHareket.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TStokHareket.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TStokHareket.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TStokHareket.Get_F_Yedek3: Double;
begin
    Result := DefaultInterface.F_Yedek3;
end;

procedure TStokHareket.Set_F_Yedek3(Value: Double);
begin
  DefaultInterface.Set_F_Yedek3(Value);
end;

function TStokHareket.Get_F_Yedek4: Double;
begin
    Result := DefaultInterface.F_Yedek4;
end;

procedure TStokHareket.Set_F_Yedek4(Value: Double);
begin
  DefaultInterface.Set_F_Yedek4(Value);
end;

function TStokHareket.Get_F_Yedek5: Double;
begin
    Result := DefaultInterface.F_Yedek5;
end;

procedure TStokHareket.Set_F_Yedek5(Value: Double);
begin
  DefaultInterface.Set_F_Yedek5(Value);
end;

function TStokHareket.Get_C_Yedek6: WideString;
begin
    Result := DefaultInterface.C_Yedek6;
end;

procedure TStokHareket.Set_C_Yedek6(const Value: WideString);
  { Warning: The property C_Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek6 := Value;
end;

function TStokHareket.Get_B_Yedek7: Integer;
begin
    Result := DefaultInterface.B_Yedek7;
end;

procedure TStokHareket.Set_B_Yedek7(Value: Integer);
begin
  DefaultInterface.Set_B_Yedek7(Value);
end;

function TStokHareket.Get_I_Yedek8: Integer;
begin
    Result := DefaultInterface.I_Yedek8;
end;

procedure TStokHareket.Set_I_Yedek8(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek8(Value);
end;

function TStokHareket.Get_L_Yedek9: Integer;
begin
    Result := DefaultInterface.L_Yedek9;
end;

procedure TStokHareket.Set_L_Yedek9(Value: Integer);
begin
  DefaultInterface.Set_L_Yedek9(Value);
end;

function TStokHareket.Get_D_YEDEK10: TDateTime;
begin
    Result := DefaultInterface.D_YEDEK10;
end;

procedure TStokHareket.Set_D_YEDEK10(Value: TDateTime);
begin
  DefaultInterface.Set_D_YEDEK10(Value);
end;

function TStokHareket.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TStokHareket.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TStokHareket.Get_FIYATTARIHI: TDateTime;
begin
    Result := DefaultInterface.FIYATTARIHI;
end;

procedure TStokHareket.Set_FIYATTARIHI(Value: TDateTime);
begin
  DefaultInterface.Set_FIYATTARIHI(Value);
end;

function TStokHareket.Get_KOSULTARIHI: TDateTime;
begin
    Result := DefaultInterface.KOSULTARIHI;
end;

procedure TStokHareket.Set_KOSULTARIHI(Value: TDateTime);
begin
  DefaultInterface.Set_KOSULTARIHI(Value);
end;

function TStokHareket.Get_Satisk1tip: Integer;
begin
    Result := DefaultInterface.Satisk1tip;
end;

procedure TStokHareket.Set_Satisk1tip(Value: Integer);
begin
  DefaultInterface.Set_Satisk1tip(Value);
end;

function TStokHareket.Get_Satisk2tip: Integer;
begin
    Result := DefaultInterface.Satisk2tip;
end;

procedure TStokHareket.Set_Satisk2tip(Value: Integer);
begin
  DefaultInterface.Set_Satisk2tip(Value);
end;

function TStokHareket.Get_Satisk3tip: Integer;
begin
    Result := DefaultInterface.Satisk3tip;
end;

procedure TStokHareket.Set_Satisk3tip(Value: Integer);
begin
  DefaultInterface.Set_Satisk3tip(Value);
end;

function TStokHareket.Get_Satisk4tip: Integer;
begin
    Result := DefaultInterface.Satisk4tip;
end;

procedure TStokHareket.Set_Satisk4tip(Value: Integer);
begin
  DefaultInterface.Set_Satisk4tip(Value);
end;

function TStokHareket.Get_Satisk5tip: Integer;
begin
    Result := DefaultInterface.Satisk5tip;
end;

procedure TStokHareket.Set_Satisk5tip(Value: Integer);
begin
  DefaultInterface.Set_Satisk5tip(Value);
end;

function TStokHareket.Get_Satisk6tip: Integer;
begin
    Result := DefaultInterface.Satisk6tip;
end;

procedure TStokHareket.Set_Satisk6tip(Value: Integer);
begin
  DefaultInterface.Set_Satisk6tip(Value);
end;

function TStokHareket.Get_EXPORTTYPE: Integer;
begin
    Result := DefaultInterface.EXPORTTYPE;
end;

procedure TStokHareket.Set_EXPORTTYPE(Value: Integer);
begin
  DefaultInterface.Set_EXPORTTYPE(Value);
end;

function TStokHareket.Get_Exportmik: Double;
begin
    Result := DefaultInterface.Exportmik;
end;

procedure TStokHareket.Set_Exportmik(Value: Double);
begin
  DefaultInterface.Set_Exportmik(Value);
end;

function TStokHareket.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TStokHareket.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TStokHareket.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TStokHareket.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TStokHareket.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TStokHareket.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

function TStokHareket.Get_KKMalF: Double;
begin
    Result := DefaultInterface.KKMalF;
end;

procedure TStokHareket.Set_KKMalF(Value: Double);
begin
  DefaultInterface.Set_KKMalF(Value);
end;

function TStokHareket.Get_Stra_IrsKont: Integer;
begin
    Result := DefaultInterface.Stra_IrsKont;
end;

procedure TStokHareket.Set_Stra_IrsKont(Value: Integer);
begin
  DefaultInterface.Set_Stra_IrsKont(Value);
end;

function TStokHareket.Get_YapKod: WideString;
begin
    Result := DefaultInterface.YapKod;
end;

procedure TStokHareket.Set_YapKod(const Value: WideString);
  { Warning: The property YapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YapKod := Value;
end;

function TStokHareket.Get_GirisDepoKodu: SYSINT;
begin
    Result := DefaultInterface.GirisDepoKodu;
end;

procedure TStokHareket.Set_GirisDepoKodu(Value: SYSINT);
begin
  DefaultInterface.Set_GirisDepoKodu(Value);
end;

procedure TStokHareket.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TStokHareket.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TStokHareket.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TStokHareket.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TStokHareket.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TStokHareket.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TStokHareket.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

procedure TStokHareket.SahalariTemizle;
begin
  DefaultInterface.SahalariTemizle;
end;

procedure TStokHareket.ReceteliKayit(UretSonDepo: TUretSonDepo; YariMamuldeStokKullan: WordBool; 
                                     MaliyetlerCarpilsin: WordBool);
begin
  DefaultInterface.ReceteliKayit(UretSonDepo, YariMamuldeStokKullan, MaliyetlerCarpilsin);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TStokHareketProperties.Create(AServer: TStokHareket);
begin
  inherited Create;
  FServer := AServer;
end;

function TStokHareketProperties.GetDefaultInterface: IStokHareket;
begin
  Result := FServer.DefaultInterface;
end;

function TStokHareketProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TStokHareketProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TStokHareketProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TStokHareketProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TStokHareketProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TStokHareketProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TStokHareketProperties.Get_SilmeIcinGerekliSahalar: WideString;
begin
    Result := DefaultInterface.SilmeIcinGerekliSahalar;
end;

function TStokHareketProperties.Get_SonKayitNoAl: WordBool;
begin
    Result := DefaultInterface.SonKayitNoAl;
end;

procedure TStokHareketProperties.Set_SonKayitNoAl(Value: WordBool);
begin
  DefaultInterface.Set_SonKayitNoAl(Value);
end;

function TStokHareketProperties.Get_Stok_Kodu: WideString;
begin
    Result := DefaultInterface.Stok_Kodu;
end;

procedure TStokHareketProperties.Set_Stok_Kodu(const Value: WideString);
  { Warning: The property Stok_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stok_Kodu := Value;
end;

function TStokHareketProperties.Get_Fisno: WideString;
begin
    Result := DefaultInterface.Fisno;
end;

procedure TStokHareketProperties.Set_Fisno(const Value: WideString);
  { Warning: The property Fisno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Fisno := Value;
end;

function TStokHareketProperties.Get_Sthar_Gcmik: Double;
begin
    Result := DefaultInterface.Sthar_Gcmik;
end;

procedure TStokHareketProperties.Set_Sthar_Gcmik(Value: Double);
begin
  DefaultInterface.Set_Sthar_Gcmik(Value);
end;

function TStokHareketProperties.Get_Sthar_Gcmik2: Double;
begin
    Result := DefaultInterface.Sthar_Gcmik2;
end;

procedure TStokHareketProperties.Set_Sthar_Gcmik2(Value: Double);
begin
  DefaultInterface.Set_Sthar_Gcmik2(Value);
end;

function TStokHareketProperties.Get_CEVRIM: Double;
begin
    Result := DefaultInterface.CEVRIM;
end;

procedure TStokHareketProperties.Set_CEVRIM(Value: Double);
begin
  DefaultInterface.Set_CEVRIM(Value);
end;

function TStokHareketProperties.Get_Sthar_Gckod: WideString;
begin
    Result := DefaultInterface.Sthar_Gckod;
end;

procedure TStokHareketProperties.Set_Sthar_Gckod(const Value: WideString);
  { Warning: The property Sthar_Gckod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Gckod := Value;
end;

function TStokHareketProperties.Get_Sthar_Tarih: TDateTime;
begin
    Result := DefaultInterface.Sthar_Tarih;
end;

procedure TStokHareketProperties.Set_Sthar_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Sthar_Tarih(Value);
end;

function TStokHareketProperties.Get_Sthar_Nf: Double;
begin
    Result := DefaultInterface.Sthar_Nf;
end;

procedure TStokHareketProperties.Set_Sthar_Nf(Value: Double);
begin
  DefaultInterface.Set_Sthar_Nf(Value);
end;

function TStokHareketProperties.Get_Sthar_Bf: Double;
begin
    Result := DefaultInterface.Sthar_Bf;
end;

procedure TStokHareketProperties.Set_Sthar_Bf(Value: Double);
begin
  DefaultInterface.Set_Sthar_Bf(Value);
end;

function TStokHareketProperties.Get_Sthar_Iaf: Double;
begin
    Result := DefaultInterface.Sthar_Iaf;
end;

procedure TStokHareketProperties.Set_Sthar_Iaf(Value: Double);
begin
  DefaultInterface.Set_Sthar_Iaf(Value);
end;

function TStokHareketProperties.Get_Sthar_Kdv: Double;
begin
    Result := DefaultInterface.Sthar_Kdv;
end;

procedure TStokHareketProperties.Set_Sthar_Kdv(Value: Double);
begin
  DefaultInterface.Set_Sthar_Kdv(Value);
end;

function TStokHareketProperties.Get_DEPO_KODU: Integer;
begin
    Result := DefaultInterface.DEPO_KODU;
end;

procedure TStokHareketProperties.Set_DEPO_KODU(Value: Integer);
begin
  DefaultInterface.Set_DEPO_KODU(Value);
end;

function TStokHareketProperties.Get_Sthar_Aciklama: WideString;
begin
    Result := DefaultInterface.Sthar_Aciklama;
end;

procedure TStokHareketProperties.Set_Sthar_Aciklama(const Value: WideString);
  { Warning: The property Sthar_Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Aciklama := Value;
end;

function TStokHareketProperties.Get_Sthar_Satisk: Double;
begin
    Result := DefaultInterface.Sthar_Satisk;
end;

procedure TStokHareketProperties.Set_Sthar_Satisk(Value: Double);
begin
  DefaultInterface.Set_Sthar_Satisk(Value);
end;

function TStokHareketProperties.Get_Sthar_Malfisk: Double;
begin
    Result := DefaultInterface.Sthar_Malfisk;
end;

procedure TStokHareketProperties.Set_Sthar_Malfisk(Value: Double);
begin
  DefaultInterface.Set_Sthar_Malfisk(Value);
end;

function TStokHareketProperties.Get_Sthar_Ftirsip: WideString;
begin
    Result := DefaultInterface.Sthar_Ftirsip;
end;

procedure TStokHareketProperties.Set_Sthar_Ftirsip(const Value: WideString);
  { Warning: The property Sthar_Ftirsip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Ftirsip := Value;
end;

function TStokHareketProperties.Get_Sthar_Satisk2: Double;
begin
    Result := DefaultInterface.Sthar_Satisk2;
end;

procedure TStokHareketProperties.Set_Sthar_Satisk2(Value: Double);
begin
  DefaultInterface.Set_Sthar_Satisk2(Value);
end;

function TStokHareketProperties.Get_Liste_Fiat: Integer;
begin
    Result := DefaultInterface.Liste_Fiat;
end;

procedure TStokHareketProperties.Set_Liste_Fiat(Value: Integer);
begin
  DefaultInterface.Set_Liste_Fiat(Value);
end;

function TStokHareketProperties.Get_Sthar_Htur: WideString;
begin
    Result := DefaultInterface.Sthar_Htur;
end;

procedure TStokHareketProperties.Set_Sthar_Htur(const Value: WideString);
  { Warning: The property Sthar_Htur has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Htur := Value;
end;

function TStokHareketProperties.Get_Sthar_Dovtip: Integer;
begin
    Result := DefaultInterface.Sthar_Dovtip;
end;

procedure TStokHareketProperties.Set_Sthar_Dovtip(Value: Integer);
begin
  DefaultInterface.Set_Sthar_Dovtip(Value);
end;

function TStokHareketProperties.Get_PROMASYON_KODU: Integer;
begin
    Result := DefaultInterface.PROMASYON_KODU;
end;

procedure TStokHareketProperties.Set_PROMASYON_KODU(Value: Integer);
begin
  DefaultInterface.Set_PROMASYON_KODU(Value);
end;

function TStokHareketProperties.Get_Sthar_Dovfiat: Double;
begin
    Result := DefaultInterface.Sthar_Dovfiat;
end;

procedure TStokHareketProperties.Set_Sthar_Dovfiat(Value: Double);
begin
  DefaultInterface.Set_Sthar_Dovfiat(Value);
end;

function TStokHareketProperties.Get_Sthar_Odegun: Integer;
begin
    Result := DefaultInterface.Sthar_Odegun;
end;

procedure TStokHareketProperties.Set_Sthar_Odegun(Value: Integer);
begin
  DefaultInterface.Set_Sthar_Odegun(Value);
end;

function TStokHareketProperties.Get_STra_SatIsk3: Double;
begin
    Result := DefaultInterface.STra_SatIsk3;
end;

procedure TStokHareketProperties.Set_STra_SatIsk3(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk3(Value);
end;

function TStokHareketProperties.Get_STra_SatIsk4: Double;
begin
    Result := DefaultInterface.STra_SatIsk4;
end;

procedure TStokHareketProperties.Set_STra_SatIsk4(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk4(Value);
end;

function TStokHareketProperties.Get_STra_SatIsk5: Double;
begin
    Result := DefaultInterface.STra_SatIsk5;
end;

procedure TStokHareketProperties.Set_STra_SatIsk5(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk5(Value);
end;

function TStokHareketProperties.Get_STra_SatIsk6: Double;
begin
    Result := DefaultInterface.STra_SatIsk6;
end;

procedure TStokHareketProperties.Set_STra_SatIsk6(Value: Double);
begin
  DefaultInterface.Set_STra_SatIsk6(Value);
end;

function TStokHareketProperties.Get_Sthar_Bgtip: WideString;
begin
    Result := DefaultInterface.Sthar_Bgtip;
end;

procedure TStokHareketProperties.Set_Sthar_Bgtip(const Value: WideString);
  { Warning: The property Sthar_Bgtip has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Bgtip := Value;
end;

function TStokHareketProperties.Get_Sthar_Kod1: WideString;
begin
    Result := DefaultInterface.Sthar_Kod1;
end;

procedure TStokHareketProperties.Set_Sthar_Kod1(const Value: WideString);
  { Warning: The property Sthar_Kod1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Kod1 := Value;
end;

function TStokHareketProperties.Get_Sthar_Kod2: WideString;
begin
    Result := DefaultInterface.Sthar_Kod2;
end;

procedure TStokHareketProperties.Set_Sthar_Kod2(const Value: WideString);
  { Warning: The property Sthar_Kod2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Kod2 := Value;
end;

function TStokHareketProperties.Get_Sthar_Sipnum: WideString;
begin
    Result := DefaultInterface.Sthar_Sipnum;
end;

procedure TStokHareketProperties.Set_Sthar_Sipnum(const Value: WideString);
  { Warning: The property Sthar_Sipnum has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Sipnum := Value;
end;

function TStokHareketProperties.Get_Sthar_Carikod: WideString;
begin
    Result := DefaultInterface.Sthar_Carikod;
end;

procedure TStokHareketProperties.Set_Sthar_Carikod(const Value: WideString);
  { Warning: The property Sthar_Carikod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Carikod := Value;
end;

function TStokHareketProperties.Get_Sthar_Sip_Turu: WideString;
begin
    Result := DefaultInterface.Sthar_Sip_Turu;
end;

procedure TStokHareketProperties.Set_Sthar_Sip_Turu(const Value: WideString);
  { Warning: The property Sthar_Sip_Turu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Sthar_Sip_Turu := Value;
end;

function TStokHareketProperties.Get_Plasiyer_Kodu: WideString;
begin
    Result := DefaultInterface.Plasiyer_Kodu;
end;

procedure TStokHareketProperties.Set_Plasiyer_Kodu(const Value: WideString);
  { Warning: The property Plasiyer_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer_Kodu := Value;
end;

function TStokHareketProperties.Get_Ekalan_Neden: WideString;
begin
    Result := DefaultInterface.Ekalan_Neden;
end;

procedure TStokHareketProperties.Set_Ekalan_Neden(const Value: WideString);
  { Warning: The property Ekalan_Neden has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ekalan_Neden := Value;
end;

function TStokHareketProperties.Get_Ekalan: WideString;
begin
    Result := DefaultInterface.Ekalan;
end;

procedure TStokHareketProperties.Set_Ekalan(const Value: WideString);
  { Warning: The property Ekalan has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ekalan := Value;
end;

function TStokHareketProperties.Get_Ekalan1: WideString;
begin
    Result := DefaultInterface.Ekalan1;
end;

procedure TStokHareketProperties.Set_Ekalan1(const Value: WideString);
  { Warning: The property Ekalan1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ekalan1 := Value;
end;

function TStokHareketProperties.Get_Redmik: Double;
begin
    Result := DefaultInterface.Redmik;
end;

procedure TStokHareketProperties.Set_Redmik(Value: Double);
begin
  DefaultInterface.Set_Redmik(Value);
end;

function TStokHareketProperties.Get_Redneden: Integer;
begin
    Result := DefaultInterface.Redneden;
end;

procedure TStokHareketProperties.Set_Redneden(Value: Integer);
begin
  DefaultInterface.Set_Redneden(Value);
end;

function TStokHareketProperties.Get_Sira: Integer;
begin
    Result := DefaultInterface.Sira;
end;

procedure TStokHareketProperties.Set_Sira(Value: Integer);
begin
  DefaultInterface.Set_Sira(Value);
end;

function TStokHareketProperties.Get_STra_SIPKONT: Integer;
begin
    Result := DefaultInterface.STra_SIPKONT;
end;

procedure TStokHareketProperties.Set_STra_SIPKONT(Value: Integer);
begin
  DefaultInterface.Set_STra_SIPKONT(Value);
end;

function TStokHareketProperties.Get_Ambar_Kabulno: WideString;
begin
    Result := DefaultInterface.Ambar_Kabulno;
end;

procedure TStokHareketProperties.Set_Ambar_Kabulno(const Value: WideString);
  { Warning: The property Ambar_Kabulno has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ambar_Kabulno := Value;
end;

function TStokHareketProperties.Get_Firma_Dovtip: Integer;
begin
    Result := DefaultInterface.Firma_Dovtip;
end;

procedure TStokHareketProperties.Set_Firma_Dovtip(Value: Integer);
begin
  DefaultInterface.Set_Firma_Dovtip(Value);
end;

function TStokHareketProperties.Get_Firma_Dovtut: Double;
begin
    Result := DefaultInterface.Firma_Dovtut;
end;

procedure TStokHareketProperties.Set_Firma_Dovtut(Value: Double);
begin
  DefaultInterface.Set_Firma_Dovtut(Value);
end;

function TStokHareketProperties.Get_Firma_Dovmal: Double;
begin
    Result := DefaultInterface.Firma_Dovmal;
end;

procedure TStokHareketProperties.Set_Firma_Dovmal(Value: Double);
begin
  DefaultInterface.Set_Firma_Dovmal(Value);
end;

function TStokHareketProperties.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TStokHareketProperties.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TStokHareketProperties.Get_Irsaliye_No: WideString;
begin
    Result := DefaultInterface.Irsaliye_No;
end;

procedure TStokHareketProperties.Set_Irsaliye_No(const Value: WideString);
  { Warning: The property Irsaliye_No has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Irsaliye_No := Value;
end;

function TStokHareketProperties.Get_Irsaliye_Tarih: TDateTime;
begin
    Result := DefaultInterface.Irsaliye_Tarih;
end;

procedure TStokHareketProperties.Set_Irsaliye_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Irsaliye_Tarih(Value);
end;

function TStokHareketProperties.Get_KOSULKODU: WideString;
begin
    Result := DefaultInterface.KOSULKODU;
end;

procedure TStokHareketProperties.Set_KOSULKODU(const Value: WideString);
  { Warning: The property KOSULKODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOSULKODU := Value;
end;

function TStokHareketProperties.Get_Ecza_fat_tip: Integer;
begin
    Result := DefaultInterface.Ecza_fat_tip;
end;

procedure TStokHareketProperties.Set_Ecza_fat_tip(Value: Integer);
begin
  DefaultInterface.Set_Ecza_fat_tip(Value);
end;

function TStokHareketProperties.Get_Sthar_Testar: TDateTime;
begin
    Result := DefaultInterface.Sthar_Testar;
end;

procedure TStokHareketProperties.Set_Sthar_Testar(Value: TDateTime);
begin
  DefaultInterface.Set_Sthar_Testar(Value);
end;

function TStokHareketProperties.Get_Olcubr: Integer;
begin
    Result := DefaultInterface.Olcubr;
end;

procedure TStokHareketProperties.Set_Olcubr(Value: Integer);
begin
  DefaultInterface.Set_Olcubr(Value);
end;

function TStokHareketProperties.Get_IncKeyNo: Integer;
begin
    Result := DefaultInterface.IncKeyNo;
end;

procedure TStokHareketProperties.Set_IncKeyNo(Value: Integer);
begin
  DefaultInterface.Set_IncKeyNo(Value);
end;

function TStokHareketProperties.Get_Vade_Tarihi: TDateTime;
begin
    Result := DefaultInterface.Vade_Tarihi;
end;

procedure TStokHareketProperties.Set_Vade_Tarihi(Value: TDateTime);
begin
  DefaultInterface.Set_Vade_Tarihi(Value);
end;

function TStokHareketProperties.Get_Liste_No: WideString;
begin
    Result := DefaultInterface.Liste_No;
end;

procedure TStokHareketProperties.Set_Liste_No(const Value: WideString);
  { Warning: The property Liste_No has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Liste_No := Value;
end;

function TStokHareketProperties.Get_Baglanti_No: Integer;
begin
    Result := DefaultInterface.Baglanti_No;
end;

procedure TStokHareketProperties.Set_Baglanti_No(Value: Integer);
begin
  DefaultInterface.Set_Baglanti_No(Value);
end;

function TStokHareketProperties.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TStokHareketProperties.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TStokHareketProperties.Get_Muh_Kodu: WideString;
begin
    Result := DefaultInterface.Muh_Kodu;
end;

procedure TStokHareketProperties.Set_Muh_Kodu(const Value: WideString);
  { Warning: The property Muh_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Muh_Kodu := Value;
end;

function TStokHareketProperties.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TStokHareketProperties.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TStokHareketProperties.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TStokHareketProperties.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TStokHareketProperties.Get_F_Yedek3: Double;
begin
    Result := DefaultInterface.F_Yedek3;
end;

procedure TStokHareketProperties.Set_F_Yedek3(Value: Double);
begin
  DefaultInterface.Set_F_Yedek3(Value);
end;

function TStokHareketProperties.Get_F_Yedek4: Double;
begin
    Result := DefaultInterface.F_Yedek4;
end;

procedure TStokHareketProperties.Set_F_Yedek4(Value: Double);
begin
  DefaultInterface.Set_F_Yedek4(Value);
end;

function TStokHareketProperties.Get_F_Yedek5: Double;
begin
    Result := DefaultInterface.F_Yedek5;
end;

procedure TStokHareketProperties.Set_F_Yedek5(Value: Double);
begin
  DefaultInterface.Set_F_Yedek5(Value);
end;

function TStokHareketProperties.Get_C_Yedek6: WideString;
begin
    Result := DefaultInterface.C_Yedek6;
end;

procedure TStokHareketProperties.Set_C_Yedek6(const Value: WideString);
  { Warning: The property C_Yedek6 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek6 := Value;
end;

function TStokHareketProperties.Get_B_Yedek7: Integer;
begin
    Result := DefaultInterface.B_Yedek7;
end;

procedure TStokHareketProperties.Set_B_Yedek7(Value: Integer);
begin
  DefaultInterface.Set_B_Yedek7(Value);
end;

function TStokHareketProperties.Get_I_Yedek8: Integer;
begin
    Result := DefaultInterface.I_Yedek8;
end;

procedure TStokHareketProperties.Set_I_Yedek8(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek8(Value);
end;

function TStokHareketProperties.Get_L_Yedek9: Integer;
begin
    Result := DefaultInterface.L_Yedek9;
end;

procedure TStokHareketProperties.Set_L_Yedek9(Value: Integer);
begin
  DefaultInterface.Set_L_Yedek9(Value);
end;

function TStokHareketProperties.Get_D_YEDEK10: TDateTime;
begin
    Result := DefaultInterface.D_YEDEK10;
end;

procedure TStokHareketProperties.Set_D_YEDEK10(Value: TDateTime);
begin
  DefaultInterface.Set_D_YEDEK10(Value);
end;

function TStokHareketProperties.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TStokHareketProperties.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TStokHareketProperties.Get_FIYATTARIHI: TDateTime;
begin
    Result := DefaultInterface.FIYATTARIHI;
end;

procedure TStokHareketProperties.Set_FIYATTARIHI(Value: TDateTime);
begin
  DefaultInterface.Set_FIYATTARIHI(Value);
end;

function TStokHareketProperties.Get_KOSULTARIHI: TDateTime;
begin
    Result := DefaultInterface.KOSULTARIHI;
end;

procedure TStokHareketProperties.Set_KOSULTARIHI(Value: TDateTime);
begin
  DefaultInterface.Set_KOSULTARIHI(Value);
end;

function TStokHareketProperties.Get_Satisk1tip: Integer;
begin
    Result := DefaultInterface.Satisk1tip;
end;

procedure TStokHareketProperties.Set_Satisk1tip(Value: Integer);
begin
  DefaultInterface.Set_Satisk1tip(Value);
end;

function TStokHareketProperties.Get_Satisk2tip: Integer;
begin
    Result := DefaultInterface.Satisk2tip;
end;

procedure TStokHareketProperties.Set_Satisk2tip(Value: Integer);
begin
  DefaultInterface.Set_Satisk2tip(Value);
end;

function TStokHareketProperties.Get_Satisk3tip: Integer;
begin
    Result := DefaultInterface.Satisk3tip;
end;

procedure TStokHareketProperties.Set_Satisk3tip(Value: Integer);
begin
  DefaultInterface.Set_Satisk3tip(Value);
end;

function TStokHareketProperties.Get_Satisk4tip: Integer;
begin
    Result := DefaultInterface.Satisk4tip;
end;

procedure TStokHareketProperties.Set_Satisk4tip(Value: Integer);
begin
  DefaultInterface.Set_Satisk4tip(Value);
end;

function TStokHareketProperties.Get_Satisk5tip: Integer;
begin
    Result := DefaultInterface.Satisk5tip;
end;

procedure TStokHareketProperties.Set_Satisk5tip(Value: Integer);
begin
  DefaultInterface.Set_Satisk5tip(Value);
end;

function TStokHareketProperties.Get_Satisk6tip: Integer;
begin
    Result := DefaultInterface.Satisk6tip;
end;

procedure TStokHareketProperties.Set_Satisk6tip(Value: Integer);
begin
  DefaultInterface.Set_Satisk6tip(Value);
end;

function TStokHareketProperties.Get_EXPORTTYPE: Integer;
begin
    Result := DefaultInterface.EXPORTTYPE;
end;

procedure TStokHareketProperties.Set_EXPORTTYPE(Value: Integer);
begin
  DefaultInterface.Set_EXPORTTYPE(Value);
end;

function TStokHareketProperties.Get_Exportmik: Double;
begin
    Result := DefaultInterface.Exportmik;
end;

procedure TStokHareketProperties.Set_Exportmik(Value: Double);
begin
  DefaultInterface.Set_Exportmik(Value);
end;

function TStokHareketProperties.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TStokHareketProperties.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TStokHareketProperties.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TStokHareketProperties.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TStokHareketProperties.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TStokHareketProperties.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

function TStokHareketProperties.Get_KKMalF: Double;
begin
    Result := DefaultInterface.KKMalF;
end;

procedure TStokHareketProperties.Set_KKMalF(Value: Double);
begin
  DefaultInterface.Set_KKMalF(Value);
end;

function TStokHareketProperties.Get_Stra_IrsKont: Integer;
begin
    Result := DefaultInterface.Stra_IrsKont;
end;

procedure TStokHareketProperties.Set_Stra_IrsKont(Value: Integer);
begin
  DefaultInterface.Set_Stra_IrsKont(Value);
end;

function TStokHareketProperties.Get_YapKod: WideString;
begin
    Result := DefaultInterface.YapKod;
end;

procedure TStokHareketProperties.Set_YapKod(const Value: WideString);
  { Warning: The property YapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YapKod := Value;
end;

function TStokHareketProperties.Get_GirisDepoKodu: SYSINT;
begin
    Result := DefaultInterface.GirisDepoKodu;
end;

procedure TStokHareketProperties.Set_GirisDepoKodu(Value: SYSINT);
begin
  DefaultInterface.Set_GirisDepoKodu(Value);
end;

{$ENDIF}

class function CoBasim.Create: IBasim;
begin
  Result := CreateComObject(CLASS_Basim) as IBasim;
end;

class function CoBasim.CreateRemote(const MachineName: string): IBasim;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Basim) as IBasim;
end;

procedure TBasim.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2ED6DDFB-5910-4B1F-8AA8-948FB12E8171}';
    IntfIID:   '{FC60620E-E49F-4028-A3A6-6D4D7E7D01FC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBasim.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IBasim;
  end;
end;

procedure TBasim.ConnectTo(svrIntf: IBasim);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TBasim.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TBasim.GetDefaultInterface: IBasim;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TBasim.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TBasimProperties.Create(Self);
{$ENDIF}
end;

destructor TBasim.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TBasim.GetServerProperties: TBasimProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TBasim.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TBasim.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TBasim.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TBasim.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TBasim.FaturaBasim(FaturaTipi: TFaturaTip; const FatNo: WideString; 
                            const CariKodu: WideString): WordBool;
begin
  Result := DefaultInterface.FaturaBasim(FaturaTipi, FatNo, CariKodu);
end;

function TBasim.FaturaBasimDizaynNo(FaturaTipi: TFaturaTip; const FaturaNo: WideString; 
                                    const CariKodu: WideString; DizaynNo: Integer): WordBool;
begin
  Result := DefaultInterface.FaturaBasimDizaynNo(FaturaTipi, FaturaNo, CariKodu, DizaynNo);
end;

function TBasim.KantarBasim(TartimNumarasi: Integer): WordBool;
begin
  Result := DefaultInterface.KantarBasim(TartimNumarasi);
end;

procedure TBasim.MustahsilBasim(const BelgeNo: WideString);
begin
  DefaultInterface.MustahsilBasim(BelgeNo);
end;

function TBasim.NetBasimDizaynNo(FaturaTipi: TFaturaTip; const FaturaNo: WideString; 
                                 const CariKodu: WideString; DizaynNo: Integer; 
                                 out ResStream: WideString): WordBool;
begin
  Result := DefaultInterface.NetBasimDizaynNo(FaturaTipi, FaturaNo, CariKodu, DizaynNo, ResStream);
end;

procedure TBasim.CekSenetBasim(BelgeTipi: TCekSenType; const BelgeNo: WideString);
begin
  DefaultInterface.CekSenetBasim(BelgeTipi, BelgeNo);
end;

procedure TBasim.BordroBasim(BelgeTipi: TCekSenType; const BelgeNo: WideString);
begin
  DefaultInterface.BordroBasim(BelgeTipi, BelgeNo);
end;

procedure TBasim.CekSenetBasimDizaynNo(BelgeTipi: TCekSenType; const BelgeNo: WideString; 
                                       DizaynNo: Integer);
begin
  DefaultInterface.CekSenetBasimDizaynNo(BelgeTipi, BelgeNo, DizaynNo);
end;

procedure TBasim.IrsFatBarkodBas(const Fatura: IFatura; const DizaynKodu: WideString; 
                                 BasimAdeti: Integer);
begin
  DefaultInterface.IrsFatBarkodBas(Fatura, DizaynKodu, BasimAdeti);
end;

procedure TBasim.StokBarkodBas(const EtiketBilgi: IBarkodBilgi);
begin
  DefaultInterface.StokBarkodBas(EtiketBilgi);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TBasimProperties.Create(AServer: TBasim);
begin
  inherited Create;
  FServer := AServer;
end;

function TBasimProperties.GetDefaultInterface: IBasim;
begin
  Result := FServer.DefaultInterface;
end;

function TBasimProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TBasimProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TBasimProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TBasimProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

{$ENDIF}

class function CoCariHareket.Create: ICariHareket;
begin
  Result := CreateComObject(CLASS_CariHareket) as ICariHareket;
end;

class function CoCariHareket.CreateRemote(const MachineName: string): ICariHareket;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CariHareket) as ICariHareket;
end;

procedure TCariHareket.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7AA59580-7A91-4BBE-A73C-B32388A8DA6A}';
    IntfIID:   '{9D4E9A01-E84E-42D2-AFFB-8200AB112EF9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCariHareket.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICariHareket;
  end;
end;

procedure TCariHareket.ConnectTo(svrIntf: ICariHareket);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCariHareket.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCariHareket.GetDefaultInterface: ICariHareket;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TCariHareket.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCariHareketProperties.Create(Self);
{$ENDIF}
end;

destructor TCariHareket.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCariHareket.GetServerProperties: TCariHareketProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCariHareket.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TCariHareket.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCariHareket.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TCariHareket.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TCariHareket.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TCariHareket.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TCariHareket.Get_SilmeIcinGerekliSahalar: WideString;
begin
    Result := DefaultInterface.SilmeIcinGerekliSahalar;
end;

function TCariHareket.Get_SonKayitNoAl: WordBool;
begin
    Result := DefaultInterface.SonKayitNoAl;
end;

procedure TCariHareket.Set_SonKayitNoAl(Value: WordBool);
begin
  DefaultInterface.Set_SonKayitNoAl(Value);
end;

function TCariHareket.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TCariHareket.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TCariHareket.Get_CARI_KOD: WideString;
begin
    Result := DefaultInterface.CARI_KOD;
end;

procedure TCariHareket.Set_CARI_KOD(const Value: WideString);
  { Warning: The property CARI_KOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_KOD := Value;
end;

function TCariHareket.Get_Tarih: TDateTime;
begin
    Result := DefaultInterface.Tarih;
end;

procedure TCariHareket.Set_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih(Value);
end;

function TCariHareket.Get_Vade_Tarihi: TDateTime;
begin
    Result := DefaultInterface.Vade_Tarihi;
end;

procedure TCariHareket.Set_Vade_Tarihi(Value: TDateTime);
begin
  DefaultInterface.Set_Vade_Tarihi(Value);
end;

function TCariHareket.Get_Belge_No: WideString;
begin
    Result := DefaultInterface.Belge_No;
end;

procedure TCariHareket.Set_Belge_No(const Value: WideString);
  { Warning: The property Belge_No has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Belge_No := Value;
end;

function TCariHareket.Get_Aciklama: WideString;
begin
    Result := DefaultInterface.Aciklama;
end;

procedure TCariHareket.Set_Aciklama(const Value: WideString);
  { Warning: The property Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama := Value;
end;

function TCariHareket.Get_Hka: WideString;
begin
    Result := DefaultInterface.Hka;
end;

procedure TCariHareket.Set_Hka(const Value: WideString);
  { Warning: The property Hka has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hka := Value;
end;

function TCariHareket.Get_Borc: Double;
begin
    Result := DefaultInterface.Borc;
end;

procedure TCariHareket.Set_Borc(Value: Double);
begin
  DefaultInterface.Set_Borc(Value);
end;

function TCariHareket.Get_Alacak: Double;
begin
    Result := DefaultInterface.Alacak;
end;

procedure TCariHareket.Set_Alacak(Value: Double);
begin
  DefaultInterface.Set_Alacak(Value);
end;

function TCariHareket.Get_Bakiye: Double;
begin
    Result := DefaultInterface.Bakiye;
end;

procedure TCariHareket.Set_Bakiye(Value: Double);
begin
  DefaultInterface.Set_Bakiye(Value);
end;

function TCariHareket.Get_DOVIZ_TURU: Integer;
begin
    Result := DefaultInterface.DOVIZ_TURU;
end;

procedure TCariHareket.Set_DOVIZ_TURU(Value: Integer);
begin
  DefaultInterface.Set_DOVIZ_TURU(Value);
end;

function TCariHareket.Get_Doviz_Tutar: Double;
begin
    Result := DefaultInterface.Doviz_Tutar;
end;

procedure TCariHareket.Set_Doviz_Tutar(Value: Double);
begin
  DefaultInterface.Set_Doviz_Tutar(Value);
end;

function TCariHareket.Get_RAPOR_KODU: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU;
end;

procedure TCariHareket.Set_RAPOR_KODU(const Value: WideString);
  { Warning: The property RAPOR_KODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU := Value;
end;

function TCariHareket.Get_F9sc: WideString;
begin
    Result := DefaultInterface.F9sc;
end;

procedure TCariHareket.Set_F9sc(const Value: WideString);
  { Warning: The property F9sc has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.F9sc := Value;
end;

function TCariHareket.Get_Hareket_Turu: WideString;
begin
    Result := DefaultInterface.Hareket_Turu;
end;

procedure TCariHareket.Set_Hareket_Turu(const Value: WideString);
  { Warning: The property Hareket_Turu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hareket_Turu := Value;
end;

function TCariHareket.Get_Miktar: Double;
begin
    Result := DefaultInterface.Miktar;
end;

procedure TCariHareket.Set_Miktar(Value: Double);
begin
  DefaultInterface.Set_Miktar(Value);
end;

function TCariHareket.Get_Ilave_Rapor_Kodu: WideString;
begin
    Result := DefaultInterface.Ilave_Rapor_Kodu;
end;

procedure TCariHareket.Set_Ilave_Rapor_Kodu(const Value: WideString);
  { Warning: The property Ilave_Rapor_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ilave_Rapor_Kodu := Value;
end;

function TCariHareket.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TCariHareket.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TCariHareket.Get_Kapatilmis_Tutar: Double;
begin
    Result := DefaultInterface.Kapatilmis_Tutar;
end;

procedure TCariHareket.Set_Kapatilmis_Tutar(Value: Double);
begin
  DefaultInterface.Set_Kapatilmis_Tutar(Value);
end;

function TCariHareket.Get_Odeme_Gunu: Integer;
begin
    Result := DefaultInterface.Odeme_Gunu;
end;

procedure TCariHareket.Set_Odeme_Gunu(Value: Integer);
begin
  DefaultInterface.Set_Odeme_Gunu(Value);
end;

function TCariHareket.Get_Firma_Doviz_Tipi: Integer;
begin
    Result := DefaultInterface.Firma_Doviz_Tipi;
end;

procedure TCariHareket.Set_Firma_Doviz_Tipi(Value: Integer);
begin
  DefaultInterface.Set_Firma_Doviz_Tipi(Value);
end;

function TCariHareket.Get_Firma_Doviz_Tutari: Double;
begin
    Result := DefaultInterface.Firma_Doviz_Tutari;
end;

procedure TCariHareket.Set_Firma_Doviz_Tutari(Value: Double);
begin
  DefaultInterface.Set_Firma_Doviz_Tutari(Value);
end;

function TCariHareket.Get_Plasiyer_Kodu: WideString;
begin
    Result := DefaultInterface.Plasiyer_Kodu;
end;

procedure TCariHareket.Set_Plasiyer_Kodu(const Value: WideString);
  { Warning: The property Plasiyer_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer_Kodu := Value;
end;

function TCariHareket.Get_Ent_Ref_Key: WideString;
begin
    Result := DefaultInterface.Ent_Ref_Key;
end;

procedure TCariHareket.Set_Ent_Ref_Key(const Value: WideString);
  { Warning: The property Ent_Ref_Key has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ent_Ref_Key := Value;
end;

function TCariHareket.Get_Inc_Key_Number: Integer;
begin
    Result := DefaultInterface.Inc_Key_Number;
end;

procedure TCariHareket.Set_Inc_Key_Number(Value: Integer);
begin
  DefaultInterface.Set_Inc_Key_Number(Value);
end;

function TCariHareket.Get_RAPOR_KODU2: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU2;
end;

procedure TCariHareket.Set_RAPOR_KODU2(const Value: WideString);
  { Warning: The property RAPOR_KODU2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU2 := Value;
end;

function TCariHareket.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TCariHareket.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TCariHareket.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TCariHareket.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TCariHareket.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TCariHareket.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TCariHareket.Get_F_Yedek1: Double;
begin
    Result := DefaultInterface.F_Yedek1;
end;

procedure TCariHareket.Set_F_Yedek1(Value: Double);
begin
  DefaultInterface.Set_F_Yedek1(Value);
end;

function TCariHareket.Get_F_Yedek2: Double;
begin
    Result := DefaultInterface.F_Yedek2;
end;

procedure TCariHareket.Set_F_Yedek2(Value: Double);
begin
  DefaultInterface.Set_F_Yedek2(Value);
end;

function TCariHareket.Get_C_Yedek1: WideString;
begin
    Result := DefaultInterface.C_Yedek1;
end;

procedure TCariHareket.Set_C_Yedek1(const Value: WideString);
  { Warning: The property C_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek1 := Value;
end;

function TCariHareket.Get_C_Yedek2: WideString;
begin
    Result := DefaultInterface.C_Yedek2;
end;

procedure TCariHareket.Set_C_Yedek2(const Value: WideString);
  { Warning: The property C_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek2 := Value;
end;

function TCariHareket.Get_B_Yedek1: Integer;
begin
    Result := DefaultInterface.B_Yedek1;
end;

procedure TCariHareket.Set_B_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_B_Yedek1(Value);
end;

function TCariHareket.Get_I_Yedek1: Integer;
begin
    Result := DefaultInterface.I_Yedek1;
end;

procedure TCariHareket.Set_I_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek1(Value);
end;

function TCariHareket.Get_L_Yedek1: Integer;
begin
    Result := DefaultInterface.L_Yedek1;
end;

procedure TCariHareket.Set_L_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_L_Yedek1(Value);
end;

function TCariHareket.Get_D_Yedek1: TDateTime;
begin
    Result := DefaultInterface.D_Yedek1;
end;

procedure TCariHareket.Set_D_Yedek1(Value: TDateTime);
begin
  DefaultInterface.Set_D_Yedek1(Value);
end;

function TCariHareket.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TCariHareket.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TCariHareket.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TCariHareket.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TCariHareket.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TCariHareket.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

procedure TCariHareket.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TCariHareket.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TCariHareket.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TCariHareket.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TCariHareket.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TCariHareket.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TCariHareket.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

procedure TCariHareket.SahalariTemizle;
begin
  DefaultInterface.SahalariTemizle;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCariHareketProperties.Create(AServer: TCariHareket);
begin
  inherited Create;
  FServer := AServer;
end;

function TCariHareketProperties.GetDefaultInterface: ICariHareket;
begin
  Result := FServer.DefaultInterface;
end;

function TCariHareketProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TCariHareketProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TCariHareketProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TCariHareketProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TCariHareketProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TCariHareketProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TCariHareketProperties.Get_SilmeIcinGerekliSahalar: WideString;
begin
    Result := DefaultInterface.SilmeIcinGerekliSahalar;
end;

function TCariHareketProperties.Get_SonKayitNoAl: WordBool;
begin
    Result := DefaultInterface.SonKayitNoAl;
end;

procedure TCariHareketProperties.Set_SonKayitNoAl(Value: WordBool);
begin
  DefaultInterface.Set_SonKayitNoAl(Value);
end;

function TCariHareketProperties.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TCariHareketProperties.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TCariHareketProperties.Get_CARI_KOD: WideString;
begin
    Result := DefaultInterface.CARI_KOD;
end;

procedure TCariHareketProperties.Set_CARI_KOD(const Value: WideString);
  { Warning: The property CARI_KOD has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_KOD := Value;
end;

function TCariHareketProperties.Get_Tarih: TDateTime;
begin
    Result := DefaultInterface.Tarih;
end;

procedure TCariHareketProperties.Set_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih(Value);
end;

function TCariHareketProperties.Get_Vade_Tarihi: TDateTime;
begin
    Result := DefaultInterface.Vade_Tarihi;
end;

procedure TCariHareketProperties.Set_Vade_Tarihi(Value: TDateTime);
begin
  DefaultInterface.Set_Vade_Tarihi(Value);
end;

function TCariHareketProperties.Get_Belge_No: WideString;
begin
    Result := DefaultInterface.Belge_No;
end;

procedure TCariHareketProperties.Set_Belge_No(const Value: WideString);
  { Warning: The property Belge_No has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Belge_No := Value;
end;

function TCariHareketProperties.Get_Aciklama: WideString;
begin
    Result := DefaultInterface.Aciklama;
end;

procedure TCariHareketProperties.Set_Aciklama(const Value: WideString);
  { Warning: The property Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama := Value;
end;

function TCariHareketProperties.Get_Hka: WideString;
begin
    Result := DefaultInterface.Hka;
end;

procedure TCariHareketProperties.Set_Hka(const Value: WideString);
  { Warning: The property Hka has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hka := Value;
end;

function TCariHareketProperties.Get_Borc: Double;
begin
    Result := DefaultInterface.Borc;
end;

procedure TCariHareketProperties.Set_Borc(Value: Double);
begin
  DefaultInterface.Set_Borc(Value);
end;

function TCariHareketProperties.Get_Alacak: Double;
begin
    Result := DefaultInterface.Alacak;
end;

procedure TCariHareketProperties.Set_Alacak(Value: Double);
begin
  DefaultInterface.Set_Alacak(Value);
end;

function TCariHareketProperties.Get_Bakiye: Double;
begin
    Result := DefaultInterface.Bakiye;
end;

procedure TCariHareketProperties.Set_Bakiye(Value: Double);
begin
  DefaultInterface.Set_Bakiye(Value);
end;

function TCariHareketProperties.Get_DOVIZ_TURU: Integer;
begin
    Result := DefaultInterface.DOVIZ_TURU;
end;

procedure TCariHareketProperties.Set_DOVIZ_TURU(Value: Integer);
begin
  DefaultInterface.Set_DOVIZ_TURU(Value);
end;

function TCariHareketProperties.Get_Doviz_Tutar: Double;
begin
    Result := DefaultInterface.Doviz_Tutar;
end;

procedure TCariHareketProperties.Set_Doviz_Tutar(Value: Double);
begin
  DefaultInterface.Set_Doviz_Tutar(Value);
end;

function TCariHareketProperties.Get_RAPOR_KODU: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU;
end;

procedure TCariHareketProperties.Set_RAPOR_KODU(const Value: WideString);
  { Warning: The property RAPOR_KODU has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU := Value;
end;

function TCariHareketProperties.Get_F9sc: WideString;
begin
    Result := DefaultInterface.F9sc;
end;

procedure TCariHareketProperties.Set_F9sc(const Value: WideString);
  { Warning: The property F9sc has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.F9sc := Value;
end;

function TCariHareketProperties.Get_Hareket_Turu: WideString;
begin
    Result := DefaultInterface.Hareket_Turu;
end;

procedure TCariHareketProperties.Set_Hareket_Turu(const Value: WideString);
  { Warning: The property Hareket_Turu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Hareket_Turu := Value;
end;

function TCariHareketProperties.Get_Miktar: Double;
begin
    Result := DefaultInterface.Miktar;
end;

procedure TCariHareketProperties.Set_Miktar(Value: Double);
begin
  DefaultInterface.Set_Miktar(Value);
end;

function TCariHareketProperties.Get_Ilave_Rapor_Kodu: WideString;
begin
    Result := DefaultInterface.Ilave_Rapor_Kodu;
end;

procedure TCariHareketProperties.Set_Ilave_Rapor_Kodu(const Value: WideString);
  { Warning: The property Ilave_Rapor_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ilave_Rapor_Kodu := Value;
end;

function TCariHareketProperties.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TCariHareketProperties.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TCariHareketProperties.Get_Kapatilmis_Tutar: Double;
begin
    Result := DefaultInterface.Kapatilmis_Tutar;
end;

procedure TCariHareketProperties.Set_Kapatilmis_Tutar(Value: Double);
begin
  DefaultInterface.Set_Kapatilmis_Tutar(Value);
end;

function TCariHareketProperties.Get_Odeme_Gunu: Integer;
begin
    Result := DefaultInterface.Odeme_Gunu;
end;

procedure TCariHareketProperties.Set_Odeme_Gunu(Value: Integer);
begin
  DefaultInterface.Set_Odeme_Gunu(Value);
end;

function TCariHareketProperties.Get_Firma_Doviz_Tipi: Integer;
begin
    Result := DefaultInterface.Firma_Doviz_Tipi;
end;

procedure TCariHareketProperties.Set_Firma_Doviz_Tipi(Value: Integer);
begin
  DefaultInterface.Set_Firma_Doviz_Tipi(Value);
end;

function TCariHareketProperties.Get_Firma_Doviz_Tutari: Double;
begin
    Result := DefaultInterface.Firma_Doviz_Tutari;
end;

procedure TCariHareketProperties.Set_Firma_Doviz_Tutari(Value: Double);
begin
  DefaultInterface.Set_Firma_Doviz_Tutari(Value);
end;

function TCariHareketProperties.Get_Plasiyer_Kodu: WideString;
begin
    Result := DefaultInterface.Plasiyer_Kodu;
end;

procedure TCariHareketProperties.Set_Plasiyer_Kodu(const Value: WideString);
  { Warning: The property Plasiyer_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Plasiyer_Kodu := Value;
end;

function TCariHareketProperties.Get_Ent_Ref_Key: WideString;
begin
    Result := DefaultInterface.Ent_Ref_Key;
end;

procedure TCariHareketProperties.Set_Ent_Ref_Key(const Value: WideString);
  { Warning: The property Ent_Ref_Key has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Ent_Ref_Key := Value;
end;

function TCariHareketProperties.Get_Inc_Key_Number: Integer;
begin
    Result := DefaultInterface.Inc_Key_Number;
end;

procedure TCariHareketProperties.Set_Inc_Key_Number(Value: Integer);
begin
  DefaultInterface.Set_Inc_Key_Number(Value);
end;

function TCariHareketProperties.Get_RAPOR_KODU2: WideString;
begin
    Result := DefaultInterface.RAPOR_KODU2;
end;

procedure TCariHareketProperties.Set_RAPOR_KODU2(const Value: WideString);
  { Warning: The property RAPOR_KODU2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.RAPOR_KODU2 := Value;
end;

function TCariHareketProperties.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TCariHareketProperties.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TCariHareketProperties.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TCariHareketProperties.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TCariHareketProperties.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TCariHareketProperties.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TCariHareketProperties.Get_F_Yedek1: Double;
begin
    Result := DefaultInterface.F_Yedek1;
end;

procedure TCariHareketProperties.Set_F_Yedek1(Value: Double);
begin
  DefaultInterface.Set_F_Yedek1(Value);
end;

function TCariHareketProperties.Get_F_Yedek2: Double;
begin
    Result := DefaultInterface.F_Yedek2;
end;

procedure TCariHareketProperties.Set_F_Yedek2(Value: Double);
begin
  DefaultInterface.Set_F_Yedek2(Value);
end;

function TCariHareketProperties.Get_C_Yedek1: WideString;
begin
    Result := DefaultInterface.C_Yedek1;
end;

procedure TCariHareketProperties.Set_C_Yedek1(const Value: WideString);
  { Warning: The property C_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek1 := Value;
end;

function TCariHareketProperties.Get_C_Yedek2: WideString;
begin
    Result := DefaultInterface.C_Yedek2;
end;

procedure TCariHareketProperties.Set_C_Yedek2(const Value: WideString);
  { Warning: The property C_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek2 := Value;
end;

function TCariHareketProperties.Get_B_Yedek1: Integer;
begin
    Result := DefaultInterface.B_Yedek1;
end;

procedure TCariHareketProperties.Set_B_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_B_Yedek1(Value);
end;

function TCariHareketProperties.Get_I_Yedek1: Integer;
begin
    Result := DefaultInterface.I_Yedek1;
end;

procedure TCariHareketProperties.Set_I_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek1(Value);
end;

function TCariHareketProperties.Get_L_Yedek1: Integer;
begin
    Result := DefaultInterface.L_Yedek1;
end;

procedure TCariHareketProperties.Set_L_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_L_Yedek1(Value);
end;

function TCariHareketProperties.Get_D_Yedek1: TDateTime;
begin
    Result := DefaultInterface.D_Yedek1;
end;

procedure TCariHareketProperties.Set_D_Yedek1(Value: TDateTime);
begin
  DefaultInterface.Set_D_Yedek1(Value);
end;

function TCariHareketProperties.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TCariHareketProperties.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TCariHareketProperties.Get_OnayTipi: WideString;
begin
    Result := DefaultInterface.OnayTipi;
end;

procedure TCariHareketProperties.Set_OnayTipi(const Value: WideString);
  { Warning: The property OnayTipi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.OnayTipi := Value;
end;

function TCariHareketProperties.Get_OnayNum: Integer;
begin
    Result := DefaultInterface.OnayNum;
end;

procedure TCariHareketProperties.Set_OnayNum(Value: Integer);
begin
  DefaultInterface.Set_OnayNum(Value);
end;

{$ENDIF}

class function CoMaliGrup.Create: IMaliGrup;
begin
  Result := CreateComObject(CLASS_MaliGrup) as IMaliGrup;
end;

class function CoMaliGrup.CreateRemote(const MachineName: string): IMaliGrup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MaliGrup) as IMaliGrup;
end;

procedure TMaliGrup.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{17EC8595-E709-4996-B146-D4BBD9785E23}';
    IntfIID:   '{B00D1D21-626B-42D7-B516-632DD6A9A92A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMaliGrup.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IMaliGrup;
  end;
end;

procedure TMaliGrup.ConnectTo(svrIntf: IMaliGrup);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMaliGrup.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMaliGrup.GetDefaultInterface: IMaliGrup;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMaliGrup.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMaliGrupProperties.Create(Self);
{$ENDIF}
end;

destructor TMaliGrup.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMaliGrup.GetServerProperties: TMaliGrupProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMaliGrup.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TMaliGrup.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMaliGrup.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TMaliGrup.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TMaliGrup.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TMaliGrup.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TMaliGrup.Get_SilmeIcinGerekliSahalar: WideString;
begin
    Result := DefaultInterface.SilmeIcinGerekliSahalar;
end;

function TMaliGrup.Get_SonKayitNoAl: WordBool;
begin
    Result := DefaultInterface.SonKayitNoAl;
end;

procedure TMaliGrup.Set_SonKayitNoAl(Value: WordBool);
begin
  DefaultInterface.Set_SonKayitNoAl(Value);
end;

function TMaliGrup.Get_GrupKod: WideString;
begin
    Result := DefaultInterface.GrupKod;
end;

procedure TMaliGrup.Set_GrupKod(const Value: WideString);
  { Warning: The property GrupKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GrupKod := Value;
end;

function TMaliGrup.Get_ISIM: WideString;
begin
    Result := DefaultInterface.ISIM;
end;

procedure TMaliGrup.Set_ISIM(const Value: WideString);
  { Warning: The property ISIM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ISIM := Value;
end;

function TMaliGrup.Get_AnaKod: WideString;
begin
    Result := DefaultInterface.AnaKod;
end;

procedure TMaliGrup.Set_AnaKod(const Value: WideString);
  { Warning: The property AnaKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AnaKod := Value;
end;

function TMaliGrup.Get_Tur: WideString;
begin
    Result := DefaultInterface.Tur;
end;

procedure TMaliGrup.Set_Tur(const Value: WideString);
  { Warning: The property Tur has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tur := Value;
end;

function TMaliGrup.Get_HangiOlcuBirimi: Shortint;
begin
    Result := DefaultInterface.HangiOlcuBirimi;
end;

procedure TMaliGrup.Set_HangiOlcuBirimi(Value: Shortint);
begin
  DefaultInterface.Set_HangiOlcuBirimi(Value);
end;

function TMaliGrup.Get_HamOrtSatFi: WideString;
begin
    Result := DefaultInterface.HamOrtSatFi;
end;

procedure TMaliGrup.Set_HamOrtSatFi(const Value: WideString);
  { Warning: The property HamOrtSatFi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HamOrtSatFi := Value;
end;

function TMaliGrup.Get_BRHamMadde: Double;
begin
    Result := DefaultInterface.BRHamMadde;
end;

procedure TMaliGrup.Set_BRHamMadde(Value: Double);
begin
  DefaultInterface.Set_BRHamMadde(Value);
end;

function TMaliGrup.Get_BRAmbalaj: Double;
begin
    Result := DefaultInterface.BRAmbalaj;
end;

procedure TMaliGrup.Set_BRAmbalaj(Value: Double);
begin
  DefaultInterface.Set_BRAmbalaj(Value);
end;

function TMaliGrup.Get_BrIscSur: Double;
begin
    Result := DefaultInterface.BrIscSur;
end;

procedure TMaliGrup.Set_BrIscSur(Value: Double);
begin
  DefaultInterface.Set_BrIscSur(Value);
end;

function TMaliGrup.Get_BREnerji: Double;
begin
    Result := DefaultInterface.BREnerji;
end;

procedure TMaliGrup.Set_BREnerji(Value: Double);
begin
  DefaultInterface.Set_BREnerji(Value);
end;

function TMaliGrup.Get_BRAmort: Double;
begin
    Result := DefaultInterface.BRAmort;
end;

procedure TMaliGrup.Set_BRAmort(Value: Double);
begin
  DefaultInterface.Set_BRAmort(Value);
end;

function TMaliGrup.Get_BRYard: Double;
begin
    Result := DefaultInterface.BRYard;
end;

procedure TMaliGrup.Set_BRYard(Value: Double);
begin
  DefaultInterface.Set_BRYard(Value);
end;

function TMaliGrup.Get_BRYedek: Double;
begin
    Result := DefaultInterface.BRYedek;
end;

procedure TMaliGrup.Set_BRYedek(Value: Double);
begin
  DefaultInterface.Set_BRYedek(Value);
end;

function TMaliGrup.Get_BRMalGider_1: Double;
begin
    Result := DefaultInterface.BRMalGider_1;
end;

procedure TMaliGrup.Set_BRMalGider_1(Value: Double);
begin
  DefaultInterface.Set_BRMalGider_1(Value);
end;

function TMaliGrup.Get_BRMalGider_2: Double;
begin
    Result := DefaultInterface.BRMalGider_2;
end;

procedure TMaliGrup.Set_BRMalGider_2(Value: Double);
begin
  DefaultInterface.Set_BRMalGider_2(Value);
end;

function TMaliGrup.Get_BrMalGider_3: Double;
begin
    Result := DefaultInterface.BrMalGider_3;
end;

procedure TMaliGrup.Set_BrMalGider_3(Value: Double);
begin
  DefaultInterface.Set_BrMalGider_3(Value);
end;

function TMaliGrup.Get_BRMalGider_4: Double;
begin
    Result := DefaultInterface.BRMalGider_4;
end;

procedure TMaliGrup.Set_BRMalGider_4(Value: Double);
begin
  DefaultInterface.Set_BRMalGider_4(Value);
end;

function TMaliGrup.Get_BRMalGider_5: Double;
begin
    Result := DefaultInterface.BRMalGider_5;
end;

procedure TMaliGrup.Set_BRMalGider_5(Value: Double);
begin
  DefaultInterface.Set_BRMalGider_5(Value);
end;

function TMaliGrup.Get_YariMamulHesKod: WideString;
begin
    Result := DefaultInterface.YariMamulHesKod;
end;

procedure TMaliGrup.Set_YariMamulHesKod(const Value: WideString);
  { Warning: The property YariMamulHesKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YariMamulHesKod := Value;
end;

function TMaliGrup.Get_MamulHesKod: WideString;
begin
    Result := DefaultInterface.MamulHesKod;
end;

procedure TMaliGrup.Set_MamulHesKod(const Value: WideString);
  { Warning: The property MamulHesKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MamulHesKod := Value;
end;

function TMaliGrup.Get_HamMadSarfHes: WideString;
begin
    Result := DefaultInterface.HamMadSarfHes;
end;

procedure TMaliGrup.Set_HamMadSarfHes(const Value: WideString);
  { Warning: The property HamMadSarfHes has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HamMadSarfHes := Value;
end;

function TMaliGrup.Get_AmbalajHes: WideString;
begin
    Result := DefaultInterface.AmbalajHes;
end;

procedure TMaliGrup.Set_AmbalajHes(const Value: WideString);
  { Warning: The property AmbalajHes has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmbalajHes := Value;
end;

function TMaliGrup.Get_SatMalMaliyet: WideString;
begin
    Result := DefaultInterface.SatMalMaliyet;
end;

procedure TMaliGrup.Set_SatMalMaliyet(const Value: WideString);
  { Warning: The property SatMalMaliyet has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SatMalMaliyet := Value;
end;

function TMaliGrup.Get_IlkMadMalzYans: WideString;
begin
    Result := DefaultInterface.IlkMadMalzYans;
end;

procedure TMaliGrup.Set_IlkMadMalzYans(const Value: WideString);
  { Warning: The property IlkMadMalzYans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IlkMadMalzYans := Value;
end;

function TMaliGrup.Get_AmbalajYans: WideString;
begin
    Result := DefaultInterface.AmbalajYans;
end;

procedure TMaliGrup.Set_AmbalajYans(const Value: WideString);
  { Warning: The property AmbalajYans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmbalajYans := Value;
end;

function TMaliGrup.Get_IsciYans1: WideString;
begin
    Result := DefaultInterface.IsciYans1;
end;

procedure TMaliGrup.Set_IsciYans1(const Value: WideString);
  { Warning: The property IsciYans1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IsciYans1 := Value;
end;

function TMaliGrup.Get_IsciYans2: WideString;
begin
    Result := DefaultInterface.IsciYans2;
end;

procedure TMaliGrup.Set_IsciYans2(const Value: WideString);
  { Warning: The property IsciYans2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IsciYans2 := Value;
end;

function TMaliGrup.Get_EnerjiYans: WideString;
begin
    Result := DefaultInterface.EnerjiYans;
end;

procedure TMaliGrup.Set_EnerjiYans(const Value: WideString);
  { Warning: The property EnerjiYans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EnerjiYans := Value;
end;

function TMaliGrup.Get_AmortYans: WideString;
begin
    Result := DefaultInterface.AmortYans;
end;

procedure TMaliGrup.Set_AmortYans(const Value: WideString);
  { Warning: The property AmortYans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmortYans := Value;
end;

function TMaliGrup.Get_YardSerYans: WideString;
begin
    Result := DefaultInterface.YardSerYans;
end;

procedure TMaliGrup.Set_YardSerYans(const Value: WideString);
  { Warning: The property YardSerYans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YardSerYans := Value;
end;

function TMaliGrup.Get_YedParcaYans: WideString;
begin
    Result := DefaultInterface.YedParcaYans;
end;

procedure TMaliGrup.Set_YedParcaYans(const Value: WideString);
  { Warning: The property YedParcaYans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YedParcaYans := Value;
end;

function TMaliGrup.Get_MalGider1_Yans: WideString;
begin
    Result := DefaultInterface.MalGider1_Yans;
end;

procedure TMaliGrup.Set_MalGider1_Yans(const Value: WideString);
  { Warning: The property MalGider1_Yans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MalGider1_Yans := Value;
end;

function TMaliGrup.Get_MalGider2_Yans: WideString;
begin
    Result := DefaultInterface.MalGider2_Yans;
end;

procedure TMaliGrup.Set_MalGider2_Yans(const Value: WideString);
  { Warning: The property MalGider2_Yans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MalGider2_Yans := Value;
end;

function TMaliGrup.Get_MalGider3_Yans: WideString;
begin
    Result := DefaultInterface.MalGider3_Yans;
end;

procedure TMaliGrup.Set_MalGider3_Yans(const Value: WideString);
  { Warning: The property MalGider3_Yans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MalGider3_Yans := Value;
end;

function TMaliGrup.Get_MalGider4_Yans: WideString;
begin
    Result := DefaultInterface.MalGider4_Yans;
end;

procedure TMaliGrup.Set_MalGider4_Yans(const Value: WideString);
  { Warning: The property MalGider4_Yans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MalGider4_Yans := Value;
end;

function TMaliGrup.Get_MalGider5_Yans: WideString;
begin
    Result := DefaultInterface.MalGider5_Yans;
end;

procedure TMaliGrup.Set_MalGider5_Yans(const Value: WideString);
  { Warning: The property MalGider5_Yans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MalGider5_Yans := Value;
end;

function TMaliGrup.Get_AyBasiStok: Double;
begin
    Result := DefaultInterface.AyBasiStok;
end;

procedure TMaliGrup.Set_AyBasiStok(Value: Double);
begin
  DefaultInterface.Set_AyBasiStok(Value);
end;

function TMaliGrup.Get_AySonuStok: Double;
begin
    Result := DefaultInterface.AySonuStok;
end;

procedure TMaliGrup.Set_AySonuStok(Value: Double);
begin
  DefaultInterface.Set_AySonuStok(Value);
end;

function TMaliGrup.Get_Yedek1: WideString;
begin
    Result := DefaultInterface.Yedek1;
end;

procedure TMaliGrup.Set_Yedek1(const Value: WideString);
  { Warning: The property Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek1 := Value;
end;

function TMaliGrup.Get_Yedek2: WideString;
begin
    Result := DefaultInterface.Yedek2;
end;

procedure TMaliGrup.Set_Yedek2(const Value: WideString);
  { Warning: The property Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek2 := Value;
end;

function TMaliGrup.Get_Yedek3: WideString;
begin
    Result := DefaultInterface.Yedek3;
end;

procedure TMaliGrup.Set_Yedek3(const Value: WideString);
  { Warning: The property Yedek3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek3 := Value;
end;

function TMaliGrup.Get_Yedek4: WideString;
begin
    Result := DefaultInterface.Yedek4;
end;

procedure TMaliGrup.Set_Yedek4(const Value: WideString);
  { Warning: The property Yedek4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek4 := Value;
end;

function TMaliGrup.Get_Yedek5: Double;
begin
    Result := DefaultInterface.Yedek5;
end;

procedure TMaliGrup.Set_Yedek5(Value: Double);
begin
  DefaultInterface.Set_Yedek5(Value);
end;

function TMaliGrup.Get_Yedek6: Double;
begin
    Result := DefaultInterface.Yedek6;
end;

procedure TMaliGrup.Set_Yedek6(Value: Double);
begin
  DefaultInterface.Set_Yedek6(Value);
end;

function TMaliGrup.Get_Yedek7: Double;
begin
    Result := DefaultInterface.Yedek7;
end;

procedure TMaliGrup.Set_Yedek7(Value: Double);
begin
  DefaultInterface.Set_Yedek7(Value);
end;

function TMaliGrup.Get_Yedek8: Double;
begin
    Result := DefaultInterface.Yedek8;
end;

procedure TMaliGrup.Set_Yedek8(Value: Double);
begin
  DefaultInterface.Set_Yedek8(Value);
end;

function TMaliGrup.Get_Yedek9: WideString;
begin
    Result := DefaultInterface.Yedek9;
end;

procedure TMaliGrup.Set_Yedek9(const Value: WideString);
  { Warning: The property Yedek9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek9 := Value;
end;

function TMaliGrup.Get_Yedek10: WideString;
begin
    Result := DefaultInterface.Yedek10;
end;

procedure TMaliGrup.Set_Yedek10(const Value: WideString);
  { Warning: The property Yedek10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek10 := Value;
end;

function TMaliGrup.Get_Yedek11: WideString;
begin
    Result := DefaultInterface.Yedek11;
end;

procedure TMaliGrup.Set_Yedek11(const Value: WideString);
  { Warning: The property Yedek11 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek11 := Value;
end;

function TMaliGrup.Get_Yedek12: WideString;
begin
    Result := DefaultInterface.Yedek12;
end;

procedure TMaliGrup.Set_Yedek12(const Value: WideString);
  { Warning: The property Yedek12 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek12 := Value;
end;

function TMaliGrup.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TMaliGrup.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TMaliGrup.Get_MamulTransHesap: WideString;
begin
    Result := DefaultInterface.MamulTransHesap;
end;

procedure TMaliGrup.Set_MamulTransHesap(const Value: WideString);
  { Warning: The property MamulTransHesap has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MamulTransHesap := Value;
end;

function TMaliGrup.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TMaliGrup.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TMaliGrup.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TMaliGrup.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TMaliGrup.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TMaliGrup.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TMaliGrup.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TMaliGrup.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TMaliGrup.Get_ExpSatMalMaliyet: WideString;
begin
    Result := DefaultInterface.ExpSatMalMaliyet;
end;

procedure TMaliGrup.Set_ExpSatMalMaliyet(const Value: WideString);
  { Warning: The property ExpSatMalMaliyet has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ExpSatMalMaliyet := Value;
end;

procedure TMaliGrup.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TMaliGrup.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TMaliGrup.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TMaliGrup.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TMaliGrup.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TMaliGrup.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TMaliGrup.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

procedure TMaliGrup.SahalariTemizle;
begin
  DefaultInterface.SahalariTemizle;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMaliGrupProperties.Create(AServer: TMaliGrup);
begin
  inherited Create;
  FServer := AServer;
end;

function TMaliGrupProperties.GetDefaultInterface: IMaliGrup;
begin
  Result := FServer.DefaultInterface;
end;

function TMaliGrupProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TMaliGrupProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMaliGrupProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TMaliGrupProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TMaliGrupProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TMaliGrupProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TMaliGrupProperties.Get_SilmeIcinGerekliSahalar: WideString;
begin
    Result := DefaultInterface.SilmeIcinGerekliSahalar;
end;

function TMaliGrupProperties.Get_SonKayitNoAl: WordBool;
begin
    Result := DefaultInterface.SonKayitNoAl;
end;

procedure TMaliGrupProperties.Set_SonKayitNoAl(Value: WordBool);
begin
  DefaultInterface.Set_SonKayitNoAl(Value);
end;

function TMaliGrupProperties.Get_GrupKod: WideString;
begin
    Result := DefaultInterface.GrupKod;
end;

procedure TMaliGrupProperties.Set_GrupKod(const Value: WideString);
  { Warning: The property GrupKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GrupKod := Value;
end;

function TMaliGrupProperties.Get_ISIM: WideString;
begin
    Result := DefaultInterface.ISIM;
end;

procedure TMaliGrupProperties.Set_ISIM(const Value: WideString);
  { Warning: The property ISIM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ISIM := Value;
end;

function TMaliGrupProperties.Get_AnaKod: WideString;
begin
    Result := DefaultInterface.AnaKod;
end;

procedure TMaliGrupProperties.Set_AnaKod(const Value: WideString);
  { Warning: The property AnaKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AnaKod := Value;
end;

function TMaliGrupProperties.Get_Tur: WideString;
begin
    Result := DefaultInterface.Tur;
end;

procedure TMaliGrupProperties.Set_Tur(const Value: WideString);
  { Warning: The property Tur has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Tur := Value;
end;

function TMaliGrupProperties.Get_HangiOlcuBirimi: Shortint;
begin
    Result := DefaultInterface.HangiOlcuBirimi;
end;

procedure TMaliGrupProperties.Set_HangiOlcuBirimi(Value: Shortint);
begin
  DefaultInterface.Set_HangiOlcuBirimi(Value);
end;

function TMaliGrupProperties.Get_HamOrtSatFi: WideString;
begin
    Result := DefaultInterface.HamOrtSatFi;
end;

procedure TMaliGrupProperties.Set_HamOrtSatFi(const Value: WideString);
  { Warning: The property HamOrtSatFi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HamOrtSatFi := Value;
end;

function TMaliGrupProperties.Get_BRHamMadde: Double;
begin
    Result := DefaultInterface.BRHamMadde;
end;

procedure TMaliGrupProperties.Set_BRHamMadde(Value: Double);
begin
  DefaultInterface.Set_BRHamMadde(Value);
end;

function TMaliGrupProperties.Get_BRAmbalaj: Double;
begin
    Result := DefaultInterface.BRAmbalaj;
end;

procedure TMaliGrupProperties.Set_BRAmbalaj(Value: Double);
begin
  DefaultInterface.Set_BRAmbalaj(Value);
end;

function TMaliGrupProperties.Get_BrIscSur: Double;
begin
    Result := DefaultInterface.BrIscSur;
end;

procedure TMaliGrupProperties.Set_BrIscSur(Value: Double);
begin
  DefaultInterface.Set_BrIscSur(Value);
end;

function TMaliGrupProperties.Get_BREnerji: Double;
begin
    Result := DefaultInterface.BREnerji;
end;

procedure TMaliGrupProperties.Set_BREnerji(Value: Double);
begin
  DefaultInterface.Set_BREnerji(Value);
end;

function TMaliGrupProperties.Get_BRAmort: Double;
begin
    Result := DefaultInterface.BRAmort;
end;

procedure TMaliGrupProperties.Set_BRAmort(Value: Double);
begin
  DefaultInterface.Set_BRAmort(Value);
end;

function TMaliGrupProperties.Get_BRYard: Double;
begin
    Result := DefaultInterface.BRYard;
end;

procedure TMaliGrupProperties.Set_BRYard(Value: Double);
begin
  DefaultInterface.Set_BRYard(Value);
end;

function TMaliGrupProperties.Get_BRYedek: Double;
begin
    Result := DefaultInterface.BRYedek;
end;

procedure TMaliGrupProperties.Set_BRYedek(Value: Double);
begin
  DefaultInterface.Set_BRYedek(Value);
end;

function TMaliGrupProperties.Get_BRMalGider_1: Double;
begin
    Result := DefaultInterface.BRMalGider_1;
end;

procedure TMaliGrupProperties.Set_BRMalGider_1(Value: Double);
begin
  DefaultInterface.Set_BRMalGider_1(Value);
end;

function TMaliGrupProperties.Get_BRMalGider_2: Double;
begin
    Result := DefaultInterface.BRMalGider_2;
end;

procedure TMaliGrupProperties.Set_BRMalGider_2(Value: Double);
begin
  DefaultInterface.Set_BRMalGider_2(Value);
end;

function TMaliGrupProperties.Get_BrMalGider_3: Double;
begin
    Result := DefaultInterface.BrMalGider_3;
end;

procedure TMaliGrupProperties.Set_BrMalGider_3(Value: Double);
begin
  DefaultInterface.Set_BrMalGider_3(Value);
end;

function TMaliGrupProperties.Get_BRMalGider_4: Double;
begin
    Result := DefaultInterface.BRMalGider_4;
end;

procedure TMaliGrupProperties.Set_BRMalGider_4(Value: Double);
begin
  DefaultInterface.Set_BRMalGider_4(Value);
end;

function TMaliGrupProperties.Get_BRMalGider_5: Double;
begin
    Result := DefaultInterface.BRMalGider_5;
end;

procedure TMaliGrupProperties.Set_BRMalGider_5(Value: Double);
begin
  DefaultInterface.Set_BRMalGider_5(Value);
end;

function TMaliGrupProperties.Get_YariMamulHesKod: WideString;
begin
    Result := DefaultInterface.YariMamulHesKod;
end;

procedure TMaliGrupProperties.Set_YariMamulHesKod(const Value: WideString);
  { Warning: The property YariMamulHesKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YariMamulHesKod := Value;
end;

function TMaliGrupProperties.Get_MamulHesKod: WideString;
begin
    Result := DefaultInterface.MamulHesKod;
end;

procedure TMaliGrupProperties.Set_MamulHesKod(const Value: WideString);
  { Warning: The property MamulHesKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MamulHesKod := Value;
end;

function TMaliGrupProperties.Get_HamMadSarfHes: WideString;
begin
    Result := DefaultInterface.HamMadSarfHes;
end;

procedure TMaliGrupProperties.Set_HamMadSarfHes(const Value: WideString);
  { Warning: The property HamMadSarfHes has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.HamMadSarfHes := Value;
end;

function TMaliGrupProperties.Get_AmbalajHes: WideString;
begin
    Result := DefaultInterface.AmbalajHes;
end;

procedure TMaliGrupProperties.Set_AmbalajHes(const Value: WideString);
  { Warning: The property AmbalajHes has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmbalajHes := Value;
end;

function TMaliGrupProperties.Get_SatMalMaliyet: WideString;
begin
    Result := DefaultInterface.SatMalMaliyet;
end;

procedure TMaliGrupProperties.Set_SatMalMaliyet(const Value: WideString);
  { Warning: The property SatMalMaliyet has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SatMalMaliyet := Value;
end;

function TMaliGrupProperties.Get_IlkMadMalzYans: WideString;
begin
    Result := DefaultInterface.IlkMadMalzYans;
end;

procedure TMaliGrupProperties.Set_IlkMadMalzYans(const Value: WideString);
  { Warning: The property IlkMadMalzYans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IlkMadMalzYans := Value;
end;

function TMaliGrupProperties.Get_AmbalajYans: WideString;
begin
    Result := DefaultInterface.AmbalajYans;
end;

procedure TMaliGrupProperties.Set_AmbalajYans(const Value: WideString);
  { Warning: The property AmbalajYans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmbalajYans := Value;
end;

function TMaliGrupProperties.Get_IsciYans1: WideString;
begin
    Result := DefaultInterface.IsciYans1;
end;

procedure TMaliGrupProperties.Set_IsciYans1(const Value: WideString);
  { Warning: The property IsciYans1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IsciYans1 := Value;
end;

function TMaliGrupProperties.Get_IsciYans2: WideString;
begin
    Result := DefaultInterface.IsciYans2;
end;

procedure TMaliGrupProperties.Set_IsciYans2(const Value: WideString);
  { Warning: The property IsciYans2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IsciYans2 := Value;
end;

function TMaliGrupProperties.Get_EnerjiYans: WideString;
begin
    Result := DefaultInterface.EnerjiYans;
end;

procedure TMaliGrupProperties.Set_EnerjiYans(const Value: WideString);
  { Warning: The property EnerjiYans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.EnerjiYans := Value;
end;

function TMaliGrupProperties.Get_AmortYans: WideString;
begin
    Result := DefaultInterface.AmortYans;
end;

procedure TMaliGrupProperties.Set_AmortYans(const Value: WideString);
  { Warning: The property AmortYans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.AmortYans := Value;
end;

function TMaliGrupProperties.Get_YardSerYans: WideString;
begin
    Result := DefaultInterface.YardSerYans;
end;

procedure TMaliGrupProperties.Set_YardSerYans(const Value: WideString);
  { Warning: The property YardSerYans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YardSerYans := Value;
end;

function TMaliGrupProperties.Get_YedParcaYans: WideString;
begin
    Result := DefaultInterface.YedParcaYans;
end;

procedure TMaliGrupProperties.Set_YedParcaYans(const Value: WideString);
  { Warning: The property YedParcaYans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YedParcaYans := Value;
end;

function TMaliGrupProperties.Get_MalGider1_Yans: WideString;
begin
    Result := DefaultInterface.MalGider1_Yans;
end;

procedure TMaliGrupProperties.Set_MalGider1_Yans(const Value: WideString);
  { Warning: The property MalGider1_Yans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MalGider1_Yans := Value;
end;

function TMaliGrupProperties.Get_MalGider2_Yans: WideString;
begin
    Result := DefaultInterface.MalGider2_Yans;
end;

procedure TMaliGrupProperties.Set_MalGider2_Yans(const Value: WideString);
  { Warning: The property MalGider2_Yans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MalGider2_Yans := Value;
end;

function TMaliGrupProperties.Get_MalGider3_Yans: WideString;
begin
    Result := DefaultInterface.MalGider3_Yans;
end;

procedure TMaliGrupProperties.Set_MalGider3_Yans(const Value: WideString);
  { Warning: The property MalGider3_Yans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MalGider3_Yans := Value;
end;

function TMaliGrupProperties.Get_MalGider4_Yans: WideString;
begin
    Result := DefaultInterface.MalGider4_Yans;
end;

procedure TMaliGrupProperties.Set_MalGider4_Yans(const Value: WideString);
  { Warning: The property MalGider4_Yans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MalGider4_Yans := Value;
end;

function TMaliGrupProperties.Get_MalGider5_Yans: WideString;
begin
    Result := DefaultInterface.MalGider5_Yans;
end;

procedure TMaliGrupProperties.Set_MalGider5_Yans(const Value: WideString);
  { Warning: The property MalGider5_Yans has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MalGider5_Yans := Value;
end;

function TMaliGrupProperties.Get_AyBasiStok: Double;
begin
    Result := DefaultInterface.AyBasiStok;
end;

procedure TMaliGrupProperties.Set_AyBasiStok(Value: Double);
begin
  DefaultInterface.Set_AyBasiStok(Value);
end;

function TMaliGrupProperties.Get_AySonuStok: Double;
begin
    Result := DefaultInterface.AySonuStok;
end;

procedure TMaliGrupProperties.Set_AySonuStok(Value: Double);
begin
  DefaultInterface.Set_AySonuStok(Value);
end;

function TMaliGrupProperties.Get_Yedek1: WideString;
begin
    Result := DefaultInterface.Yedek1;
end;

procedure TMaliGrupProperties.Set_Yedek1(const Value: WideString);
  { Warning: The property Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek1 := Value;
end;

function TMaliGrupProperties.Get_Yedek2: WideString;
begin
    Result := DefaultInterface.Yedek2;
end;

procedure TMaliGrupProperties.Set_Yedek2(const Value: WideString);
  { Warning: The property Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek2 := Value;
end;

function TMaliGrupProperties.Get_Yedek3: WideString;
begin
    Result := DefaultInterface.Yedek3;
end;

procedure TMaliGrupProperties.Set_Yedek3(const Value: WideString);
  { Warning: The property Yedek3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek3 := Value;
end;

function TMaliGrupProperties.Get_Yedek4: WideString;
begin
    Result := DefaultInterface.Yedek4;
end;

procedure TMaliGrupProperties.Set_Yedek4(const Value: WideString);
  { Warning: The property Yedek4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek4 := Value;
end;

function TMaliGrupProperties.Get_Yedek5: Double;
begin
    Result := DefaultInterface.Yedek5;
end;

procedure TMaliGrupProperties.Set_Yedek5(Value: Double);
begin
  DefaultInterface.Set_Yedek5(Value);
end;

function TMaliGrupProperties.Get_Yedek6: Double;
begin
    Result := DefaultInterface.Yedek6;
end;

procedure TMaliGrupProperties.Set_Yedek6(Value: Double);
begin
  DefaultInterface.Set_Yedek6(Value);
end;

function TMaliGrupProperties.Get_Yedek7: Double;
begin
    Result := DefaultInterface.Yedek7;
end;

procedure TMaliGrupProperties.Set_Yedek7(Value: Double);
begin
  DefaultInterface.Set_Yedek7(Value);
end;

function TMaliGrupProperties.Get_Yedek8: Double;
begin
    Result := DefaultInterface.Yedek8;
end;

procedure TMaliGrupProperties.Set_Yedek8(Value: Double);
begin
  DefaultInterface.Set_Yedek8(Value);
end;

function TMaliGrupProperties.Get_Yedek9: WideString;
begin
    Result := DefaultInterface.Yedek9;
end;

procedure TMaliGrupProperties.Set_Yedek9(const Value: WideString);
  { Warning: The property Yedek9 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek9 := Value;
end;

function TMaliGrupProperties.Get_Yedek10: WideString;
begin
    Result := DefaultInterface.Yedek10;
end;

procedure TMaliGrupProperties.Set_Yedek10(const Value: WideString);
  { Warning: The property Yedek10 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek10 := Value;
end;

function TMaliGrupProperties.Get_Yedek11: WideString;
begin
    Result := DefaultInterface.Yedek11;
end;

procedure TMaliGrupProperties.Set_Yedek11(const Value: WideString);
  { Warning: The property Yedek11 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek11 := Value;
end;

function TMaliGrupProperties.Get_Yedek12: WideString;
begin
    Result := DefaultInterface.Yedek12;
end;

procedure TMaliGrupProperties.Set_Yedek12(const Value: WideString);
  { Warning: The property Yedek12 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Yedek12 := Value;
end;

function TMaliGrupProperties.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TMaliGrupProperties.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TMaliGrupProperties.Get_MamulTransHesap: WideString;
begin
    Result := DefaultInterface.MamulTransHesap;
end;

procedure TMaliGrupProperties.Set_MamulTransHesap(const Value: WideString);
  { Warning: The property MamulTransHesap has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.MamulTransHesap := Value;
end;

function TMaliGrupProperties.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TMaliGrupProperties.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TMaliGrupProperties.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TMaliGrupProperties.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TMaliGrupProperties.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TMaliGrupProperties.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TMaliGrupProperties.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TMaliGrupProperties.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TMaliGrupProperties.Get_ExpSatMalMaliyet: WideString;
begin
    Result := DefaultInterface.ExpSatMalMaliyet;
end;

procedure TMaliGrupProperties.Set_ExpSatMalMaliyet(const Value: WideString);
  { Warning: The property ExpSatMalMaliyet has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ExpSatMalMaliyet := Value;
end;

{$ENDIF}

class function CoData2.Create: IData2;
begin
  Result := CreateComObject(CLASS_Data2) as IData2;
end;

class function CoData2.CreateRemote(const MachineName: string): IData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Data2) as IData2;
end;

procedure TData2.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9F0D0358-31DD-42F8-9EFE-808E0A2BA494}';
    IntfIID:   '{BDEC9A7C-A6A5-43A7-A478-8853BE71E9CA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TData2.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IData2;
  end;
end;

procedure TData2.ConnectTo(svrIntf: IData2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TData2.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TData2.GetDefaultInterface: IData2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TData2.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TData2Properties.Create(Self);
{$ENDIF}
end;

destructor TData2.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TData2.GetServerProperties: TData2Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TData2.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TData2.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TData2.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TData2.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TData2.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TData2.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TData2.Get_SilmeIcinGerekliSahalar: WideString;
begin
    Result := DefaultInterface.SilmeIcinGerekliSahalar;
end;

function TData2.Get_SonKayitNoAl: WordBool;
begin
    Result := DefaultInterface.SonKayitNoAl;
end;

procedure TData2.Set_SonKayitNoAl(Value: WordBool);
begin
  DefaultInterface.Set_SonKayitNoAl(Value);
end;

procedure TData2.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TData2.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TData2.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TData2.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TData2.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TData2.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TData2.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

procedure TData2.SahalariTemizle;
begin
  DefaultInterface.SahalariTemizle;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TData2Properties.Create(AServer: TData2);
begin
  inherited Create;
  FServer := AServer;
end;

function TData2Properties.GetDefaultInterface: IData2;
begin
  Result := FServer.DefaultInterface;
end;

function TData2Properties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TData2Properties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TData2Properties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TData2Properties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TData2Properties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TData2Properties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TData2Properties.Get_SilmeIcinGerekliSahalar: WideString;
begin
    Result := DefaultInterface.SilmeIcinGerekliSahalar;
end;

function TData2Properties.Get_SonKayitNoAl: WordBool;
begin
    Result := DefaultInterface.SonKayitNoAl;
end;

procedure TData2Properties.Set_SonKayitNoAl(Value: WordBool);
begin
  DefaultInterface.Set_SonKayitNoAl(Value);
end;

{$ENDIF}

class function CoUretim.Create: IUretim;
begin
  Result := CreateComObject(CLASS_Uretim) as IUretim;
end;

class function CoUretim.CreateRemote(const MachineName: string): IUretim;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Uretim) as IUretim;
end;

procedure TUretim.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C9A8C6B3-10A6-46C0-8ED8-69443116856D}';
    IntfIID:   '{B0249E0F-4626-4F0F-A371-94C01AD047C0}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUretim.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IUretim;
  end;
end;

procedure TUretim.ConnectTo(svrIntf: IUretim);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUretim.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUretim.GetDefaultInterface: IUretim;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TUretim.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TUretimProperties.Create(Self);
{$ENDIF}
end;

destructor TUretim.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TUretim.GetServerProperties: TUretimProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TUretim.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TUretim.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TUretim.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TUretim.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TUretim.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TUretim.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TUretim.Get_SilmeIcinGerekliSahalar: WideString;
begin
    Result := DefaultInterface.SilmeIcinGerekliSahalar;
end;

function TUretim.Get_SonKayitNoAl: WordBool;
begin
    Result := DefaultInterface.SonKayitNoAl;
end;

procedure TUretim.Set_SonKayitNoAl(Value: WordBool);
begin
  DefaultInterface.Set_SonKayitNoAl(Value);
end;

function TUretim.Get_UretSon_FisNo: WideString;
begin
    Result := DefaultInterface.UretSon_FisNo;
end;

procedure TUretim.Set_UretSon_FisNo(const Value: WideString);
  { Warning: The property UretSon_FisNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UretSon_FisNo := Value;
end;

function TUretim.Get_UretSon_Tarih: TDateTime;
begin
    Result := DefaultInterface.UretSon_Tarih;
end;

procedure TUretim.Set_UretSon_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_UretSon_Tarih(Value);
end;

function TUretim.Get_UretSon_SipNo: WideString;
begin
    Result := DefaultInterface.UretSon_SipNo;
end;

procedure TUretim.Set_UretSon_SipNo(const Value: WideString);
  { Warning: The property UretSon_SipNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UretSon_SipNo := Value;
end;

function TUretim.Get_UretSon_Depo: Integer;
begin
    Result := DefaultInterface.UretSon_Depo;
end;

procedure TUretim.Set_UretSon_Depo(Value: Integer);
begin
  DefaultInterface.Set_UretSon_Depo(Value);
end;

function TUretim.Get_UretSon_Mamul: WideString;
begin
    Result := DefaultInterface.UretSon_Mamul;
end;

procedure TUretim.Set_UretSon_Mamul(const Value: WideString);
  { Warning: The property UretSon_Mamul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UretSon_Mamul := Value;
end;

function TUretim.Get_UretSon_Miktar: Double;
begin
    Result := DefaultInterface.UretSon_Miktar;
end;

procedure TUretim.Set_UretSon_Miktar(Value: Double);
begin
  DefaultInterface.Set_UretSon_Miktar(Value);
end;

function TUretim.Get_UretSon_MalY1: Double;
begin
    Result := DefaultInterface.UretSon_MalY1;
end;

procedure TUretim.Set_UretSon_MalY1(Value: Double);
begin
  DefaultInterface.Set_UretSon_MalY1(Value);
end;

function TUretim.Get_UretSon_Maly2: Double;
begin
    Result := DefaultInterface.UretSon_Maly2;
end;

procedure TUretim.Set_UretSon_Maly2(Value: Double);
begin
  DefaultInterface.Set_UretSon_Maly2(Value);
end;

function TUretim.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TUretim.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TUretim.Get_IncKeyNo: Integer;
begin
    Result := DefaultInterface.IncKeyNo;
end;

procedure TUretim.Set_IncKeyNo(Value: Integer);
begin
  DefaultInterface.Set_IncKeyNo(Value);
end;

function TUretim.Get_D_Yedek1: TDateTime;
begin
    Result := DefaultInterface.D_Yedek1;
end;

procedure TUretim.Set_D_Yedek1(Value: TDateTime);
begin
  DefaultInterface.Set_D_Yedek1(Value);
end;

function TUretim.Get_D_Yedek2: TDateTime;
begin
    Result := DefaultInterface.D_Yedek2;
end;

procedure TUretim.Set_D_Yedek2(Value: TDateTime);
begin
  DefaultInterface.Set_D_Yedek2(Value);
end;

function TUretim.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TUretim.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TUretim.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TUretim.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TUretim.Get_S_Yedek3: WideString;
begin
    Result := DefaultInterface.S_Yedek3;
end;

procedure TUretim.Set_S_Yedek3(const Value: WideString);
  { Warning: The property S_Yedek3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek3 := Value;
end;

function TUretim.Get_S_Yedek4: WideString;
begin
    Result := DefaultInterface.S_Yedek4;
end;

procedure TUretim.Set_S_Yedek4(const Value: WideString);
  { Warning: The property S_Yedek4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek4 := Value;
end;

function TUretim.Get_F_Yedek1: Double;
begin
    Result := DefaultInterface.F_Yedek1;
end;

procedure TUretim.Set_F_Yedek1(Value: Double);
begin
  DefaultInterface.Set_F_Yedek1(Value);
end;

function TUretim.Get_F_Yedek2: Double;
begin
    Result := DefaultInterface.F_Yedek2;
end;

procedure TUretim.Set_F_Yedek2(Value: Double);
begin
  DefaultInterface.Set_F_Yedek2(Value);
end;

function TUretim.Get_I_Yedek1: Integer;
begin
    Result := DefaultInterface.I_Yedek1;
end;

procedure TUretim.Set_I_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek1(Value);
end;

function TUretim.Get_I_Yedek2: Integer;
begin
    Result := DefaultInterface.I_Yedek2;
end;

procedure TUretim.Set_I_Yedek2(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek2(Value);
end;

function TUretim.Get_B_Yedek1: Shortint;
begin
    Result := DefaultInterface.B_Yedek1;
end;

procedure TUretim.Set_B_Yedek1(Value: Shortint);
begin
  DefaultInterface.Set_B_Yedek1(Value);
end;

function TUretim.Get_B_Yedek2: Shortint;
begin
    Result := DefaultInterface.B_Yedek2;
end;

procedure TUretim.Set_B_Yedek2(Value: Shortint);
begin
  DefaultInterface.Set_B_Yedek2(Value);
end;

function TUretim.Get_C_Yedek1: WideString;
begin
    Result := DefaultInterface.C_Yedek1;
end;

procedure TUretim.Set_C_Yedek1(const Value: WideString);
  { Warning: The property C_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek1 := Value;
end;

function TUretim.Get_C_Yedek2: WideString;
begin
    Result := DefaultInterface.C_Yedek2;
end;

procedure TUretim.Set_C_Yedek2(const Value: WideString);
  { Warning: The property C_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek2 := Value;
end;

function TUretim.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TUretim.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TUretim.Get_Aciklama: WideString;
begin
    Result := DefaultInterface.Aciklama;
end;

procedure TUretim.Set_Aciklama(const Value: WideString);
  { Warning: The property Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama := Value;
end;

function TUretim.Get_Recete_Tarih: TDateTime;
begin
    Result := DefaultInterface.Recete_Tarih;
end;

procedure TUretim.Set_Recete_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Recete_Tarih(Value);
end;

function TUretim.Get_SetNo: WideString;
begin
    Result := DefaultInterface.SetNo;
end;

procedure TUretim.Set_SetNo(const Value: WideString);
  { Warning: The property SetNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SetNo := Value;
end;

function TUretim.Get_Oncelik: Integer;
begin
    Result := DefaultInterface.Oncelik;
end;

procedure TUretim.Set_Oncelik(Value: Integer);
begin
  DefaultInterface.Set_Oncelik(Value);
end;

function TUretim.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TUretim.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TUretim.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TUretim.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TUretim.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TUretim.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TUretim.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TUretim.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TUretim.Get_YapKod: WideString;
begin
    Result := DefaultInterface.YapKod;
end;

procedure TUretim.Set_YapKod(const Value: WideString);
  { Warning: The property YapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YapKod := Value;
end;

procedure TUretim.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TUretim.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TUretim.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TUretim.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TUretim.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TUretim.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TUretim.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

procedure TUretim.SahalariTemizle;
begin
  DefaultInterface.SahalariTemizle;
end;

procedure TUretim.kayitUretimSonu(UretSonDepo: TUretSonDepo; YariMamuldeStokKullan: WordBool; 
                                  MaliyetlerCarpilsin: WordBool);
begin
  DefaultInterface.kayitUretimSonu(UretSonDepo, YariMamuldeStokKullan, MaliyetlerCarpilsin);
end;

procedure TUretim.kayitFisNoIleUretimSonu(const Fisno: WideString; UretSonDepo: TUretSonDepo; 
                                          YariMamuldeStokKullan: WordBool; 
                                          MaliyetlerCarpilsin: WordBool);
begin
  DefaultInterface.kayitFisNoIleUretimSonu(Fisno, UretSonDepo, YariMamuldeStokKullan, 
                                           MaliyetlerCarpilsin);
end;

function TUretim.SonFisNumarasi(const Seri: WideString): WideString;
begin
  Result := DefaultInterface.SonFisNumarasi(Seri);
end;

procedure TUretim.IsEmrindenGetir(const IsEmriNo: WideString);
begin
  DefaultInterface.IsEmrindenGetir(IsEmriNo);
end;

procedure TUretim.UretimSonuEntegre(const UretSonEntegParam: IUretSonEnteg);
begin
  DefaultInterface.UretimSonuEntegre(UretSonEntegParam);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TUretimProperties.Create(AServer: TUretim);
begin
  inherited Create;
  FServer := AServer;
end;

function TUretimProperties.GetDefaultInterface: IUretim;
begin
  Result := FServer.DefaultInterface;
end;

function TUretimProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TUretimProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TUretimProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TUretimProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TUretimProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TUretimProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TUretimProperties.Get_SilmeIcinGerekliSahalar: WideString;
begin
    Result := DefaultInterface.SilmeIcinGerekliSahalar;
end;

function TUretimProperties.Get_SonKayitNoAl: WordBool;
begin
    Result := DefaultInterface.SonKayitNoAl;
end;

procedure TUretimProperties.Set_SonKayitNoAl(Value: WordBool);
begin
  DefaultInterface.Set_SonKayitNoAl(Value);
end;

function TUretimProperties.Get_UretSon_FisNo: WideString;
begin
    Result := DefaultInterface.UretSon_FisNo;
end;

procedure TUretimProperties.Set_UretSon_FisNo(const Value: WideString);
  { Warning: The property UretSon_FisNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UretSon_FisNo := Value;
end;

function TUretimProperties.Get_UretSon_Tarih: TDateTime;
begin
    Result := DefaultInterface.UretSon_Tarih;
end;

procedure TUretimProperties.Set_UretSon_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_UretSon_Tarih(Value);
end;

function TUretimProperties.Get_UretSon_SipNo: WideString;
begin
    Result := DefaultInterface.UretSon_SipNo;
end;

procedure TUretimProperties.Set_UretSon_SipNo(const Value: WideString);
  { Warning: The property UretSon_SipNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UretSon_SipNo := Value;
end;

function TUretimProperties.Get_UretSon_Depo: Integer;
begin
    Result := DefaultInterface.UretSon_Depo;
end;

procedure TUretimProperties.Set_UretSon_Depo(Value: Integer);
begin
  DefaultInterface.Set_UretSon_Depo(Value);
end;

function TUretimProperties.Get_UretSon_Mamul: WideString;
begin
    Result := DefaultInterface.UretSon_Mamul;
end;

procedure TUretimProperties.Set_UretSon_Mamul(const Value: WideString);
  { Warning: The property UretSon_Mamul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.UretSon_Mamul := Value;
end;

function TUretimProperties.Get_UretSon_Miktar: Double;
begin
    Result := DefaultInterface.UretSon_Miktar;
end;

procedure TUretimProperties.Set_UretSon_Miktar(Value: Double);
begin
  DefaultInterface.Set_UretSon_Miktar(Value);
end;

function TUretimProperties.Get_UretSon_MalY1: Double;
begin
    Result := DefaultInterface.UretSon_MalY1;
end;

procedure TUretimProperties.Set_UretSon_MalY1(Value: Double);
begin
  DefaultInterface.Set_UretSon_MalY1(Value);
end;

function TUretimProperties.Get_UretSon_Maly2: Double;
begin
    Result := DefaultInterface.UretSon_Maly2;
end;

procedure TUretimProperties.Set_UretSon_Maly2(Value: Double);
begin
  DefaultInterface.Set_UretSon_Maly2(Value);
end;

function TUretimProperties.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TUretimProperties.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TUretimProperties.Get_IncKeyNo: Integer;
begin
    Result := DefaultInterface.IncKeyNo;
end;

procedure TUretimProperties.Set_IncKeyNo(Value: Integer);
begin
  DefaultInterface.Set_IncKeyNo(Value);
end;

function TUretimProperties.Get_D_Yedek1: TDateTime;
begin
    Result := DefaultInterface.D_Yedek1;
end;

procedure TUretimProperties.Set_D_Yedek1(Value: TDateTime);
begin
  DefaultInterface.Set_D_Yedek1(Value);
end;

function TUretimProperties.Get_D_Yedek2: TDateTime;
begin
    Result := DefaultInterface.D_Yedek2;
end;

procedure TUretimProperties.Set_D_Yedek2(Value: TDateTime);
begin
  DefaultInterface.Set_D_Yedek2(Value);
end;

function TUretimProperties.Get_S_Yedek1: WideString;
begin
    Result := DefaultInterface.S_Yedek1;
end;

procedure TUretimProperties.Set_S_Yedek1(const Value: WideString);
  { Warning: The property S_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek1 := Value;
end;

function TUretimProperties.Get_S_Yedek2: WideString;
begin
    Result := DefaultInterface.S_Yedek2;
end;

procedure TUretimProperties.Set_S_Yedek2(const Value: WideString);
  { Warning: The property S_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek2 := Value;
end;

function TUretimProperties.Get_S_Yedek3: WideString;
begin
    Result := DefaultInterface.S_Yedek3;
end;

procedure TUretimProperties.Set_S_Yedek3(const Value: WideString);
  { Warning: The property S_Yedek3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek3 := Value;
end;

function TUretimProperties.Get_S_Yedek4: WideString;
begin
    Result := DefaultInterface.S_Yedek4;
end;

procedure TUretimProperties.Set_S_Yedek4(const Value: WideString);
  { Warning: The property S_Yedek4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.S_Yedek4 := Value;
end;

function TUretimProperties.Get_F_Yedek1: Double;
begin
    Result := DefaultInterface.F_Yedek1;
end;

procedure TUretimProperties.Set_F_Yedek1(Value: Double);
begin
  DefaultInterface.Set_F_Yedek1(Value);
end;

function TUretimProperties.Get_F_Yedek2: Double;
begin
    Result := DefaultInterface.F_Yedek2;
end;

procedure TUretimProperties.Set_F_Yedek2(Value: Double);
begin
  DefaultInterface.Set_F_Yedek2(Value);
end;

function TUretimProperties.Get_I_Yedek1: Integer;
begin
    Result := DefaultInterface.I_Yedek1;
end;

procedure TUretimProperties.Set_I_Yedek1(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek1(Value);
end;

function TUretimProperties.Get_I_Yedek2: Integer;
begin
    Result := DefaultInterface.I_Yedek2;
end;

procedure TUretimProperties.Set_I_Yedek2(Value: Integer);
begin
  DefaultInterface.Set_I_Yedek2(Value);
end;

function TUretimProperties.Get_B_Yedek1: Shortint;
begin
    Result := DefaultInterface.B_Yedek1;
end;

procedure TUretimProperties.Set_B_Yedek1(Value: Shortint);
begin
  DefaultInterface.Set_B_Yedek1(Value);
end;

function TUretimProperties.Get_B_Yedek2: Shortint;
begin
    Result := DefaultInterface.B_Yedek2;
end;

procedure TUretimProperties.Set_B_Yedek2(Value: Shortint);
begin
  DefaultInterface.Set_B_Yedek2(Value);
end;

function TUretimProperties.Get_C_Yedek1: WideString;
begin
    Result := DefaultInterface.C_Yedek1;
end;

procedure TUretimProperties.Set_C_Yedek1(const Value: WideString);
  { Warning: The property C_Yedek1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek1 := Value;
end;

function TUretimProperties.Get_C_Yedek2: WideString;
begin
    Result := DefaultInterface.C_Yedek2;
end;

procedure TUretimProperties.Set_C_Yedek2(const Value: WideString);
  { Warning: The property C_Yedek2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.C_Yedek2 := Value;
end;

function TUretimProperties.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TUretimProperties.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

function TUretimProperties.Get_Aciklama: WideString;
begin
    Result := DefaultInterface.Aciklama;
end;

procedure TUretimProperties.Set_Aciklama(const Value: WideString);
  { Warning: The property Aciklama has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama := Value;
end;

function TUretimProperties.Get_Recete_Tarih: TDateTime;
begin
    Result := DefaultInterface.Recete_Tarih;
end;

procedure TUretimProperties.Set_Recete_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Recete_Tarih(Value);
end;

function TUretimProperties.Get_SetNo: WideString;
begin
    Result := DefaultInterface.SetNo;
end;

procedure TUretimProperties.Set_SetNo(const Value: WideString);
  { Warning: The property SetNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SetNo := Value;
end;

function TUretimProperties.Get_Oncelik: Integer;
begin
    Result := DefaultInterface.Oncelik;
end;

procedure TUretimProperties.Set_Oncelik(Value: Integer);
begin
  DefaultInterface.Set_Oncelik(Value);
end;

function TUretimProperties.Get_KayitYapanKul: WideString;
begin
    Result := DefaultInterface.KayitYapanKul;
end;

procedure TUretimProperties.Set_KayitYapanKul(const Value: WideString);
  { Warning: The property KayitYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KayitYapanKul := Value;
end;

function TUretimProperties.Get_KayitTarihi: TDateTime;
begin
    Result := DefaultInterface.KayitTarihi;
end;

procedure TUretimProperties.Set_KayitTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_KayitTarihi(Value);
end;

function TUretimProperties.Get_DuzeltmeYapanKul: WideString;
begin
    Result := DefaultInterface.DuzeltmeYapanKul;
end;

procedure TUretimProperties.Set_DuzeltmeYapanKul(const Value: WideString);
  { Warning: The property DuzeltmeYapanKul has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DuzeltmeYapanKul := Value;
end;

function TUretimProperties.Get_DuzeltmeTarihi: TDateTime;
begin
    Result := DefaultInterface.DuzeltmeTarihi;
end;

procedure TUretimProperties.Set_DuzeltmeTarihi(Value: TDateTime);
begin
  DefaultInterface.Set_DuzeltmeTarihi(Value);
end;

function TUretimProperties.Get_YapKod: WideString;
begin
    Result := DefaultInterface.YapKod;
end;

procedure TUretimProperties.Set_YapKod(const Value: WideString);
  { Warning: The property YapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YapKod := Value;
end;

{$ENDIF}

class function CoFatKosulDetay.Create: IFatKosulDetay;
begin
  Result := CreateComObject(CLASS_FatKosulDetay) as IFatKosulDetay;
end;

class function CoFatKosulDetay.CreateRemote(const MachineName: string): IFatKosulDetay;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FatKosulDetay) as IFatKosulDetay;
end;

procedure TFatKosulDetay.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DCB3EBDC-D7ED-4D13-A2A3-2CD754485EE1}';
    IntfIID:   '{2FFE08F6-6EED-4218-8506-D9CFC5A4A087}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFatKosulDetay.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IFatKosulDetay;
  end;
end;

procedure TFatKosulDetay.ConnectTo(svrIntf: IFatKosulDetay);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFatKosulDetay.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFatKosulDetay.GetDefaultInterface: IFatKosulDetay;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFatKosulDetay.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFatKosulDetayProperties.Create(Self);
{$ENDIF}
end;

destructor TFatKosulDetay.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFatKosulDetay.GetServerProperties: TFatKosulDetayProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFatKosulDetay.Get_KOSULKODU: WideString;
begin
    Result := DefaultInterface.KOSULKODU;
end;

function TFatKosulDetay.Get_BaslangicTarihi: TDateTime;
begin
    Result := DefaultInterface.BaslangicTarihi;
end;

function TFatKosulDetay.Get_BitisTarihi: TDateTime;
begin
    Result := DefaultInterface.BitisTarihi;
end;

function TFatKosulDetay.Get_StokKodu: WideString;
begin
    Result := DefaultInterface.StokKodu;
end;

function TFatKosulDetay.Get_RaporKodu: WideString;
begin
    Result := DefaultInterface.RaporKodu;
end;

function TFatKosulDetay.Get_Vade: Integer;
begin
    Result := DefaultInterface.Vade;
end;

function TFatKosulDetay.Get_TutarMi: WordBool;
begin
    Result := DefaultInterface.TutarMi;
end;

function TFatKosulDetay.Get_IskOranlari(Index: Integer): Double;
begin
    Result := DefaultInterface.IskOranlari[Index];
end;

function TFatKosulDetay.Get_FIYATTARIHI: TDateTime;
begin
    Result := DefaultInterface.FIYATTARIHI;
end;

function TFatKosulDetay.Get_ListeFiyati: Smallint;
begin
    Result := DefaultInterface.ListeFiyati;
end;

function TFatKosulDetay.Get_MalFazlasi: IFatKosMalFazlasi;
begin
    Result := DefaultInterface.MalFazlasi;
end;

function TFatKosulDetay.Get_DetayRangeIskonto: IFatKosulRangeIsk;
begin
    Result := DefaultInterface.DetayRangeIskonto;
end;

function TFatKosulDetay.Get_EkKosulDetayRangeIsk: IFatKosulRangeIsk;
begin
    Result := DefaultInterface.EkKosulDetayRangeIsk;
end;

function TFatKosulDetay.Get_KalemDovTip: Integer;
begin
    Result := DefaultInterface.KalemDovTip;
end;

function TFatKosulDetay.Get_KalemBrutFiyat: Double;
begin
    Result := DefaultInterface.KalemBrutFiyat;
end;

function TFatKosulDetay.Get_KalemMFBrutFiyat: Double;
begin
    Result := DefaultInterface.KalemMFBrutFiyat;
end;

function TFatKosulDetay.Get_IlaveSekli: TFatKosIlaveSekli;
begin
    Result := DefaultInterface.IlaveSekli;
end;

function TFatKosulDetay.Get_IskToplamSekli: TFatIskToplamSekli;
begin
    Result := DefaultInterface.IskToplamSekli;
end;

function TFatKosulDetay.Get_SabitVadeTar: TDateTime;
begin
    Result := DefaultInterface.SabitVadeTar;
end;

function TFatKosulDetay.Get_CMHesapDahil: WordBool;
begin
    Result := DefaultInterface.CMHesapDahil;
end;

function TFatKosulDetay.Get_CiroIskDahil: WordBool;
begin
    Result := DefaultInterface.CiroIskDahil;
end;

function TFatKosulDetay.Get_PesinIskOran: TDateTime;
begin
    Result := DefaultInterface.PesinIskOran;
end;

function TFatKosulDetay.Get_GecikmeKatSayisi: Double;
begin
    Result := DefaultInterface.GecikmeKatSayisi;
end;

function TFatKosulDetay.Get_VadeKodu: WideString;
begin
    Result := DefaultInterface.VadeKodu;
end;

function TFatKosulDetay.Get_VadeHangiIsk: Smallint;
begin
    Result := DefaultInterface.VadeHangiIsk;
end;

function TFatKosulDetay.Get_VadeIskontoTipi: Integer;
begin
    Result := DefaultInterface.VadeIskontoTipi;
end;

function TFatKosulDetay.Get_Olcubr: Integer;
begin
    Result := DefaultInterface.Olcubr;
end;

function TFatKosulDetay.Get_MalFiskIliski: WideString;
begin
    Result := DefaultInterface.MalFiskIliski;
end;

function TFatKosulDetay.Get_MalFiskGrupMu: WordBool;
begin
    Result := DefaultInterface.MalFiskGrupMu;
end;

function TFatKosulDetay.Get_StokIliski: WideString;
begin
    Result := DefaultInterface.StokIliski;
end;

function TFatKosulDetay.Get_FireHangiIsk: Smallint;
begin
    Result := DefaultInterface.FireHangiIsk;
end;

function TFatKosulDetay.Get_FireIskontoTipi: Integer;
begin
    Result := DefaultInterface.FireIskontoTipi;
end;

function TFatKosulDetay.Get_FIYATGRUBU: WideString;
begin
    Result := DefaultInterface.FIYATGRUBU;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFatKosulDetayProperties.Create(AServer: TFatKosulDetay);
begin
  inherited Create;
  FServer := AServer;
end;

function TFatKosulDetayProperties.GetDefaultInterface: IFatKosulDetay;
begin
  Result := FServer.DefaultInterface;
end;

function TFatKosulDetayProperties.Get_KOSULKODU: WideString;
begin
    Result := DefaultInterface.KOSULKODU;
end;

function TFatKosulDetayProperties.Get_BaslangicTarihi: TDateTime;
begin
    Result := DefaultInterface.BaslangicTarihi;
end;

function TFatKosulDetayProperties.Get_BitisTarihi: TDateTime;
begin
    Result := DefaultInterface.BitisTarihi;
end;

function TFatKosulDetayProperties.Get_StokKodu: WideString;
begin
    Result := DefaultInterface.StokKodu;
end;

function TFatKosulDetayProperties.Get_RaporKodu: WideString;
begin
    Result := DefaultInterface.RaporKodu;
end;

function TFatKosulDetayProperties.Get_Vade: Integer;
begin
    Result := DefaultInterface.Vade;
end;

function TFatKosulDetayProperties.Get_TutarMi: WordBool;
begin
    Result := DefaultInterface.TutarMi;
end;

function TFatKosulDetayProperties.Get_IskOranlari(Index: Integer): Double;
begin
    Result := DefaultInterface.IskOranlari[Index];
end;

function TFatKosulDetayProperties.Get_FIYATTARIHI: TDateTime;
begin
    Result := DefaultInterface.FIYATTARIHI;
end;

function TFatKosulDetayProperties.Get_ListeFiyati: Smallint;
begin
    Result := DefaultInterface.ListeFiyati;
end;

function TFatKosulDetayProperties.Get_MalFazlasi: IFatKosMalFazlasi;
begin
    Result := DefaultInterface.MalFazlasi;
end;

function TFatKosulDetayProperties.Get_DetayRangeIskonto: IFatKosulRangeIsk;
begin
    Result := DefaultInterface.DetayRangeIskonto;
end;

function TFatKosulDetayProperties.Get_EkKosulDetayRangeIsk: IFatKosulRangeIsk;
begin
    Result := DefaultInterface.EkKosulDetayRangeIsk;
end;

function TFatKosulDetayProperties.Get_KalemDovTip: Integer;
begin
    Result := DefaultInterface.KalemDovTip;
end;

function TFatKosulDetayProperties.Get_KalemBrutFiyat: Double;
begin
    Result := DefaultInterface.KalemBrutFiyat;
end;

function TFatKosulDetayProperties.Get_KalemMFBrutFiyat: Double;
begin
    Result := DefaultInterface.KalemMFBrutFiyat;
end;

function TFatKosulDetayProperties.Get_IlaveSekli: TFatKosIlaveSekli;
begin
    Result := DefaultInterface.IlaveSekli;
end;

function TFatKosulDetayProperties.Get_IskToplamSekli: TFatIskToplamSekli;
begin
    Result := DefaultInterface.IskToplamSekli;
end;

function TFatKosulDetayProperties.Get_SabitVadeTar: TDateTime;
begin
    Result := DefaultInterface.SabitVadeTar;
end;

function TFatKosulDetayProperties.Get_CMHesapDahil: WordBool;
begin
    Result := DefaultInterface.CMHesapDahil;
end;

function TFatKosulDetayProperties.Get_CiroIskDahil: WordBool;
begin
    Result := DefaultInterface.CiroIskDahil;
end;

function TFatKosulDetayProperties.Get_PesinIskOran: TDateTime;
begin
    Result := DefaultInterface.PesinIskOran;
end;

function TFatKosulDetayProperties.Get_GecikmeKatSayisi: Double;
begin
    Result := DefaultInterface.GecikmeKatSayisi;
end;

function TFatKosulDetayProperties.Get_VadeKodu: WideString;
begin
    Result := DefaultInterface.VadeKodu;
end;

function TFatKosulDetayProperties.Get_VadeHangiIsk: Smallint;
begin
    Result := DefaultInterface.VadeHangiIsk;
end;

function TFatKosulDetayProperties.Get_VadeIskontoTipi: Integer;
begin
    Result := DefaultInterface.VadeIskontoTipi;
end;

function TFatKosulDetayProperties.Get_Olcubr: Integer;
begin
    Result := DefaultInterface.Olcubr;
end;

function TFatKosulDetayProperties.Get_MalFiskIliski: WideString;
begin
    Result := DefaultInterface.MalFiskIliski;
end;

function TFatKosulDetayProperties.Get_MalFiskGrupMu: WordBool;
begin
    Result := DefaultInterface.MalFiskGrupMu;
end;

function TFatKosulDetayProperties.Get_StokIliski: WideString;
begin
    Result := DefaultInterface.StokIliski;
end;

function TFatKosulDetayProperties.Get_FireHangiIsk: Smallint;
begin
    Result := DefaultInterface.FireHangiIsk;
end;

function TFatKosulDetayProperties.Get_FireIskontoTipi: Integer;
begin
    Result := DefaultInterface.FireIskontoTipi;
end;

function TFatKosulDetayProperties.Get_FIYATGRUBU: WideString;
begin
    Result := DefaultInterface.FIYATGRUBU;
end;

{$ENDIF}

class function CoFatKosMalFazlasi.Create: IFatKosMalFazlasi;
begin
  Result := CreateComObject(CLASS_FatKosMalFazlasi) as IFatKosMalFazlasi;
end;

class function CoFatKosMalFazlasi.CreateRemote(const MachineName: string): IFatKosMalFazlasi;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FatKosMalFazlasi) as IFatKosMalFazlasi;
end;

procedure TFatKosMalFazlasi.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{38500459-297B-434E-8DCD-A07CA9F94FA5}';
    IntfIID:   '{4D13A9A5-92B2-4518-9BC8-E9BB5680333B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFatKosMalFazlasi.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IFatKosMalFazlasi;
  end;
end;

procedure TFatKosMalFazlasi.ConnectTo(svrIntf: IFatKosMalFazlasi);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFatKosMalFazlasi.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFatKosMalFazlasi.GetDefaultInterface: IFatKosMalFazlasi;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFatKosMalFazlasi.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFatKosMalFazlasiProperties.Create(Self);
{$ENDIF}
end;

destructor TFatKosMalFazlasi.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFatKosMalFazlasi.GetServerProperties: TFatKosMalFazlasiProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFatKosMalFazlasi.Get_StokKodu: WideString;
begin
    Result := DefaultInterface.StokKodu;
end;

function TFatKosMalFazlasi.Get_Miktarlar(Index: Integer): Double;
begin
    Result := DefaultInterface.Miktarlar[Index];
end;

function TFatKosMalFazlasi.Get_Fazlalar(Index: Integer): Double;
begin
    Result := DefaultInterface.Fazlalar[Index];
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFatKosMalFazlasiProperties.Create(AServer: TFatKosMalFazlasi);
begin
  inherited Create;
  FServer := AServer;
end;

function TFatKosMalFazlasiProperties.GetDefaultInterface: IFatKosMalFazlasi;
begin
  Result := FServer.DefaultInterface;
end;

function TFatKosMalFazlasiProperties.Get_StokKodu: WideString;
begin
    Result := DefaultInterface.StokKodu;
end;

function TFatKosMalFazlasiProperties.Get_Miktarlar(Index: Integer): Double;
begin
    Result := DefaultInterface.Miktarlar[Index];
end;

function TFatKosMalFazlasiProperties.Get_Fazlalar(Index: Integer): Double;
begin
    Result := DefaultInterface.Fazlalar[Index];
end;

{$ENDIF}

class function CoFatKosulRangeIsk.Create: IFatKosulRangeIsk;
begin
  Result := CreateComObject(CLASS_FatKosulRangeIsk) as IFatKosulRangeIsk;
end;

class function CoFatKosulRangeIsk.CreateRemote(const MachineName: string): IFatKosulRangeIsk;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FatKosulRangeIsk) as IFatKosulRangeIsk;
end;

procedure TFatKosulRangeIsk.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7A6E6201-C8DF-4631-BA23-1036FF3635B4}';
    IntfIID:   '{86E48A36-061A-407F-AFEB-382A1C16D126}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFatKosulRangeIsk.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IFatKosulRangeIsk;
  end;
end;

procedure TFatKosulRangeIsk.ConnectTo(svrIntf: IFatKosulRangeIsk);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFatKosulRangeIsk.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFatKosulRangeIsk.GetDefaultInterface: IFatKosulRangeIsk;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFatKosulRangeIsk.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFatKosulRangeIskProperties.Create(Self);
{$ENDIF}
end;

destructor TFatKosulRangeIsk.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFatKosulRangeIsk.GetServerProperties: TFatKosulRangeIskProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFatKosulRangeIsk.Get_VarMi: WordBool;
begin
    Result := DefaultInterface.VarMi;
end;

function TFatKosulRangeIsk.Get_MiktarMiTutarMi: WideString;
begin
    Result := DefaultInterface.MiktarMiTutarMi;
end;

function TFatKosulRangeIsk.Get_Degerler(Index: Integer): Double;
begin
    Result := DefaultInterface.Degerler[Index];
end;

function TFatKosulRangeIsk.Get_Iskler(Index: Integer): Double;
begin
    Result := DefaultInterface.Iskler[Index];
end;

function TFatKosulRangeIsk.Get_HangiIsk: Smallint;
begin
    Result := DefaultInterface.HangiIsk;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFatKosulRangeIskProperties.Create(AServer: TFatKosulRangeIsk);
begin
  inherited Create;
  FServer := AServer;
end;

function TFatKosulRangeIskProperties.GetDefaultInterface: IFatKosulRangeIsk;
begin
  Result := FServer.DefaultInterface;
end;

function TFatKosulRangeIskProperties.Get_VarMi: WordBool;
begin
    Result := DefaultInterface.VarMi;
end;

function TFatKosulRangeIskProperties.Get_MiktarMiTutarMi: WideString;
begin
    Result := DefaultInterface.MiktarMiTutarMi;
end;

function TFatKosulRangeIskProperties.Get_Degerler(Index: Integer): Double;
begin
    Result := DefaultInterface.Degerler[Index];
end;

function TFatKosulRangeIskProperties.Get_Iskler(Index: Integer): Double;
begin
    Result := DefaultInterface.Iskler[Index];
end;

function TFatKosulRangeIskProperties.Get_HangiIsk: Smallint;
begin
    Result := DefaultInterface.HangiIsk;
end;

{$ENDIF}

class function CoMustahsil.Create: IMustahsil;
begin
  Result := CreateComObject(CLASS_Mustahsil) as IMustahsil;
end;

class function CoMustahsil.CreateRemote(const MachineName: string): IMustahsil;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Mustahsil) as IMustahsil;
end;

procedure TMustahsil.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7EA561F7-EE8F-4C12-8D57-3FEC527579CA}';
    IntfIID:   '{F24DFA16-3055-4FBC-97F1-F60B5D5E2994}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMustahsil.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IMustahsil;
  end;
end;

procedure TMustahsil.ConnectTo(svrIntf: IMustahsil);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMustahsil.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMustahsil.GetDefaultInterface: IMustahsil;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMustahsil.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMustahsilProperties.Create(Self);
{$ENDIF}
end;

destructor TMustahsil.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMustahsil.GetServerProperties: TMustahsilProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMustahsil.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TMustahsil.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMustahsil.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TMustahsil.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TMustahsil.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TMustahsil.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TMustahsil.Get_KalemAdedi: Integer;
begin
    Result := DefaultInterface.KalemAdedi;
end;

function TMustahsil.Get_Ust: IMustahsilUst;
begin
    Result := DefaultInterface.Ust;
end;

function TMustahsil.Get_Kalem(Index: Integer): IMustahsilKalem;
begin
    Result := DefaultInterface.Kalem[Index];
end;

procedure TMustahsil.kayitYeni;
begin
  DefaultInterface.kayitYeni;
end;

procedure TMustahsil.kayitDuzelt;
begin
  DefaultInterface.kayitDuzelt;
end;

procedure TMustahsil.kayitSil;
begin
  DefaultInterface.kayitSil;
end;

function TMustahsil.kayitOku(OkumaTipi: TOkumaTipi; const Kisit: WideString): WordBool;
begin
  Result := DefaultInterface.kayitOku(OkumaTipi, Kisit);
end;

procedure TMustahsil.NetsisTransaction(TransactionTipi: TTransactionTipi);
begin
  DefaultInterface.NetsisTransaction(TransactionTipi);
end;

procedure TMustahsil.NetsisLog(const Aciklama: WideString);
begin
  DefaultInterface.NetsisLog(Aciklama);
end;

function TMustahsil.getirAktifNDS(NDSTip: TNDSTip): Integer;
begin
  Result := DefaultInterface.getirAktifNDS(NDSTip);
end;

procedure TMustahsil.SonNumaraYaz(const MustahsilNo: WideString);
begin
  DefaultInterface.SonNumaraYaz(MustahsilNo);
end;

function TMustahsil.SonNumaraOku: WideString;
begin
  Result := DefaultInterface.SonNumaraOku;
end;

procedure TMustahsil.Init(const CariKod: WideString);
begin
  DefaultInterface.Init(CariKod);
end;

procedure TMustahsil.Sakla;
begin
  DefaultInterface.Sakla;
end;

function TMustahsil.KalemEkle(const StokKodu: WideString): IMustahsilKalem;
begin
  Result := DefaultInterface.KalemEkle(StokKodu);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMustahsilProperties.Create(AServer: TMustahsil);
begin
  inherited Create;
  FServer := AServer;
end;

function TMustahsilProperties.GetDefaultInterface: IMustahsil;
begin
  Result := FServer.DefaultInterface;
end;

function TMustahsilProperties.Get_Handle: Integer;
begin
    Result := DefaultInterface.Handle;
end;

function TMustahsilProperties.Get_Name: WideString;
begin
    Result := DefaultInterface.Name;
end;

procedure TMustahsilProperties.Set_Name(const Value: WideString);
  { Warning: The property Name has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Name := Value;
end;

function TMustahsilProperties.Get_Kernel: IKernel;
begin
    Result := DefaultInterface.Kernel;
end;

function TMustahsilProperties.Get_TransactSupport: WordBool;
begin
    Result := DefaultInterface.TransactSupport;
end;

procedure TMustahsilProperties.Set_TransactSupport(Value: WordBool);
begin
  DefaultInterface.Set_TransactSupport(Value);
end;

function TMustahsilProperties.Get_KalemAdedi: Integer;
begin
    Result := DefaultInterface.KalemAdedi;
end;

function TMustahsilProperties.Get_Ust: IMustahsilUst;
begin
    Result := DefaultInterface.Ust;
end;

function TMustahsilProperties.Get_Kalem(Index: Integer): IMustahsilKalem;
begin
    Result := DefaultInterface.Kalem[Index];
end;

{$ENDIF}

class function CoMustahsilUst.Create: IMustahsilUst;
begin
  Result := CreateComObject(CLASS_MustahsilUst) as IMustahsilUst;
end;

class function CoMustahsilUst.CreateRemote(const MachineName: string): IMustahsilUst;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MustahsilUst) as IMustahsilUst;
end;

procedure TMustahsilUst.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{295417FC-2EBE-4578-96DA-EF1756B552B8}';
    IntfIID:   '{4737CFA4-5F6E-4121-993A-035AD959E52C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMustahsilUst.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IMustahsilUst;
  end;
end;

procedure TMustahsilUst.ConnectTo(svrIntf: IMustahsilUst);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMustahsilUst.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMustahsilUst.GetDefaultInterface: IMustahsilUst;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMustahsilUst.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMustahsilUstProperties.Create(Self);
{$ENDIF}
end;

destructor TMustahsilUst.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMustahsilUst.GetServerProperties: TMustahsilUstProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMustahsilUst.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TMustahsilUst.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TMustahsilUst.Get_FATIRS_NO: WideString;
begin
    Result := DefaultInterface.FATIRS_NO;
end;

procedure TMustahsilUst.Set_FATIRS_NO(const Value: WideString);
  { Warning: The property FATIRS_NO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FATIRS_NO := Value;
end;

function TMustahsilUst.Get_TIPI: Integer;
begin
    Result := DefaultInterface.TIPI;
end;

procedure TMustahsilUst.Set_TIPI(Value: Integer);
begin
  DefaultInterface.Set_TIPI(Value);
end;

function TMustahsilUst.Get_CARI_ISIM: WideString;
begin
    Result := DefaultInterface.CARI_ISIM;
end;

procedure TMustahsilUst.Set_CARI_ISIM(const Value: WideString);
  { Warning: The property CARI_ISIM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_ISIM := Value;
end;

function TMustahsilUst.Get_CARI_ADRES: WideString;
begin
    Result := DefaultInterface.CARI_ADRES;
end;

procedure TMustahsilUst.Set_CARI_ADRES(const Value: WideString);
  { Warning: The property CARI_ADRES has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_ADRES := Value;
end;

function TMustahsilUst.Get_CARI_IL: WideString;
begin
    Result := DefaultInterface.CARI_IL;
end;

procedure TMustahsilUst.Set_CARI_IL(const Value: WideString);
  { Warning: The property CARI_IL has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_IL := Value;
end;

function TMustahsilUst.Get_CARI_ILCE: WideString;
begin
    Result := DefaultInterface.CARI_ILCE;
end;

procedure TMustahsilUst.Set_CARI_ILCE(const Value: WideString);
  { Warning: The property CARI_ILCE has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_ILCE := Value;
end;

function TMustahsilUst.Get_Cari_Vergi_Daire: WideString;
begin
    Result := DefaultInterface.Cari_Vergi_Daire;
end;

procedure TMustahsilUst.Set_Cari_Vergi_Daire(const Value: WideString);
  { Warning: The property Cari_Vergi_Daire has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Cari_Vergi_Daire := Value;
end;

function TMustahsilUst.Get_Cari_Vergi_No: WideString;
begin
    Result := DefaultInterface.Cari_Vergi_No;
end;

procedure TMustahsilUst.Set_Cari_Vergi_No(const Value: WideString);
  { Warning: The property Cari_Vergi_No has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Cari_Vergi_No := Value;
end;

function TMustahsilUst.Get_Tarih: TDateTime;
begin
    Result := DefaultInterface.Tarih;
end;

procedure TMustahsilUst.Set_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih(Value);
end;

function TMustahsilUst.Get_Cari_Kodu: WideString;
begin
    Result := DefaultInterface.Cari_Kodu;
end;

procedure TMustahsilUst.Set_Cari_Kodu(const Value: WideString);
  { Warning: The property Cari_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Cari_Kodu := Value;
end;

function TMustahsilUst.Get_BRUTTUTAR: Double;
begin
    Result := DefaultInterface.BRUTTUTAR;
end;

procedure TMustahsilUst.Set_BRUTTUTAR(Value: Double);
begin
  DefaultInterface.Set_BRUTTUTAR(Value);
end;

function TMustahsilUst.Get_Fon: Double;
begin
    Result := DefaultInterface.Fon;
end;

procedure TMustahsilUst.Set_Fon(Value: Double);
begin
  DefaultInterface.Set_Fon(Value);
end;

function TMustahsilUst.Get_Stopaj: Double;
begin
    Result := DefaultInterface.Stopaj;
end;

procedure TMustahsilUst.Set_Stopaj(Value: Double);
begin
  DefaultInterface.Set_Stopaj(Value);
end;

function TMustahsilUst.Get_Borsa: Double;
begin
    Result := DefaultInterface.Borsa;
end;

procedure TMustahsilUst.Set_Borsa(Value: Double);
begin
  DefaultInterface.Set_Borsa(Value);
end;

function TMustahsilUst.Get_Avans: Double;
begin
    Result := DefaultInterface.Avans;
end;

procedure TMustahsilUst.Set_Avans(Value: Double);
begin
  DefaultInterface.Set_Avans(Value);
end;

function TMustahsilUst.Get_Cek_No: WideString;
begin
    Result := DefaultInterface.Cek_No;
end;

procedure TMustahsilUst.Set_Cek_No(const Value: WideString);
  { Warning: The property Cek_No has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Cek_No := Value;
end;

function TMustahsilUst.Get_Banka: WideString;
begin
    Result := DefaultInterface.Banka;
end;

procedure TMustahsilUst.Set_Banka(const Value: WideString);
  { Warning: The property Banka has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Banka := Value;
end;

function TMustahsilUst.Get_Cek_Tarih: TDateTime;
begin
    Result := DefaultInterface.Cek_Tarih;
end;

procedure TMustahsilUst.Set_Cek_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Cek_Tarih(Value);
end;

function TMustahsilUst.Get_Cek_Tutar: Double;
begin
    Result := DefaultInterface.Cek_Tutar;
end;

procedure TMustahsilUst.Set_Cek_Tutar(Value: Double);
begin
  DefaultInterface.Set_Cek_Tutar(Value);
end;

function TMustahsilUst.Get_BagkurNo: Double;
begin
    Result := DefaultInterface.BagkurNo;
end;

procedure TMustahsilUst.Set_BagkurNo(Value: Double);
begin
  DefaultInterface.Set_BagkurNo(Value);
end;

function TMustahsilUst.Get_Mera: Double;
begin
    Result := DefaultInterface.Mera;
end;

procedure TMustahsilUst.Set_Mera(Value: Double);
begin
  DefaultInterface.Set_Mera(Value);
end;

function TMustahsilUst.Get_ODEMEGUNU: Smallint;
begin
    Result := DefaultInterface.ODEMEGUNU;
end;

procedure TMustahsilUst.Set_ODEMEGUNU(Value: Smallint);
begin
  DefaultInterface.Set_ODEMEGUNU(Value);
end;

function TMustahsilUst.Get_Son_Islem_Tar: TDateTime;
begin
    Result := DefaultInterface.Son_Islem_Tar;
end;

procedure TMustahsilUst.Set_Son_Islem_Tar(Value: TDateTime);
begin
  DefaultInterface.Set_Son_Islem_Tar(Value);
end;

function TMustahsilUst.Get_Bagkur: WideString;
begin
    Result := DefaultInterface.Bagkur;
end;

procedure TMustahsilUst.Set_Bagkur(const Value: WideString);
  { Warning: The property Bagkur has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Bagkur := Value;
end;

function TMustahsilUst.Get_Baba_Adi: WideString;
begin
    Result := DefaultInterface.Baba_Adi;
end;

procedure TMustahsilUst.Set_Baba_Adi(const Value: WideString);
  { Warning: The property Baba_Adi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Baba_Adi := Value;
end;

function TMustahsilUst.Get_DogumYT: WideString;
begin
    Result := DefaultInterface.DogumYT;
end;

procedure TMustahsilUst.Set_DogumYT(const Value: WideString);
  { Warning: The property DogumYT has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DogumYT := Value;
end;

function TMustahsilUst.Get_Miktar: Double;
begin
    Result := DefaultInterface.Miktar;
end;

procedure TMustahsilUst.Set_Miktar(Value: Double);
begin
  DefaultInterface.Set_Miktar(Value);
end;

function TMustahsilUst.Get_Urun_Kodu: WideString;
begin
    Result := DefaultInterface.Urun_Kodu;
end;

procedure TMustahsilUst.Set_Urun_Kodu(const Value: WideString);
  { Warning: The property Urun_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Urun_Kodu := Value;
end;

function TMustahsilUst.Get_Urun_Ismi: WideString;
begin
    Result := DefaultInterface.Urun_Ismi;
end;

procedure TMustahsilUst.Set_Urun_Ismi(const Value: WideString);
  { Warning: The property Urun_Ismi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Urun_Ismi := Value;
end;

function TMustahsilUst.Get_Urun_Fiati: Double;
begin
    Result := DefaultInterface.Urun_Fiati;
end;

procedure TMustahsilUst.Set_Urun_Fiati(Value: Double);
begin
  DefaultInterface.Set_Urun_Fiati(Value);
end;

function TMustahsilUst.Get_TesmNo: WideString;
begin
    Result := DefaultInterface.TesmNo;
end;

procedure TMustahsilUst.Set_TesmNo(const Value: WideString);
  { Warning: The property TesmNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TesmNo := Value;
end;

function TMustahsilUst.Get_Kasa_Kodu: WideString;
begin
    Result := DefaultInterface.Kasa_Kodu;
end;

procedure TMustahsilUst.Set_Kasa_Kodu(const Value: WideString);
  { Warning: The property Kasa_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kasa_Kodu := Value;
end;

function TMustahsilUst.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TMustahsilUst.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TMustahsilUst.Get_Genel_Toplam: Double;
begin
    Result := DefaultInterface.Genel_Toplam;
end;

procedure TMustahsilUst.Set_Genel_Toplam(Value: Double);
begin
  DefaultInterface.Set_Genel_Toplam(Value);
end;

function TMustahsilUst.Get_Pesinat: Double;
begin
    Result := DefaultInterface.Pesinat;
end;

procedure TMustahsilUst.Set_Pesinat(Value: Double);
begin
  DefaultInterface.Set_Pesinat(Value);
end;

function TMustahsilUst.Get_MurFiat: Double;
begin
    Result := DefaultInterface.MurFiat;
end;

procedure TMustahsilUst.Set_MurFiat(Value: Double);
begin
  DefaultInterface.Set_MurFiat(Value);
end;

function TMustahsilUst.Get_GirDepo: Integer;
begin
    Result := DefaultInterface.GirDepo;
end;

procedure TMustahsilUst.Set_GirDepo(Value: Integer);
begin
  DefaultInterface.Set_GirDepo(Value);
end;

function TMustahsilUst.Get_CikDepo: Integer;
begin
    Result := DefaultInterface.CikDepo;
end;

procedure TMustahsilUst.Set_CikDepo(Value: Integer);
begin
  DefaultInterface.Set_CikDepo(Value);
end;

function TMustahsilUst.Get_Pesin_Satis: WordBool;
begin
    Result := DefaultInterface.Pesin_Satis;
end;

procedure TMustahsilUst.Set_Pesin_Satis(Value: WordBool);
begin
  DefaultInterface.Set_Pesin_Satis(Value);
end;

function TMustahsilUst.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TMustahsilUst.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMustahsilUstProperties.Create(AServer: TMustahsilUst);
begin
  inherited Create;
  FServer := AServer;
end;

function TMustahsilUstProperties.GetDefaultInterface: IMustahsilUst;
begin
  Result := FServer.DefaultInterface;
end;

function TMustahsilUstProperties.Get_Sube_Kodu: Integer;
begin
    Result := DefaultInterface.Sube_Kodu;
end;

procedure TMustahsilUstProperties.Set_Sube_Kodu(Value: Integer);
begin
  DefaultInterface.Set_Sube_Kodu(Value);
end;

function TMustahsilUstProperties.Get_FATIRS_NO: WideString;
begin
    Result := DefaultInterface.FATIRS_NO;
end;

procedure TMustahsilUstProperties.Set_FATIRS_NO(const Value: WideString);
  { Warning: The property FATIRS_NO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FATIRS_NO := Value;
end;

function TMustahsilUstProperties.Get_TIPI: Integer;
begin
    Result := DefaultInterface.TIPI;
end;

procedure TMustahsilUstProperties.Set_TIPI(Value: Integer);
begin
  DefaultInterface.Set_TIPI(Value);
end;

function TMustahsilUstProperties.Get_CARI_ISIM: WideString;
begin
    Result := DefaultInterface.CARI_ISIM;
end;

procedure TMustahsilUstProperties.Set_CARI_ISIM(const Value: WideString);
  { Warning: The property CARI_ISIM has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_ISIM := Value;
end;

function TMustahsilUstProperties.Get_CARI_ADRES: WideString;
begin
    Result := DefaultInterface.CARI_ADRES;
end;

procedure TMustahsilUstProperties.Set_CARI_ADRES(const Value: WideString);
  { Warning: The property CARI_ADRES has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_ADRES := Value;
end;

function TMustahsilUstProperties.Get_CARI_IL: WideString;
begin
    Result := DefaultInterface.CARI_IL;
end;

procedure TMustahsilUstProperties.Set_CARI_IL(const Value: WideString);
  { Warning: The property CARI_IL has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_IL := Value;
end;

function TMustahsilUstProperties.Get_CARI_ILCE: WideString;
begin
    Result := DefaultInterface.CARI_ILCE;
end;

procedure TMustahsilUstProperties.Set_CARI_ILCE(const Value: WideString);
  { Warning: The property CARI_ILCE has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.CARI_ILCE := Value;
end;

function TMustahsilUstProperties.Get_Cari_Vergi_Daire: WideString;
begin
    Result := DefaultInterface.Cari_Vergi_Daire;
end;

procedure TMustahsilUstProperties.Set_Cari_Vergi_Daire(const Value: WideString);
  { Warning: The property Cari_Vergi_Daire has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Cari_Vergi_Daire := Value;
end;

function TMustahsilUstProperties.Get_Cari_Vergi_No: WideString;
begin
    Result := DefaultInterface.Cari_Vergi_No;
end;

procedure TMustahsilUstProperties.Set_Cari_Vergi_No(const Value: WideString);
  { Warning: The property Cari_Vergi_No has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Cari_Vergi_No := Value;
end;

function TMustahsilUstProperties.Get_Tarih: TDateTime;
begin
    Result := DefaultInterface.Tarih;
end;

procedure TMustahsilUstProperties.Set_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Tarih(Value);
end;

function TMustahsilUstProperties.Get_Cari_Kodu: WideString;
begin
    Result := DefaultInterface.Cari_Kodu;
end;

procedure TMustahsilUstProperties.Set_Cari_Kodu(const Value: WideString);
  { Warning: The property Cari_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Cari_Kodu := Value;
end;

function TMustahsilUstProperties.Get_BRUTTUTAR: Double;
begin
    Result := DefaultInterface.BRUTTUTAR;
end;

procedure TMustahsilUstProperties.Set_BRUTTUTAR(Value: Double);
begin
  DefaultInterface.Set_BRUTTUTAR(Value);
end;

function TMustahsilUstProperties.Get_Fon: Double;
begin
    Result := DefaultInterface.Fon;
end;

procedure TMustahsilUstProperties.Set_Fon(Value: Double);
begin
  DefaultInterface.Set_Fon(Value);
end;

function TMustahsilUstProperties.Get_Stopaj: Double;
begin
    Result := DefaultInterface.Stopaj;
end;

procedure TMustahsilUstProperties.Set_Stopaj(Value: Double);
begin
  DefaultInterface.Set_Stopaj(Value);
end;

function TMustahsilUstProperties.Get_Borsa: Double;
begin
    Result := DefaultInterface.Borsa;
end;

procedure TMustahsilUstProperties.Set_Borsa(Value: Double);
begin
  DefaultInterface.Set_Borsa(Value);
end;

function TMustahsilUstProperties.Get_Avans: Double;
begin
    Result := DefaultInterface.Avans;
end;

procedure TMustahsilUstProperties.Set_Avans(Value: Double);
begin
  DefaultInterface.Set_Avans(Value);
end;

function TMustahsilUstProperties.Get_Cek_No: WideString;
begin
    Result := DefaultInterface.Cek_No;
end;

procedure TMustahsilUstProperties.Set_Cek_No(const Value: WideString);
  { Warning: The property Cek_No has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Cek_No := Value;
end;

function TMustahsilUstProperties.Get_Banka: WideString;
begin
    Result := DefaultInterface.Banka;
end;

procedure TMustahsilUstProperties.Set_Banka(const Value: WideString);
  { Warning: The property Banka has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Banka := Value;
end;

function TMustahsilUstProperties.Get_Cek_Tarih: TDateTime;
begin
    Result := DefaultInterface.Cek_Tarih;
end;

procedure TMustahsilUstProperties.Set_Cek_Tarih(Value: TDateTime);
begin
  DefaultInterface.Set_Cek_Tarih(Value);
end;

function TMustahsilUstProperties.Get_Cek_Tutar: Double;
begin
    Result := DefaultInterface.Cek_Tutar;
end;

procedure TMustahsilUstProperties.Set_Cek_Tutar(Value: Double);
begin
  DefaultInterface.Set_Cek_Tutar(Value);
end;

function TMustahsilUstProperties.Get_BagkurNo: Double;
begin
    Result := DefaultInterface.BagkurNo;
end;

procedure TMustahsilUstProperties.Set_BagkurNo(Value: Double);
begin
  DefaultInterface.Set_BagkurNo(Value);
end;

function TMustahsilUstProperties.Get_Mera: Double;
begin
    Result := DefaultInterface.Mera;
end;

procedure TMustahsilUstProperties.Set_Mera(Value: Double);
begin
  DefaultInterface.Set_Mera(Value);
end;

function TMustahsilUstProperties.Get_ODEMEGUNU: Smallint;
begin
    Result := DefaultInterface.ODEMEGUNU;
end;

procedure TMustahsilUstProperties.Set_ODEMEGUNU(Value: Smallint);
begin
  DefaultInterface.Set_ODEMEGUNU(Value);
end;

function TMustahsilUstProperties.Get_Son_Islem_Tar: TDateTime;
begin
    Result := DefaultInterface.Son_Islem_Tar;
end;

procedure TMustahsilUstProperties.Set_Son_Islem_Tar(Value: TDateTime);
begin
  DefaultInterface.Set_Son_Islem_Tar(Value);
end;

function TMustahsilUstProperties.Get_Bagkur: WideString;
begin
    Result := DefaultInterface.Bagkur;
end;

procedure TMustahsilUstProperties.Set_Bagkur(const Value: WideString);
  { Warning: The property Bagkur has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Bagkur := Value;
end;

function TMustahsilUstProperties.Get_Baba_Adi: WideString;
begin
    Result := DefaultInterface.Baba_Adi;
end;

procedure TMustahsilUstProperties.Set_Baba_Adi(const Value: WideString);
  { Warning: The property Baba_Adi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Baba_Adi := Value;
end;

function TMustahsilUstProperties.Get_DogumYT: WideString;
begin
    Result := DefaultInterface.DogumYT;
end;

procedure TMustahsilUstProperties.Set_DogumYT(const Value: WideString);
  { Warning: The property DogumYT has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DogumYT := Value;
end;

function TMustahsilUstProperties.Get_Miktar: Double;
begin
    Result := DefaultInterface.Miktar;
end;

procedure TMustahsilUstProperties.Set_Miktar(Value: Double);
begin
  DefaultInterface.Set_Miktar(Value);
end;

function TMustahsilUstProperties.Get_Urun_Kodu: WideString;
begin
    Result := DefaultInterface.Urun_Kodu;
end;

procedure TMustahsilUstProperties.Set_Urun_Kodu(const Value: WideString);
  { Warning: The property Urun_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Urun_Kodu := Value;
end;

function TMustahsilUstProperties.Get_Urun_Ismi: WideString;
begin
    Result := DefaultInterface.Urun_Ismi;
end;

procedure TMustahsilUstProperties.Set_Urun_Ismi(const Value: WideString);
  { Warning: The property Urun_Ismi has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Urun_Ismi := Value;
end;

function TMustahsilUstProperties.Get_Urun_Fiati: Double;
begin
    Result := DefaultInterface.Urun_Fiati;
end;

procedure TMustahsilUstProperties.Set_Urun_Fiati(Value: Double);
begin
  DefaultInterface.Set_Urun_Fiati(Value);
end;

function TMustahsilUstProperties.Get_TesmNo: WideString;
begin
    Result := DefaultInterface.TesmNo;
end;

procedure TMustahsilUstProperties.Set_TesmNo(const Value: WideString);
  { Warning: The property TesmNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.TesmNo := Value;
end;

function TMustahsilUstProperties.Get_Kasa_Kodu: WideString;
begin
    Result := DefaultInterface.Kasa_Kodu;
end;

procedure TMustahsilUstProperties.Set_Kasa_Kodu(const Value: WideString);
  { Warning: The property Kasa_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kasa_Kodu := Value;
end;

function TMustahsilUstProperties.Get_Update_Kodu: WideString;
begin
    Result := DefaultInterface.Update_Kodu;
end;

procedure TMustahsilUstProperties.Set_Update_Kodu(const Value: WideString);
  { Warning: The property Update_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Update_Kodu := Value;
end;

function TMustahsilUstProperties.Get_Genel_Toplam: Double;
begin
    Result := DefaultInterface.Genel_Toplam;
end;

procedure TMustahsilUstProperties.Set_Genel_Toplam(Value: Double);
begin
  DefaultInterface.Set_Genel_Toplam(Value);
end;

function TMustahsilUstProperties.Get_Pesinat: Double;
begin
    Result := DefaultInterface.Pesinat;
end;

procedure TMustahsilUstProperties.Set_Pesinat(Value: Double);
begin
  DefaultInterface.Set_Pesinat(Value);
end;

function TMustahsilUstProperties.Get_MurFiat: Double;
begin
    Result := DefaultInterface.MurFiat;
end;

procedure TMustahsilUstProperties.Set_MurFiat(Value: Double);
begin
  DefaultInterface.Set_MurFiat(Value);
end;

function TMustahsilUstProperties.Get_GirDepo: Integer;
begin
    Result := DefaultInterface.GirDepo;
end;

procedure TMustahsilUstProperties.Set_GirDepo(Value: Integer);
begin
  DefaultInterface.Set_GirDepo(Value);
end;

function TMustahsilUstProperties.Get_CikDepo: Integer;
begin
    Result := DefaultInterface.CikDepo;
end;

procedure TMustahsilUstProperties.Set_CikDepo(Value: Integer);
begin
  DefaultInterface.Set_CikDepo(Value);
end;

function TMustahsilUstProperties.Get_Pesin_Satis: WordBool;
begin
    Result := DefaultInterface.Pesin_Satis;
end;

procedure TMustahsilUstProperties.Set_Pesin_Satis(Value: WordBool);
begin
  DefaultInterface.Set_Pesin_Satis(Value);
end;

function TMustahsilUstProperties.Get_Proje_Kodu: WideString;
begin
    Result := DefaultInterface.Proje_Kodu;
end;

procedure TMustahsilUstProperties.Set_Proje_Kodu(const Value: WideString);
  { Warning: The property Proje_Kodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Proje_Kodu := Value;
end;

{$ENDIF}

class function CoMustahsilKalem.Create: IMustahsilKalem;
begin
  Result := CreateComObject(CLASS_MustahsilKalem) as IMustahsilKalem;
end;

class function CoMustahsilKalem.CreateRemote(const MachineName: string): IMustahsilKalem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MustahsilKalem) as IMustahsilKalem;
end;

procedure TMustahsilKalem.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{33684DE3-492B-4332-85E7-68E24696DDF5}';
    IntfIID:   '{EE849457-2796-4923-A149-07CA14850DD7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMustahsilKalem.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IMustahsilKalem;
  end;
end;

procedure TMustahsilKalem.ConnectTo(svrIntf: IMustahsilKalem);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMustahsilKalem.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMustahsilKalem.GetDefaultInterface: IMustahsilKalem;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMustahsilKalem.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMustahsilKalemProperties.Create(Self);
{$ENDIF}
end;

destructor TMustahsilKalem.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMustahsilKalem.GetServerProperties: TMustahsilKalemProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMustahsilKalem.Get_Stra_Kod: WideString;
begin
    Result := DefaultInterface.Stra_Kod;
end;

procedure TMustahsilKalem.Set_Stra_Kod(const Value: WideString);
  { Warning: The property Stra_Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stra_Kod := Value;
end;

function TMustahsilKalem.Get_STra_FATIRSNO: WideString;
begin
    Result := DefaultInterface.STra_FATIRSNO;
end;

procedure TMustahsilKalem.Set_STra_FATIRSNO(const Value: WideString);
  { Warning: The property STra_FATIRSNO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_FATIRSNO := Value;
end;

function TMustahsilKalem.Get_STra_GCMIK: Double;
begin
    Result := DefaultInterface.STra_GCMIK;
end;

procedure TMustahsilKalem.Set_STra_GCMIK(Value: Double);
begin
  DefaultInterface.Set_STra_GCMIK(Value);
end;

function TMustahsilKalem.Get_STra_GCMIK2: Double;
begin
    Result := DefaultInterface.STra_GCMIK2;
end;

procedure TMustahsilKalem.Set_STra_GCMIK2(Value: Double);
begin
  DefaultInterface.Set_STra_GCMIK2(Value);
end;

function TMustahsilKalem.Get_CEVRIM: Double;
begin
    Result := DefaultInterface.CEVRIM;
end;

procedure TMustahsilKalem.Set_CEVRIM(Value: Double);
begin
  DefaultInterface.Set_CEVRIM(Value);
end;

function TMustahsilKalem.Get_STra_GC: WideString;
begin
    Result := DefaultInterface.STra_GC;
end;

procedure TMustahsilKalem.Set_STra_GC(const Value: WideString);
  { Warning: The property STra_GC has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_GC := Value;
end;

function TMustahsilKalem.Get_STra_TAR: TDateTime;
begin
    Result := DefaultInterface.STra_TAR;
end;

procedure TMustahsilKalem.Set_STra_TAR(Value: TDateTime);
begin
  DefaultInterface.Set_STra_TAR(Value);
end;

function TMustahsilKalem.Get_STra_NF: Double;
begin
    Result := DefaultInterface.STra_NF;
end;

procedure TMustahsilKalem.Set_STra_NF(Value: Double);
begin
  DefaultInterface.Set_STra_NF(Value);
end;

function TMustahsilKalem.Get_STra_BF: Double;
begin
    Result := DefaultInterface.STra_BF;
end;

procedure TMustahsilKalem.Set_STra_BF(Value: Double);
begin
  DefaultInterface.Set_STra_BF(Value);
end;

function TMustahsilKalem.Get_STra_IAF: Double;
begin
    Result := DefaultInterface.STra_IAF;
end;

procedure TMustahsilKalem.Set_STra_IAF(Value: Double);
begin
  DefaultInterface.Set_STra_IAF(Value);
end;

function TMustahsilKalem.Get_STra_KDV: Integer;
begin
    Result := DefaultInterface.STra_KDV;
end;

procedure TMustahsilKalem.Set_STra_KDV(Value: Integer);
begin
  DefaultInterface.Set_STra_KDV(Value);
end;

function TMustahsilKalem.Get_DEPO_KODU: Integer;
begin
    Result := DefaultInterface.DEPO_KODU;
end;

procedure TMustahsilKalem.Set_DEPO_KODU(Value: Integer);
begin
  DefaultInterface.Set_DEPO_KODU(Value);
end;

function TMustahsilKalem.Get_STra_ACIK: WideString;
begin
    Result := DefaultInterface.STra_ACIK;
end;

procedure TMustahsilKalem.Set_STra_ACIK(const Value: WideString);
  { Warning: The property STra_ACIK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_ACIK := Value;
end;

function TMustahsilKalem.Get_STra_MALFISK: Double;
begin
    Result := DefaultInterface.STra_MALFISK;
end;

procedure TMustahsilKalem.Set_STra_MALFISK(Value: Double);
begin
  DefaultInterface.Set_STra_MALFISK(Value);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMustahsilKalemProperties.Create(AServer: TMustahsilKalem);
begin
  inherited Create;
  FServer := AServer;
end;

function TMustahsilKalemProperties.GetDefaultInterface: IMustahsilKalem;
begin
  Result := FServer.DefaultInterface;
end;

function TMustahsilKalemProperties.Get_Stra_Kod: WideString;
begin
    Result := DefaultInterface.Stra_Kod;
end;

procedure TMustahsilKalemProperties.Set_Stra_Kod(const Value: WideString);
  { Warning: The property Stra_Kod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Stra_Kod := Value;
end;

function TMustahsilKalemProperties.Get_STra_FATIRSNO: WideString;
begin
    Result := DefaultInterface.STra_FATIRSNO;
end;

procedure TMustahsilKalemProperties.Set_STra_FATIRSNO(const Value: WideString);
  { Warning: The property STra_FATIRSNO has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_FATIRSNO := Value;
end;

function TMustahsilKalemProperties.Get_STra_GCMIK: Double;
begin
    Result := DefaultInterface.STra_GCMIK;
end;

procedure TMustahsilKalemProperties.Set_STra_GCMIK(Value: Double);
begin
  DefaultInterface.Set_STra_GCMIK(Value);
end;

function TMustahsilKalemProperties.Get_STra_GCMIK2: Double;
begin
    Result := DefaultInterface.STra_GCMIK2;
end;

procedure TMustahsilKalemProperties.Set_STra_GCMIK2(Value: Double);
begin
  DefaultInterface.Set_STra_GCMIK2(Value);
end;

function TMustahsilKalemProperties.Get_CEVRIM: Double;
begin
    Result := DefaultInterface.CEVRIM;
end;

procedure TMustahsilKalemProperties.Set_CEVRIM(Value: Double);
begin
  DefaultInterface.Set_CEVRIM(Value);
end;

function TMustahsilKalemProperties.Get_STra_GC: WideString;
begin
    Result := DefaultInterface.STra_GC;
end;

procedure TMustahsilKalemProperties.Set_STra_GC(const Value: WideString);
  { Warning: The property STra_GC has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_GC := Value;
end;

function TMustahsilKalemProperties.Get_STra_TAR: TDateTime;
begin
    Result := DefaultInterface.STra_TAR;
end;

procedure TMustahsilKalemProperties.Set_STra_TAR(Value: TDateTime);
begin
  DefaultInterface.Set_STra_TAR(Value);
end;

function TMustahsilKalemProperties.Get_STra_NF: Double;
begin
    Result := DefaultInterface.STra_NF;
end;

procedure TMustahsilKalemProperties.Set_STra_NF(Value: Double);
begin
  DefaultInterface.Set_STra_NF(Value);
end;

function TMustahsilKalemProperties.Get_STra_BF: Double;
begin
    Result := DefaultInterface.STra_BF;
end;

procedure TMustahsilKalemProperties.Set_STra_BF(Value: Double);
begin
  DefaultInterface.Set_STra_BF(Value);
end;

function TMustahsilKalemProperties.Get_STra_IAF: Double;
begin
    Result := DefaultInterface.STra_IAF;
end;

procedure TMustahsilKalemProperties.Set_STra_IAF(Value: Double);
begin
  DefaultInterface.Set_STra_IAF(Value);
end;

function TMustahsilKalemProperties.Get_STra_KDV: Integer;
begin
    Result := DefaultInterface.STra_KDV;
end;

procedure TMustahsilKalemProperties.Set_STra_KDV(Value: Integer);
begin
  DefaultInterface.Set_STra_KDV(Value);
end;

function TMustahsilKalemProperties.Get_DEPO_KODU: Integer;
begin
    Result := DefaultInterface.DEPO_KODU;
end;

procedure TMustahsilKalemProperties.Set_DEPO_KODU(Value: Integer);
begin
  DefaultInterface.Set_DEPO_KODU(Value);
end;

function TMustahsilKalemProperties.Get_STra_ACIK: WideString;
begin
    Result := DefaultInterface.STra_ACIK;
end;

procedure TMustahsilKalemProperties.Set_STra_ACIK(const Value: WideString);
  { Warning: The property STra_ACIK has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.STra_ACIK := Value;
end;

function TMustahsilKalemProperties.Get_STra_MALFISK: Double;
begin
    Result := DefaultInterface.STra_MALFISK;
end;

procedure TMustahsilKalemProperties.Set_STra_MALFISK(Value: Double);
begin
  DefaultInterface.Set_STra_MALFISK(Value);
end;

{$ENDIF}

class function CoKalemSeri.Create: IKalemSeri;
begin
  Result := CreateComObject(CLASS_KalemSeri) as IKalemSeri;
end;

class function CoKalemSeri.CreateRemote(const MachineName: string): IKalemSeri;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_KalemSeri) as IKalemSeri;
end;

procedure TKalemSeri.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E3A993A5-D588-435D-B521-E8E09D804B5A}';
    IntfIID:   '{D415AC72-3876-4DCB-A99C-F6C37D9E7A24}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TKalemSeri.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IKalemSeri;
  end;
end;

procedure TKalemSeri.ConnectTo(svrIntf: IKalemSeri);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TKalemSeri.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TKalemSeri.GetDefaultInterface: IKalemSeri;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TKalemSeri.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TKalemSeriProperties.Create(Self);
{$ENDIF}
end;

destructor TKalemSeri.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TKalemSeri.GetServerProperties: TKalemSeriProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TKalemSeri.Get_Seri1: WideString;
begin
    Result := DefaultInterface.Seri1;
end;

procedure TKalemSeri.Set_Seri1(const Value: WideString);
  { Warning: The property Seri1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri1 := Value;
end;

function TKalemSeri.Get_Seri2: WideString;
begin
    Result := DefaultInterface.Seri2;
end;

procedure TKalemSeri.Set_Seri2(const Value: WideString);
  { Warning: The property Seri2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri2 := Value;
end;

function TKalemSeri.Get_Aciklama1: WideString;
begin
    Result := DefaultInterface.Aciklama1;
end;

procedure TKalemSeri.Set_Aciklama1(const Value: WideString);
  { Warning: The property Aciklama1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama1 := Value;
end;

function TKalemSeri.Get_Aciklama2: WideString;
begin
    Result := DefaultInterface.Aciklama2;
end;

procedure TKalemSeri.Set_Aciklama2(const Value: WideString);
  { Warning: The property Aciklama2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama2 := Value;
end;

function TKalemSeri.Get_Miktar: Double;
begin
    Result := DefaultInterface.Miktar;
end;

procedure TKalemSeri.Set_Miktar(Value: Double);
begin
  DefaultInterface.Set_Miktar(Value);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TKalemSeriProperties.Create(AServer: TKalemSeri);
begin
  inherited Create;
  FServer := AServer;
end;

function TKalemSeriProperties.GetDefaultInterface: IKalemSeri;
begin
  Result := FServer.DefaultInterface;
end;

function TKalemSeriProperties.Get_Seri1: WideString;
begin
    Result := DefaultInterface.Seri1;
end;

procedure TKalemSeriProperties.Set_Seri1(const Value: WideString);
  { Warning: The property Seri1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri1 := Value;
end;

function TKalemSeriProperties.Get_Seri2: WideString;
begin
    Result := DefaultInterface.Seri2;
end;

procedure TKalemSeriProperties.Set_Seri2(const Value: WideString);
  { Warning: The property Seri2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Seri2 := Value;
end;

function TKalemSeriProperties.Get_Aciklama1: WideString;
begin
    Result := DefaultInterface.Aciklama1;
end;

procedure TKalemSeriProperties.Set_Aciklama1(const Value: WideString);
  { Warning: The property Aciklama1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama1 := Value;
end;

function TKalemSeriProperties.Get_Aciklama2: WideString;
begin
    Result := DefaultInterface.Aciklama2;
end;

procedure TKalemSeriProperties.Set_Aciklama2(const Value: WideString);
  { Warning: The property Aciklama2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Aciklama2 := Value;
end;

function TKalemSeriProperties.Get_Miktar: Double;
begin
    Result := DefaultInterface.Miktar;
end;

procedure TKalemSeriProperties.Set_Miktar(Value: Double);
begin
  DefaultInterface.Set_Miktar(Value);
end;

{$ENDIF}

class function CoUretSonEnteg.Create: IUretSonEnteg;
begin
  Result := CreateComObject(CLASS_UretSonEnteg) as IUretSonEnteg;
end;

class function CoUretSonEnteg.CreateRemote(const MachineName: string): IUretSonEnteg;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UretSonEnteg) as IUretSonEnteg;
end;

procedure TUretSonEnteg.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9B7AFA8B-DB16-4242-A849-8CE5A00F5FC3}';
    IntfIID:   '{A4BF38DD-1C9B-4714-B1C1-F9AC5FB291E6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUretSonEnteg.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IUretSonEnteg;
  end;
end;

procedure TUretSonEnteg.ConnectTo(svrIntf: IUretSonEnteg);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUretSonEnteg.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUretSonEnteg.GetDefaultInterface: IUretSonEnteg;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TUretSonEnteg.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TUretSonEntegProperties.Create(Self);
{$ENDIF}
end;

destructor TUretSonEnteg.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TUretSonEnteg.GetServerProperties: TUretSonEntegProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TUretSonEnteg.Get_BasMamKod: WideString;
begin
    Result := DefaultInterface.BasMamKod;
end;

procedure TUretSonEnteg.Set_BasMamKod(const Value: WideString);
  { Warning: The property BasMamKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BasMamKod := Value;
end;

function TUretSonEnteg.Get_BitMamKod: WideString;
begin
    Result := DefaultInterface.BitMamKod;
end;

procedure TUretSonEnteg.Set_BitMamKod(const Value: WideString);
  { Warning: The property BitMamKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BitMamKod := Value;
end;

function TUretSonEnteg.Get_BasFisNo: WideString;
begin
    Result := DefaultInterface.BasFisNo;
end;

procedure TUretSonEnteg.Set_BasFisNo(const Value: WideString);
  { Warning: The property BasFisNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BasFisNo := Value;
end;

function TUretSonEnteg.Get_BitFisNo: WideString;
begin
    Result := DefaultInterface.BitFisNo;
end;

procedure TUretSonEnteg.Set_BitFisNo(const Value: WideString);
  { Warning: The property BitFisNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BitFisNo := Value;
end;

function TUretSonEnteg.Get_FisNoKirilimli: WordBool;
begin
    Result := DefaultInterface.FisNoKirilimli;
end;

procedure TUretSonEnteg.Set_FisNoKirilimli(Value: WordBool);
begin
  DefaultInterface.Set_FisNoKirilimli(Value);
end;

function TUretSonEnteg.Get_ReferansKod: WideString;
begin
    Result := DefaultInterface.ReferansKod;
end;

procedure TUretSonEnteg.Set_ReferansKod(const Value: WideString);
  { Warning: The property ReferansKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReferansKod := Value;
end;

function TUretSonEnteg.Get_BasTar: TDateTime;
begin
    Result := DefaultInterface.BasTar;
end;

procedure TUretSonEnteg.Set_BasTar(Value: TDateTime);
begin
  DefaultInterface.Set_BasTar(Value);
end;

function TUretSonEnteg.Get_BitTar: TDateTime;
begin
    Result := DefaultInterface.BitTar;
end;

procedure TUretSonEnteg.Set_BitTar(Value: TDateTime);
begin
  DefaultInterface.Set_BitTar(Value);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TUretSonEntegProperties.Create(AServer: TUretSonEnteg);
begin
  inherited Create;
  FServer := AServer;
end;

function TUretSonEntegProperties.GetDefaultInterface: IUretSonEnteg;
begin
  Result := FServer.DefaultInterface;
end;

function TUretSonEntegProperties.Get_BasMamKod: WideString;
begin
    Result := DefaultInterface.BasMamKod;
end;

procedure TUretSonEntegProperties.Set_BasMamKod(const Value: WideString);
  { Warning: The property BasMamKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BasMamKod := Value;
end;

function TUretSonEntegProperties.Get_BitMamKod: WideString;
begin
    Result := DefaultInterface.BitMamKod;
end;

procedure TUretSonEntegProperties.Set_BitMamKod(const Value: WideString);
  { Warning: The property BitMamKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BitMamKod := Value;
end;

function TUretSonEntegProperties.Get_BasFisNo: WideString;
begin
    Result := DefaultInterface.BasFisNo;
end;

procedure TUretSonEntegProperties.Set_BasFisNo(const Value: WideString);
  { Warning: The property BasFisNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BasFisNo := Value;
end;

function TUretSonEntegProperties.Get_BitFisNo: WideString;
begin
    Result := DefaultInterface.BitFisNo;
end;

procedure TUretSonEntegProperties.Set_BitFisNo(const Value: WideString);
  { Warning: The property BitFisNo has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.BitFisNo := Value;
end;

function TUretSonEntegProperties.Get_FisNoKirilimli: WordBool;
begin
    Result := DefaultInterface.FisNoKirilimli;
end;

procedure TUretSonEntegProperties.Set_FisNoKirilimli(Value: WordBool);
begin
  DefaultInterface.Set_FisNoKirilimli(Value);
end;

function TUretSonEntegProperties.Get_ReferansKod: WideString;
begin
    Result := DefaultInterface.ReferansKod;
end;

procedure TUretSonEntegProperties.Set_ReferansKod(const Value: WideString);
  { Warning: The property ReferansKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.ReferansKod := Value;
end;

function TUretSonEntegProperties.Get_BasTar: TDateTime;
begin
    Result := DefaultInterface.BasTar;
end;

procedure TUretSonEntegProperties.Set_BasTar(Value: TDateTime);
begin
  DefaultInterface.Set_BasTar(Value);
end;

function TUretSonEntegProperties.Get_BitTar: TDateTime;
begin
    Result := DefaultInterface.BitTar;
end;

procedure TUretSonEntegProperties.Set_BitTar(Value: TDateTime);
begin
  DefaultInterface.Set_BitTar(Value);
end;

{$ENDIF}

class function CoSirketList.Create: ISirketList;
begin
  Result := CreateComObject(CLASS_SirketList) as ISirketList;
end;

class function CoSirketList.CreateRemote(const MachineName: string): ISirketList;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SirketList) as ISirketList;
end;

procedure TSirketList.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D90DF89D-587B-4C93-BA17-2A7BE23EAAFB}';
    IntfIID:   '{DB8CBAEA-B350-44BE-8A42-9ED0052F569C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSirketList.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISirketList;
  end;
end;

procedure TSirketList.ConnectTo(svrIntf: ISirketList);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSirketList.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSirketList.GetDefaultInterface: ISirketList;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSirketList.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSirketListProperties.Create(Self);
{$ENDIF}
end;

destructor TSirketList.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSirketList.GetServerProperties: TSirketListProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSirketList.Get_SirketSayisi: Integer;
begin
    Result := DefaultInterface.SirketSayisi;
end;

function TSirketList.Get_SirketInfo(Index: Integer): ISirketInfo;
begin
    Result := DefaultInterface.SirketInfo[Index];
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSirketListProperties.Create(AServer: TSirketList);
begin
  inherited Create;
  FServer := AServer;
end;

function TSirketListProperties.GetDefaultInterface: ISirketList;
begin
  Result := FServer.DefaultInterface;
end;

function TSirketListProperties.Get_SirketSayisi: Integer;
begin
    Result := DefaultInterface.SirketSayisi;
end;

function TSirketListProperties.Get_SirketInfo(Index: Integer): ISirketInfo;
begin
    Result := DefaultInterface.SirketInfo[Index];
end;

{$ENDIF}

class function CoSirketInfo.Create: ISirketInfo;
begin
  Result := CreateComObject(CLASS_SirketInfo) as ISirketInfo;
end;

class function CoSirketInfo.CreateRemote(const MachineName: string): ISirketInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SirketInfo) as ISirketInfo;
end;

procedure TSirketInfo.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CE34FBCD-0DDF-49B3-B396-B178E9FEE3C5}';
    IntfIID:   '{A12C06F5-E575-49C9-851F-82AE16490850}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSirketInfo.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISirketInfo;
  end;
end;

procedure TSirketInfo.ConnectTo(svrIntf: ISirketInfo);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSirketInfo.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSirketInfo.GetDefaultInterface: ISirketInfo;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSirketInfo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSirketInfoProperties.Create(Self);
{$ENDIF}
end;

destructor TSirketInfo.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSirketInfo.GetServerProperties: TSirketInfoProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSirketInfo.Get_SirketAdi: WideString;
begin
    Result := DefaultInterface.SirketAdi;
end;

function TSirketInfo.Get_SirketYili: Integer;
begin
    Result := DefaultInterface.SirketYili;
end;

function TSirketInfo.Get_DevirSirket: WideString;
begin
    Result := DefaultInterface.DevirSirket;
end;

function TSirketInfo.Get_DevirYili: Integer;
begin
    Result := DefaultInterface.DevirYili;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSirketInfoProperties.Create(AServer: TSirketInfo);
begin
  inherited Create;
  FServer := AServer;
end;

function TSirketInfoProperties.GetDefaultInterface: ISirketInfo;
begin
  Result := FServer.DefaultInterface;
end;

function TSirketInfoProperties.Get_SirketAdi: WideString;
begin
    Result := DefaultInterface.SirketAdi;
end;

function TSirketInfoProperties.Get_SirketYili: Integer;
begin
    Result := DefaultInterface.SirketYili;
end;

function TSirketInfoProperties.Get_DevirSirket: WideString;
begin
    Result := DefaultInterface.DevirSirket;
end;

function TSirketInfoProperties.Get_DevirYili: Integer;
begin
    Result := DefaultInterface.DevirYili;
end;

{$ENDIF}

class function CoFatParametre.Create: IFatParametre;
begin
  Result := CreateComObject(CLASS_FatParametre) as IFatParametre;
end;

class function CoFatParametre.CreateRemote(const MachineName: string): IFatParametre;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FatParametre) as IFatParametre;
end;

procedure TFatParametre.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A70C130C-7BCB-4E6D-BF9E-D22A2366695B}';
    IntfIID:   '{BD3CD6DB-8D96-4908-83E5-B5D04B280D1F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TFatParametre.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IFatParametre;
  end;
end;

procedure TFatParametre.ConnectTo(svrIntf: IFatParametre);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TFatParametre.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TFatParametre.GetDefaultInterface: IFatParametre;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TFatParametre.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TFatParametreProperties.Create(Self);
{$ENDIF}
end;

destructor TFatParametre.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TFatParametre.GetServerProperties: TFatParametreProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TFatParametre.Get_OzelKod1: WordBool;
begin
    Result := DefaultInterface.OzelKod1;
end;

function TFatParametre.Get_OzelKod2: WordBool;
begin
    Result := DefaultInterface.OzelKod2;
end;

function TFatParametre.Get_Aciklama: WordBool;
begin
    Result := DefaultInterface.Aciklama;
end;

function TFatParametre.Get_StoktanAyir: WordBool;
begin
    Result := DefaultInterface.StoktanAyir;
end;

function TFatParametre.Get_SiparisOnay: WordBool;
begin
    Result := DefaultInterface.SiparisOnay;
end;

function TFatParametre.Get_OzelNakliye: WordBool;
begin
    Result := DefaultInterface.OzelNakliye;
end;

function TFatParametre.Get_Ekalan: WordBool;
begin
    Result := DefaultInterface.Ekalan;
end;

function TFatParametre.Get_SatirBazindaTeslimCari: WordBool;
begin
    Result := DefaultInterface.SatirBazindaTeslimCari;
end;

function TFatParametre.Get_SatirBazindaTeslimTarihi: WordBool;
begin
    Result := DefaultInterface.SatirBazindaTeslimTarihi;
end;

function TFatParametre.Get_SatisEkSorgu: WordBool;
begin
    Result := DefaultInterface.SatisEkSorgu;
end;

function TFatParametre.Get_Referans: WordBool;
begin
    Result := DefaultInterface.Referans;
end;

function TFatParametre.Get_FarkliTeslimYeri: WordBool;
begin
    Result := DefaultInterface.FarkliTeslimYeri;
end;

function TFatParametre.Get_SeriNo: WordBool;
begin
    Result := DefaultInterface.SeriNo;
end;

function TFatParametre.Get_Kosul: WordBool;
begin
    Result := DefaultInterface.Kosul;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TFatParametreProperties.Create(AServer: TFatParametre);
begin
  inherited Create;
  FServer := AServer;
end;

function TFatParametreProperties.GetDefaultInterface: IFatParametre;
begin
  Result := FServer.DefaultInterface;
end;

function TFatParametreProperties.Get_OzelKod1: WordBool;
begin
    Result := DefaultInterface.OzelKod1;
end;

function TFatParametreProperties.Get_OzelKod2: WordBool;
begin
    Result := DefaultInterface.OzelKod2;
end;

function TFatParametreProperties.Get_Aciklama: WordBool;
begin
    Result := DefaultInterface.Aciklama;
end;

function TFatParametreProperties.Get_StoktanAyir: WordBool;
begin
    Result := DefaultInterface.StoktanAyir;
end;

function TFatParametreProperties.Get_SiparisOnay: WordBool;
begin
    Result := DefaultInterface.SiparisOnay;
end;

function TFatParametreProperties.Get_OzelNakliye: WordBool;
begin
    Result := DefaultInterface.OzelNakliye;
end;

function TFatParametreProperties.Get_Ekalan: WordBool;
begin
    Result := DefaultInterface.Ekalan;
end;

function TFatParametreProperties.Get_SatirBazindaTeslimCari: WordBool;
begin
    Result := DefaultInterface.SatirBazindaTeslimCari;
end;

function TFatParametreProperties.Get_SatirBazindaTeslimTarihi: WordBool;
begin
    Result := DefaultInterface.SatirBazindaTeslimTarihi;
end;

function TFatParametreProperties.Get_SatisEkSorgu: WordBool;
begin
    Result := DefaultInterface.SatisEkSorgu;
end;

function TFatParametreProperties.Get_Referans: WordBool;
begin
    Result := DefaultInterface.Referans;
end;

function TFatParametreProperties.Get_FarkliTeslimYeri: WordBool;
begin
    Result := DefaultInterface.FarkliTeslimYeri;
end;

function TFatParametreProperties.Get_SeriNo: WordBool;
begin
    Result := DefaultInterface.SeriNo;
end;

function TFatParametreProperties.Get_Kosul: WordBool;
begin
    Result := DefaultInterface.Kosul;
end;

{$ENDIF}

class function CoSirketParametreler.Create: ISirketParametreler;
begin
  Result := CreateComObject(CLASS_SirketParametreler) as ISirketParametreler;
end;

class function CoSirketParametreler.CreateRemote(const MachineName: string): ISirketParametreler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SirketParametreler) as ISirketParametreler;
end;

procedure TSirketParametreler.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{03F44F95-9F74-4F59-A8C1-BFC4A06499EA}';
    IntfIID:   '{7A40DB11-76FA-400A-B1BD-0447F3E430BB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TSirketParametreler.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ISirketParametreler;
  end;
end;

procedure TSirketParametreler.ConnectTo(svrIntf: ISirketParametreler);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TSirketParametreler.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TSirketParametreler.GetDefaultInterface: ISirketParametreler;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TSirketParametreler.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TSirketParametrelerProperties.Create(Self);
{$ENDIF}
end;

destructor TSirketParametreler.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TSirketParametreler.GetServerProperties: TSirketParametrelerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TSirketParametreler.Get_Proje: WordBool;
begin
    Result := DefaultInterface.Proje;
end;

function TSirketParametreler.Get_Plasiyer: WordBool;
begin
    Result := DefaultInterface.Plasiyer;
end;

function TSirketParametreler.Get_LOKALDEPO: WordBool;
begin
    Result := DefaultInterface.LOKALDEPO;
end;

function TSirketParametreler.Get_EsnekYapilandirma: WordBool;
begin
    Result := DefaultInterface.EsnekYapilandirma;
end;

function TSirketParametreler.Get_KarmaKoli: WordBool;
begin
    Result := DefaultInterface.KarmaKoli;
end;

function TSirketParametreler.Get_Referans: WordBool;
begin
    Result := DefaultInterface.Referans;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TSirketParametrelerProperties.Create(AServer: TSirketParametreler);
begin
  inherited Create;
  FServer := AServer;
end;

function TSirketParametrelerProperties.GetDefaultInterface: ISirketParametreler;
begin
  Result := FServer.DefaultInterface;
end;

function TSirketParametrelerProperties.Get_Proje: WordBool;
begin
    Result := DefaultInterface.Proje;
end;

function TSirketParametrelerProperties.Get_Plasiyer: WordBool;
begin
    Result := DefaultInterface.Plasiyer;
end;

function TSirketParametrelerProperties.Get_LOKALDEPO: WordBool;
begin
    Result := DefaultInterface.LOKALDEPO;
end;

function TSirketParametrelerProperties.Get_EsnekYapilandirma: WordBool;
begin
    Result := DefaultInterface.EsnekYapilandirma;
end;

function TSirketParametrelerProperties.Get_KarmaKoli: WordBool;
begin
    Result := DefaultInterface.KarmaKoli;
end;

function TSirketParametrelerProperties.Get_Referans: WordBool;
begin
    Result := DefaultInterface.Referans;
end;

{$ENDIF}

class function CoTRHarita.Create: ITRHarita;
begin
  Result := CreateComObject(CLASS_TRHarita) as ITRHarita;
end;

class function CoTRHarita.CreateRemote(const MachineName: string): ITRHarita;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TRHarita) as ITRHarita;
end;

procedure TTRHarita.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E9E4088F-5586-4084-8118-6106BDF4DE1F}';
    IntfIID:   '{5337A6A3-7DFE-4A99-BF81-C78FF138458D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TTRHarita.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ITRHarita;
  end;
end;

procedure TTRHarita.ConnectTo(svrIntf: ITRHarita);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TTRHarita.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TTRHarita.GetDefaultInterface: ITRHarita;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TTRHarita.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TTRHaritaProperties.Create(Self);
{$ENDIF}
end;

destructor TTRHarita.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TTRHarita.GetServerProperties: TTRHaritaProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TTRHarita.Get_FormBaslik: WideString;
begin
    Result := DefaultInterface.FormBaslik;
end;

procedure TTRHarita.Set_FormBaslik(const Value: WideString);
  { Warning: The property FormBaslik has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FormBaslik := Value;
end;

procedure TTRHarita.SayiEkle(const TRSehirAdi: WideString; Deger: Double);
begin
  DefaultInterface.SayiEkle(TRSehirAdi, Deger);
end;

procedure TTRHarita.Goster;
begin
  DefaultInterface.Goster;
end;

function TTRHarita.GetBitMap: OleVariant;
begin
  Result := DefaultInterface.GetBitMap;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TTRHaritaProperties.Create(AServer: TTRHarita);
begin
  inherited Create;
  FServer := AServer;
end;

function TTRHaritaProperties.GetDefaultInterface: ITRHarita;
begin
  Result := FServer.DefaultInterface;
end;

function TTRHaritaProperties.Get_FormBaslik: WideString;
begin
    Result := DefaultInterface.FormBaslik;
end;

procedure TTRHaritaProperties.Set_FormBaslik(const Value: WideString);
  { Warning: The property FormBaslik has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.FormBaslik := Value;
end;

{$ENDIF}

class function CoMrp.Create: IMrp;
begin
  Result := CreateComObject(CLASS_Mrp) as IMrp;
end;

class function CoMrp.CreateRemote(const MachineName: string): IMrp;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Mrp) as IMrp;
end;

procedure TMrp.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8283BC57-DC0E-47CE-93DA-C213C31223E3}';
    IntfIID:   '{D535B070-33DE-4655-9619-0167B5A6AAE6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TMrp.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IMrp;
  end;
end;

procedure TMrp.ConnectTo(svrIntf: IMrp);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TMrp.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TMrp.GetDefaultInterface: IMrp;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TMrp.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TMrpProperties.Create(Self);
{$ENDIF}
end;

destructor TMrp.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TMrp.GetServerProperties: TMrpProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TMrp.Get_BasTar: TDateTime;
begin
    Result := DefaultInterface.BasTar;
end;

procedure TMrp.Set_BasTar(Value: TDateTime);
begin
  DefaultInterface.Set_BasTar(Value);
end;

function TMrp.Get_BitTar: TDateTime;
begin
    Result := DefaultInterface.BitTar;
end;

procedure TMrp.Set_BitTar(Value: TDateTime);
begin
  DefaultInterface.Set_BitTar(Value);
end;

function TMrp.Get_SirketListesi: INetStrList;
begin
    Result := DefaultInterface.SirketListesi;
end;

procedure TMrp.Set_SirketListesi(const Value: INetStrList);
begin
  DefaultInterface.Set_SirketListesi(Value);
end;

function TMrp.Get_MinStokBak: WordBool;
begin
    Result := DefaultInterface.MinStokBak;
end;

procedure TMrp.Set_MinStokBak(Value: WordBool);
begin
  DefaultInterface.Set_MinStokBak(Value);
end;

function TMrp.Get_BakKont: WordBool;
begin
    Result := DefaultInterface.BakKont;
end;

procedure TMrp.Set_BakKont(Value: WordBool);
begin
  DefaultInterface.Set_BakKont(Value);
end;

function TMrp.Get_MamKont: WordBool;
begin
    Result := DefaultInterface.MamKont;
end;

procedure TMrp.Set_MamKont(Value: WordBool);
begin
  DefaultInterface.Set_MamKont(Value);
end;

function TMrp.Get_SipKont: WordBool;
begin
    Result := DefaultInterface.SipKont;
end;

procedure TMrp.Set_SipKont(Value: WordBool);
begin
  DefaultInterface.Set_SipKont(Value);
end;

function TMrp.Get_IsEmriKont: WordBool;
begin
    Result := DefaultInterface.IsEmriKont;
end;

procedure TMrp.Set_IsEmriKont(Value: WordBool);
begin
  DefaultInterface.Set_IsEmriKont(Value);
end;

function TMrp.Get_IsEmriNoBas: WideString;
begin
    Result := DefaultInterface.IsEmriNoBas;
end;

procedure TMrp.Set_IsEmriNoBas(const Value: WideString);
  { Warning: The property IsEmriNoBas has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IsEmriNoBas := Value;
end;

function TMrp.Get_IsEmriNoBit: WideString;
begin
    Result := DefaultInterface.IsEmriNoBit;
end;

procedure TMrp.Set_IsEmriNoBit(const Value: WideString);
  { Warning: The property IsEmriNoBit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IsEmriNoBit := Value;
end;

function TMrp.Get_IsEmrHaricNoBas: WideString;
begin
    Result := DefaultInterface.IsEmrHaricNoBas;
end;

procedure TMrp.Set_IsEmrHaricNoBas(const Value: WideString);
  { Warning: The property IsEmrHaricNoBas has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IsEmrHaricNoBas := Value;
end;

function TMrp.Get_IsEmrHaricNoBit: WideString;
begin
    Result := DefaultInterface.IsEmrHaricNoBit;
end;

procedure TMrp.Set_IsEmrHaricNoBit(const Value: WideString);
  { Warning: The property IsEmrHaricNoBit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IsEmrHaricNoBit := Value;
end;

function TMrp.Get_GnlYapKodDestek: WordBool;
begin
    Result := DefaultInterface.GnlYapKodDestek;
end;

procedure TMrp.Set_GnlYapKodDestek(Value: WordBool);
begin
  DefaultInterface.Set_GnlYapKodDestek(Value);
end;

function TMrp.Get_YapKodKontrol: WordBool;
begin
    Result := DefaultInterface.YapKodKontrol;
end;

procedure TMrp.Set_YapKodKontrol(Value: WordBool);
begin
  DefaultInterface.Set_YapKodKontrol(Value);
end;

function TMrp.Get_Detayli: WordBool;
begin
    Result := DefaultInterface.Detayli;
end;

procedure TMrp.Set_Detayli(Value: WordBool);
begin
  DefaultInterface.Set_Detayli(Value);
end;

procedure TMrp.MGPCalistir;
begin
  DefaultInterface.MGPCalistir;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TMrpProperties.Create(AServer: TMrp);
begin
  inherited Create;
  FServer := AServer;
end;

function TMrpProperties.GetDefaultInterface: IMrp;
begin
  Result := FServer.DefaultInterface;
end;

function TMrpProperties.Get_BasTar: TDateTime;
begin
    Result := DefaultInterface.BasTar;
end;

procedure TMrpProperties.Set_BasTar(Value: TDateTime);
begin
  DefaultInterface.Set_BasTar(Value);
end;

function TMrpProperties.Get_BitTar: TDateTime;
begin
    Result := DefaultInterface.BitTar;
end;

procedure TMrpProperties.Set_BitTar(Value: TDateTime);
begin
  DefaultInterface.Set_BitTar(Value);
end;

function TMrpProperties.Get_SirketListesi: INetStrList;
begin
    Result := DefaultInterface.SirketListesi;
end;

procedure TMrpProperties.Set_SirketListesi(const Value: INetStrList);
begin
  DefaultInterface.Set_SirketListesi(Value);
end;

function TMrpProperties.Get_MinStokBak: WordBool;
begin
    Result := DefaultInterface.MinStokBak;
end;

procedure TMrpProperties.Set_MinStokBak(Value: WordBool);
begin
  DefaultInterface.Set_MinStokBak(Value);
end;

function TMrpProperties.Get_BakKont: WordBool;
begin
    Result := DefaultInterface.BakKont;
end;

procedure TMrpProperties.Set_BakKont(Value: WordBool);
begin
  DefaultInterface.Set_BakKont(Value);
end;

function TMrpProperties.Get_MamKont: WordBool;
begin
    Result := DefaultInterface.MamKont;
end;

procedure TMrpProperties.Set_MamKont(Value: WordBool);
begin
  DefaultInterface.Set_MamKont(Value);
end;

function TMrpProperties.Get_SipKont: WordBool;
begin
    Result := DefaultInterface.SipKont;
end;

procedure TMrpProperties.Set_SipKont(Value: WordBool);
begin
  DefaultInterface.Set_SipKont(Value);
end;

function TMrpProperties.Get_IsEmriKont: WordBool;
begin
    Result := DefaultInterface.IsEmriKont;
end;

procedure TMrpProperties.Set_IsEmriKont(Value: WordBool);
begin
  DefaultInterface.Set_IsEmriKont(Value);
end;

function TMrpProperties.Get_IsEmriNoBas: WideString;
begin
    Result := DefaultInterface.IsEmriNoBas;
end;

procedure TMrpProperties.Set_IsEmriNoBas(const Value: WideString);
  { Warning: The property IsEmriNoBas has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IsEmriNoBas := Value;
end;

function TMrpProperties.Get_IsEmriNoBit: WideString;
begin
    Result := DefaultInterface.IsEmriNoBit;
end;

procedure TMrpProperties.Set_IsEmriNoBit(const Value: WideString);
  { Warning: The property IsEmriNoBit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IsEmriNoBit := Value;
end;

function TMrpProperties.Get_IsEmrHaricNoBas: WideString;
begin
    Result := DefaultInterface.IsEmrHaricNoBas;
end;

procedure TMrpProperties.Set_IsEmrHaricNoBas(const Value: WideString);
  { Warning: The property IsEmrHaricNoBas has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IsEmrHaricNoBas := Value;
end;

function TMrpProperties.Get_IsEmrHaricNoBit: WideString;
begin
    Result := DefaultInterface.IsEmrHaricNoBit;
end;

procedure TMrpProperties.Set_IsEmrHaricNoBit(const Value: WideString);
  { Warning: The property IsEmrHaricNoBit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.IsEmrHaricNoBit := Value;
end;

function TMrpProperties.Get_GnlYapKodDestek: WordBool;
begin
    Result := DefaultInterface.GnlYapKodDestek;
end;

procedure TMrpProperties.Set_GnlYapKodDestek(Value: WordBool);
begin
  DefaultInterface.Set_GnlYapKodDestek(Value);
end;

function TMrpProperties.Get_YapKodKontrol: WordBool;
begin
    Result := DefaultInterface.YapKodKontrol;
end;

procedure TMrpProperties.Set_YapKodKontrol(Value: WordBool);
begin
  DefaultInterface.Set_YapKodKontrol(Value);
end;

function TMrpProperties.Get_Detayli: WordBool;
begin
    Result := DefaultInterface.Detayli;
end;

procedure TMrpProperties.Set_Detayli(Value: WordBool);
begin
  DefaultInterface.Set_Detayli(Value);
end;

{$ENDIF}

class function CoNetStrList.Create: INetStrList;
begin
  Result := CreateComObject(CLASS_NetStrList) as INetStrList;
end;

class function CoNetStrList.CreateRemote(const MachineName: string): INetStrList;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NetStrList) as INetStrList;
end;

procedure TNetStrList.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{91A599AF-EEF2-4D96-BA39-79A06619D3B2}';
    IntfIID:   '{B4055B60-0349-4A78-AC27-87D8F8A3F0BE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNetStrList.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as INetStrList;
  end;
end;

procedure TNetStrList.ConnectTo(svrIntf: INetStrList);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNetStrList.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNetStrList.GetDefaultInterface: INetStrList;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TNetStrList.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TNetStrListProperties.Create(Self);
{$ENDIF}
end;

destructor TNetStrList.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TNetStrList.GetServerProperties: TNetStrListProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TNetStrList.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TNetStrList.Set_Text(const Value: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := Value;
end;

function TNetStrList.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TNetStrList.Get_Strings(Index: Integer): WideString;
begin
    Result := DefaultInterface.Strings[Index];
end;

procedure TNetStrList.Set_Strings(Index: Integer; const Value: WideString);
  { Warning: The property Strings has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Strings := Value;
end;

function TNetStrList.Add(const Str: WideString): Integer;
begin
  Result := DefaultInterface.Add(Str);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TNetStrListProperties.Create(AServer: TNetStrList);
begin
  inherited Create;
  FServer := AServer;
end;

function TNetStrListProperties.GetDefaultInterface: INetStrList;
begin
  Result := FServer.DefaultInterface;
end;

function TNetStrListProperties.Get_Text: WideString;
begin
    Result := DefaultInterface.Text;
end;

procedure TNetStrListProperties.Set_Text(const Value: WideString);
  { Warning: The property Text has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Text := Value;
end;

function TNetStrListProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TNetStrListProperties.Get_Strings(Index: Integer): WideString;
begin
    Result := DefaultInterface.Strings[Index];
end;

procedure TNetStrListProperties.Set_Strings(Index: Integer; const Value: WideString);
  { Warning: The property Strings has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Strings := Value;
end;

{$ENDIF}

class function CoBarkodBilgi.Create: IBarkodBilgi;
begin
  Result := CreateComObject(CLASS_BarkodBilgi) as IBarkodBilgi;
end;

class function CoBarkodBilgi.CreateRemote(const MachineName: string): IBarkodBilgi;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BarkodBilgi) as IBarkodBilgi;
end;

procedure TBarkodBilgi.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C751FE85-2E6D-4E35-A761-F8246DC2B681}';
    IntfIID:   '{880AB9E4-0D50-4697-AF2C-9000FC6C5E68}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TBarkodBilgi.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IBarkodBilgi;
  end;
end;

procedure TBarkodBilgi.ConnectTo(svrIntf: IBarkodBilgi);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TBarkodBilgi.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TBarkodBilgi.GetDefaultInterface: IBarkodBilgi;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TBarkodBilgi.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TBarkodBilgiProperties.Create(Self);
{$ENDIF}
end;

destructor TBarkodBilgi.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TBarkodBilgi.GetServerProperties: TBarkodBilgiProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TBarkodBilgi.Get_StokKodu: WideString;
begin
    Result := DefaultInterface.StokKodu;
end;

procedure TBarkodBilgi.Set_StokKodu(const Value: WideString);
  { Warning: The property StokKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StokKodu := Value;
end;

function TBarkodBilgi.Get_GrupKodu: WideString;
begin
    Result := DefaultInterface.GrupKodu;
end;

procedure TBarkodBilgi.Set_GrupKodu(const Value: WideString);
  { Warning: The property GrupKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GrupKodu := Value;
end;

function TBarkodBilgi.Get_KOD1: WideString;
begin
    Result := DefaultInterface.KOD1;
end;

procedure TBarkodBilgi.Set_KOD1(const Value: WideString);
  { Warning: The property KOD1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOD1 := Value;
end;

function TBarkodBilgi.Get_KOD2: WideString;
begin
    Result := DefaultInterface.KOD2;
end;

procedure TBarkodBilgi.Set_KOD2(const Value: WideString);
  { Warning: The property KOD2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOD2 := Value;
end;

function TBarkodBilgi.Get_Kod3: WideString;
begin
    Result := DefaultInterface.Kod3;
end;

procedure TBarkodBilgi.Set_Kod3(const Value: WideString);
  { Warning: The property Kod3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod3 := Value;
end;

function TBarkodBilgi.Get_Kod4: WideString;
begin
    Result := DefaultInterface.Kod4;
end;

procedure TBarkodBilgi.Set_Kod4(const Value: WideString);
  { Warning: The property Kod4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod4 := Value;
end;

function TBarkodBilgi.Get_Kod5: WideString;
begin
    Result := DefaultInterface.Kod5;
end;

procedure TBarkodBilgi.Set_Kod5(const Value: WideString);
  { Warning: The property Kod5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod5 := Value;
end;

function TBarkodBilgi.Get_DepoKoduAlt: Integer;
begin
    Result := DefaultInterface.DepoKoduAlt;
end;

procedure TBarkodBilgi.Set_DepoKoduAlt(Value: Integer);
begin
  DefaultInterface.Set_DepoKoduAlt(Value);
end;

function TBarkodBilgi.Get_DepoKoduUst: Integer;
begin
    Result := DefaultInterface.DepoKoduUst;
end;

procedure TBarkodBilgi.Set_DepoKoduUst(Value: Integer);
begin
  DefaultInterface.Set_DepoKoduUst(Value);
end;

function TBarkodBilgi.Get_DizaynKodu: WideString;
begin
    Result := DefaultInterface.DizaynKodu;
end;

procedure TBarkodBilgi.Set_DizaynKodu(const Value: WideString);
  { Warning: The property DizaynKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DizaynKodu := Value;
end;

function TBarkodBilgi.Get_FiyatListesi: TFiyatListesi;
begin
    Result := DefaultInterface.FiyatListesi;
end;

procedure TBarkodBilgi.Set_FiyatListesi(Value: TFiyatListesi);
begin
  DefaultInterface.Set_FiyatListesi(Value);
end;

function TBarkodBilgi.Get_SqlKisit: WideString;
begin
    Result := DefaultInterface.SqlKisit;
end;

procedure TBarkodBilgi.Set_SqlKisit(const Value: WideString);
  { Warning: The property SqlKisit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SqlKisit := Value;
end;

function TBarkodBilgi.Get_SiralamaKisit: WideString;
begin
    Result := DefaultInterface.SiralamaKisit;
end;

procedure TBarkodBilgi.Set_SiralamaKisit(const Value: WideString);
  { Warning: The property SiralamaKisit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SiralamaKisit := Value;
end;

function TBarkodBilgi.Get_YapKod: WideString;
begin
    Result := DefaultInterface.YapKod;
end;

procedure TBarkodBilgi.Set_YapKod(const Value: WideString);
  { Warning: The property YapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YapKod := Value;
end;

function TBarkodBilgi.Get_Adet: Integer;
begin
    Result := DefaultInterface.Adet;
end;

procedure TBarkodBilgi.Set_Adet(Value: Integer);
begin
  DefaultInterface.Set_Adet(Value);
end;

function TBarkodBilgi.Get_UpdateKodu: TUpdateKodu;
begin
    Result := DefaultInterface.UpdateKodu;
end;

procedure TBarkodBilgi.Set_UpdateKodu(Value: TUpdateKodu);
begin
  DefaultInterface.Set_UpdateKodu(Value);
end;

function TBarkodBilgi.Get_BakiyeMiktarBas: WordBool;
begin
    Result := DefaultInterface.BakiyeMiktarBas;
end;

procedure TBarkodBilgi.Set_BakiyeMiktarBas(Value: WordBool);
begin
  DefaultInterface.Set_BakiyeMiktarBas(Value);
end;

function TBarkodBilgi.Get_UpdateKoduSifirlansin: WordBool;
begin
    Result := DefaultInterface.UpdateKoduSifirlansin;
end;

procedure TBarkodBilgi.Set_UpdateKoduSifirlansin(Value: WordBool);
begin
  DefaultInterface.Set_UpdateKoduSifirlansin(Value);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TBarkodBilgiProperties.Create(AServer: TBarkodBilgi);
begin
  inherited Create;
  FServer := AServer;
end;

function TBarkodBilgiProperties.GetDefaultInterface: IBarkodBilgi;
begin
  Result := FServer.DefaultInterface;
end;

function TBarkodBilgiProperties.Get_StokKodu: WideString;
begin
    Result := DefaultInterface.StokKodu;
end;

procedure TBarkodBilgiProperties.Set_StokKodu(const Value: WideString);
  { Warning: The property StokKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.StokKodu := Value;
end;

function TBarkodBilgiProperties.Get_GrupKodu: WideString;
begin
    Result := DefaultInterface.GrupKodu;
end;

procedure TBarkodBilgiProperties.Set_GrupKodu(const Value: WideString);
  { Warning: The property GrupKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.GrupKodu := Value;
end;

function TBarkodBilgiProperties.Get_KOD1: WideString;
begin
    Result := DefaultInterface.KOD1;
end;

procedure TBarkodBilgiProperties.Set_KOD1(const Value: WideString);
  { Warning: The property KOD1 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOD1 := Value;
end;

function TBarkodBilgiProperties.Get_KOD2: WideString;
begin
    Result := DefaultInterface.KOD2;
end;

procedure TBarkodBilgiProperties.Set_KOD2(const Value: WideString);
  { Warning: The property KOD2 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.KOD2 := Value;
end;

function TBarkodBilgiProperties.Get_Kod3: WideString;
begin
    Result := DefaultInterface.Kod3;
end;

procedure TBarkodBilgiProperties.Set_Kod3(const Value: WideString);
  { Warning: The property Kod3 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod3 := Value;
end;

function TBarkodBilgiProperties.Get_Kod4: WideString;
begin
    Result := DefaultInterface.Kod4;
end;

procedure TBarkodBilgiProperties.Set_Kod4(const Value: WideString);
  { Warning: The property Kod4 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod4 := Value;
end;

function TBarkodBilgiProperties.Get_Kod5: WideString;
begin
    Result := DefaultInterface.Kod5;
end;

procedure TBarkodBilgiProperties.Set_Kod5(const Value: WideString);
  { Warning: The property Kod5 has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.Kod5 := Value;
end;

function TBarkodBilgiProperties.Get_DepoKoduAlt: Integer;
begin
    Result := DefaultInterface.DepoKoduAlt;
end;

procedure TBarkodBilgiProperties.Set_DepoKoduAlt(Value: Integer);
begin
  DefaultInterface.Set_DepoKoduAlt(Value);
end;

function TBarkodBilgiProperties.Get_DepoKoduUst: Integer;
begin
    Result := DefaultInterface.DepoKoduUst;
end;

procedure TBarkodBilgiProperties.Set_DepoKoduUst(Value: Integer);
begin
  DefaultInterface.Set_DepoKoduUst(Value);
end;

function TBarkodBilgiProperties.Get_DizaynKodu: WideString;
begin
    Result := DefaultInterface.DizaynKodu;
end;

procedure TBarkodBilgiProperties.Set_DizaynKodu(const Value: WideString);
  { Warning: The property DizaynKodu has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.DizaynKodu := Value;
end;

function TBarkodBilgiProperties.Get_FiyatListesi: TFiyatListesi;
begin
    Result := DefaultInterface.FiyatListesi;
end;

procedure TBarkodBilgiProperties.Set_FiyatListesi(Value: TFiyatListesi);
begin
  DefaultInterface.Set_FiyatListesi(Value);
end;

function TBarkodBilgiProperties.Get_SqlKisit: WideString;
begin
    Result := DefaultInterface.SqlKisit;
end;

procedure TBarkodBilgiProperties.Set_SqlKisit(const Value: WideString);
  { Warning: The property SqlKisit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SqlKisit := Value;
end;

function TBarkodBilgiProperties.Get_SiralamaKisit: WideString;
begin
    Result := DefaultInterface.SiralamaKisit;
end;

procedure TBarkodBilgiProperties.Set_SiralamaKisit(const Value: WideString);
  { Warning: The property SiralamaKisit has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.SiralamaKisit := Value;
end;

function TBarkodBilgiProperties.Get_YapKod: WideString;
begin
    Result := DefaultInterface.YapKod;
end;

procedure TBarkodBilgiProperties.Set_YapKod(const Value: WideString);
  { Warning: The property YapKod has a setter and a getter whose
    types do not match. Delphi was unable to generate a property of
    this sort and so is using a Variant as a passthrough. }
var
  InterfaceVariant: OleVariant;
begin
  InterfaceVariant := DefaultInterface;
  InterfaceVariant.YapKod := Value;
end;

function TBarkodBilgiProperties.Get_Adet: Integer;
begin
    Result := DefaultInterface.Adet;
end;

procedure TBarkodBilgiProperties.Set_Adet(Value: Integer);
begin
  DefaultInterface.Set_Adet(Value);
end;

function TBarkodBilgiProperties.Get_UpdateKodu: TUpdateKodu;
begin
    Result := DefaultInterface.UpdateKodu;
end;

procedure TBarkodBilgiProperties.Set_UpdateKodu(Value: TUpdateKodu);
begin
  DefaultInterface.Set_UpdateKodu(Value);
end;

function TBarkodBilgiProperties.Get_BakiyeMiktarBas: WordBool;
begin
    Result := DefaultInterface.BakiyeMiktarBas;
end;

procedure TBarkodBilgiProperties.Set_BakiyeMiktarBas(Value: WordBool);
begin
  DefaultInterface.Set_BakiyeMiktarBas(Value);
end;

function TBarkodBilgiProperties.Get_UpdateKoduSifirlansin: WordBool;
begin
    Result := DefaultInterface.UpdateKoduSifirlansin;
end;

procedure TBarkodBilgiProperties.Set_UpdateKoduSifirlansin(Value: WordBool);
begin
  DefaultInterface.Set_UpdateKoduSifirlansin(Value);
end;

{$ENDIF}

procedure Register;
begin
  RegisterComponents(dtlServerPage, [TKernel, TSirket, TKasa, TFatura, 
    TFatUst, TFatKalem, TCari, TCariTemelBilgi, TCariEkBilgi, 
    TStok, TStokTemelBilgi, TStokEkBilgi, TKur, TDoviz, 
    TCekSenet, TCekSenetAna, TIReceteAna, TRecete, TNetField, 
    TVTGuvenlik, TMaliyetMuhasebesi, TStokMaliyet, TAmbarFisMuh, TDepTransMuh, 
    TKasaBakiye, TDekont, TDekCekSen, TProje, TMuplanTemelBilgi, 
    TMuplanEkBilgi, TMuPlan, TNetRS, TDagFisOlus, TStokPH, 
    TStDovEnfCevir, TNetGuvenlik, TStokHareket, TBasim, TCariHareket, 
    TMaliGrup, TData2, TUretim, TFatKosulDetay, TFatKosMalFazlasi, 
    TFatKosulRangeIsk, TMustahsil, TMustahsilUst, TMustahsilKalem, TKalemSeri, 
    TUretSonEnteg, TSirketList, TSirketInfo, TFatParametre, TSirketParametreler, 
    TTRHarita, TMrp, TNetStrList, TBarkodBilgi]);
end;

end.
