
/* Extract Database SURVEY.GDB */
CREATE DATABASE "SURVEY.GDB" PAGE_SIZE 4096
USER 'SYSDBA'
PASSWORD 'masterkey'
;

/* Table: TABLE_LANGUAGE, Owner: SYSDBA */
CREATE TABLE TABLE_LANGUAGE (LANGUAGEID INTEGER NOT NULL,
        LANGUAGENAME VARCHAR(15) NOT NULL,
CONSTRAINT LANGUAGE_PK PRIMARY KEY (LANGUAGEID));

/* Table: TABLE_PRESENTATION, Owner: SYSDBA */
CREATE TABLE TABLE_PRESENTATION (PR_ID CHAR(1) NOT NULL,
        PR_DESC VARCHAR(30) NOT NULL,
CONSTRAINT PRES_PK PRIMARY KEY (PR_ID));

/* Table: TABLE_QUESTION, Owner: SYSDBA */
CREATE TABLE TABLE_QUESTION (QUESTIONID INTEGER NOT NULL,
        FIELD VARCHAR(25) NOT NULL,
        PROMPT VARCHAR(255) NOT NULL,
        CHOICES BLOB SUB_TYPE TEXT SEGMENT SIZE 80,
        REQUIRED CHAR(1) NOT NULL,
        PRESENTATION CHAR(1) NOT NULL,
        PRES_EXTRA_TAGS VARCHAR( 50 ),
        PRES_BEFORE_TEXT VARCHAR( 20 ),
        PRES_BETWEEN_TEXT VARCHAR( 20 ),
        PRES_AFTER_TEXT VARCHAR( 20 ),
        ADDED DATE NOT NULL,
        EDITED DATE NOT NULL,
PRIMARY KEY (QUESTIONID));

/* Table: TABLE_QUESTION_LANGUAGE, Owner: SYSDBA */
CREATE TABLE TABLE_QUESTION_LANGUAGE (QUESTIONID INTEGER NOT NULL,
        LANGUAGEID INTEGER NOT NULL,
        PROMPT VARCHAR(255) NOT NULL,
        CHOICES BLOB SUB_TYPE TEXT SEGMENT SIZE 80 NOT NULL,
CONSTRAINT QUESTION_LANGUAGE_PK PRIMARY KEY (QUESTIONID, LANGUAGEID));

/* Table: TABLE_RESPONSE, Owner: SYSDBA */
CREATE TABLE TABLE_RESPONSE (USERID INTEGER NOT NULL,
        QUESTIONID INTEGER NOT NULL,
        CHOICE INTEGER NOT NULL,
        DATED DATE NOT NULL,
CONSTRAINT TABLE_RESPONSE_PK PRIMARY KEY (USERID, QUESTIONID, CHOICE));

/* Table: TABLE_RESPONSE_STATS, Owner: SYSDBA */
CREATE TABLE TABLE_RESPONSE_STATS (QUESTIONID INTEGER NOT NULL,
        RS_CHOICE INTEGER NOT NULL,
        RS_COUNT INTEGER NOT NULL,
CONSTRAINT PK_RS PRIMARY KEY (QUESTIONID, RS_CHOICE));

/* Table: TABLE_SURVEY, Owner: SYSDBA */
CREATE TABLE TABLE_SURVEY (SURVEYID INTEGER NOT NULL,
        SURVEY_NAME VARCHAR(80) NOT NULL,
        SURVEY_NOTE VARCHAR(255),
        STATUS INTEGER NOT NULL,
        STYPE CHAR(1) NOT NULL,
        ADDED DATE NOT NULL,
        EDITED DATE NOT NULL,
PRIMARY KEY (SURVEYID));

/* Table: TABLE_SURVEY_Q1, Owner: SYSDBA */
CREATE TABLE TABLE_SURVEY_Q1 (Q1 INTEGER NOT NULL,
        DESCR VARCHAR(35) NOT NULL,
        XKEY INTEGER NOT NULL,
PRIMARY KEY (Q1));

/* Table: TABLE_SURVEY_Q2, Owner: SYSDBA */
CREATE TABLE TABLE_SURVEY_Q2 (
        Q1 INTEGER NOT NULL,
        Q2 INTEGER NOT NULL,
        DESCR VARCHAR(35) NOT NULL,
        XKEY INTEGER NOT NULL,
PRIMARY KEY (Q1,Q2));

/* Table: TABLE_SURVEY_Q3, Owner: SYSDBA */
CREATE TABLE TABLE_SURVEY_Q3 (
        Q1 INTEGER NOT NULL,
        Q2 INTEGER NOT NULL,
        Q3 INTEGER NOT NULL,
        DESCR VARCHAR(35) NOT NULL,
        XKEY INTEGER NOT NULL,
PRIMARY KEY (Q1,Q2,Q3));

/* Table: TABLE_SURVEY_QUESTION, Owner: SYSDBA */
CREATE TABLE TABLE_SURVEY_QUESTION (SURVEYID INTEGER NOT NULL,
        QUESTIONID INTEGER NOT NULL,
        SEQ_NUM INTEGER NOT NULL,
        PRESENTATION CHAR(1) NOT NULL,
        PRES_EXTRA_TAGS VARCHAR( 50 ),
        PRES_BEFORE_TEXT VARCHAR( 20 ),
        PRES_BETWEEN_TEXT VARCHAR( 20 ),
        PRES_AFTER_TEXT VARCHAR( 20 ),
PRIMARY KEY (SURVEYID, QUESTIONID));

/* Table: TABLE_SURVEY_SCHEDULE, Owner: SYSDBA */
CREATE TABLE TABLE_SURVEY_SCHEDULE (SS_ID INTEGER NOT NULL,
        Q1 INTEGER NOT NULL,
        Q2 INTEGER NOT NULL,
        Q3 INTEGER NOT NULL,
        SURVEYID INTEGER NOT NULL,
        SS_STARTDATE DATE NOT NULL,
PRIMARY KEY (SS_ID));

/* Table: TABLE_SURVEY_TYPE, Owner: SYSDBA */
CREATE TABLE TABLE_SURVEY_TYPE (ST_ID CHAR(1) NOT NULL,
        ST_DESC VARCHAR(35) NOT NULL,
PRIMARY KEY (ST_ID));

/*  Index definitions for all user tables */
CREATE INDEX TABLE_RESPONSE_QUESTION ON TABLE_RESPONSE(QUESTIONID);
CREATE INDEX SURVEY_BY_NAME ON TABLE_SURVEY(SURVEY_NAME);
CREATE UNIQUE INDEX SURVEYBYSEQ ON TABLE_SURVEY_QUESTION(SURVEYID, SEQ_NUM);
ALTER TABLE TABLE_SURVEY_QUESTION ADD
  FOREIGN KEY (SURVEYID) REFERENCES TABLE_SURVEY(SURVEYID);
ALTER TABLE TABLE_SURVEY_QUESTION ADD
  FOREIGN KEY (QUESTIONID) REFERENCES TABLE_QUESTION(QUESTIONID);
ALTER TABLE TABLE_SURVEY_Q2 ADD
  FOREIGN KEY (Q1) REFERENCES TABLE_SURVEY_Q1(Q1);
ALTER TABLE TABLE_SURVEY_Q2 ADD
  FOREIGN KEY (Q1,Q2) REFERENCES TABLE_SURVEY_Q2(Q1,Q2);

CREATE GENERATOR GEN_SURVEYID;
CREATE GENERATOR GEN_QUESTIONID;
CREATE GENERATOR GEN_LANGUAGEID;
CREATE GENERATOR GEN_USERID;

COMMIT WORK;

SET TERM ^ ;

/* Triggers only will work for SQL triggers */
CREATE TRIGGER TABLE_SURVEY_INS_GEN_TRIGGER FOR TABLE_SURVEY
ACTIVE BEFORE INSERT POSITION 100
AS
BEGIN
  IF (( NEW.SURVEYID = 0 ) OR ( NEW.SURVEYID IS NULL )) THEN
    NEW.SURVEYID = GEN_ID(GEN_SURVEYID,1);
  NEW.ADDED = 'NOW';
  NEW.EDITED = 'NOW';
END
 ^
CREATE TRIGGER TABLE_QUESTION_INS_GEN_TRIGGER FOR TABLE_QUESTION
ACTIVE BEFORE INSERT POSITION 100
AS
BEGIN
  IF (( NEW.QUESTIONID = 0 ) OR ( NEW.QUESTIONID IS NULL )) THEN
    NEW.QUESTIONID = GEN_ID(GEN_QUESTIONID,1);
  NEW.ADDED = 'NOW';
  NEW.EDITED = 'NOW';
END
 ^
CREATE TRIGGER AD_SEQ_NUM FOR TABLE_SURVEY_QUESTION
ACTIVE AFTER DELETE POSITION 0
AS
DECLARE VARIABLE ADB_KEY CHAR(8);
DECLARE VARIABLE ASEQ_NUM INTEGER;
BEGIN
  FOR SELECT T.RDB$DB_KEY, SEQ_NUM
      FROM TABLE_SURVEY_QUESTION T
      WHERE T.SEQ_NUM > OLD.SEQ_NUM
        AND T.SURVEYID = OLD.SURVEYID
      ORDER BY T.SEQ_NUM ASCENDING
      INTO :ADB_KEY, :ASEQ_NUM DO BEGIN
    UPDATE TABLE_SURVEY_QUESTION T
      SET T.SEQ_NUM = :ASEQ_NUM - 1
      WHERE T.RDB$DB_KEY = :ADB_KEY;
  END
END
 ^
CREATE TRIGGER TABLE_QUESTION_UPD_GEN_TRIGGER FOR TABLE_QUESTION
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  NEW.EDITED = 'NOW';
END
 ^
CREATE TRIGGER TABLE_SURVEY_UPD_GEN_TRIGGER FOR TABLE_SURVEY
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  NEW.EDITED = 'NOW';
END
 ^
CREATE TRIGGER AU_SEQ_NUM FOR TABLE_SURVEY_QUESTION
ACTIVE AFTER UPDATE POSITION 0
AS
DECLARE VARIABLE ADB_KEY CHAR(8);
DECLARE VARIABLE ASEQ_NUM INTEGER;
BEGIN
  IF ( NEW.SEQ_NUM < 0 ) THEN BEGIN
    IF ( - NEW.SEQ_NUM > OLD.SEQ_NUM   ) THEN BEGIN
      FOR SELECT T.RDB$DB_KEY, T.SEQ_NUM
          FROM TABLE_SURVEY_QUESTION T
          WHERE T.SEQ_NUM BETWEEN OLD.SEQ_NUM AND - NEW.SEQ_NUM
            AND T.SURVEYID = NEW.SURVEYID
          ORDER BY T.SEQ_NUM ASCENDING
          INTO :ADB_KEY, :ASEQ_NUM DO BEGIN
        UPDATE TABLE_SURVEY_QUESTION T
          SET T.SEQ_NUM = :ASEQ_NUM - 1
          WHERE T.RDB$DB_KEY = :ADB_KEY;
      END
    END ELSE BEGIN
      FOR SELECT T.RDB$DB_KEY, T.SEQ_NUM
          FROM TABLE_SURVEY_QUESTION T
          WHERE T.SEQ_NUM BETWEEN - NEW.SEQ_NUM AND OLD.SEQ_NUM
            AND T.SURVEYID = NEW.SURVEYID
          ORDER BY T.SEQ_NUM DESCENDING
          INTO :ADB_KEY, :ASEQ_NUM DO BEGIN
        UPDATE TABLE_SURVEY_QUESTION T
          SET T.SEQ_NUM = :ASEQ_NUM + 1
          WHERE T.RDB$DB_KEY = :ADB_KEY;
      END
    END
    UPDATE TABLE_SURVEY_QUESTION T
    SET T.SEQ_NUM = - NEW.SEQ_NUM
    WHERE T.SURVEYID = NEW.SURVEYID
      AND T.QUESTIONID = NEW.QUESTIONID;
  END
END
 ^
CREATE TRIGGER BU_SEQ_NUM FOR TABLE_SURVEY_QUESTION
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE ASEQ_NUM INTEGER;
DECLARE VARIABLE CNT_SEQ_NUM INTEGER;
BEGIN
  IF ( NEW.SEQ_NUM = 0 ) THEN NEW.SEQ_NUM = 1;
  IF ( NEW.SEQ_NUM <> OLD.SEQ_NUM ) THEN BEGIN
    SELECT COUNT( SEQ_NUM )
    FROM TABLE_SURVEY_QUESTION T
    WHERE T.SURVEYID = NEW.SURVEYID
    INTO :ASEQ_NUM;
    IF ( NEW.SEQ_NUM > ASEQ_NUM ) THEN BEGIN
      NEW.SEQ_NUM = ASEQ_NUM;
    END
    CNT_SEQ_NUM = NULL;
    SELECT COUNT( * )
    FROM TABLE_SURVEY_QUESTION T
    WHERE T.SEQ_NUM = NEW.SEQ_NUM
      AND T.SURVEYID = NEW.SURVEYID
    INTO :CNT_SEQ_NUM;
    IF ( CNT_SEQ_NUM > 0 ) THEN BEGIN
      NEW.SEQ_NUM = - NEW.SEQ_NUM;
    END
  END
END
 ^
CREATE TRIGGER BI_SEQ_NUM FOR TABLE_SURVEY_QUESTION
ACTIVE BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE ADB_KEY CHAR(8);
DECLARE VARIABLE ASEQ_NUM INTEGER;
BEGIN
  IF ( NEW.SEQ_NUM = 0 ) THEN NEW.SEQ_NUM = 1;

  SELECT COUNT( SEQ_NUM )
  FROM TABLE_SURVEY_QUESTION T
  WHERE T.SURVEYID = NEW.SURVEYID
  INTO :ASEQ_NUM;

  IF ( NEW.SEQ_NUM > ASEQ_NUM + 1 ) THEN BEGIN
    NEW.SEQ_NUM = ASEQ_NUM + 1;
  END ELSE BEGIN
    NEW.SEQ_NUM = - NEW.SEQ_NUM;
  END
END
 ^
CREATE TRIGGER AI_TABLE_RESPONSE FOR TABLE_RESPONSE
ACTIVE AFTER INSERT POSITION 0
AS
BEGIN
  BEGIN
    INSERT INTO table_response_stats (
      questionid,
      rs_choice,
      rs_count )
    VALUES (
      new.questionid,
      new.choice,
      1 );
  WHEN sqlcode -803 DO
    UPDATE table_response_stats
      SET rs_count = rs_count + 1
      WHERE questionid = new.questionid
        AND rs_choice = new.choice;
  END
END
 ^
CREATE TRIGGER AD_TABLE_RESPONSE FOR TABLE_RESPONSE
ACTIVE AFTER DELETE POSITION 0
AS
BEGIN
  UPDATE table_response_stats
    SET rs_count = rs_count - 1
    WHERE questionid = old.questionid
      AND rs_choice = old.choice;
END
 ^
CREATE TRIGGER AI_SEQ_NUM FOR TABLE_SURVEY_QUESTION
ACTIVE AFTER INSERT POSITION 0
AS
DECLARE VARIABLE ADB_KEY CHAR(8);
DECLARE VARIABLE ASEQ_NUM INTEGER;
BEGIN
  IF ( NEW.SEQ_NUM < 0 ) THEN BEGIN
    FOR SELECT T.RDB$DB_KEY, T.SEQ_NUM
        FROM TABLE_SURVEY_QUESTION T
        WHERE T.SEQ_NUM >= - NEW.SEQ_NUM
          AND T.SURVEYID = NEW.SURVEYID
        ORDER BY T.SEQ_NUM DESCENDING
        INTO :ADB_KEY, :ASEQ_NUM DO BEGIN
      UPDATE TABLE_SURVEY_QUESTION T
        SET T.SEQ_NUM = :ASEQ_NUM + 1
        WHERE T.RDB$DB_KEY = :ADB_KEY;
    END
    UPDATE TABLE_SURVEY_QUESTION T
    SET T.SEQ_NUM = - NEW.SEQ_NUM
    WHERE T.SURVEYID = NEW.SURVEYID
      AND T.QUESTIONID = NEW.QUESTIONID;
  END
END
 ^

COMMIT WORK ^
SET TERM ; ^

/* Grant role for this database */

/* Role: SURVEY_USER, Owner: SYSDBA */
CREATE ROLE SURVEY_USER;

/* Grant permissions for this database */
GRANT ALL ON TABLE_LANGUAGE TO SURVEY_USER;
GRANT ALL ON TABLE_PRESENTATION TO SURVEY_USER;
GRANT ALL ON TABLE_QUESTION TO SURVEY_USER;
GRANT ALL ON TABLE_QUESTION_LANGUAGE TO SURVEY_USER;
GRANT ALL ON TABLE_RESPONSE TO SURVEY_USER;
GRANT ALL ON TABLE_RESPONSE_STATS TO SURVEY_USER;
GRANT ALL ON TABLE_SURVEY TO SURVEY_USER;
GRANT ALL ON TABLE_SURVEY_QUESTION TO SURVEY_USER;
GRANT ALL ON TABLE_SURVEY_SCHEDULE TO SURVEY_USER;
GRANT ALL ON TABLE_SURVEY_TYPE TO SURVEY_USER;
GRANT ALL ON TABLE_SURVEY_Q1 TO SURVEY_USER;
GRANT ALL ON TABLE_SURVEY_Q2 TO SURVEY_USER;
GRANT ALL ON TABLE_SURVEY_Q3 TO SURVEY_USER;

GRANT SURVEY_USER TO SURVEY_USER1;
GRANT SURVEY_USER TO SURVEY_USER2;

COMMIT;

INSERT INTO TABLE_SURVEY_TYPE (ST_ID, ST_DESC) VALUES ( 'Q', 'Questionaire' );
INSERT INTO TABLE_SURVEY_TYPE (ST_ID, ST_DESC) VALUES ( 'S', 'Survey' );
INSERT INTO TABLE_SURVEY_TYPE (ST_ID, ST_DESC) VALUES ( 'P', 'Pulse' );

INSERT INTO TABLE_PRESENTATION (PR_ID, PR_DESC) VALUES ( 'C', 'Check-Box' );
INSERT INTO TABLE_PRESENTATION (PR_ID, PR_DESC) VALUES ( 'M', 'Multi-Choice' );
INSERT INTO TABLE_PRESENTATION (PR_ID, PR_DESC) VALUES ( 'S', 'Single-Choice' );
INSERT INTO TABLE_PRESENTATION (PR_ID, PR_DESC) VALUES ( 'R', 'Radio-Group' );
INSERT INTO TABLE_PRESENTATION (PR_ID, PR_DESC) VALUES ( 'E', 'Edit-Box' );
INSERT INTO TABLE_PRESENTATION (PR_ID, PR_DESC) VALUES ( 'T', 'Text-Area' );

COMMIT;


