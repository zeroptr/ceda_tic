//IBA_TransactionLink.INT

{***************************************************************}
{                                                               }
{          IB Objects Components and Resources Library          }
{                                                               }
{          Copyright (C) 1996-2001 Jason Wharton                }
{          and Computer Programming Solutions, Mesa, AZ         }
{                                                               }
{  This source code unit is released under the terms of the     }
{  CPS Trustware License.                                       }
{  It may be distributed or deployed as source code or in       }
{  compiled form only in compliance with the terms and          }
{  conditions of the CPS Trustware License which may be         )
{  examined at http://www.ibobjects.com/ibo_trustware.html      )
{                                                               }
{***************************************************************}

{******************************************************************************}
{  CONTRIBUTED MODIFICATIONS                                                   }
{  Additions or modifications listed below using format:                       }
{                                                                              }
{  Joe Citizen <joe@joecitizen.com>                                            }
{  mm/dd/yyyy                                                                  }
{     xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                 }
{     xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                 }
{     xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                 }
{            Copyright (C) 2001 Joe Citizen                                    }
{                                                                              }
{------------------------------------------------------------------------------}
{  Place your credits and information in the top of the section                }
{  below with any other descriptions or explanations desired.                  }
{------------------------------------------------------------------------------}
{                                                                              }
{                                                                              }
{******************************************************************************}

destructor TIB_TransactionLink.Destroy;
begin
  IB_Transaction := nil;
  inherited Destroy;
end;

procedure TIB_TransactionLink.Loaded;
begin
  inherited Loaded;
  if Assigned( FIB_Session ) then
    DoReceiveFocus( FIB_Session.FocusedTransaction );
end;

procedure TIB_TransactionLink.SetTransaction( AValue: TIB_Transaction );
begin
  if ( AValue <> IB_Transaction ) then
  begin
    FNewTransaction := AValue;
    ProcessEvent( tetBeforeAssignment );
    if Assigned( IB_Transaction ) then
      IB_Transaction.FTransactionLinkList.Remove( Self );
    FIB_Transaction := AValue;
    if Assigned( IB_Transaction ) then
      IB_Transaction.FTransactionLinkList.Add( Self );
    ProcessEvent( tetAfterAssignment );
  end;
end;

function TIB_TransactionLink.GetStarted: boolean;
begin
  if Assigned( IB_Transaction ) then
    Result := IB_Transaction.Started
  else
    Result := false;
end;

function TIB_TransactionLink.GetTransactionState: TIB_TransactionState;
begin
  if Assigned( IB_Transaction ) then
    Result := IB_Transaction.TransactionState
  else
    Result := tsNone;
end;

procedure TIB_TransactionLink.SetReceiveFocus( AValue: boolean );
begin
  if ReceiveFocus <> AValue then
  begin
    FReceiveFocus := AValue;
    DoReceiveFocus( IB_Session.FocusedTransaction );
  end;
end;

procedure TIB_TransactionLink.DoReceiveFocus( T: TIB_Transaction );
begin
  if ReceiveFocus and ( IB_Transaction <> T ) then
    if Assigned( OnReceiveFocus ) then
      OnReceiveFocus( Self, T )
    else
      IB_Transaction := T;
end;

procedure TIB_TransactionLink.ProcessEvent( AEvent: TIB_TransactionEventType );
begin
  if Assigned( OnProcessEvent ) then OnProcessEvent( Self, AEvent );
end;


