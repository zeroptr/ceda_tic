
{                                                                              }
{ TIB_StatementLink                                                            }
{                                                                              }

{***************************************************************}
{                                                               }
{          IB Objects Components and Resources Library          }
{                                                               }
{          Copyright (C) 1996-2001 Jason Wharton                }
{          and Computer Programming Solutions, Mesa, AZ         }
{                                                               }
{  This source code unit is released under the terms of the     }
{  CPS Trustware License.                                       }
{  It may be distributed or deployed as source code or in       }
{  compiled form only in compliance with the terms and          }
{  conditions of the CPS Trustware License which may be         )
{  examined at http://www.ibobjects.com/ibo_trustware.html      )
{                                                               }
{***************************************************************}

{******************************************************************************}
{  CONTRIBUTED MODIFICATIONS                                                   }
{  Additions or modifications listed below using format:                       }
{                                                                              }
{  Joe Citizen <joe@joecitizen.com>                                            }
{  mm/dd/yyyy                                                                  }
{     xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                 }
{     xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                 }
{     xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                 }
{            Copyright (C) 2001 Joe Citizen                                    }
{                                                                              }
{------------------------------------------------------------------------------}
{  Place your credits and information in the top of the section                }
{  below with any other descriptions or explanations desired.                  }
{------------------------------------------------------------------------------}
{                                                                              }
{                                                                              }
{******************************************************************************}

{: General event type used for the TIB_StatementLink class.}
  TIB_StmtLinkEvent = procedure ( Sender: TIB_StatementLink;
                                  Statement: TIB_Statement ) of object;
{: Event type used for statements and columns.}
  TIB_ColLinkEvent = procedure ( Sender: TIB_StatementLink;
                                 Statement: TIB_Statement;
                                 Field: TIB_Column ) of object;
{: This component is used to propogate the events generated by the
TIB_Statement class.

This component serves as a foundation to the TIB_DataSource class.}
TIB_StatementLink = class(TIB_Component)
private
{ Property Storage Fields }
  FStatement: TIB_Statement;
{ Event storage }
  FOnPrepareSQL: TIB_StmtLinkEvent;
  FOnPreparedChanged: TIB_StmtLinkEvent;
{ Property access methods }
  function GetPrepared: boolean;
  function GetActive: boolean;
protected
{ Property Access Methods }
  function GetStatementType: TIB_StatementType;
  procedure SetStatement( AValue: TIB_Statement ); virtual;
{ System methods }
  procedure SysPrepareSQL; virtual;
  procedure SysBeforeUpdateDescriptors; virtual;
  procedure SysAfterUpdateDescriptors; virtual;
{ Methods }
  procedure ProcessEvent( AEvent: TIB_StatementEventType;
                          Info: longint ); virtual;
public
{ Inherited Methods }
  destructor Destroy; override;
{ Properties }
{: Returns True if the associated statement or dataset is Prepared.}
  property Prepared: boolean read GetPrepared;
{: Returns True if the associated statement or dataset is Active.}
  property Active: boolean read GetActive;
{: Statement type of the SQL in the associated statement or dataset
  component.}
  property StatementType: TIB_StatementType read GetStatementType;
{: Reference to the associated statement or dataset for this component.}
  property Statement: TIB_Statement read FStatement write SetStatement;
published
{: This is a very useful event to provide refinement at the time the SQL is
being prepared.
<br><br>
Any alterations made to the SQL property during this event are integrated into
the SQL that is sent to the server but do not affect the text stored in the SQL
property of the associated statement or dataset component.
<br><br>
Some hints to get you going:
<br><br>
The OnPrepareSQL events are triggered every time a statement is prepared or
re-prepared, initiating a process that begins with the base text from the SQL
property of the dataset.  From there, as each phase of the Prepare takes place,
the base SQL is modified and adjusted to conform with factors arising from
various other settings in the dataset object.
<br><br>
For example: <ul>
<li>If MasterLinks and MasterSource are defined, parameters are added
to the WHERE clause to bind the dataset to the master dataset.
<li>If JoinLinks are defined, they are incorporation into WHERE clause.
<li>Any datalinks that contain SearchBuffer criteria are appended to the WHERE
clause.
<li>If there is an OrderingItems table and OrderingItemNo is non-zero, the
ORDER BY clause is substituted with the ORDER BY criteria from the OrderingItems
property.
</ul>
All modifications to the SQL and SQLXXXX properties during this PreparingSQL
phase are integrated into the SQL that goes to the server and do NOT become a
part of the base SQL property. However, if the SQL property is modified outside
the PreparingSQL phase, that change does get applied to the base SQL.
<br><br>
<b>A Sample Use of OnPrepareSQL</b><br>
Let's take a simple example that shows how to bind SQL criteria to a custom
control in the interface.  Suppose you would like to include a button that the
user can click to toggle to include one or the other of two sets of rows in the
dataset.  You would set it up as though this were an item of search criteria:
<br><font face="Courier New">
<br>// This is a TCheckBox OnClick event handler.
<br>procedure TfrmMain.cbActiveUsersClick( Sender: TObject );
<br>begin
<br>  qrUsers.InvalidateSQL; // Flag it so that it knows to re-prepare.
<br>  qrUsers.Refresh;
<br>end;
<br>
<br>// This is a TIB_StatementLink OnPrepareSQL event handler,
<br>// also used by the TIB_DataSource component.
<br>procedure TfrmMain.dsUsers.PrepareSQL(Sender: TIB_StatementLink;
<br>  Statement: TIB_Statement);
<br>begin
<br>  if cbActiveUsers.Checked then begin
<br>    qrUsers.SQLWhereItems.Add( 'STATUS=''A''' );
<br>  end else begin
<br>    qrUsers.SQLWhereItems.Add( 'STATUS=''I''' );
<br>  end;
<br>end;
</font>
<br><br><br>
<br>Now, the <br>SQL that goes to the server will always have a WHERE clause
item of STATUS='A' or STATUS='I', according to the state of the checkbox
cbActiveUsers.}
  property OnPrepareSQL: TIB_StmtLinkEvent read FOnPrepareSQL
                                           write FOnPrepareSQL;
{: StatementLink event.}
  property OnPreparedChanged: TIB_StmtLinkEvent read FOnPreparedChanged
                                                write FOnPreparedChanged;

end; { TIB_StatementLink }

// IBA_StatementLink.IMP
